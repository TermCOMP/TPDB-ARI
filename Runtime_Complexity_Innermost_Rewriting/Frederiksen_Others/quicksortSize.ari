; @xtcfilename "./Runtime_Complexity_Innermost_Rewriting/Frederiksen_Others/quicksortSize.xml"
(format TRS)
(fun part 2)
(fun True 0)
(fun app 2)
(fun Nil 0)
(fun quicksort 1)
(fun partLt[Ite][True][Ite] 3)
(fun > 2)
(fun partGt 2)
(fun < 2)
(fun S 1)
(fun Cons 2)
(fun 0 0)
(fun partGt[Ite][True][Ite] 3)
(fun notEmpty 1)
(fun partLt 2)
(fun goal 1)
(fun False 0)
(rule (quicksort (Cons x (Cons x' xs))) (part x (Cons x' xs)))
(rule (quicksort (Cons x Nil)) (Cons x Nil))
(rule (quicksort Nil) Nil)
(rule (partLt x' (Cons x xs)) (partLt[Ite][True][Ite] (< x x') x' (Cons x xs)))
(rule (partLt x Nil) Nil)
(rule (partGt x' (Cons x xs)) (partGt[Ite][True][Ite] (> x x') x' (Cons x xs)))
(rule (partGt x Nil) Nil)
(rule (app (Cons x xs) ys) (Cons x (app xs ys)))
(rule (app Nil ys) ys)
(rule (notEmpty (Cons x xs)) True)
(rule (notEmpty Nil) False)
(rule (part x xs) (app (quicksort (partLt x xs)) (Cons x (quicksort (partGt x xs)))))
(rule (goal xs) (quicksort xs))
(rule (< (S x) (S y)) (< x y) :cost 0)
(rule (< 0 (S y)) True :cost 0)
(rule (< x 0) False :cost 0)
(rule (> (S x) (S y)) (> x y) :cost 0)
(rule (> 0 y) False :cost 0)
(rule (> (S x) 0) True :cost 0)
(rule (partLt[Ite][True][Ite] True x' (Cons x xs)) (Cons x (partLt x' xs)) :cost 0)
(rule (partGt[Ite][True][Ite] True x' (Cons x xs)) (Cons x (partGt x' xs)) :cost 0)
(rule (partLt[Ite][True][Ite] False x' (Cons x xs)) (partLt x' xs) :cost 0)
(rule (partGt[Ite][True][Ite] False x' (Cons x xs)) (partGt x' xs) :cost 0)
