; @xtcfilename "./Runtime_Complexity_Innermost_Rewriting/Frederiksen_Others/graphcolour2_typed.xml"
(format TRS)
(fun colorrest 4)
(fun getNodeName 1)
(fun True 0)
(fun getAdjs 1)
(fun NoColor 0)
(fun possible 3)
(fun eqColor 2)
(fun colorednoderest 5)
(fun |colornode[Ite][True][Ite]| 4)
(fun CN 2)
(fun !EQ 2)
(fun reverse 1)
(fun Blue 0)
(fun Cons 2)
(fun colornode 3)
(fun NotPossible 0)
(fun eqColorList 2)
(fun graphcolour 2)
(fun |possible[Ite][True][Ite]| 4)
(fun getNodeFromCN 1)
(fun False 0)
(fun Red 0)
(fun colorrestthetrick 5)
(fun colorof 2)
(fun N 2)
(fun Nil 0)
(fun |colorof[Ite][True][Ite]| 3)
(fun and 2)
(fun |colorrestthetrick[Ite]| 6)
(fun Yellow 0)
(fun |colorednoderest[Ite][True][Ite][True][Let]| 6)
(fun getColorListFromCN 1)
(fun S 1)
(fun |0| 0)
(fun notEmpty 1)
(fun revapp 2)
(fun |colorednoderest[Ite][True][Ite]| 6)
(rule (colorof node (Cons (CN cl (N name adjs)) xs)) (|colorof[Ite][True][Ite]| (!EQ name node) node (Cons (CN cl (N name adjs)) xs)))
(rule (eqColorList (Cons Yellow cs1) (Cons NoColor cs2)) (and False (eqColorList cs1 cs2)))
(rule (eqColorList (Cons Yellow cs1) (Cons Yellow cs2)) (and True (eqColorList cs1 cs2)))
(rule (eqColorList (Cons Yellow cs1) (Cons Blue cs2)) (and False (eqColorList cs1 cs2)))
(rule (eqColorList (Cons Yellow cs1) (Cons Red cs2)) (and False (eqColorList cs1 cs2)))
(rule (eqColorList (Cons Blue cs1) (Cons NoColor cs2)) (and False (eqColorList cs1 cs2)))
(rule (eqColorList (Cons Blue cs1) (Cons Yellow cs2)) (and False (eqColorList cs1 cs2)))
(rule (eqColorList (Cons Blue cs1) (Cons Blue cs2)) (and True (eqColorList cs1 cs2)))
(rule (eqColorList (Cons Blue cs1) (Cons Red cs2)) (and False (eqColorList cs1 cs2)))
(rule (eqColorList (Cons Red cs1) (Cons NoColor cs2)) (and False (eqColorList cs1 cs2)))
(rule (eqColorList (Cons Red cs1) (Cons Yellow cs2)) (and False (eqColorList cs1 cs2)))
(rule (eqColorList (Cons Red cs1) (Cons Blue cs2)) (and False (eqColorList cs1 cs2)))
(rule (eqColorList (Cons Red cs1) (Cons Red cs2)) (and True (eqColorList cs1 cs2)))
(rule (eqColorList (Cons NoColor cs1) (Cons b cs2)) (and False (eqColorList cs1 cs2)))
(rule (revapp (Cons x xs) rest) (revapp xs (Cons x rest)))
(rule (revapp Nil rest) rest)
(rule (possible color (Cons x xs) colorednodes) (|possible[Ite][True][Ite]| (eqColor color (colorof x colorednodes)) color (Cons x xs) colorednodes))
(rule (possible color Nil colorednodes) True)
(rule (colorrest cs ncs colorednodes (Cons x xs)) (colorednoderest cs ncs x colorednodes (Cons x xs)))
(rule (colorrest cs ncs colorednodes Nil) colorednodes)
(rule (colorof node Nil) NoColor)
(rule (colornode (Cons x xs) (N n ns) colorednodes) (|colornode[Ite][True][Ite]| (possible x ns colorednodes) (Cons x xs) (N n ns) colorednodes))
(rule (colornode Nil node colorednodes) NotPossible)
(rule (colorednoderest cs (Cons x xs) (N n ns) colorednodes rest) (|colorednoderest[Ite][True][Ite]| (possible x ns colorednodes) cs (Cons x xs) (N n ns) colorednodes rest))
(rule (colorednoderest cs Nil node colorednodes rest) Nil)
(rule (graphcolour (Cons x xs) cs) (reverse (colorrest cs cs (Cons (colornode cs x Nil) Nil) xs)))
(rule (eqColorList (Cons c1 cs1) Nil) False)
(rule (eqColorList Nil (Cons c2 cs2)) False)
(rule (eqColorList Nil Nil) True)
(rule (eqColor Yellow NoColor) False)
(rule (eqColor Yellow Yellow) True)
(rule (eqColor Yellow Blue) False)
(rule (eqColor Yellow Red) False)
(rule (eqColor Blue NoColor) False)
(rule (eqColor Blue Yellow) False)
(rule (eqColor Blue Blue) True)
(rule (eqColor Blue Red) False)
(rule (eqColor Red NoColor) False)
(rule (eqColor Red Yellow) False)
(rule (eqColor Red Blue) False)
(rule (eqColor Red Red) True)
(rule (notEmpty (Cons x xs)) True)
(rule (notEmpty Nil) False)
(rule (getNodeName (N name adjs)) name)
(rule (getNodeFromCN (CN cl n)) n)
(rule (getColorListFromCN (CN cl n)) cl)
(rule (getAdjs (N n ns)) ns)
(rule (eqColor NoColor b) False)
(rule (reverse xs) (revapp xs Nil))
(rule (colorrestthetrick cs1 cs ncs colorednodes rest) (|colorrestthetrick[Ite]| (eqColorList cs1 ncs) cs1 cs ncs colorednodes rest))
(rule (and False False) False :cost 0)
(rule (and True False) False :cost 0)
(rule (and False True) False :cost 0)
(rule (and True True) True :cost 0)
(rule (!EQ (S x) (S y)) (!EQ x y) :cost 0)
(rule (!EQ |0| (S y)) False :cost 0)
(rule (!EQ (S x) |0|) False :cost 0)
(rule (!EQ |0| |0|) True :cost 0)
(rule (|colorof[Ite][True][Ite]| True node (Cons (CN (Cons x xs) n) |xs'|)) x :cost 0)
(rule (|possible[Ite][True][Ite]| False color (Cons x xs) colorednodes) (possible color xs colorednodes) :cost 0)
(rule (|colorrestthetrick[Ite]| False (Cons x xs) cs ncs colorednodes rest) (colorrestthetrick xs cs ncs colorednodes rest) :cost 0)
(rule (|colorof[Ite][True][Ite]| False node (Cons x xs)) (colorof node xs) :cost 0)
(rule (|colornode[Ite][True][Ite]| False (Cons x xs) node colorednodes) (colornode xs node colorednodes) :cost 0)
(rule (|colorednoderest[Ite][True][Ite]| False cs (Cons x xs) node colorednodes rest) (colorednoderest cs xs node colorednodes rest) :cost 0)
(rule (|colorednoderest[Ite][True][Ite]| True cs ncs node colorednodes (Cons x xs)) (|colorednoderest[Ite][True][Ite][True][Let]| cs ncs node colorednodes (Cons x xs) (colorrest cs cs (Cons (CN ncs node) colorednodes) xs)) :cost 0)
(rule (|possible[Ite][True][Ite]| True color adjs colorednodes) False :cost 0)
(rule (|colorrestthetrick[Ite]| True cs1 cs ncs colorednodes rest) (colorrest cs cs1 colorednodes rest) :cost 0)
(rule (|colornode[Ite][True][Ite]| True cs node colorednodes) (CN cs node) :cost 0)
