; @origtpdbfilename Frederiksen_Glenstrup/int.trs
; @xtcfilename "./Runtime_Complexity_Innermost_Rewriting/Frederiksen_Glenstrup/int.xml"
(format TRS)
(fun getFuncName 1)
(fun True 0)
(fun Fun 2)
(fun Var 1)
(fun lookvar 3)
(fun |lookbody[Ite]| 3)
(fun |eeval[Let]| 5)
(fun |lookvar[Ite]| 4)
(fun lookname 2)
(fun !EQ 2)
(fun getConst 1)
(fun |apply[Ite]| 4)
(fun Eq 2)
(fun eqExp 2)
(fun Bsf 3)
(fun False 0)
(fun apply 3)
(fun getVar 1)
(fun getBsfSecondTerm 1)
(fun getEqFirst 1)
(fun S 1)
(fun 0 0)
(fun getBsfOp 1)
(fun |lookname[Ite]| 3)
(fun getIfGuard 1)
(fun |eeval[Let][Let]| 6)
(fun run 2)
(fun getIfFalse 1)
(fun lookbody 2)
(fun |eeval[False][Let]| 5)
(fun ITE 3)
(fun |eeval[Ite]| 5)
(fun |run[Let]| 5)
(fun getFuncExp 1)
(fun Error 2)
(fun Cons 2)
(fun |eeval[True][Ite]| 5)
(fun Cst 1)
(fun |eeval[False][Ite]| 5)
(fun Nil 0)
(fun eeval 4)
(fun |eeval[False][Let][Let]| 6)
(fun checkConstrExp 2)
(fun and 2)
(fun getIfTrue 1)
(fun getEqSecond 1)
(fun |eeval[Let][Let][Let]| 7)
(fun getBsfFirstTerm 1)
(fun T 0)
(fun |run[Let][Let]| 4)
(fun F 0)
(fun eqOps 2)
(rule (eeval (Fun n e) ns vs p) (|eeval[False][Let]| (Fun n e) ns vs p (lookbody n p)))
(rule (eeval (Eq f s) ns vs p) (|eeval[True][Ite]| (eqExp (eeval f ns vs p) (eeval s ns vs p)) (Eq f s) ns vs p))
(rule (eeval (Error e11 e12) ns vs p) (|eeval[False][Ite]| False (Error e11 e12) ns vs p))
(rule (eeval F ns vs p) F)
(rule (eeval T ns vs p) T)
(rule (eeval (ITE i t e) ns vs p) (|eeval[Ite]| (checkConstrExp (eeval i ns vs p) T) (ITE i t e) ns vs p))
(rule (eeval (Bsf op t1 t2) ns vs p) (|eeval[Let]| (Bsf op t1 t2) ns vs p (eeval t1 ns vs p)))
(rule (eeval (Var int) ns vs p) (lookvar int ns vs))
(rule (run (Cons (Fun f0 e) xs) input) (|run[Let][Let]| (Cons (Fun f0 e) xs) input f0 (lookbody f0 (Cons (Fun f0 e) xs))))
(rule (eqExp (Error e11 e12) (Error e21 e22)) (and (eqExp e11 e21) (eqExp e12 e22)))
(rule (eqExp (Error e11 e12) F) False)
(rule (eqExp (Error e11 e12) T) False)
(rule (eqExp (Error e11 e12) (Fun fn2 fe2)) False)
(rule (eqExp (Error e11 e12) (Eq eq21 eq22)) False)
(rule (eqExp (Error e11 e12) (ITE i2 t2 e2)) False)
(rule (eqExp (Error e11 e12) (Bsf op2 b21 b22)) False)
(rule (eqExp (Error e11 e12) (Var v2)) False)
(rule (eqExp F (Error e21 e22)) False)
(rule (eqExp F F) True)
(rule (eqExp F T) False)
(rule (eqExp F (Fun fn2 fe2)) False)
(rule (eqExp F (Eq eq21 eq22)) False)
(rule (eqExp F (ITE i2 t2 e2)) False)
(rule (eqExp F (Bsf op2 b21 b22)) False)
(rule (eqExp F (Var v2)) False)
(rule (eqExp T (Error e21 e22)) False)
(rule (eqExp T F) False)
(rule (eqExp T T) True)
(rule (eqExp T (Fun fn2 fe2)) False)
(rule (eqExp T (Eq eq21 eq22)) False)
(rule (eqExp T (ITE i2 t2 e2)) False)
(rule (eqExp T (Bsf op2 b21 b22)) False)
(rule (eqExp T (Var v2)) False)
(rule (eqExp (Fun fn1 fe1) (Error e21 e22)) False)
(rule (eqExp (Fun fn1 fe1) F) False)
(rule (eqExp (Fun fn1 fe1) T) False)
(rule (eqExp (Fun fn1 fe1) (Fun fn2 fe2)) (and (!EQ fn1 fn2) (eqExp fe1 fe2)))
(rule (eqExp (Fun fn1 fe1) (Eq eq21 eq22)) False)
(rule (eqExp (Fun fn1 fe1) (ITE i2 t2 e2)) False)
(rule (eqExp (Fun fn1 fe1) (Bsf op2 b21 b22)) False)
(rule (eqExp (Fun fn1 fe1) (Var v2)) False)
(rule (eqExp (Eq eq11 eq12) (Error e21 e22)) False)
(rule (eqExp (Eq eq11 eq12) F) False)
(rule (eqExp (Eq eq11 eq12) T) False)
(rule (eqExp (Eq eq11 eq12) (Fun fn2 fe2)) False)
(rule (eqExp (Eq eq11 eq12) (Eq eq21 eq22)) (and (eqExp eq11 eq21) (eqExp eq12 eq22)))
(rule (eqExp (Eq eq11 eq12) (ITE i2 t2 e2)) False)
(rule (eqExp (Eq eq11 eq12) (Bsf op2 b21 b22)) False)
(rule (eqExp (Eq eq11 eq12) (Var v2)) False)
(rule (eqExp (ITE i1 t1 e1) (Error e21 e22)) False)
(rule (eqExp (ITE i1 t1 e1) F) False)
(rule (eqExp (ITE i1 t1 e1) T) False)
(rule (eqExp (ITE i1 t1 e1) (Fun fn2 fe2)) False)
(rule (eqExp (ITE i1 t1 e1) (Eq eq21 eq22)) False)
(rule (eqExp (ITE i1 t1 e1) (ITE i2 t2 e2)) (and (eqExp i1 i2) (and (eqExp t1 t2) (eqExp e1 e2))))
(rule (eqExp (ITE i1 t1 e1) (Bsf op2 b21 b22)) False)
(rule (eqExp (ITE i1 t1 e1) (Var v2)) False)
(rule (eqExp (Bsf op1 b11 b12) (Error e21 e22)) False)
(rule (eqExp (Bsf op1 b11 b12) F) False)
(rule (eqExp (Bsf op1 b11 b12) T) False)
(rule (eqExp (Bsf op1 b11 b12) (Fun fn2 fe2)) False)
(rule (eqExp (Bsf op1 b11 b12) (Eq eq21 eq22)) False)
(rule (eqExp (Bsf op1 b11 b12) (ITE i2 t2 e2)) False)
(rule (eqExp (Bsf o1 b11 b12) (Bsf o2 b21 b22)) (and True (and (eqExp b11 b21) (eqExp b12 b22))))
(rule (eqExp (Bsf op1 b11 b12) (Var v2)) False)
(rule (eqExp (Var v1) (Error e21 e22)) False)
(rule (eqExp (Var v1) F) False)
(rule (eqExp (Var v1) T) False)
(rule (eqExp (Var v1) (Fun fn2 fe2)) False)
(rule (eqExp (Var v1) (Eq eq21 eq22)) False)
(rule (eqExp (Var v1) (ITE i2 t2 e2)) False)
(rule (eqExp (Var v1) (Bsf op2 b21 b22)) False)
(rule (eqExp (Var v1) (Var v2)) (!EQ v1 v2))
(rule (checkConstrExp (Error e11 e12) (Error e21 e22)) True)
(rule (checkConstrExp (Error e11 e12) F) False)
(rule (checkConstrExp (Error e11 e12) T) False)
(rule (checkConstrExp (Error e11 e12) (Fun fn2 fe2)) False)
(rule (checkConstrExp (Error e11 e12) (Eq eq21 eq22)) False)
(rule (checkConstrExp (Error e11 e12) (ITE i2 t2 e2)) False)
(rule (checkConstrExp (Error e11 e12) (Bsf op2 b21 b22)) False)
(rule (checkConstrExp (Error e11 e12) (Var v2)) False)
(rule (checkConstrExp F (Error e21 e22)) False)
(rule (checkConstrExp F F) True)
(rule (checkConstrExp F T) False)
(rule (checkConstrExp F (Fun fn2 fe2)) False)
(rule (checkConstrExp F (Eq eq21 eq22)) False)
(rule (checkConstrExp F (ITE i2 t2 e2)) False)
(rule (checkConstrExp F (Bsf op2 b21 b22)) False)
(rule (checkConstrExp F (Var v2)) False)
(rule (checkConstrExp T (Error e21 e22)) False)
(rule (checkConstrExp T F) False)
(rule (checkConstrExp T T) True)
(rule (checkConstrExp T (Fun fn2 fe2)) False)
(rule (checkConstrExp T (Eq eq21 eq22)) False)
(rule (checkConstrExp T (ITE i2 t2 e2)) False)
(rule (checkConstrExp T (Bsf op2 b21 b22)) False)
(rule (checkConstrExp T (Var v2)) False)
(rule (checkConstrExp (Fun fn1 fe1) (Error e21 e22)) False)
(rule (checkConstrExp (Fun fn1 fe1) F) False)
(rule (checkConstrExp (Fun fn1 fe1) T) False)
(rule (checkConstrExp (Fun fn1 fe1) (Fun fn2 fe2)) True)
(rule (checkConstrExp (Fun fn1 fe1) (Eq eq21 eq22)) False)
(rule (checkConstrExp (Fun fn1 fe1) (ITE i2 t2 e2)) False)
(rule (checkConstrExp (Fun fn1 fe1) (Bsf op2 b21 b22)) False)
(rule (checkConstrExp (Fun fn1 fe1) (Var v2)) False)
(rule (checkConstrExp (Eq eq11 eq12) (Error e21 e22)) False)
(rule (checkConstrExp (Eq eq11 eq12) F) False)
(rule (checkConstrExp (Eq eq11 eq12) T) False)
(rule (checkConstrExp (Eq eq11 eq12) (Fun fn2 fe2)) False)
(rule (checkConstrExp (Eq eq11 eq12) (Eq eq21 eq22)) True)
(rule (checkConstrExp (Eq eq11 eq12) (ITE i2 t2 e2)) False)
(rule (checkConstrExp (Eq eq11 eq12) (Bsf op2 b21 b22)) False)
(rule (checkConstrExp (Eq eq11 eq12) (Var v2)) False)
(rule (checkConstrExp (ITE i1 t1 e1) (Error e21 e22)) False)
(rule (checkConstrExp (ITE i1 t1 e1) F) False)
(rule (checkConstrExp (ITE i1 t1 e1) T) False)
(rule (checkConstrExp (ITE i1 t1 e1) (Fun fn2 fe2)) False)
(rule (checkConstrExp (ITE i1 t1 e1) (Eq eq21 eq22)) False)
(rule (checkConstrExp (ITE i1 t1 e1) (ITE i2 t2 e2)) True)
(rule (checkConstrExp (ITE i1 t1 e1) (Bsf op2 b21 b22)) False)
(rule (checkConstrExp (ITE i1 t1 e1) (Var v2)) False)
(rule (checkConstrExp (Bsf op1 b11 b12) (Error e21 e22)) False)
(rule (checkConstrExp (Bsf op1 b11 b12) F) False)
(rule (checkConstrExp (Bsf op1 b11 b12) T) False)
(rule (checkConstrExp (Bsf op1 b11 b12) (Fun fn2 fe2)) False)
(rule (checkConstrExp (Bsf op1 b11 b12) (Eq eq21 eq22)) False)
(rule (checkConstrExp (Bsf op1 b11 b12) (ITE i2 t2 e2)) False)
(rule (checkConstrExp (Bsf op1 b11 b12) (Bsf op2 b21 b22)) True)
(rule (checkConstrExp (Bsf op1 b11 b12) (Var v2)) False)
(rule (checkConstrExp (Var v1) (Error e21 e22)) False)
(rule (checkConstrExp (Var v1) F) False)
(rule (checkConstrExp (Var v1) T) False)
(rule (checkConstrExp (Var v1) (Fun fn2 fe2)) False)
(rule (checkConstrExp (Var v1) (Eq eq21 eq22)) False)
(rule (checkConstrExp (Var v1) (ITE i2 t2 e2)) False)
(rule (checkConstrExp (Var v1) (Bsf op2 b21 b22)) False)
(rule (checkConstrExp (Var v1) (Var v2)) True)
(rule (lookname f (Cons (Fun n e) xs)) (|lookname[Ite]| (!EQ f n) f (Cons (Fun n e) xs)))
(rule (lookbody f (Cons (Fun n e) xs)) (|lookbody[Ite]| (!EQ f n) f (Cons (Fun n e) xs)))
(rule (getVar (Var int)) int)
(rule (getIfTrue (ITE i t e)) t)
(rule (getIfGuard (ITE i t e)) i)
(rule (getIfFalse (ITE i t e)) e)
(rule (getFuncName (Fun n e)) n)
(rule (getFuncExp (Fun n e)) e)
(rule (getEqSecond (Eq f s)) s)
(rule (getEqFirst (Eq f s)) f)
(rule (getConst (Cst int)) int)
(rule (getBsfSecondTerm (Bsf op t1 t2)) t2)
(rule (getBsfOp (Bsf op t1 t2)) op)
(rule (getBsfFirstTerm (Bsf op t1 t2)) t1)
(rule (apply op v1 v2) (|apply[Ite]| (eqExp v1 v2) op v1 v2))
(rule (lookvar |x'| (Cons x xs) vs) (|lookvar[Ite]| (!EQ |x'| x) |x'| (Cons x xs) vs))
(rule (eqOps o1 o2) True)
(rule (!EQ (S x) (S y)) (!EQ x y) :cost 0)
(rule (!EQ 0 (S y)) False :cost 0)
(rule (!EQ (S x) 0) False :cost 0)
(rule (!EQ 0 0) True :cost 0)
(rule (and False False) False :cost 0)
(rule (and True False) False :cost 0)
(rule (and False True) False :cost 0)
(rule (and True True) True :cost 0)
(rule (|eeval[False][Ite]| True (Eq f s) ns vs p) (|eeval[True][Ite]| (eqExp (eeval f ns vs p) (eeval s ns vs p)) (Eq f s) ns vs p) :cost 0)
(rule (|lookvar[Ite]| False |x'| (Cons |x''| |xs'|) (Cons x xs)) (lookvar |x'| |xs'| xs) :cost 0)
(rule (|lookname[Ite]| True f (Cons (Fun n e) xs)) n :cost 0)
(rule (|lookbody[Ite]| True f (Cons (Fun n e) xs)) e :cost 0)
(rule (|eeval[False][Ite]| False (Fun n e) ns vs p) (|eeval[False][Let]| (Fun n e) ns vs p (lookbody n p)) :cost 0)
(rule (|eeval[Ite]| False (ITE i t e) ns vs p) (eeval e ns vs p) :cost 0)
(rule (|eeval[Ite]| True (ITE i t e) ns vs p) (eeval t ns vs p) :cost 0)
(rule (|eeval[False][Let]| (Fun n e) ns vs p ef) (|eeval[False][Let][Let]| (Fun n e) ns vs p ef (lookname n p)) :cost 0)
(rule (|eeval[False][Let][Let]| (Fun n e) ns vs p ef nf) (|eeval[Let][Let][Let]| (Fun n e) ns vs p ef nf (eeval e ns vs p)) :cost 0)
(rule (|eeval[Let]| (Bsf op t1 t2) ns vs p v1) (|eeval[Let][Let]| (Bsf op t1 t2) ns vs p v1 (eeval t2 ns vs p)) :cost 0)
(rule (|eeval[Let][Let]| (Bsf op t1 t2) ns vs p v1 v2) (apply op v1 v2) :cost 0)
(rule (|lookvar[Ite]| True |x'| ns (Cons x xs)) x :cost 0)
(rule (|lookname[Ite]| False f (Cons x xs)) (lookname f xs) :cost 0)
(rule (|lookbody[Ite]| False f (Cons x xs)) (lookbody f xs) :cost 0)
(rule (|eeval[True][Ite]| False e ns vs p) F :cost 0)
(rule (|eeval[True][Ite]| True e ns vs p) T :cost 0)
(rule (|apply[Ite]| False op v1 v2) F :cost 0)
(rule (|apply[Ite]| True op v1 v2) T :cost 0)
(rule (|run[Let][Let]| p input f0 ef) (|run[Let]| p input f0 ef (lookname f0 p)) :cost 0)
(rule (|run[Let]| p input f0 ef nf) (eeval ef (Cons nf Nil) (Cons input Nil) p) :cost 0)
(rule (|eeval[Let][Let][Let]| e ns vs p ef nf v) (eeval ef (Cons nf Nil) (Cons v Nil) p) :cost 0)
