; @xtcfilename "./Runtime_Complexity_Innermost_Rewriting/Frederiksen_Glenstrup/minsort.xml"
(format TRS)
(fun minsort 1)
(fun remove[Ite][True][Ite] 3)
(fun True 0)
(fun Nil 0)
(fun appmin 3)
(fun !EQ 2)
(fun < 2)
(fun S 1)
(fun Cons 2)
(fun appmin[Ite][True][Ite] 4)
(fun 0 0)
(fun remove 2)
(fun notEmpty 1)
(fun goal 1)
(fun False 0)
(rule (remove x' (Cons x xs)) (remove[Ite][True][Ite] (!EQ x' x) x' (Cons x xs)))
(rule (remove x Nil) Nil)
(rule (minsort (Cons x xs)) (appmin x xs (Cons x xs)))
(rule (minsort Nil) Nil)
(rule (appmin min (Cons x xs) xs') (appmin[Ite][True][Ite] (< x min) min (Cons x xs) xs'))
(rule (appmin min Nil xs) (Cons min (minsort (remove min xs))))
(rule (notEmpty (Cons x xs)) True)
(rule (notEmpty Nil) False)
(rule (goal xs) (minsort xs))
(rule (!EQ (S x) (S y)) (!EQ x y) :cost 0)
(rule (!EQ 0 (S y)) False :cost 0)
(rule (!EQ (S x) 0) False :cost 0)
(rule (!EQ 0 0) True :cost 0)
(rule (< (S x) (S y)) (< x y) :cost 0)
(rule (< 0 (S y)) True :cost 0)
(rule (< x 0) False :cost 0)
(rule (remove[Ite][True][Ite] False x' (Cons x xs)) (Cons x (remove x' xs)) :cost 0)
(rule (appmin[Ite][True][Ite] True min (Cons x xs) xs') (appmin x xs xs') :cost 0)
(rule (remove[Ite][True][Ite] True x' (Cons x xs)) xs :cost 0)
(rule (appmin[Ite][True][Ite] False min (Cons x xs) xs') (appmin min xs xs') :cost 0)
