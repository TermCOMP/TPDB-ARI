; @origtpdbfilename Frederiksen_Glenstrup/gcd1.tml.trs
; @xtcfilename "./Runtime_Complexity_Innermost_Rewriting/Frederiksen_Glenstrup/gcd.xml"
(format TRS)
(fun lgth 1)
(fun monus[Ite] 3)
(fun True 0)
(fun gcd 2)
(fun Nil 0)
(fun @ 2)
(fun monus 2)
(fun and 2)
(fun eqList 2)
(fun gt0 2)
(fun Cons 2)
(fun gcd[Ite] 3)
(fun gcd[False][Ite] 3)
(fun goal 2)
(fun False 0)
(rule (@ (Cons x xs) ys) (Cons x (@ xs ys)))
(rule (@ Nil ys) ys)
(rule (gt0 (Cons x xs) Nil) True)
(rule (gt0 (Cons x' xs') (Cons x xs)) (gt0 xs' xs))
(rule (gcd Nil Nil) Nil)
(rule (gcd Nil (Cons x xs)) Nil)
(rule (gcd (Cons x xs) Nil) Nil)
(rule (gcd (Cons x' xs') (Cons x xs)) (gcd[Ite] (eqList (Cons x' xs') (Cons x xs)) (Cons x' xs') (Cons x xs)))
(rule (lgth (Cons x xs)) (@ (Cons Nil Nil) (lgth xs)))
(rule (eqList (Cons x xs) (Cons y ys)) (and (eqList x y) (eqList xs ys)))
(rule (eqList (Cons x xs) Nil) False)
(rule (eqList Nil (Cons y ys)) False)
(rule (eqList Nil Nil) True)
(rule (lgth Nil) Nil)
(rule (gt0 Nil y) False)
(rule (monus x y) (monus[Ite] (eqList (lgth y) (Cons Nil Nil)) x y))
(rule (goal x y) (gcd x y))
(rule (and False False) False :cost 0)
(rule (and True False) False :cost 0)
(rule (and False True) False :cost 0)
(rule (and True True) True :cost 0)
(rule (monus[Ite] False (Cons x' xs') (Cons x xs)) (monus xs' xs) :cost 0)
(rule (monus[Ite] True (Cons x xs) y) xs :cost 0)
(rule (gcd[Ite] False x y) (gcd[False][Ite] (gt0 x y) x y) :cost 0)
(rule (gcd[Ite] True x y) x :cost 0)
(rule (gcd[False][Ite] False x y) (gcd x (monus y x)) :cost 0)
(rule (gcd[False][Ite] True x y) (gcd (monus x y) y) :cost 0)
