; @origtpdbfilename Frederiksen_Glenstrup/turing_typed.tml.trs
; @xtcfilename "./Runtime_Complexity_Innermost_Rewriting/Frederiksen_Glenstrup/turing_typed.xml"
(format TRS)
(fun Empty 0)
(fun getGoto 1)
(fun run 2)
(fun getGotoFirst 1)
(fun True 0)
(fun instrConstrCheck 2)
(fun Goto 1)
(fun Left 0)
(fun Right 0)
(fun !EQ 2)
(fun Cons 2)
(fun turing 4)
(fun I 2)
(fun instrsFirst 1)
(fun False 0)
(fun |turing[Ite]| 5)
(fun Nil 0)
(fun getGotoSecond 1)
(fun lookup 2)
(fun Write 1)
(fun Halt 0)
(fun S 1)
(fun instrsConstrCheck 2)
(fun |0| 0)
(fun getWrite 1)
(fun notEmpty 1)
(fun IfGoto 2)
(fun instrsSecond 1)
(rule (turing (I (IfGoto i1 i2) r) revltape (Cons x xs) prog) (|turing[Ite]| (!EQ x i1) (I (IfGoto i1 i2) r) revltape (Cons x xs) prog))
(rule (turing (I (Goto int) r) revltape rtape prog) (turing (lookup int prog) revltape rtape prog))
(rule (turing (I Right r) revltape (Cons x xs) prog) (turing r (Cons x revltape) xs prog))
(rule (turing (I Right r) revltape Nil prog) (turing r (Cons |0| revltape) Nil prog))
(rule (turing (I Left r) (Cons x xs) rtape prog) (turing r xs (Cons x rtape) prog))
(rule (turing (I Left r) Nil rtape prog) (turing r Nil (Cons |0| rtape) prog))
(rule (turing (I (Write int) r) revltape (Cons x xs) prog) (turing r revltape (Cons int xs) prog))
(rule (turing (I Halt r) revltape rtape prog) rtape)
(rule (turing Empty revltape rtape prog) rtape)
(rule (lookup (S x) (I l r)) (lookup x r))
(rule (instrsConstrCheck (I l1 r1) (I x y)) True)
(rule (instrsConstrCheck (I l1 r1) Empty) False)
(rule (instrsConstrCheck Empty (I x y)) False)
(rule (instrsConstrCheck Empty Empty) True)
(rule (instrConstrCheck (IfGoto igtNat1 igtNat2) (IfGoto igtNat12 igtNat22)) True)
(rule (instrConstrCheck (IfGoto igtNat1 igtNat2) (Goto gtNat2)) False)
(rule (instrConstrCheck (IfGoto igtNat1 igtNat2) Right) False)
(rule (instrConstrCheck (IfGoto igtNat1 igtNat2) Left) False)
(rule (instrConstrCheck (IfGoto igtNat1 igtNat2) (Write wNat2)) False)
(rule (instrConstrCheck (IfGoto igtNat1 igtNat2) Halt) False)
(rule (instrConstrCheck (Goto gtNat) (IfGoto igtNat12 igtNat22)) False)
(rule (instrConstrCheck (Goto gtNat) (Goto gtNat2)) True)
(rule (instrConstrCheck (Goto gtNat) Right) False)
(rule (instrConstrCheck (Goto gtNat) Left) False)
(rule (instrConstrCheck (Goto gtNat) (Write wNat2)) False)
(rule (instrConstrCheck (Goto gtNat) Halt) False)
(rule (instrConstrCheck Right (IfGoto igtNat12 igtNat22)) False)
(rule (instrConstrCheck Right (Goto gtNat2)) False)
(rule (instrConstrCheck Right Right) True)
(rule (instrConstrCheck Right Left) False)
(rule (instrConstrCheck Right (Write wNat2)) False)
(rule (instrConstrCheck Right Halt) False)
(rule (instrConstrCheck Left (IfGoto igtNat12 igtNat22)) False)
(rule (instrConstrCheck Left (Goto gtNat2)) False)
(rule (instrConstrCheck Left Right) False)
(rule (instrConstrCheck Left Left) True)
(rule (instrConstrCheck Left (Write wNat2)) False)
(rule (instrConstrCheck Left Halt) False)
(rule (instrConstrCheck (Write wNat) (IfGoto igtNat12 igtNat22)) False)
(rule (instrConstrCheck (Write wNat) (Goto gtNat2)) False)
(rule (instrConstrCheck (Write wNat) Right) False)
(rule (instrConstrCheck (Write wNat) Left) False)
(rule (instrConstrCheck (Write wNat) (Write wNat2)) True)
(rule (instrConstrCheck (Write wNat) Halt) False)
(rule (instrConstrCheck Halt (IfGoto igtNat12 igtNat22)) False)
(rule (instrConstrCheck Halt (Goto gtNat2)) False)
(rule (instrConstrCheck Halt Right) False)
(rule (instrConstrCheck Halt Left) False)
(rule (instrConstrCheck Halt (Write wNat2)) False)
(rule (instrConstrCheck Halt Halt) True)
(rule (notEmpty (Cons x xs)) True)
(rule (notEmpty Nil) False)
(rule (lookup |0| instrs) instrs)
(rule (instrsSecond (I l r)) r)
(rule (instrsFirst (I l r)) l)
(rule (getWrite (Write int)) int)
(rule (getGotoSecond (IfGoto i1 i2)) i2)
(rule (getGotoFirst (IfGoto i1 i2)) i1)
(rule (getGoto (Goto int)) int)
(rule (run prog tapeinput) (turing prog Nil tapeinput prog))
(rule (!EQ (S x) (S y)) (!EQ x y) :cost 0)
(rule (!EQ |0| (S y)) False :cost 0)
(rule (!EQ (S x) |0|) False :cost 0)
(rule (!EQ |0| |0|) True :cost 0)
(rule (|turing[Ite]| True (I (IfGoto i1 i2) r) revltape rtape prog) (turing (lookup i2 prog) revltape rtape prog) :cost 0)
(rule (|turing[Ite]| False (I l r) revltape rtape prog) (turing r revltape rtape prog) :cost 0)
