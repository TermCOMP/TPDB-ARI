; @origtpdbfilename tct_complexity/raML/quicksort.raml.trs
; @xtcfilename "./Runtime_Complexity_Innermost_Rewriting/raML/quicksort.raml.xml"
(format TRS)
(fun |#unit| 0)
(fun splitD 2)
(fun |quicksort#2| 2)
(fun |#true| 0)
(fun |split#3| 4)
(fun append 2)
(fun |split#1| 2)
(fun split 2)
(fun |#ckgt| 1)
(fun |splitD#1| 2)
(fun |#pos| 1)
(fun |#EQ| 0)
(fun |quicksortD#2| 2)
(fun |#compare| 2)
(fun quicksortD 1)
(fun |tuple#2| 2)
(fun |appendD#1| 2)
(fun nil 0)
(fun |split#2| 3)
(fun |#greater| 2)
(fun |splitD#2| 3)
(fun |quicksort#1| 1)
(fun |append#1| 2)
(fun testQuicksort2 1)
(fun |#false| 0)
(fun quicksort 1)
(fun |::| 2)
(fun |#LT| 0)
(fun |splitD#3| 4)
(fun testQuicksort 1)
(fun testList 1)
(fun |quicksortD#1| 1)
(fun |#0| 0)
(fun |#neg| 1)
(fun |#abs| 1)
(fun appendD 2)
(fun |#s| 1)
(fun |#GT| 0)
(rule (|#abs| |#0|) |#0|)
(rule (|#abs| (|#neg| @x)) (|#pos| @x))
(rule (|#abs| (|#pos| @x)) (|#pos| @x))
(rule (|#abs| (|#s| @x)) (|#pos| (|#s| @x)))
(rule (|#greater| @x @y) (|#ckgt| (|#compare| @x @y)))
(rule (append @l @ys) (|append#1| @l @ys))
(rule (|append#1| (|::| @x @xs) @ys) (|::| @x (append @xs @ys)))
(rule (|append#1| nil @ys) @ys)
(rule (appendD @l @ys) (|appendD#1| @l @ys))
(rule (|appendD#1| (|::| @x @xs) @ys) (|::| @x (appendD @xs @ys)))
(rule (|appendD#1| nil @ys) @ys)
(rule (quicksort @l) (|quicksort#1| @l))
(rule (|quicksort#1| (|::| @z @zs)) (|quicksort#2| (split @z @zs) @z))
(rule (|quicksort#1| nil) nil)
(rule (|quicksort#2| (|tuple#2| @xs @ys) @z) (append (quicksort @xs) (|::| @z (quicksort @ys))))
(rule (quicksortD @l) (|quicksortD#1| @l))
(rule (|quicksortD#1| (|::| @z @zs)) (|quicksortD#2| (splitD @z @zs) @z))
(rule (|quicksortD#1| nil) nil)
(rule (|quicksortD#2| (|tuple#2| @xs @ys) @z) (appendD (quicksortD @xs) (|::| @z (quicksortD @ys))))
(rule (split @pivot @l) (|split#1| @l @pivot))
(rule (|split#1| (|::| @x @xs) @pivot) (|split#2| (split @pivot @xs) @pivot @x))
(rule (|split#1| nil @pivot) (|tuple#2| nil nil))
(rule (|split#2| (|tuple#2| @ls @rs) @pivot @x) (|split#3| (|#greater| @x @pivot) @ls @rs @x))
(rule (|split#3| |#false| @ls @rs @x) (|tuple#2| (|::| @x @ls) @rs))
(rule (|split#3| |#true| @ls @rs @x) (|tuple#2| @ls (|::| @x @rs)))
(rule (splitD @pivot @l) (|splitD#1| @l @pivot))
(rule (|splitD#1| (|::| @x @xs) @pivot) (|splitD#2| (splitD @pivot @xs) @pivot @x))
(rule (|splitD#1| nil @pivot) (|tuple#2| nil nil))
(rule (|splitD#2| (|tuple#2| @ls @rs) @pivot @x) (|splitD#3| (|#greater| @x @pivot) @ls @rs @x))
(rule (|splitD#3| |#false| @ls @rs @x) (|tuple#2| (|::| @x @ls) @rs))
(rule (|splitD#3| |#true| @ls @rs @x) (|tuple#2| @ls (|::| @x @rs)))
(rule (testList @x) (|::| (|#abs| |#0|) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| |#0|)))))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| (|#s| |#0|))))))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| |#0|))))))))))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| |#0|))))))))) (|::| (|#abs| (|#pos| (|#s| |#0|))) (|::| (|#abs| (|#pos| (|#s| (|#s| |#0|)))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| |#0|)))))))))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| |#0|)))))))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| |#0|))))) nil)))))))))))
(rule (testQuicksort @x) (quicksort (testList |#unit|)))
(rule (testQuicksort2 @x) (quicksort (testList |#unit|)))
(rule (|#ckgt| |#EQ|) |#false| :cost 0)
(rule (|#ckgt| |#GT|) |#true| :cost 0)
(rule (|#ckgt| |#LT|) |#false| :cost 0)
(rule (|#compare| |#0| |#0|) |#EQ| :cost 0)
(rule (|#compare| |#0| (|#neg| @y)) |#GT| :cost 0)
(rule (|#compare| |#0| (|#pos| @y)) |#LT| :cost 0)
(rule (|#compare| |#0| (|#s| @y)) |#LT| :cost 0)
(rule (|#compare| (|#neg| @x) |#0|) |#LT| :cost 0)
(rule (|#compare| (|#neg| @x) (|#neg| @y)) (|#compare| @y @x) :cost 0)
(rule (|#compare| (|#neg| @x) (|#pos| @y)) |#LT| :cost 0)
(rule (|#compare| (|#pos| @x) |#0|) |#GT| :cost 0)
(rule (|#compare| (|#pos| @x) (|#neg| @y)) |#GT| :cost 0)
(rule (|#compare| (|#pos| @x) (|#pos| @y)) (|#compare| @x @y) :cost 0)
(rule (|#compare| (|#s| @x) |#0|) |#GT| :cost 0)
(rule (|#compare| (|#s| @x) (|#s| @y)) (|#compare| @x @y) :cost 0)
