; @origtpdbfilename tct_complexity/raML/insertionsort.raml.trs
; @xtcfilename "./Runtime_Complexity_Innermost_Rewriting/raML/insertionsort.raml.xml"
(format TRS)
(fun |#unit| 0)
(fun |insertionsort#1| 1)
(fun |#true| 0)
(fun |#cklt| 1)
(fun insert 2)
(fun |#pos| 1)
(fun |#EQ| 0)
(fun testInsertionsortD 1)
(fun |insert#2| 4)
(fun |insertD#2| 4)
(fun |#compare| 2)
(fun insertD 2)
(fun nil 0)
(fun testInsertionsort 1)
(fun |#false| 0)
(fun |::| 2)
(fun |#LT| 0)
(fun |insertD#1| 2)
(fun |insert#1| 2)
(fun testList 1)
(fun |#0| 0)
(fun |#neg| 1)
(fun |#less| 2)
(fun |#abs| 1)
(fun |insertionsortD#1| 1)
(fun insertionsortD 1)
(fun |#s| 1)
(fun |#GT| 0)
(fun insertionsort 1)
(rule (|#abs| |#0|) |#0|)
(rule (|#abs| (|#neg| @x)) (|#pos| @x))
(rule (|#abs| (|#pos| @x)) (|#pos| @x))
(rule (|#abs| (|#s| @x)) (|#pos| (|#s| @x)))
(rule (|#less| @x @y) (|#cklt| (|#compare| @x @y)))
(rule (insert @x @l) (|insert#1| @l @x))
(rule (|insert#1| (|::| @y @ys) @x) (|insert#2| (|#less| @y @x) @x @y @ys))
(rule (|insert#1| nil @x) (|::| @x nil))
(rule (|insert#2| |#false| @x @y @ys) (|::| @x (|::| @y @ys)))
(rule (|insert#2| |#true| @x @y @ys) (|::| @y (insert @x @ys)))
(rule (insertD @x @l) (|insertD#1| @l @x))
(rule (|insertD#1| (|::| @y @ys) @x) (|insertD#2| (|#less| @y @x) @x @y @ys))
(rule (|insertD#1| nil @x) (|::| @x nil))
(rule (|insertD#2| |#false| @x @y @ys) (|::| @x (|::| @y @ys)))
(rule (|insertD#2| |#true| @x @y @ys) (|::| @y (insertD @x @ys)))
(rule (insertionsort @l) (|insertionsort#1| @l))
(rule (|insertionsort#1| (|::| @x @xs)) (insert @x (insertionsort @xs)))
(rule (|insertionsort#1| nil) nil)
(rule (insertionsortD @l) (|insertionsortD#1| @l))
(rule (|insertionsortD#1| (|::| @x @xs)) (insertD @x (insertionsortD @xs)))
(rule (|insertionsortD#1| nil) nil)
(rule (testInsertionsort @x) (insertionsort (testList |#unit|)))
(rule (testInsertionsortD @x) (insertionsortD (testList |#unit|)))
(rule (testList @_) (|::| (|#abs| |#0|) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| |#0|)))))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| (|#s| |#0|))))))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| |#0|))))))))))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| |#0|))))))))) (|::| (|#abs| (|#pos| (|#s| |#0|))) (|::| (|#abs| (|#pos| (|#s| (|#s| |#0|)))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| |#0|)))))))))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| (|#s| (|#s| |#0|)))))))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| |#0|))))) nil)))))))))))
(rule (|#cklt| |#EQ|) |#false| :cost 0)
(rule (|#cklt| |#GT|) |#false| :cost 0)
(rule (|#cklt| |#LT|) |#true| :cost 0)
(rule (|#compare| |#0| |#0|) |#EQ| :cost 0)
(rule (|#compare| |#0| (|#neg| @y)) |#GT| :cost 0)
(rule (|#compare| |#0| (|#pos| @y)) |#LT| :cost 0)
(rule (|#compare| |#0| (|#s| @y)) |#LT| :cost 0)
(rule (|#compare| (|#neg| @x) |#0|) |#LT| :cost 0)
(rule (|#compare| (|#neg| @x) (|#neg| @y)) (|#compare| @y @x) :cost 0)
(rule (|#compare| (|#neg| @x) (|#pos| @y)) |#LT| :cost 0)
(rule (|#compare| (|#pos| @x) |#0|) |#GT| :cost 0)
(rule (|#compare| (|#pos| @x) (|#neg| @y)) |#GT| :cost 0)
(rule (|#compare| (|#pos| @x) (|#pos| @y)) (|#compare| @x @y) :cost 0)
(rule (|#compare| (|#s| @x) |#0|) |#GT| :cost 0)
(rule (|#compare| (|#s| @x) (|#s| @y)) (|#compare| @x @y) :cost 0)
