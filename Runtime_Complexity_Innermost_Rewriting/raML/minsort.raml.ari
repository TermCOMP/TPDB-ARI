; @origtpdbfilename tct_complexity/raML/minsort.raml.trs
; @xtcfilename "./Runtime_Complexity_Innermost_Rewriting/raML/minsort.raml.xml"
(format TRS)
(fun minSort#1 1)
(fun #true 0)
(fun #false 0)
(fun findMin#3 4)
(fun :: 2)
(fun #LT 0)
(fun findMin#1 1)
(fun #cklt 1)
(fun #pos 1)
(fun #0 0)
(fun findMin 1)
(fun #neg 1)
(fun #EQ 0)
(fun #less 2)
(fun minSort 1)
(fun #compare 2)
(fun #s 1)
(fun #GT 0)
(fun nil 0)
(fun findMin#2 2)
(rule (#less @x @y) (#cklt (#compare @x @y)))
(rule (findMin @l) (findMin#1 @l))
(rule (findMin#1 (:: @x @xs)) (findMin#2 (findMin @xs) @x))
(rule (findMin#1 nil) nil)
(rule (findMin#2 (:: @y @ys) @x) (findMin#3 (#less @x @y) @x @y @ys))
(rule (findMin#2 nil @x) (:: @x nil))
(rule (findMin#3 #false @x @y @ys) (:: @y (:: @x @ys)))
(rule (findMin#3 #true @x @y @ys) (:: @x (:: @y @ys)))
(rule (minSort @l) (minSort#1 (findMin @l)))
(rule (minSort#1 (:: @x @xs)) (:: @x (minSort @xs)))
(rule (minSort#1 nil) nil)
(rule (#cklt #EQ) #false :cost 0)
(rule (#cklt #GT) #false :cost 0)
(rule (#cklt #LT) #true :cost 0)
(rule (#compare #0 #0) #EQ :cost 0)
(rule (#compare #0 (#neg @y)) #GT :cost 0)
(rule (#compare #0 (#pos @y)) #LT :cost 0)
(rule (#compare #0 (#s @y)) #LT :cost 0)
(rule (#compare (#neg @x) #0) #LT :cost 0)
(rule (#compare (#neg @x) (#neg @y)) (#compare @y @x) :cost 0)
(rule (#compare (#neg @x) (#pos @y)) #LT :cost 0)
(rule (#compare (#pos @x) #0) #GT :cost 0)
(rule (#compare (#pos @x) (#neg @y)) #GT :cost 0)
(rule (#compare (#pos @x) (#pos @y)) (#compare @x @y) :cost 0)
(rule (#compare (#s @x) #0) #GT :cost 0)
(rule (#compare (#s @x) (#s @y)) (#compare @x @y) :cost 0)
