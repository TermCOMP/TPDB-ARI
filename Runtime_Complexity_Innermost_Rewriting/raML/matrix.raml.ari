; @origtpdbfilename tct_complexity/raML/matrix.raml.trs
; @xtcfilename "./Runtime_Complexity_Innermost_Rewriting/raML/matrix.raml.xml"
(format TRS)
(fun m1 1)
(fun matrixMultList 2)
(fun m4 1)
(fun attach 2)
(fun split 1)
(fun matrixMult3 3)
(fun |#add| 2)
(fun |mult#2| 3)
(fun |transpose'| 1)
(fun nil 0)
(fun |split#1| 1)
(fun transpose 1)
(fun m2 1)
(fun |matrixMult'| 2)
(fun transAcc 2)
(fun mult 2)
(fun + 2)
(fun |transAcc#1| 2)
(fun |matrixMultList#1| 2)
(fun |#neg| 1)
(fun * 2)
(fun |mkBase#1| 1)
(fun |transpose#3| 2)
(fun |attach#1| 2)
(fun |transpose#2| 1)
(fun |matrixMult'#1| 2)
(fun |#natmult| 2)
(fun matrixMultOld 2)
(fun |split#2| 2)
(fun |#pos| 1)
(fun |tuple#2| 2)
(fun mkBase 1)
(fun makeBase 1)
(fun |mult#1| 2)
(fun |::| 2)
(fun |lineMult#1| 2)
(fun |#mult| 2)
(fun |attach#2| 3)
(fun |#succ| 1)
(fun |#0| 0)
(fun |makeBase#1| 1)
(fun m3 1)
(fun matrixMult 2)
(fun |#abs| 1)
(fun lineMult 2)
(fun |transpose#1| 2)
(fun |split#3| 3)
(fun |#pred| 1)
(fun |#s| 1)
(rule (|#abs| |#0|) |#0|)
(rule (|#abs| (|#neg| @x)) (|#pos| @x))
(rule (|#abs| (|#pos| @x)) (|#pos| @x))
(rule (|#abs| (|#s| @x)) (|#pos| (|#s| @x)))
(rule (* @x @y) (|#mult| @x @y))
(rule (+ @x @y) (|#add| @x @y))
(rule (attach @line @m) (|attach#1| @line @m))
(rule (|attach#1| (|::| @x @xs) @m) (|attach#2| @m @x @xs))
(rule (|attach#1| nil @m) nil)
(rule (|attach#2| (|::| @l @ls) @x @xs) (|::| (|::| @x @l) (attach @xs @ls)))
(rule (|attach#2| nil @x @xs) nil)
(rule (lineMult @l @m2) (|lineMult#1| @m2 @l))
(rule (|lineMult#1| (|::| @x @xs) @l) (|::| (mult @l @x) (lineMult @l @xs)))
(rule (|lineMult#1| nil @l) nil)
(rule (m1 @x) (|::| (|::| (|#abs| (|#pos| (|#s| |#0|))) (|::| (|#abs| (|#pos| (|#s| (|#s| |#0|)))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| |#0|))))) nil))) (|::| (|::| (|#abs| (|#pos| (|#s| (|#s| |#0|)))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| |#0|))))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| |#0|)))))) nil))) nil)))
(rule (m2 @x) (|::| (|::| (|#abs| (|#pos| (|#s| |#0|))) (|::| (|#abs| (|#pos| (|#s| (|#s| |#0|)))) nil)) (|::| (|::| (|#abs| (|#pos| (|#s| (|#s| |#0|)))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| |#0|))))) nil)) (|::| (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| |#0|)))))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| (|#s| |#0|))))))) nil)) nil))))
(rule (m3 @x) (|::| (|::| (|#abs| (|#pos| (|#s| |#0|))) (|::| (|#abs| (|#pos| (|#s| (|#s| |#0|)))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| |#0|))))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| (|#s| |#0|))))))) nil)))) (|::| (|::| (|#abs| (|#pos| (|#s| (|#s| |#0|)))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| |#0|))))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| |#0|)))))) (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| (|#s| |#0|))))))) nil)))) nil)))
(rule (m4 @x) (|::| (|::| (|#abs| (|#pos| (|#s| |#0|))) nil) (|::| (|::| (|#abs| (|#pos| (|#s| (|#s| |#0|)))) nil) (|::| (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| |#0|))))) nil) (|::| (|::| (|#abs| (|#pos| (|#s| (|#s| (|#s| (|#s| |#0|)))))) nil) nil)))))
(rule (makeBase @m) (|makeBase#1| @m))
(rule (|makeBase#1| (|::| @l |@m'|)) (mkBase @l))
(rule (|makeBase#1| nil) nil)
(rule (matrixMult @m1 @m2) (|matrixMult'| @m1 (transAcc @m2 (makeBase @m2))))
(rule (|matrixMult'| @m1 @m2) (|matrixMult'#1| @m1 @m2))
(rule (|matrixMult'#1| (|::| @l @ls) @m2) (|::| (lineMult @l @m2) (|matrixMult'| @ls @m2)))
(rule (|matrixMult'#1| nil @m2) nil)
(rule (matrixMult3 @m1 @m2 @m3) (matrixMult (matrixMult @m1 @m2) @m3))
(rule (matrixMultList @acc @mm) (|matrixMultList#1| @mm @acc))
(rule (|matrixMultList#1| (|::| @m @ms) @acc) (matrixMultList (matrixMult @acc @m) @ms))
(rule (|matrixMultList#1| nil @acc) @acc)
(rule (matrixMultOld @m1 @m2) (|matrixMult'| @m1 (transpose @m2)))
(rule (mkBase @m) (|mkBase#1| @m))
(rule (|mkBase#1| (|::| @l |@m'|)) (|::| nil (mkBase |@m'|)))
(rule (|mkBase#1| nil) nil)
(rule (mult @l1 @l2) (|mult#1| @l1 @l2))
(rule (|mult#1| (|::| @x @xs) @l2) (|mult#2| @l2 @x @xs))
(rule (|mult#1| nil @l2) (|#abs| |#0|))
(rule (|mult#2| (|::| @y @ys) @x @xs) (+ (* @x @y) (mult @xs @ys)))
(rule (|mult#2| nil @x @xs) (|#abs| |#0|))
(rule (split @m) (|split#1| @m))
(rule (|split#1| (|::| @l @ls)) (|split#2| @l @ls))
(rule (|split#1| nil) (|tuple#2| nil nil))
(rule (|split#2| (|::| @x @xs) @ls) (|split#3| (split @ls) @x @xs))
(rule (|split#2| nil @ls) (|tuple#2| nil nil))
(rule (|split#3| (|tuple#2| @ys |@m'|) @x @xs) (|tuple#2| (|::| @x @ys) (|::| @xs |@m'|)))
(rule (transAcc @m @base) (|transAcc#1| @m @base))
(rule (|transAcc#1| (|::| @l |@m'|) @base) (attach @l (transAcc |@m'| @base)))
(rule (|transAcc#1| nil @base) @base)
(rule (transpose @m) (|transpose#1| @m @m))
(rule (|transpose#1| (|::| @xs @xss) @m) (|transpose#2| (split @m)))
(rule (|transpose#1| nil @m) nil)
(rule (|transpose#2| (|tuple#2| @l |@m'|)) (|transpose#3| |@m'| @l))
(rule (|transpose#3| (|::| @y @ys) @l) (|::| @l (transpose (|::| @y @ys))))
(rule (|transpose#3| nil @l) nil)
(rule (|transpose'| @m) (transAcc @m (makeBase @m)))
(rule (|#add| |#0| @y) @y :cost 0)
(rule (|#add| (|#neg| (|#s| |#0|)) @y) (|#pred| @y) :cost 0)
(rule (|#add| (|#neg| (|#s| (|#s| @x))) @y) (|#pred| (|#add| (|#pos| (|#s| @x)) @y)) :cost 0)
(rule (|#add| (|#pos| (|#s| |#0|)) @y) (|#succ| @y) :cost 0)
(rule (|#add| (|#pos| (|#s| (|#s| @x))) @y) (|#succ| (|#add| (|#pos| (|#s| @x)) @y)) :cost 0)
(rule (|#mult| |#0| |#0|) |#0| :cost 0)
(rule (|#mult| |#0| (|#neg| @y)) |#0| :cost 0)
(rule (|#mult| |#0| (|#pos| @y)) |#0| :cost 0)
(rule (|#mult| (|#neg| @x) |#0|) |#0| :cost 0)
(rule (|#mult| (|#neg| @x) (|#neg| @y)) (|#pos| (|#natmult| @x @y)) :cost 0)
(rule (|#mult| (|#neg| @x) (|#pos| @y)) (|#neg| (|#natmult| @x @y)) :cost 0)
(rule (|#mult| (|#pos| @x) |#0|) |#0| :cost 0)
(rule (|#mult| (|#pos| @x) (|#neg| @y)) (|#neg| (|#natmult| @x @y)) :cost 0)
(rule (|#mult| (|#pos| @x) (|#pos| @y)) (|#pos| (|#natmult| @x @y)) :cost 0)
(rule (|#natmult| |#0| @y) |#0| :cost 0)
(rule (|#natmult| (|#s| @x) @y) (|#add| (|#pos| @y) (|#natmult| @x @y)) :cost 0)
(rule (|#pred| |#0|) (|#neg| (|#s| |#0|)) :cost 0)
(rule (|#pred| (|#neg| (|#s| @x))) (|#neg| (|#s| (|#s| @x))) :cost 0)
(rule (|#pred| (|#pos| (|#s| |#0|))) |#0| :cost 0)
(rule (|#pred| (|#pos| (|#s| (|#s| @x)))) (|#pos| (|#s| @x)) :cost 0)
(rule (|#succ| |#0|) (|#pos| (|#s| |#0|)) :cost 0)
(rule (|#succ| (|#neg| (|#s| |#0|))) |#0| :cost 0)
(rule (|#succ| (|#neg| (|#s| (|#s| @x)))) (|#neg| (|#s| @x)) :cost 0)
(rule (|#succ| (|#pos| (|#s| @x))) (|#pos| (|#s| (|#s| @x))) :cost 0)
