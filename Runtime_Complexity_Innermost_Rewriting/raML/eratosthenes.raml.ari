; @origtpdbfilename tct_complexity/raML/eratosthenes.raml.trs
; @xtcfilename "./Runtime_Complexity_Innermost_Rewriting/raML/eratosthenes.raml.xml"
(format TRS)
(fun |#equal| 2)
(fun |#natsub| 2)
(fun |#eq| 2)
(fun |#natmult| 2)
(fun - 2)
(fun |#divByZero| 0)
(fun eratos 1)
(fun |#true| 0)
(fun |#natdiv| 2)
(fun |#sub| 2)
(fun |#add| 2)
(fun |#pos| 1)
(fun div 2)
(fun mod 2)
(fun filter 2)
(fun |eratos#1| 1)
(fun |#and| 2)
(fun nil 0)
(fun |filter#3| 3)
(fun |filter#1| 2)
(fun |#false| 0)
(fun |::| 2)
(fun |#mult| 2)
(fun |#succ| 1)
(fun |#0| 0)
(fun |#div| 2)
(fun * 2)
(fun |#neg| 1)
(fun |filter#2| 3)
(fun |#pred| 1)
(fun |#s| 1)
(rule (|#equal| @x @y) (|#eq| @x @y))
(rule (* @x @y) (|#mult| @x @y))
(rule (- @x @y) (|#sub| @x @y))
(rule (div @x @y) (|#div| @x @y))
(rule (eratos @l) (|eratos#1| @l))
(rule (|eratos#1| (|::| @x @xs)) (|::| @x (eratos (filter @x @xs))))
(rule (|eratos#1| nil) nil)
(rule (filter @p @l) (|filter#1| @l @p))
(rule (|filter#1| (|::| @x @xs) @p) (|filter#2| (filter @p @xs) @p @x))
(rule (|filter#1| nil @p) nil)
(rule (|filter#2| |@xs'| @p @x) (|filter#3| (|#equal| (mod @x @p) |#0|) @x |@xs'|))
(rule (|filter#3| |#false| @x |@xs'|) (|::| @x |@xs'|))
(rule (|filter#3| |#true| @x |@xs'|) |@xs'|)
(rule (mod @x @y) (- @x (* @x (div @x @y))))
(rule (|#add| |#0| @y) @y :cost 0)
(rule (|#add| (|#neg| (|#s| |#0|)) @y) (|#pred| @y) :cost 0)
(rule (|#add| (|#neg| (|#s| (|#s| @x))) @y) (|#pred| (|#add| (|#pos| (|#s| @x)) @y)) :cost 0)
(rule (|#add| (|#pos| (|#s| |#0|)) @y) (|#succ| @y) :cost 0)
(rule (|#add| (|#pos| (|#s| (|#s| @x))) @y) (|#succ| (|#add| (|#pos| (|#s| @x)) @y)) :cost 0)
(rule (|#and| |#false| |#false|) |#false| :cost 0)
(rule (|#and| |#false| |#true|) |#false| :cost 0)
(rule (|#and| |#true| |#false|) |#false| :cost 0)
(rule (|#and| |#true| |#true|) |#true| :cost 0)
(rule (|#div| |#0| |#0|) |#divByZero| :cost 0)
(rule (|#div| |#0| (|#neg| @y)) |#0| :cost 0)
(rule (|#div| |#0| (|#pos| @y)) |#0| :cost 0)
(rule (|#div| (|#neg| @x) |#0|) |#divByZero| :cost 0)
(rule (|#div| (|#neg| @x) (|#neg| @y)) (|#pos| (|#natdiv| @x @y)) :cost 0)
(rule (|#div| (|#neg| @x) (|#pos| @y)) (|#neg| (|#natdiv| @x @y)) :cost 0)
(rule (|#div| (|#pos| @x) |#0|) |#divByZero| :cost 0)
(rule (|#div| (|#pos| @x) (|#neg| @y)) (|#neg| (|#natdiv| @x @y)) :cost 0)
(rule (|#div| (|#pos| @x) (|#pos| @y)) (|#pos| (|#natdiv| @x @y)) :cost 0)
(rule (|#eq| |#0| |#0|) |#true| :cost 0)
(rule (|#eq| |#0| (|#neg| @y)) |#false| :cost 0)
(rule (|#eq| |#0| (|#pos| @y)) |#false| :cost 0)
(rule (|#eq| |#0| (|#s| @y)) |#false| :cost 0)
(rule (|#eq| (|#neg| @x) |#0|) |#false| :cost 0)
(rule (|#eq| (|#neg| @x) (|#neg| @y)) (|#eq| @x @y) :cost 0)
(rule (|#eq| (|#neg| @x) (|#pos| @y)) |#false| :cost 0)
(rule (|#eq| (|#pos| @x) |#0|) |#false| :cost 0)
(rule (|#eq| (|#pos| @x) (|#neg| @y)) |#false| :cost 0)
(rule (|#eq| (|#pos| @x) (|#pos| @y)) (|#eq| @x @y) :cost 0)
(rule (|#eq| (|#s| @x) |#0|) |#false| :cost 0)
(rule (|#eq| (|#s| @x) (|#s| @y)) (|#eq| @x @y) :cost 0)
(rule (|#eq| (|::| @x_1 @x_2) (|::| @y_1 @y_2)) (|#and| (|#eq| @x_1 @y_1) (|#eq| @x_2 @y_2)) :cost 0)
(rule (|#eq| (|::| @x_1 @x_2) nil) |#false| :cost 0)
(rule (|#eq| nil (|::| @y_1 @y_2)) |#false| :cost 0)
(rule (|#eq| nil nil) |#true| :cost 0)
(rule (|#mult| |#0| |#0|) |#0| :cost 0)
(rule (|#mult| |#0| (|#neg| @y)) |#0| :cost 0)
(rule (|#mult| |#0| (|#pos| @y)) |#0| :cost 0)
(rule (|#mult| (|#neg| @x) |#0|) |#0| :cost 0)
(rule (|#mult| (|#neg| @x) (|#neg| @y)) (|#pos| (|#natmult| @x @y)) :cost 0)
(rule (|#mult| (|#neg| @x) (|#pos| @y)) (|#neg| (|#natmult| @x @y)) :cost 0)
(rule (|#mult| (|#pos| @x) |#0|) |#0| :cost 0)
(rule (|#mult| (|#pos| @x) (|#neg| @y)) (|#neg| (|#natmult| @x @y)) :cost 0)
(rule (|#mult| (|#pos| @x) (|#pos| @y)) (|#pos| (|#natmult| @x @y)) :cost 0)
(rule (|#natdiv| |#0| |#0|) |#divByZero| :cost 0)
(rule (|#natdiv| (|#s| @x) (|#s| @y)) (|#s| (|#natdiv| (|#natsub| @x @y) (|#s| @y))) :cost 0)
(rule (|#natmult| |#0| @y) |#0| :cost 0)
(rule (|#natmult| (|#s| @x) @y) (|#add| (|#pos| @y) (|#natmult| @x @y)) :cost 0)
(rule (|#natsub| @x |#0|) @x :cost 0)
(rule (|#natsub| (|#s| @x) (|#s| @y)) (|#natsub| @x @y) :cost 0)
(rule (|#pred| |#0|) (|#neg| (|#s| |#0|)) :cost 0)
(rule (|#pred| (|#neg| (|#s| @x))) (|#neg| (|#s| (|#s| @x))) :cost 0)
(rule (|#pred| (|#pos| (|#s| |#0|))) |#0| :cost 0)
(rule (|#pred| (|#pos| (|#s| (|#s| @x)))) (|#pos| (|#s| @x)) :cost 0)
(rule (|#sub| @x |#0|) @x :cost 0)
(rule (|#sub| @x (|#neg| @y)) (|#add| @x (|#pos| @y)) :cost 0)
(rule (|#sub| @x (|#pos| @y)) (|#add| @x (|#neg| @y)) :cost 0)
(rule (|#succ| |#0|) (|#pos| (|#s| |#0|)) :cost 0)
(rule (|#succ| (|#neg| (|#s| |#0|))) |#0| :cost 0)
(rule (|#succ| (|#neg| (|#s| (|#s| @x)))) (|#neg| (|#s| @x)) :cost 0)
(rule (|#succ| (|#pos| (|#s| @x))) (|#pos| (|#s| (|#s| @x))) :cost 0)
