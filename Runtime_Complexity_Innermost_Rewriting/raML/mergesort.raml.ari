; @origtpdbfilename tct_complexity/raML/mergesort.raml.trs
; @xtcfilename "./Runtime_Complexity_Innermost_Rewriting/raML/mergesort.raml.xml"
(format TRS)
(fun merge#1 2)
(fun #true 0)
(fun msplit#3 3)
(fun mergesort#1 1)
(fun mergesort#2 2)
(fun #cklt 1)
(fun mergesort#3 1)
(fun #pos 1)
(fun merge#3 5)
(fun merge 2)
(fun #EQ 0)
(fun #compare 2)
(fun tuple#2 2)
(fun nil 0)
(fun msplit#2 2)
(fun merge#2 3)
(fun msplit 1)
(fun #false 0)
(fun :: 2)
(fun #LT 0)
(fun msplit#1 1)
(fun mergesort 1)
(fun #0 0)
(fun #neg 1)
(fun #less 2)
(fun #s 1)
(fun #GT 0)
(rule (#less @x @y) (#cklt (#compare @x @y)))
(rule (merge @l1 @l2) (merge#1 @l1 @l2))
(rule (merge#1 (:: @x @xs) @l2) (merge#2 @l2 @x @xs))
(rule (merge#1 nil @l2) @l2)
(rule (merge#2 (:: @y @ys) @x @xs) (merge#3 (#less @x @y) @x @xs @y @ys))
(rule (merge#2 nil @x @xs) (:: @x @xs))
(rule (merge#3 #false @x @xs @y @ys) (:: @y (merge (:: @x @xs) @ys)))
(rule (merge#3 #true @x @xs @y @ys) (:: @x (merge @xs (:: @y @ys))))
(rule (mergesort @l) (mergesort#1 @l))
(rule (mergesort#1 (:: @x1 @xs)) (mergesort#2 @xs @x1))
(rule (mergesort#1 nil) nil)
(rule (mergesort#2 (:: @x2 @xs') @x1) (mergesort#3 (msplit (:: @x1 (:: @x2 @xs')))))
(rule (mergesort#2 nil @x1) (:: @x1 nil))
(rule (mergesort#3 (tuple#2 @l1 @l2)) (merge (mergesort @l1) (mergesort @l2)))
(rule (msplit @l) (msplit#1 @l))
(rule (msplit#1 (:: @x1 @xs)) (msplit#2 @xs @x1))
(rule (msplit#1 nil) (tuple#2 nil nil))
(rule (msplit#2 (:: @x2 @xs') @x1) (msplit#3 (msplit @xs') @x1 @x2))
(rule (msplit#2 nil @x1) (tuple#2 (:: @x1 nil) nil))
(rule (msplit#3 (tuple#2 @l1 @l2) @x1 @x2) (tuple#2 (:: @x1 @l1) (:: @x2 @l2)))
(rule (#cklt #EQ) #false :cost 0)
(rule (#cklt #GT) #false :cost 0)
(rule (#cklt #LT) #true :cost 0)
(rule (#compare #0 #0) #EQ :cost 0)
(rule (#compare #0 (#neg @y)) #GT :cost 0)
(rule (#compare #0 (#pos @y)) #LT :cost 0)
(rule (#compare #0 (#s @y)) #LT :cost 0)
(rule (#compare (#neg @x) #0) #LT :cost 0)
(rule (#compare (#neg @x) (#neg @y)) (#compare @y @x) :cost 0)
(rule (#compare (#neg @x) (#pos @y)) #LT :cost 0)
(rule (#compare (#pos @x) #0) #GT :cost 0)
(rule (#compare (#pos @x) (#neg @y)) #GT :cost 0)
(rule (#compare (#pos @x) (#pos @y)) (#compare @x @y) :cost 0)
(rule (#compare (#s @x) #0) #GT :cost 0)
(rule (#compare (#s @x) (#s @y)) (#compare @x @y) :cost 0)
