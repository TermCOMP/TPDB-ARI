; @origtpdbfilename tct_complexity/raML/duplicates.raml.trs
; @xtcfilename "./Runtime_Complexity_Innermost_Rewriting/raML/duplicates.raml.xml"
(format TRS)
(fun remove 2)
(fun eq#2 1)
(fun #equal 2)
(fun eq 2)
(fun #eq 2)
(fun #true 0)
(fun #false 0)
(fun :: 2)
(fun and 2)
(fun remove#1 2)
(fun nub 1)
(fun #pos 1)
(fun #0 0)
(fun #neg 1)
(fun remove#2 4)
(fun eq#1 2)
(fun #and 2)
(fun eq#3 3)
(fun #s 1)
(fun nub#1 1)
(fun nil 0)
(rule (#equal @x @y) (#eq @x @y))
(rule (and @x @y) (#and @x @y))
(rule (eq @l1 @l2) (eq#1 @l1 @l2))
(rule (eq#1 (:: @x @xs) @l2) (eq#3 @l2 @x @xs))
(rule (eq#1 nil @l2) (eq#2 @l2))
(rule (eq#2 (:: @y @ys)) #false)
(rule (eq#2 nil) #true)
(rule (eq#3 (:: @y @ys) @x @xs) (and (#equal @x @y) (eq @xs @ys)))
(rule (eq#3 nil @x @xs) #false)
(rule (nub @l) (nub#1 @l))
(rule (nub#1 (:: @x @xs)) (:: @x (nub (remove @x @xs))))
(rule (nub#1 nil) nil)
(rule (remove @x @l) (remove#1 @l @x))
(rule (remove#1 (:: @y @ys) @x) (remove#2 (eq @x @y) @x @y @ys))
(rule (remove#1 nil @x) nil)
(rule (remove#2 #false @x @y @ys) (:: @y (remove @x @ys)))
(rule (remove#2 #true @x @y @ys) (remove @x @ys))
(rule (#and #false #false) #false :cost 0)
(rule (#and #false #true) #false :cost 0)
(rule (#and #true #false) #false :cost 0)
(rule (#and #true #true) #true :cost 0)
(rule (#eq #0 #0) #true :cost 0)
(rule (#eq #0 (#neg @y)) #false :cost 0)
(rule (#eq #0 (#pos @y)) #false :cost 0)
(rule (#eq #0 (#s @y)) #false :cost 0)
(rule (#eq (#neg @x) #0) #false :cost 0)
(rule (#eq (#neg @x) (#neg @y)) (#eq @x @y) :cost 0)
(rule (#eq (#neg @x) (#pos @y)) #false :cost 0)
(rule (#eq (#pos @x) #0) #false :cost 0)
(rule (#eq (#pos @x) (#neg @y)) #false :cost 0)
(rule (#eq (#pos @x) (#pos @y)) (#eq @x @y) :cost 0)
(rule (#eq (#s @x) #0) #false :cost 0)
(rule (#eq (#s @x) (#s @y)) (#eq @x @y) :cost 0)
(rule (#eq (:: @x_1 @x_2) (:: @y_1 @y_2)) (#and (#eq @x_1 @y_1) (#eq @x_2 @y_2)) :cost 0)
(rule (#eq (:: @x_1 @x_2) nil) #false :cost 0)
(rule (#eq nil (:: @y_1 @y_2)) #false :cost 0)
(rule (#eq nil nil) #true :cost 0)
