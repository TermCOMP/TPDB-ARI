(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int))
(fun f577_0_loop_LE (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f577_0_loop_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (> arg1 0) (= 0 arg2)) (= 0 arg1P)) (= 0 arg2P))
(= 0 arg3P))
(= 0 arg4P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f577_0_loop_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (> arg1 0) (> arg1P (- 1))) (= 1 arg2)) (= 0 arg2P))
(= 1 arg3P))
(= 1 arg4P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f577_0_loop_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (> arg2P (- 1)) (> arg2 1)) (> arg1P (- 1))) (> arg1 0))
(= arg2 arg3P))
(= 2 arg4P))
)
(rule
(f577_0_loop_LE arg1 arg2 arg3 arg4)
(f577_0_loop_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg3 (- 1)) (< (- arg1 1) arg1)) (>= arg4 arg3))
(> arg2 0))
(= (- arg1 1) arg1P))
(= (- arg1 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
)
(rule
(f577_0_loop_LE arg1 arg2 arg3 arg4)
(f577_0_loop_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x15 Int))
(and
(and
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg3 0)) (> arg4 (- 1))) (< arg4 arg3))
(<= (+ arg4 1) arg3))
(> x15 (- 1)))
(= (- (- arg1 1) x15) arg1P))
(= (- (- arg1 1) x15) arg2P))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
)
)
(rule (__init arg1 arg2 arg3 arg4) (f1_0_main_Load arg1P arg2P arg3P arg4P))
