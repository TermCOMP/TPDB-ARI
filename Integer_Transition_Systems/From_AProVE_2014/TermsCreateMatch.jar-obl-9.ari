(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int Int))
(fun f1260_0_create_Return (-> Int Int Int Int Int Int Int Int))
(fun f1262_0_create_Return (-> Int Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int Int))
(fun f2576_0_create_GE (-> Int Int Int Int Int Int Int Int))
(fun f2800_0_random_ArrayAccess (-> Int Int Int Int Int Int Int Int))
(fun
f2894_0_extendMatchingSubstitution_InvokeMethod
(-> Int Int Int Int Int Int Int Int))

(fun
f3568_0_extendMatchingSubstitution_CheckCast
(-> Int Int Int Int Int Int Int Int))

(fun
f3684_0_extendMatchingSubstitution_EQ
(-> Int Int Int Int Int Int Int Int))

(fun
f3952_0_extendMatchingSubstitution_NULL
(-> Int Int Int Int Int Int Int Int))

(fun f648_0_create_GT (-> Int Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f2800_0_random_ArrayAccess arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x6 Int))
(and
(and (and (and (> x6 (- 1)) (> arg2 0)) (> arg1 0)) (> arg1P 3))
(= arg2 arg2P))
)
)

(rule
(f1260_0_create_Return arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f2800_0_random_ArrayAccess arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and (and (and (<= arg1P arg2) (> arg1 0)) (> arg2 3)) (> arg1P 3))
(<= (+ arg5 5) arg2))
(<= (+ arg4 5) arg2))
(= arg4 arg3P))
(= arg5 arg4P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f2894_0_extendMatchingSubstitution_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P)
:guard
(exists
((x18 Int) (x19 Int) (x20 Int))
(and
(and
(and
(and
(and (and (and (> x18 (- 1)) (> arg2 0)) (> x19 0)) (< x19 arg2))
(> x20 (- 1)))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
)
)

(rule
(f1262_0_create_Return arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f2894_0_extendMatchingSubstitution_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P)
:guard
(and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)))

(rule
(f2800_0_random_ArrayAccess arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f3568_0_extendMatchingSubstitution_CheckCast
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P)
:guard
(exists
((x26 Int) (x34 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< x26 arg2) (> x26 0)) (> arg2 0)) (> x34 (- 1)))
(> arg4P 1))
(<= arg1P arg1))
(<= (+ arg2P 3) arg1))
(<= (+ arg3P 3) arg1))
(> arg1 3))
(> arg1P 3))
(> arg2P 0))
(> arg3P 0))
(<= (+ arg4 5) arg1))
(<= (+ arg3 5) arg1))
)
)

(rule
(f2800_0_random_ArrayAccess arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f3568_0_extendMatchingSubstitution_CheckCast
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P)
:guard
(exists
((x36 Int) (x44 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< x36 arg2) (> x36 0)) (> arg2 0)) (> x44 (- 1)))
(> arg4P 1))
(<= arg1P arg1))
(> arg1 3))
(> arg1P 3))
(> arg2P 3))
(> arg3P 3))
(<= (+ arg4 5) arg1))
(<= (+ arg3 5) arg1))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f648_0_create_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and (and (and (> arg1P (- 1)) (> arg2 0)) (> arg1 0)) (= arg2 arg2P))
(= 1 arg3P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f648_0_create_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x52 Int) (x50 Int))
(and
(and
(and
(and
(and (and (and (> x52 (- 1)) (> arg2 0)) (> x50 0)) (< x50 arg2))
(> arg1P (- 1)))
(> arg1 0))
(= arg2 arg2P))
(= (+ x50 1) arg3P))
)
)

(rule
(f2800_0_random_ArrayAccess arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f648_0_create_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x54 Int))
(and
(and
(and
(and
(and
(and (and (and (< x54 arg2) (> x54 0)) (> arg2 0)) (> arg1P (- 1)))
(> arg1 3))
(<= (+ arg4 5) arg1))
(<= (+ arg3 5) arg1))
(= arg2 arg2P))
(= (+ x54 1) arg3P))
)
)

(rule
(f648_0_create_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f2576_0_create_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and (and (and (> arg2 (- 1)) (> arg1 1)) (> arg3 0)) (< arg3 arg2))
(> arg3P (- 1)))
(= arg1 arg1P))
(= 0 arg2P))
(= arg2 arg4P))
(= (+ arg3 1) arg5P))
)

(rule
(f2576_0_create_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f648_0_create_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and (and (and (> arg3 arg2) (> arg1 1)) (> arg3 0)) (> arg5 1))
(< (- arg1 1) arg1))
(= (- arg1 1) arg1P))
(= arg4 arg2P))
(= arg5 arg3P))
)

(rule
(f2576_0_create_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f2576_0_create_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and (and (and (> arg3 arg2) (> arg1 1)) (> arg3 0)) (> arg5 1))
(< (- arg1 1) arg1))
(= arg1 arg1P))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
)

(rule
(f3568_0_extendMatchingSubstitution_CheckCast
arg1
arg2
arg3
arg4
arg5
arg6
arg7)
(f3684_0_extendMatchingSubstitution_EQ
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> arg4 1)) (<= arg2P arg2))
(<= arg2P arg3))
(<= (+ arg6P 1) arg1))
(<= (+ arg7P 1) arg2))
(<= (+ arg7P 1) arg3))
(> arg1 0))
(> arg2 0))
(> arg3 0))
(> arg1P 0))
(> arg2P 0))
(> arg6P (- 1)))
(> arg7P (- 1)))
(= 0 arg3P))
(= arg4 arg5P))
)

(rule
(f3568_0_extendMatchingSubstitution_CheckCast
arg1
arg2
arg3
arg4
arg5
arg6
arg7)
(f3684_0_extendMatchingSubstitution_EQ
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> arg4 1)) (<= arg2P arg2))
(<= arg2P arg3))
(<= (+ arg6P 1) arg1))
(<= (+ arg7P 1) arg2))
(<= (+ arg7P 1) arg3))
(> arg1 0))
(> arg2 0))
(> arg3 0))
(> arg1P 0))
(> arg2P 0))
(> arg6P (- 1)))
(> arg7P (- 1)))
(= 1 arg3P))
(= arg4 arg5P))
)

(rule
(f3684_0_extendMatchingSubstitution_EQ arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f3952_0_extendMatchingSubstitution_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 1) arg2) (<= arg1P arg7)) (<= (+ arg2P 1) arg1))
(<= arg2P arg6))
(> arg1 0))
(> arg2 0))
(> arg6 (- 1)))
(> arg7 (- 1)))
(> arg1P (- 1)))
(> arg2P (- 1)))
(= 1 arg3))
(= arg4 arg3P))
(= arg5 arg4P))
)

(rule
(f3952_0_extendMatchingSubstitution_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f3568_0_extendMatchingSubstitution_CheckCast
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg2) (> arg4 1)) (<= (+ arg2P 2) arg1))
(<= (+ arg2P 3) arg2))
(<= (+ arg3P 2) arg1))
(<= (+ arg3P 3) arg2))
(> arg1 1))
(> arg2 2))
(> arg1P 0))
(> arg2P (- 1)))
(> arg3P (- 1)))
(= arg4 arg4P))
)

(rule
(f3952_0_extendMatchingSubstitution_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f3568_0_extendMatchingSubstitution_CheckCast
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg2) (> arg4 1)) (<= (+ arg2P 2) arg1))
(<= (+ arg3P 2) arg1))
(> arg1 2))
(> arg2 2))
(> arg1P 0))
(> arg2P 0))
(> arg3P 0))
(= arg4 arg4P))
)

(rule
(f3952_0_extendMatchingSubstitution_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f3952_0_extendMatchingSubstitution_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (> arg4 1)) (<= (+ arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P (- 1)))
(> arg2P (- 1)))
(= arg3 arg3P))
(= arg4 arg4P))
)

(rule
(f3952_0_extendMatchingSubstitution_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f3952_0_extendMatchingSubstitution_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (> arg4 1)) (<= (+ arg2P 2) arg2))
(> arg1 1))
(> arg2 2))
(> arg1P (- 1)))
(> arg2P (- 1)))
(= arg3 arg3P))
(= arg4 arg4P))
)

(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P arg7P))

