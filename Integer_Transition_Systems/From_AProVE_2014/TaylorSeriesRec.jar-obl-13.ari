(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f1_0_main_ConstantStackPush (-> Int Int Int Int Int))
(fun f276_0_sin_GT (-> Int Int Int Int Int))
(fun f307_0_cos_GT (-> Int Int Int Int Int))
(fun f342_0_exp_GT (-> Int Int Int Int Int))
(fun |f342_0_exp_GT'| (-> Int Int Int Int Int))
(fun f345_0_power_GT (-> Int Int Int Int Int))
(fun f452_0_main_GE (-> Int Int Int Int Int))
(fun |f452_0_main_GE'| (-> Int Int Int Int Int))
(fun f453_0_fact_GT (-> Int Int Int Int Int))
(fun f552_0_cos_InvokeMethod (-> Int Int Int Int Int))
(fun |f552_0_cos_InvokeMethod'| (-> Int Int Int Int Int))
(fun f566_0_sin_InvokeMethod (-> Int Int Int Int Int))
(fun |f566_0_sin_InvokeMethod'| (-> Int Int Int Int Int))
(fun f638_0_exp_InvokeMethod (-> Int Int Int Int Int))
(fun f697_0_main_GE (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_ConstantStackPush arg1 arg2 arg3 arg4)
(f452_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (<= arg1P arg1) (> arg2 (- 1))) (> arg1 0)) (> arg1P 0))
(= 0 arg2P))
(= arg2 arg3P))
)

(rule
(f452_0_main_GE arg1 arg2 arg3 arg4)
(|f452_0_main_GE'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x91 Int))
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x91)) 0))
(> arg1 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)

(rule
(|f452_0_main_GE'| arg1 arg2 arg3 arg4)
(f276_0_sin_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x95 Int))
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x95)) 0))
(> arg1 0))
(< (- arg2 (* 2 x95)) 2))
(>= (- arg2 (* 2 x95)) 0))
(= arg3 arg1P))
(= arg2 arg2P))
)
)

(rule
(f452_0_main_GE arg1 arg2 arg3 arg4)
(|f452_0_main_GE'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x99 Int) (x100 Int))
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x99)) 1))
(= (- arg2 (* 3 x100)) 0))
(> arg1 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)

(rule
(|f452_0_main_GE'| arg1 arg2 arg3 arg4)
(f307_0_cos_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x104 Int) (x105 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x104)) 1))
(= (- arg2 (* 3 x105)) 0))
(> arg1 0))
(>= (- arg2 (* 2 x104)) 0))
(< (- arg2 (* 2 x104)) 2))
(< (- arg2 (* 3 x105)) 3))
(>= (- arg2 (* 3 x105)) 0))
(= arg3 arg1P))
(= arg2 arg2P))
)
)

(rule
(f452_0_main_GE arg1 arg2 arg3 arg4)
(|f452_0_main_GE'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x109 Int) (x110 Int) (x111 Int))
(and
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x109)) 1))
(> (- arg2 (* 3 x110)) 0))
(= (- arg2 (* 5 x111)) 0))
(> arg1 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)

(rule
(|f452_0_main_GE'| arg1 arg2 arg3 arg4)
(f342_0_exp_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x115 Int) (x116 Int) (x117 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> (- arg2 (* 3 x115)) 0) (> arg3 arg2)) (> arg3 0))
(= (- arg2 (* 2 x116)) 1))
(= (- arg2 (* 5 x117)) 0))
(> arg1 0))
(>= (- arg2 (* 2 x116)) 0))
(< (- arg2 (* 2 x116)) 2))
(< (- arg2 (* 3 x115)) 3))
(< (- arg2 (* 5 x117)) 5))
(>= (- arg2 (* 5 x117)) 0))
(= arg3 arg1P))
(= arg2 arg2P))
)
)

(rule
(f452_0_main_GE arg1 arg2 arg3 arg4)
(|f452_0_main_GE'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x121 Int) (x122 Int) (x123 Int) (x124 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (= (- arg2 (* 2 x121)) 1) (> arg3 arg2))
(> (- arg2 (* 5 x122)) 0))
(> (- arg2 (* 3 x123)) 0))
(<= x124 arg1))
(> arg1 0))
(> x124 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)

(rule
(|f452_0_main_GE'| arg1 arg2 arg3 arg4)
(f697_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(exists
((x129 Int) (x130 Int) (x131 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (> (- arg2 (* 5 x129)) 0) (> (- arg2 (* 3 x130)) 0))
(= (- arg2 (* 2 x131)) 1))
(> arg3 arg2))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(>= (- arg2 (* 2 x131)) 0))
(< (- arg2 (* 2 x131)) 2))
(< (- arg2 (* 3 x130)) 3))
(< (- arg2 (* 5 x129)) 5))
(= arg2 arg2P))
(= 0 arg3P))
(= arg3 arg4P))
)
)

(rule
(f697_0_main_GE arg1 arg2 arg3 arg4)
(f697_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (< arg3 100)) (> arg1 0)) (> arg1P 0))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
(= arg4 arg4P))
)

(rule
(f452_0_main_GE arg1 arg2 arg3 arg4)
(f452_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg3 0)) (> arg1 0)) (> arg1P 0))
(= 0 arg2))
(= 1 arg2P))
(= arg3 arg3P))
)

(rule
(f697_0_main_GE arg1 arg2 arg3 arg4)
(f452_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (> arg4 (- 1)) (> arg3 99)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(= (+ arg2 1) arg2P))
(= arg4 arg3P))
)

(rule
(f452_0_main_GE arg1 arg2 arg3 arg4)
(|f452_0_main_GE'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x135 Int) (x136 Int) (x137 Int) (x138 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x135)) 1))
(> (- arg2 (* 3 x136)) 0))
(= (- arg2 (* 5 x137)) 0))
(<= x138 arg1))
(> arg1 0))
(> x138 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)

(rule
(|f452_0_main_GE'| arg1 arg2 arg3 arg4)
(f452_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(exists
((x143 Int) (x144 Int) (x145 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> (- arg2 (* 3 x143)) 0) (> arg3 arg2)) (> arg3 0))
(= (- arg2 (* 2 x144)) 1))
(= (- arg2 (* 5 x145)) 0))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(>= (- arg2 (* 2 x144)) 0))
(< (- arg2 (* 2 x144)) 2))
(< (- arg2 (* 3 x143)) 3))
(< (- arg2 (* 5 x145)) 5))
(>= (- arg2 (* 5 x145)) 0))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
)
)

(rule
(f452_0_main_GE arg1 arg2 arg3 arg4)
(|f452_0_main_GE'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x149 Int) (x150 Int) (x151 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x149)) 1))
(= (- arg2 (* 3 x150)) 0))
(<= x151 arg1))
(> arg1 0))
(> x151 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)

(rule
(|f452_0_main_GE'| arg1 arg2 arg3 arg4)
(f452_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(exists
((x156 Int) (x157 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x156)) 1))
(= (- arg2 (* 3 x157)) 0))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(>= (- arg2 (* 2 x156)) 0))
(< (- arg2 (* 2 x156)) 2))
(< (- arg2 (* 3 x157)) 3))
(>= (- arg2 (* 3 x157)) 0))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
)
)

(rule
(f452_0_main_GE arg1 arg2 arg3 arg4)
(|f452_0_main_GE'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x161 Int) (x162 Int))
(and
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x161)) 0))
(<= x162 arg1))
(> arg1 0))
(> x162 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)

(rule
(|f452_0_main_GE'| arg1 arg2 arg3 arg4)
(f452_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(exists
((x167 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x167)) 0))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(< (- arg2 (* 2 x167)) 2))
(>= (- arg2 (* 2 x167)) 0))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
)
)

(rule
(f276_0_sin_GT arg1 arg2 arg3 arg4)
(f345_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and (and (> arg2 0) (> arg1 0)) (= arg2 arg1P)))

(rule
(f276_0_sin_GT arg1 arg2 arg3 arg4)
(f566_0_sin_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (> arg1 0) (> (* 2 arg2) 0)) (> arg2 0)) (= arg2 arg1P))
(= arg1 arg2P))
(= (+ (* 2 arg2) 1) arg3P))
)

(rule
(f566_0_sin_InvokeMethod arg1 arg2 arg3 arg4)
(f345_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and (and (and (> arg2 0) (> arg3 1)) (> arg1 0)) (= arg3 arg1P)))

(rule
(f566_0_sin_InvokeMethod arg1 arg2 arg3 arg4)
(f453_0_fact_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (> arg2 0) (> arg1 0)) (> (* 2 arg1) 0)) (> arg3 1))
(= (+ (* 2 arg1) 1) arg1P))
)

(rule
(f566_0_sin_InvokeMethod arg1 arg2 arg3 arg4)
(|f566_0_sin_InvokeMethod'| arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg1 0)) (> arg3 1)) (< (- arg1 1) arg1))
(> (* 2 arg1) 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)

(rule
(|f566_0_sin_InvokeMethod'| arg1 arg2 arg3 arg4)
(f276_0_sin_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x171 Int) (x172 Int) (x173 Int))
(and
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg1 0)) (> arg3 1)) (> (* 2 arg1) 0))
(< (- arg1 1) arg1))
(> x171 (- x172 (* x171 x173))))
(>= (- x172 (* x171 x173)) 0))
(= arg2 arg1P))
(= (- arg1 1) arg2P))
)
)

(rule
(f307_0_cos_GT arg1 arg2 arg3 arg4)
(f345_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and (and (> arg2 0) (> arg1 0)) (= arg2 arg1P)))

(rule
(f307_0_cos_GT arg1 arg2 arg3 arg4)
(f552_0_cos_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (> arg2 0) (> arg1 0)) (= arg2 arg1P)) (= arg1 arg2P))
(= (* 2 arg2) arg3P))
)

(rule
(f552_0_cos_InvokeMethod arg1 arg2 arg3 arg4)
(f345_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and (and (and (> arg3 1) (> arg2 0)) (> arg1 0)) (= arg3 arg1P)))

(rule
(f552_0_cos_InvokeMethod arg1 arg2 arg3 arg4)
(f453_0_fact_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (> arg2 0) (> arg1 0)) (> (* 2 arg1) 1)) (> arg3 1))
(= (* 2 arg1) arg1P))
)

(rule
(f552_0_cos_InvokeMethod arg1 arg2 arg3 arg4)
(|f552_0_cos_InvokeMethod'| arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg1 0)) (> arg3 1)) (< (- arg1 1) arg1))
(> (* 2 arg1) 1))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)

(rule
(|f552_0_cos_InvokeMethod'| arg1 arg2 arg3 arg4)
(f307_0_cos_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x177 Int) (x178 Int) (x179 Int))
(and
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg1 0)) (> arg3 1)) (> (* 2 arg1) 1))
(< (- arg1 1) arg1))
(> x177 (- x178 (* x177 x179))))
(>= (- x178 (* x177 x179)) 0))
(= arg2 arg1P))
(= (- arg1 1) arg2P))
)
)

(rule
(f342_0_exp_GT arg1 arg2 arg3 arg4)
(f345_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and (and (> arg2 0) (> arg1 0)) (= arg2 arg1P)))

(rule
(f638_0_exp_InvokeMethod arg1 arg2 arg3 arg4)
(f342_0_exp_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (< arg3 arg1) (> arg2 0)) (> arg1 0)) (= arg2 arg1P))
(= arg3 arg2P))
)

(rule
(f345_0_power_GT arg1 arg2 arg3 arg4)
(f345_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and (> arg1 0) (= (- arg1 1) arg1P)))

(rule
(f453_0_fact_GT arg1 arg2 arg3 arg4)
(f453_0_fact_GT arg1P arg2P arg3P arg4P)
:guard
(and (and (> arg1 0) (< (- arg1 1) arg1)) (= (- arg1 1) arg1P)))

(rule
(f342_0_exp_GT arg1 arg2 arg3 arg4)
(f453_0_fact_GT arg1P arg2P arg3P arg4P)
:guard
(and (and (> arg2 0) (> arg1 0)) (= arg2 arg1P)))

(rule
(f342_0_exp_GT arg1 arg2 arg3 arg4)
(|f342_0_exp_GT'| arg1P arg2P arg3P arg4P)
:guard
(and (and (and (> arg2 0) (> arg1 0)) (= arg1 arg1P)) (= arg2 arg2P)))

(rule
(|f342_0_exp_GT'| arg1 arg2 arg3 arg4)
(f638_0_exp_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x182 Int) (x183 Int) (x184 Int))
(and
(and
(and
(and
(and (and (> arg1 0) (> arg2 0)) (> x182 (- x183 (* x182 x184))))
(>= (- x183 (* x182 x184)) 0))
(= arg2 arg1P))
(= arg1 arg2P))
(= (- arg2 1) arg3P))
)
)

(rule
(f342_0_exp_GT arg1 arg2 arg3 arg4)
(|f342_0_exp_GT'| arg1P arg2P arg3P arg4P)
:guard
(and (and (and (> arg1 0) (> arg2 0)) (= arg1 arg1P)) (= arg2 arg2P)))

(rule
(|f342_0_exp_GT'| arg1 arg2 arg3 arg4)
(f638_0_exp_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x187 Int) (x188 Int) (x189 Int))
(and
(and
(and
(and
(and (and (> arg2 0) (> arg1 0)) (> x187 (- x188 (* x187 x189))))
(>= (- x188 (* x187 x189)) 0))
(= arg2 arg1P))
(= arg1 arg2P))
(= (- arg2 1) arg3P))
)
)

(rule
(__init arg1 arg2 arg3 arg4)
(f1_0_main_ConstantStackPush arg1P arg2P arg3P arg4P))

