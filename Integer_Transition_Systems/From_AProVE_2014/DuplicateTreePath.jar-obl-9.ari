(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int))
(fun f1821_0_duplicateRandomPath_NULL (-> Int Int Int Int Int Int))
(fun f1893_0_createTree_LE (-> Int Int Int Int Int Int))
(fun f1938_0_main_InvokeMethod (-> Int Int Int Int Int Int))
(fun f1989_0_duplicateRandomPath_NULL (-> Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int))
(fun f456_0_createTree_Return (-> Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5)
(f1938_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(and (and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)) (> arg2P 2)))
(rule
(f456_0_createTree_Return arg1 arg2 arg3 arg4 arg5)
(f1938_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg1 arg1P) (>= arg2 (+ arg1P 2))) (>= arg2 arg2P))
(> arg1 0))
(> arg2 2))
(> arg1P 0))
(> arg2P 2))
(>= arg2 (+ arg4 2)))
(= arg3 arg3P))
(= arg4 arg4P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5)
(f1893_0_createTree_LE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg3P 0) (> arg2 (- 1))) (<= (- arg1P 2) arg1))
(<= (- arg2P 2) arg1))
(> arg1 0))
(> arg1P 2))
(> arg2P 2))
(= 1 arg4P))
)
(rule
(f1893_0_createTree_LE arg1 arg2 arg3 arg4 arg5)
(f1893_0_createTree_LE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> arg3 0)) (<= arg1P arg1))
(<= (+ arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 2))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
(rule
(f1893_0_createTree_LE arg1 arg2 arg3 arg4 arg5)
(f1893_0_createTree_LE arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x30 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg3 0) (> x30 0)) (> arg4 (- 1))) (<= arg1P arg1))
(<= (+ arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 2))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
)
(rule
(f1893_0_createTree_LE arg1 arg2 arg3 arg4 arg5)
(f1893_0_createTree_LE arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x37 Int))
(and
(and
(and
(and
(and
(and (and (and (> arg3 0) (> x37 0)) (> arg4 (- 1))) (> arg1 2))
(> arg2 1))
(> arg1P 2))
(> arg2P 2))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
)
(rule
(f1893_0_createTree_LE arg1 arg2 arg3 arg4 arg5)
(f1893_0_createTree_LE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and (and (and (> arg4 (- 1)) (> arg3 0)) (> arg1 2)) (> arg2 1))
(> arg1P 2))
(> arg2P 2))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
(rule
(f1893_0_createTree_LE arg1 arg2 arg3 arg4 arg5)
(f1893_0_createTree_LE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> arg3 0)) (<= (- arg1P 2) arg1))
(<= (- arg1P 2) arg2))
(<= (- arg2P 2) arg1))
(<= (- arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 4))
(> arg2P 4))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
(rule
(f1893_0_createTree_LE arg1 arg2 arg3 arg4 arg5)
(f1893_0_createTree_LE arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x56 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> x56 0)) (> arg4 (- 1)))
(<= (- arg1P 2) arg1))
(<= (- arg1P 2) arg2))
(<= (- arg2P 2) arg1))
(<= (- arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 4))
(> arg2P 4))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5)
(f1821_0_duplicateRandomPath_NULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 1) arg1) (> arg2 0)) (<= (+ arg2P 1) arg1))
(> arg1 0))
(> arg1P (- 1)))
(> arg2P (- 1)))
(= arg2 arg3P))
(= 1 arg4P))
)
(rule
(f1938_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f1821_0_duplicateRandomPath_NULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg2) (> arg3P 0)) (<= arg2P arg2)) (> arg1 0))
(> arg2 2))
(> arg1P 2))
(> arg2P 2))
(<= (+ arg4 2) arg2))
(= arg3 arg4P))
)
(rule
(f1821_0_duplicateRandomPath_NULL arg1 arg2 arg3 arg4 arg5)
(f1989_0_duplicateRandomPath_NULL arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x75 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 (- 1)) (> x75 41)) (> arg4 (- 1)))
(<= arg1P arg1))
(<= arg1P arg2))
(<= (+ arg2P 1) arg1))
(<= (+ arg2P 1) arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
(<= (+ arg5P 2) arg1))
(<= (+ arg5P 2) arg2))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
)
)
(rule
(f1821_0_duplicateRandomPath_NULL arg1 arg2 arg3 arg4 arg5)
(f1989_0_duplicateRandomPath_NULL arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x83 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 (- 1)) (> arg4 (- 1))) (< x83 42))
(> x83 (- 1)))
(<= arg1P arg1))
(<= arg1P arg2))
(<= (+ arg2P 2) arg1))
(<= (+ arg2P 2) arg2))
(> arg1 1))
(> arg2 1))
(> arg1P 1))
(> arg2P (- 1)))
(<= (+ arg5P 2) arg1))
(<= (+ arg5P 2) arg2))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
)
)
(rule
(f1821_0_duplicateRandomPath_NULL arg1 arg2 arg3 arg4 arg5)
(f1821_0_duplicateRandomPath_NULL arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x90 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 (- 1)) (> arg4 (- 1))) (< x90 42))
(> x90 (- 1)))
(<= (+ arg1P 2) arg1))
(<= (+ arg1P 2) arg2))
(<= (+ arg2P 2) arg1))
(<= (+ arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 0))
(> arg2P 0))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
)
)
(rule
(f1989_0_duplicateRandomPath_NULL arg1 arg2 arg3 arg4 arg5)
(f1821_0_duplicateRandomPath_NULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= arg1P arg2)) (<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(> arg1 2))
(> arg2 0))
(> arg1P 0))
(> arg2P 0))
(<= (+ arg5 2) arg1))
(= arg3 arg3P))
(= arg4 arg4P))
)
(rule
(__init arg1 arg2 arg3 arg4 arg5)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P))
