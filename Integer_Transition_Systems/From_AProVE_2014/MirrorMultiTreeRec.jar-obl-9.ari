(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int))
(fun f1039_0_createTree_GE (-> Int Int Int Int Int Int Int))
(fun f1061_0_main_InvokeMethod (-> Int Int Int Int Int Int Int))
(fun f1079_0_mirror_NULL (-> Int Int Int Int Int Int Int))
(fun f1400_0_mirror_FieldAccess (-> Int Int Int Int Int Int Int))
(fun f1463_0_mirror_FieldAccess (-> Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int))
(fun f350_0_createTree_Return (-> Int Int Int Int Int Int Int))
(fun f499_0_createTree_GT (-> Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f499_0_createTree_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (and (> arg1P (- 1)) (> arg2 0)) (> arg1 0)) (= arg2 arg2P))
(= 1 arg3P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f1061_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x8 Int))
(and
(and
(and (and (and (> x8 (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P (- 1)))
)
)

(rule
(f350_0_createTree_Return arg1 arg2 arg3 arg4 arg5 arg6)
(f1061_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 1) arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P (- 1)))
(= arg2 arg3P))
)

(rule
(f1061_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f1079_0_mirror_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x14 Int))
(and
(and
(and
(and (and (and (> x14 0) (> arg3 1)) (<= arg1P arg2)) (> arg1 0))
(> arg2 (- 1)))
(> arg1P (- 1)))
(= arg3 arg2P))
)
)

(rule
(f499_0_createTree_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f1039_0_createTree_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (and (> arg2 (- 1)) (> arg1 0)) (> arg3 0)) (< arg3 arg2))
(> arg4P (- 1)))
(= arg1 arg1P))
(= (- arg1 1) arg2P))
(= 0 arg3P))
(= arg2 arg5P))
(= (+ arg3 1) arg6P))
)

(rule
(f1039_0_createTree_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f499_0_createTree_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg4 0) (> arg4 arg3)) (> arg1 0)) (> arg6 1))
(< arg2 arg1))
(< (- arg2 1) arg1))
(> arg2 (- 1)))
(< (- arg2 1) arg2))
(= (- arg2 1) arg1P))
(= arg5 arg2P))
(= arg6 arg3P))
)

(rule
(f1039_0_createTree_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f1039_0_createTree_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg4 0) (> arg4 arg3)) (> arg1 0)) (> arg6 1))
(< arg2 arg1))
(< (- arg2 1) arg1))
(> arg2 (- 1)))
(< (- arg2 1) arg2))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
(= arg6 arg6P))
)

(rule
(f1039_0_createTree_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f1039_0_createTree_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg4 0) (> arg4 arg3)) (> arg1 0)) (> arg6 1))
(< arg2 arg1))
(< (- arg2 1) arg1))
(> arg2 (- 1)))
(< (- arg2 1) arg2))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)

(rule
(f1079_0_mirror_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1079_0_mirror_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and (and (<= (+ arg1P 2) arg1) (> arg2 1)) (> arg1 2))
(> arg1P 0))
(= arg2 arg2P))
)

(rule
(f1079_0_mirror_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1079_0_mirror_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and (and (<= (+ arg1P 4) arg1) (> arg2 1)) (> arg1 3))
(> arg1P (- 1)))
(= arg2 arg2P))
)

(rule
(f1079_0_mirror_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1400_0_mirror_FieldAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> arg2 1)) (<= (+ arg3P 2) arg1))
(> arg1 2))
(> arg1P 1))
(> arg2P 2))
(> arg3P (- 1)))
(= arg2 arg5P))
)

(rule
(f1079_0_mirror_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1400_0_mirror_FieldAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> arg2 1)) (<= (+ arg3P 2) arg1))
(> arg1 2))
(> arg1P 1))
(> arg2P 5))
(> arg3P (- 1)))
(= arg2 arg5P))
)

(rule
(f1400_0_mirror_FieldAccess arg1 arg2 arg3 arg4 arg5 arg6)
(f1079_0_mirror_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 3) arg1) (> arg5 1)) (<= (+ arg1P 1) arg3))
(> arg1 2))
(> arg2 0))
(> arg3 0))
(> arg1P (- 1)))
(= arg5 arg2P))
)

(rule
(f1400_0_mirror_FieldAccess arg1 arg2 arg3 arg4 arg5 arg6)
(f1463_0_mirror_FieldAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (> arg5 1)) (<= arg2P arg1))
(<= (- arg2P 3) arg2))
(<= (- arg2P 2) arg3))
(> arg1 3))
(> arg2 0))
(> arg3 1))
(> arg1P 0))
(> arg2P 3))
)

(rule
(f1400_0_mirror_FieldAccess arg1 arg2 arg3 arg4 arg5 arg6)
(f1463_0_mirror_FieldAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (> arg5 1)) (<= arg2P arg1))
(<= (- arg2P 2) arg3))
(> arg1 5))
(> arg2 0))
(> arg3 3))
(> arg1P 0))
(> arg2P 5))
)

(rule
(f1400_0_mirror_FieldAccess arg1 arg2 arg3 arg4 arg5 arg6)
(f1463_0_mirror_FieldAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg2) (> arg5 1)) (> arg1 2)) (> arg2 0))
(> arg3 0))
(> arg1P 0))
(> arg2P 5))
)

(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P))

