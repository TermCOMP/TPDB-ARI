(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int))
(fun f1156_0_random_ArrayAccess (-> Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int))
(fun f2378_0_random_ArrayAccess (-> Int Int Int Int Int Int Int))
(fun f3147_0_getRandom_LT (-> Int Int Int Int Int Int Int))
(fun f3334_0_main_LE (-> Int Int Int Int Int Int Int))
(fun f3430_0_main_InvokeMethod (-> Int Int Int Int Int Int Int))
(fun f3446_0_visit_NE (-> Int Int Int Int Int Int Int))
(fun f3530_0_visit_NULL (-> Int Int Int Int Int Int Int))
(fun f3577_0_getRandom_LT (-> Int Int Int Int Int Int Int))
(fun f543_0_createTree_GT (-> Int Int Int Int Int Int Int))
(fun f814_0_createTree_Return (-> Int Int Int Int Int Int Int))
(fun f998_0_createTree_LE (-> Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f543_0_createTree_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (and (> arg2 0) (> arg1P (- 1))) (> arg1 0)) (= arg2 arg2P))
(= 1 arg3P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f1156_0_random_ArrayAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x8 Int))
(and
(and
(and (and (and (> arg2 0) (> x8 (- 1))) (> arg1 0)) (> arg1P 1))
(= arg2 arg2P))
(= 0 arg3P))
)
)
(rule
(f814_0_createTree_Return arg1 arg2 arg3 arg4 arg5 arg6)
(f1156_0_random_ArrayAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and (and (and (<= arg1P arg2) (> arg1 0)) (> arg2 1)) (> arg1P 1))
(<= (+ arg5 2) arg2))
(= 0 arg4))
(= 0 arg3P))
(= arg5 arg4P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f3334_0_main_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg2 0) (> arg4P (- 1))) (<= arg1P arg1))
(<= (+ arg2P 1) arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P (- 1)))
(= (- arg4P 1) arg3P))
(= 2 arg5P))
)
(rule
(f1156_0_random_ArrayAccess arg1 arg2 arg3 arg4 arg5 arg6)
(f3334_0_main_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x150 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> x150 0) (> arg4P (- 1))) (<= (+ arg1P 1) arg1))
(<= arg2P arg1))
(> arg1 1))
(> arg1P 0))
(> arg2P 1))
(<= (+ arg4 2) arg1))
(= 0 arg3))
(= (- arg4P 1) arg3P))
(= (+ x150 1) arg5P))
)
)
(rule
(f3334_0_main_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3430_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x27 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> x27 0) (> arg4 0)) (<= arg1P arg1)) (<= arg1P arg2))
(<= arg4P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg3P (- 1)))
(> arg4P 0))
(<= (+ arg6P 1) arg2))
(= arg3 arg2P))
)
)
(rule
(f3334_0_main_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3430_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x38 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> x38 0) (> arg4 0)) (<= arg1P arg1)) (<= arg1P arg2))
(<= arg4P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg3P 1))
(> arg4P 0))
(<= (+ arg6P 1) arg2))
(= arg3 arg2P))
)
)
(rule
(f3430_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3334_0_main_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x49 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> x49 0)) (<= arg1P arg3))
(<= arg1P arg4))
(> arg1 0))
(> arg3 0))
(> arg4 0))
(> arg1P 0))
(> arg2P 0))
(<= (+ arg6 1) arg4))
(= (- arg2 1) arg3P))
(= arg2 arg4P))
)
)
(rule
(f543_0_createTree_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f998_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (and (> arg2 (- 1)) (> arg3 0)) (> arg1 0)) (> arg2P (- 1)))
(= arg1 arg1P))
(= arg2 arg3P))
(= (+ arg3 1) arg4P))
)
(rule
(f998_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f543_0_createTree_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (and (> arg1 0) (> arg2 0)) (< (- arg1 1) arg1)) (> arg4 1))
(= (- arg1 1) arg1P))
(= arg3 arg2P))
(= arg4 arg3P))
)
(rule
(f998_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f998_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (and (> arg2 0) (> arg4 1)) (= 1 arg1)) (= 1 arg1P))
(= (- arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
)
(rule
(f998_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f998_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (and (> arg1 0) (> arg2 0)) (< (- arg1 1) arg1)) (> arg4 1))
(= arg1 arg1P))
(= (- arg2 1) arg2P))
(= arg3 arg3P))
)
(rule
(f3334_0_main_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2378_0_random_ArrayAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x75 Int))
(and
(and
(and
(and (and (and (> x75 0) (> arg4 0)) (<= arg1P arg2)) (> arg1 0))
(> arg2 0))
(> arg1P 0))
(<= (+ arg2P 1) arg2))
)
)
(rule
(f3430_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f2378_0_random_ArrayAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x83 Int))
(and
(and
(and
(and
(and (and (and (<= arg1P arg4) (> x83 0)) (> arg1 0)) (> arg3 (- 1)))
(> arg4 0))
(> arg1P 0))
(<= (+ arg6 1) arg4))
(= arg6 arg2P))
)
)
(rule
(f2378_0_random_ArrayAccess arg1 arg2 arg3 arg4 arg5 arg6)
(f3147_0_getRandom_LT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x91 Int))
(and
(and
(and
(and
(and
(and (and (> x91 (- 1)) (> arg3P (- 1))) (<= arg2P arg1))
(> arg1 0))
(> arg2P 0))
(<= (+ arg2 1) arg1))
(= (- arg3P 1) arg1P))
(= (+ x91 1) arg4P))
)
)
(rule
(f3147_0_getRandom_LT arg1 arg2 arg3 arg4 arg5 arg6)
(f3577_0_getRandom_LT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg4P (- 1)) (> arg4 (- 1))) (> arg3 (- 1)))
(>= arg2 (+ arg3P 2)))
(> arg2 2))
(> arg3P 0))
(= arg1 arg1P))
(= (- arg4P 1) arg2P))
(= (+ arg4 1) arg5P))
)
(rule
(f3577_0_getRandom_LT arg1 arg2 arg3 arg4 arg5 arg6)
(f3577_0_getRandom_LT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ arg3P 2) arg3) (> arg4 (- 1))) (> arg3 2))
(> arg3P 0))
(= arg1 arg1P))
(= (- arg2 1) arg2P))
(= arg2 arg4P))
(= arg5 arg5P))
)
(rule
(f3577_0_getRandom_LT arg1 arg2 arg3 arg4 arg5 arg6)
(f3147_0_getRandom_LT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (> arg3 0) (< arg4 0)) (> arg2P (- 1)))
(= (- arg1 1) arg1P))
(= arg1 arg3P))
(= arg5 arg4P))
)
(rule
(f3577_0_getRandom_LT arg1 arg2 arg3 arg4 arg5 arg6)
(f3147_0_getRandom_LT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (> arg3 1) (> arg4 (- 1))) (> arg2P (- 1)))
(= (- arg1 1) arg1P))
(= arg1 arg3P))
(= arg5 arg4P))
)
(rule
(f3334_0_main_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3446_0_visit_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x120 Int))
(and
(and
(and
(and
(and
(and (and (and (> x120 0) (< arg4 1)) (<= arg1P arg2)) (> arg1 0))
(> arg2 0))
(> arg1P 0))
(<= (+ arg4P 2) arg2))
(<= (+ arg2P 2) arg2))
(= arg2P arg3P))
)
)
(rule
(f3446_0_visit_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f3530_0_visit_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (> arg1 0) (> arg2P (- 1))) (<= (+ arg4 2) arg1))
(<= (+ arg2 2) arg1))
(= arg2 arg3))
(= arg2 arg1P))
)
(rule
(f3530_0_visit_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f3446_0_visit_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and (and (> arg2 0) (> arg1P 0)) (= arg1 arg2P)))
(rule
(f3530_0_visit_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f3530_0_visit_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and (and (<= (+ arg2P 1) arg2) (> arg2 0)) (> arg2P (- 1)))
(= arg1 arg1P))
(= arg3 arg3P))
)
(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P))
