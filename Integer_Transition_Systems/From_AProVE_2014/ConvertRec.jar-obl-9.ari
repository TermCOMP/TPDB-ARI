(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int))
(fun f1127_0_main_InvokeMethod (-> Int Int Int Int Int Int))
(fun f1347_0_convert_NONNULL (-> Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int))
(fun f257_0_main_InvokeMethod (-> Int Int Int Int Int Int))
(fun f541_0_createList_GT (-> Int Int Int Int Int Int))
(fun f736_0_createList_InvokeMethod (-> Int Int Int Int Int Int))
(fun f88_0_main_InvokeMethod (-> Int Int Int Int Int Int))
(fun f972_0_random_GT (-> Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5)
(f541_0_createList_GT arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and (and (and (> arg1 0) (= 0 arg2)) (= 0 arg1P)) (= 0 arg2P))
(= 0 arg3P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5)
(f88_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and (and (and (<= arg1P arg1) (> arg2 0)) (> arg1 0)) (> arg1P 0))
(= 0 arg2P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5)
(f88_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and (and (and (> arg2P (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
)
(rule
(f88_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f541_0_createList_GT arg1P arg2P arg3P arg4P arg5P)
:guard
(and (and (and (> arg1 0) (> arg2P 0)) (= arg2 arg1P)) (= 1 arg3P)))
(rule
(f257_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f1347_0_convert_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x11 Int))
(and
(and (and (<= (+ arg1P 1) arg1) (> x11 1)) (> arg1 0))
(> arg1P (- 1)))
)
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5)
(f1347_0_convert_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and (and (<= (+ arg1P 1) arg1) (> arg1 0)) (> arg1P (- 1)))
(= 0 arg2))
)
(rule
(f88_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f1347_0_convert_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and (and (<= (+ arg1P 1) arg1) (> arg1 0)) (> arg1P (- 1)))
(= 0 arg2))
)
(rule
(f88_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f257_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x110 Int))
(and
(and (and (and (<= arg1P arg1) (> x110 1)) (> arg1 0)) (> arg1P 0))
(= 0 arg2))
)
)
(rule
(f88_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f257_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x114 Int) (x115 Int))
(and
(and
(and (and (and (> x114 (- 1)) (> x115 1)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(= 0 arg2))
)
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5)
(f1347_0_convert_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and (and (<= (- arg1P 1) arg1) (> arg1 0)) (> arg1P 1))
(= 0 arg2))
)
(rule
(f88_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f972_0_random_GT arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x27 Int))
(and
(and
(and (and (and (<= arg1P arg1) (> x27 0)) (> arg1 0)) (> arg1P 0))
(> arg2P 2))
(= 0 arg3P))
)
)
(rule
(f88_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f972_0_random_GT arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x33 Int))
(and
(and (and (and (<= arg1P arg1) (> x33 0)) (> arg1 0)) (> arg1P 0))
(> arg2P 2))
)
)
(rule
(f88_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f972_0_random_GT arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x40 Int))
(and
(and (and (and (<= arg1P arg1) (> x40 0)) (> arg1 0)) (> arg1P 0))
(> arg2P 1))
)
)
(rule
(f88_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f972_0_random_GT arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x47 Int))
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> x47 0)) (<= (- arg2P 1) arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P 1))
(= 0 arg3P))
)
)
(rule
(f972_0_random_GT arg1 arg2 arg3 arg4 arg5)
(f1127_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x52 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (>= arg3P x52)) (<= arg1P arg2))
(<= arg2P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 0))
(<= (+ arg5P 2) arg2))
(<= (+ arg3 2) arg2))
(= arg3 arg4P))
)
)
(rule
(f972_0_random_GT arg1 arg2 arg3 arg4 arg5)
(f1127_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x61 Int) (x60 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (< x61 x60) (> x61 (- 1))) (<= arg1P arg1))
(<= arg1P arg2))
(<= arg2P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 0))
(<= (+ arg5P 2) arg2))
(<= (+ arg3 2) arg2))
(= (+ x61 1) arg3P))
(= arg3 arg4P))
)
)
(rule
(f972_0_random_GT arg1 arg2 arg3 arg4 arg5)
(f1127_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x69 Int) (x68 Int) (x76 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (< x69 x68) (> x69 (- 1))) (> x76 (- 1)))
(<= arg1P arg1))
(<= arg1P arg2))
(<= arg2P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 0))
(<= (+ arg5P 2) arg2))
(<= (+ arg3 2) arg2))
(= (+ x69 1) arg3P))
(= arg3 arg4P))
)
)
(rule
(f1127_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f1347_0_convert_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x77 Int))
(and
(and
(and
(and
(and (and (and (> x77 0) (> arg3 0)) (<= arg1P arg2)) (> arg1 0))
(> arg2 0))
(> arg1P 0))
(<= (+ arg5 2) arg2))
(<= (+ arg4 2) arg2))
)
)
(rule
(f541_0_createList_GT arg1 arg2 arg3 arg4 arg5)
(f541_0_createList_GT arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and (and (> arg1 0) (> arg2 (- 1))) (< (- arg1 1) arg1))
(>= arg3 arg2))
(= (- arg1 1) arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
(rule
(f541_0_createList_GT arg1 arg2 arg3 arg4 arg5)
(f736_0_createList_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg1 0) (> arg2 (- 1))) (> arg3 (- 1)))
(< arg3 arg2))
(= arg1 arg1P))
(= (- arg1 1) arg2P))
(= arg2 arg3P))
(= (+ arg3 1) arg4P))
)
(rule
(f541_0_createList_GT arg1 arg2 arg3 arg4 arg5)
(f736_0_createList_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x93 Int))
(and
(and
(and
(and
(and
(and (and (and (> arg1 0) (> arg2 (- 1))) (< arg3 arg2)) (> x93 (- 1)))
(> arg3 (- 1)))
(= arg1 arg1P))
(= (- arg1 1) arg2P))
(= arg2 arg3P))
(= (+ arg3 1) arg4P))
)
)
(rule
(f736_0_createList_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f541_0_createList_GT arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and (and (and (> arg1 0) (> arg4 0)) (> arg3 0)) (<= arg4 arg3))
(< arg2 arg1))
(= arg2 arg1P))
(= arg3 arg2P))
(= arg4 arg3P))
)
(rule
(f1347_0_convert_NONNULL arg1 arg2 arg3 arg4 arg5)
(f1347_0_convert_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x101 Int))
(and
(and (and (>= arg1 (+ arg1P 1)) (< x101 1)) (> arg1 0))
(> arg1P (- 1)))
)
)
(rule
(f1347_0_convert_NONNULL arg1 arg2 arg3 arg4 arg5)
(f1347_0_convert_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x105 Int))
(and
(and
(and (and (< (- x105 1) x105) (> x105 0)) (<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
)
)
(rule
(__init arg1 arg2 arg3 arg4 arg5)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P))
