(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int))
(fun f289_0_appendNewList_Return (-> Int Int Int Int Int Int))
(fun f422_0_random_ArrayAccess (-> Int Int Int Int Int Int))
(fun f540_0_random_ArrayAccess (-> Int Int Int Int Int Int))
(fun f673_0_main_InvokeMethod (-> Int Int Int Int Int Int))
(fun f760_0_copy_NONNULL (-> Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f289_0_appendNewList_Return arg1 arg2 arg3 arg4 arg5)
(f540_0_random_ArrayAccess arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and (and (and (<= arg1P arg2) (> arg1 0)) (> arg2 3)) (> arg1P 3))
(<= (+ arg5 2) arg2))
(= 0 arg4))
(= 0 arg3P))
(= arg5 arg4P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5)
(f540_0_random_ArrayAccess arg1P arg2P arg3P arg4P arg5P)
:guard
(and (and (and (> arg1 0) (> arg1P 3)) (= arg2 arg2P)) (= 0 arg3P)))
(rule
(f540_0_random_ArrayAccess arg1 arg2 arg3 arg4 arg5)
(f673_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x51 Int) (x52 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (> x51 0) (< x51 arg2)) (> x52 (- 1)))
(<= (+ arg1P 3) arg1))
(> arg1 3))
(> arg1P 0))
(> arg2P 3))
(<= (+ arg4 2) arg1))
(= 0 arg3))
(= arg4 arg5P))
)
)
(rule
(f673_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f760_0_copy_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and (and (and (<= arg1P arg2) (> arg3 0)) (> arg1 0)) (> arg2 3))
(> arg1P 3))
(<= (+ arg5 2) arg2))
(<= (+ arg4 4) arg2))
(= arg3 arg2P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5)
(f422_0_random_ArrayAccess arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and (and (and (<= arg2P arg1) (> arg2 (- 1))) (> arg1 0)) (> arg2P 0))
(= 1 arg1P))
)
(rule
(f540_0_random_ArrayAccess arg1 arg2 arg3 arg4 arg5)
(f422_0_random_ArrayAccess arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x59 Int))
(and
(and
(and
(and
(and
(and (and (and (> x59 0) (< x59 arg2)) (> arg1P (- 1))) (> arg2 (- 1)))
(<= (+ arg2P 3) arg1))
(> arg1 3))
(> arg2P 0))
(<= (+ arg4 2) arg1))
(= 0 arg3))
)
)
(rule
(f422_0_random_ArrayAccess arg1 arg2 arg3 arg4 arg5)
(f422_0_random_ArrayAccess arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x37 Int) (x36 Int) (x41 Int))
(and
(and
(and
(and
(and
(and
(and (and (and (< x37 x36) (> arg1 1)) (> x37 (- 1))) (> x41 (- 1)))
(> x36 (- 1)))
(< (- arg1 1) arg1))
(<= arg2P arg2))
(> arg2 0))
(> arg2P 0))
(= (- arg1 1) arg1P))
)
)
(rule
(f760_0_copy_NONNULL arg1 arg2 arg3 arg4 arg5)
(f760_0_copy_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and (and (<= (+ arg1P 1) arg1) (> arg2 0)) (> arg1 0))
(> arg1P (- 1)))
(= arg2 arg2P))
)
(rule
(__init arg1 arg2 arg3 arg4 arg5)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P))
