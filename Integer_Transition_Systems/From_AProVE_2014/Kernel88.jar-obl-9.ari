(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int Int))
(fun f196_0_create_LE (-> Int Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int Int))
(fun f234_0_slide88_FieldAccess (-> Int Int Int Int Int Int Int Int))
(fun f292_0_slide88_EQ (-> Int Int Int Int Int Int Int Int))
(fun |f292_0_slide88_EQ'| (-> Int Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f234_0_slide88_FieldAccess arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x4 Int) (x5 Int))
(and
(and
(and (and (and (> x4 (- 1)) (> arg2 1)) (> arg1P (- 1))) (> x5 arg2P))
(> x5 (- 1)))
(> arg1 0))
)
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f234_0_slide88_FieldAccess arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x10 Int))
(and
(and (and (and (> x10 (- 1)) (> arg2 1)) (< arg2P 1)) (> arg1P (- 1)))
(> arg1 0))
)
)
(rule
(f234_0_slide88_FieldAccess arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f292_0_slide88_EQ arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and (and (and (> arg2 0) (= arg1 arg1P)) (= 0 arg2P)) (= arg2 arg3P))
(= arg2 arg4P))
(= 0 arg5P))
(= arg2 arg6P))
(= arg2 arg7P))
)
(rule
(f292_0_slide88_EQ arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(|f292_0_slide88_EQ'| arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x48 Int) (x49 Int) (x50 Int) (x51 Int) (x52 Int) (x53 Int) (x54 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> x48 0) (> arg4 0)) (> arg5 0)) (> arg6 (- 1)))
(< arg6 arg2))
(> x49 arg6))
(< arg6 arg3))
(> x48 arg7))
(> arg7 (- 1)))
(< arg7 arg5))
(< x50 arg4))
(< arg7 arg4))
(= (- arg1 (* 2 x51)) 0))
(> x48 x52))
(> x49 0))
(> arg2 0))
(>= arg1 x53))
(< x54 arg5))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
)
)
(rule
(|f292_0_slide88_EQ'| arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f292_0_slide88_EQ arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x67 Int) (x68 Int) (x69 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> x67 0) (> arg4 0)) (> arg5 0)) (> arg6 (- 1)))
(< arg6 arg2))
(> x68 arg6))
(< arg6 arg3))
(> x67 arg7))
(> arg7 (- 1)))
(< arg7 arg5))
(< arg4P arg4))
(< arg7 arg4))
(= (- arg1 (* 2 x69)) 0))
(> x67 arg7P))
(> x68 0))
(> arg2 0))
(< arg5P arg5))
(>= arg1 arg1P))
(>= (- arg1 (* 2 x69)) 0))
(< (- arg1 (* 2 x69)) 2))
(< (- arg1 (* 2 arg1P)) 2))
(>= (- arg1 (* 2 arg1P)) 0))
(= arg3 arg3P))
(= arg2 arg6P))
)
)
(rule
(f292_0_slide88_EQ arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(|f292_0_slide88_EQ'| arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x77 Int) (x78 Int) (x79 Int) (x80 Int) (x81 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg6 (- 1)) (> arg3 0)) (< arg6 arg2)) (> x77 arg6))
(< arg6 arg3))
(> x77 arg7))
(> arg7 (- 1)))
(< arg7 arg5))
(< arg7 arg3))
(= (- arg1 (* 2 x78)) 0))
(< x79 arg3))
(> x77 x80))
(> x77 (- 1)))
(>= arg1 x81))
(= arg3 arg4))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg3 arg4P))
(= arg5 arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
)
)
(rule
(|f292_0_slide88_EQ'| arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f292_0_slide88_EQ arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x93 Int) (x94 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg6 (- 1)) (> arg3 0)) (< arg6 arg2)) (> x93 arg6))
(< arg6 arg3))
(> x93 arg7))
(> arg7 (- 1)))
(< arg7 arg5))
(< arg7 arg3))
(= (- arg1 (* 2 x94)) 0))
(< arg4P arg3))
(> x93 arg5P))
(>= arg1 arg1P))
(> x93 (- 1)))
(>= (- arg1 (* 2 x94)) 0))
(< (- arg1 (* 2 x94)) 2))
(< (- arg1 (* 2 arg1P)) 2))
(>= (- arg1 (* 2 arg1P)) 0))
(= arg3 arg4))
(= 1 arg2P))
(= 0 arg6P))
(= arg5P arg7P))
)
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f196_0_create_LE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x41 Int) (x40 Int))
(and
(and (and (and (> x41 (- 1)) (> arg2 1)) (> x40 (- 1))) (> arg1 0))
(= (- x40 1) arg1P))
)
)
(rule
(f196_0_create_LE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f196_0_create_LE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and (> arg1 0) (= (- arg1 1) arg1P)))
(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P arg7P))
