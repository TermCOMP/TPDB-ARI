(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f1759_0_createTree_LE (-> Int Int Int Int Int))
(fun f1795_0_main_InvokeMethod (-> Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int))
(fun f2097_0_flatten_NULL (-> Int Int Int Int Int))
(fun f456_0_createTree_Return (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f2097_0_flatten_NULL arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (<= (+ arg1P 1) arg1) (> arg2 0)) (> arg1 0))
(> arg1P (- 1)))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f1795_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and (and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)) (> arg2P 2)))

(rule
(f456_0_createTree_Return arg1 arg2 arg3 arg4)
(f1795_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (>= arg1 arg1P) (<= (+ arg1P 2) arg2)) (<= arg2P arg2))
(> arg1 0))
(> arg2 2))
(> arg1P 0))
(> arg2P 2))
(<= (+ arg3 2) arg2))
(= arg3 arg3P))
)

(rule
(f1795_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f2097_0_flatten_NULL arg1P arg2P arg3P arg4P)
:guard
(exists
((x14 Int))
(and
(and
(and (and (and (<= arg1P arg2) (> x14 0)) (> arg1 0)) (> arg2 2))
(> arg1P 2))
(<= (+ arg3 2) arg2))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f1759_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg3P 0) (> arg2 (- 1))) (<= (- arg1P 2) arg1))
(<= (- arg2P 2) arg1))
(> arg1 0))
(> arg1P 2))
(> arg2P 2))
(= 1 arg4P))
)

(rule
(f1759_0_createTree_LE arg1 arg2 arg3 arg4)
(f1759_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> arg3 0)) (<= arg1P arg1))
(<= (+ arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 2))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)

(rule
(f1759_0_createTree_LE arg1 arg2 arg3 arg4)
(f1759_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x36 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg3 0) (> x36 0)) (> arg4 (- 1))) (<= arg1P arg1))
(<= (+ arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 2))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
)

(rule
(f1759_0_createTree_LE arg1 arg2 arg3 arg4)
(f1759_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x43 Int))
(and
(and
(and
(and
(and
(and (and (and (> arg3 0) (> x43 0)) (> arg4 (- 1))) (> arg1 2))
(> arg2 1))
(> arg1P 2))
(> arg2P 2))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
)

(rule
(f1759_0_createTree_LE arg1 arg2 arg3 arg4)
(f1759_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (and (> arg4 (- 1)) (> arg3 0)) (> arg1 2)) (> arg2 1))
(> arg1P 2))
(> arg2P 2))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)

(rule
(f1759_0_createTree_LE arg1 arg2 arg3 arg4)
(f1759_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> arg3 0)) (<= (- arg1P 2) arg1))
(<= (- arg1P 2) arg2))
(<= (- arg2P 2) arg1))
(<= (- arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 4))
(> arg2P 4))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)

(rule
(f1759_0_createTree_LE arg1 arg2 arg3 arg4)
(f1759_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x62 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> x62 0)) (> arg4 (- 1)))
(<= (- arg1P 2) arg1))
(<= (- arg1P 2) arg2))
(<= (- arg2P 2) arg1))
(<= (- arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 4))
(> arg2P 4))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
)

(rule
(f2097_0_flatten_NULL arg1 arg2 arg3 arg4)
(f2097_0_flatten_NULL arg1P arg2P arg3P arg4P)
:guard
(and (and (<= (+ arg1P 2) arg1) (> arg1 1)) (> arg1P (- 1))))

(rule
(f2097_0_flatten_NULL arg1 arg2 arg3 arg4)
(f2097_0_flatten_NULL arg1P arg2P arg3P arg4P)
:guard
(and (and (<= (- arg1P 2) arg1) (> arg1 2)) (> arg1P 2)))

(rule (__init arg1 arg2 arg3 arg4) (f1_0_main_Load arg1P arg2P arg3P arg4P))
