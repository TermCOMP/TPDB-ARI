(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int))
(fun f1_0_main_Load (-> Int Int Int))
(fun f289_0_createIntList_Return (-> Int Int Int))
(fun f491_0_random_ArrayAccess (-> Int Int Int))
(fun f639_0_createIntList_LE (-> Int Int Int))
(fun f815_0_main_NULL (-> Int Int Int))
(entrypoint __init)
(rule
(f289_0_createIntList_Return arg1 arg2)
(f491_0_random_ArrayAccess arg1P arg2P)
:guard
(and (and (<= arg1P arg1) (> arg1 (- 1))) (> arg1P (- 1))))

(rule
(f1_0_main_Load arg1 arg2)
(f491_0_random_ArrayAccess arg1P arg2P)
:guard
(and (> arg1 0) (> arg1P (- 1))))

(rule
(f491_0_random_ArrayAccess arg1 arg2)
(f815_0_main_NULL arg1P arg2P)
:guard
(exists
((x7 Int))
(and
(and (and (<= arg1P arg1) (> x7 0)) (> arg1 (- 1)))
(> arg1P (- 1)))
)
)

(rule
(f815_0_main_NULL arg1 arg2)
(f815_0_main_NULL arg1P arg2P)
:guard
(exists
((x12 Int))
(and
(and (and (<= (+ arg1P 2) arg1) (< x12 1)) (> arg1 1))
(> arg1P (- 1)))
)
)

(rule
(f815_0_main_NULL arg1 arg2)
(f815_0_main_NULL arg1P arg2P)
:guard
(exists
((x15 Int))
(and (and (and (<= arg1P arg1) (> x15 0)) (> arg1 0)) (> arg1P 0)))
)

(rule
(f815_0_main_NULL arg1 arg2)
(f815_0_main_NULL arg1P arg2P)
:guard
(exists
((x18 Int))
(and (and (and (<= (+ arg1P 2) arg1) (< x18 1)) (> arg1 2)) (> arg1P 0)))
)

(rule
(f1_0_main_Load arg1 arg2)
(f639_0_createIntList_LE arg1P arg2P)
:guard
(and (and (and (> arg2 (- 1)) (> arg1P (- 1))) (> arg1 0)) (= 1 arg2P)))

(rule
(f639_0_createIntList_LE arg1 arg2)
(f639_0_createIntList_LE arg1P arg2P)
:guard
(and
(and (and (> arg1 0) (> arg2 0)) (= (- arg1 1) arg1P))
(= (+ arg2 1) arg2P))
)

(rule (__init arg1 arg2) (f1_0_main_Load arg1P arg2P))
