(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int))
(fun f1_0_main_Load (-> Int Int Int))
(fun f98_0_loop_EQ (-> Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2)
(f98_0_loop_EQ arg1P arg2P)
:guard
(and (and (> arg1 0) (> arg2 (- 1))) (= arg2 arg1P)))

(rule
(f98_0_loop_EQ arg1 arg2)
(f98_0_loop_EQ arg1P arg2P)
:guard
(and
(and (and (> arg1 (- 3)) (< arg1 1)) (< arg1 0))
(= (+ arg1 2) arg1P))
)

(rule
(f98_0_loop_EQ arg1 arg2)
(f98_0_loop_EQ arg1P arg2P)
:guard
(and (and (> arg1 0) (< arg1 3)) (= (- arg1 2) arg1P)))

(rule
(f98_0_loop_EQ arg1 arg2)
(f98_0_loop_EQ arg1P arg2P)
:guard
(and
(and (> arg1 2) (< (* (- 1) arg1) (- 1)))
(= (+ (* (- 1) arg1) 2) arg1P))
)

(rule
(f98_0_loop_EQ arg1 arg2)
(f98_0_loop_EQ arg1P arg2P)
:guard
(and
(and
(and
(and (and (< arg1 (- 1)) (< arg1 0)) (< arg1 (- 2)))
(<= 3 (* (- 1) arg1)))
(< arg1 1))
(= (- (* (- 1) arg1) 2) arg1P))
)

(rule (__init arg1 arg2) (f1_0_main_Load arg1P arg2P))
