(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int))
(fun f1076_0_insert_GT (-> Int Int Int Int Int Int Int))
(fun f1288_0_applyTreeChanger_NULL (-> Int Int Int Int Int Int Int))
(fun f1294_0_applyTreeChanger_NULL (-> Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int))
(fun f394_0_createTree_Return (-> Int Int Int Int Int Int Int))
(fun f933_0_createTree_GE (-> Int Int Int Int Int Int Int))
(fun f997_0_main_InvokeMethod (-> Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f997_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x7 Int))
(and
(and
(and
(and
(and (and (and (> x7 (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P 0))
(> arg3P (- 1)))
(> arg4P (- 1)))
)
)

(rule
(f394_0_createTree_Return arg1 arg2 arg3 arg4 arg5 arg6)
(f997_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg1 arg1P) (<= arg1P arg2)) (<= (- arg1P 1) arg3))
(<= (- arg1P 1) arg4))
(<= arg2P arg2))
(<= (+ arg3P 1) arg2))
(<= arg3P arg3))
(<= (+ arg4P 1) arg2))
(<= arg4P arg4))
(> arg1 0))
(> arg2 0))
(> arg3 (- 1)))
(> arg4 (- 1)))
(> arg1P 0))
(> arg2P 0))
(> arg3P (- 1)))
(> arg4P (- 1)))
(<= (+ arg5 2) arg2))
(= arg5 arg5P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f933_0_createTree_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and (and (and (> arg6P (- 1)) (> arg2 1)) (> arg3P (- 1))) (> arg1 0))
(> arg1P 1))
(= 0 arg2P))
(= arg2 arg4P))
(= 2 arg5P))
)

(rule
(f933_0_createTree_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f933_0_createTree_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x31 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (> arg3 arg2)) (> arg3 0)) (> arg4 1))
(> x31 (- 1)))
(< arg5 arg4))
(> arg1 0))
(> arg1P 3))
(<= (+ arg6 2) arg1))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
)

(rule
(f933_0_createTree_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f933_0_createTree_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x40 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (> arg3 arg2)) (> arg3 0)) (> arg4 1))
(> x40 (- 1)))
(< arg5 arg4))
(> arg1 0))
(> arg1P 3))
(<= (+ arg6 2) arg1))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
)

(rule
(f933_0_createTree_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f933_0_createTree_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x49 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (> arg3 arg2)) (> arg3 0)) (> arg4 1))
(> x49 (- 1)))
(< arg5 arg4))
(> arg1 0))
(> arg1P 2))
(<= (+ arg6 2) arg1))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
)

(rule
(f933_0_createTree_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f933_0_createTree_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x58 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (> arg3 arg2)) (> arg3 0)) (> arg4 1))
(> x58 (- 1)))
(< arg5 arg4))
(> arg1 0))
(> arg1P 2))
(<= (+ arg6 2) arg1))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
)

(rule
(f997_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f1288_0_applyTreeChanger_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x59 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 1) arg2) (> x59 1)) (<= arg1P arg4))
(<= (+ arg2P 1) arg2))
(<= arg2P arg3))
(> arg1 0))
(> arg2 0))
(> arg3 (- 1)))
(> arg4 (- 1)))
(> arg1P (- 1)))
(> arg2P (- 1)))
(<= (+ arg5 2) arg2))
)
)

(rule
(f1288_0_applyTreeChanger_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1294_0_applyTreeChanger_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (<= arg1P arg1) (> arg1 (- 1))) (> arg2 (- 1)))
(> arg1P (- 1)))
)

(rule
(f1288_0_applyTreeChanger_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1288_0_applyTreeChanger_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (<= (+ arg1P 1) arg2) (<= (+ arg2P 1) arg2)) (> arg1 (- 1)))
(> arg2 0))
(> arg1P (- 1)))
(> arg2P (- 1)))
)

(rule
(f1294_0_applyTreeChanger_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1288_0_applyTreeChanger_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and (and (<= (+ arg1P 1) arg1) (<= (+ arg2P 1) arg1)) (> arg1 0))
(> arg1P (- 1)))
(> arg2P (- 1)))
)

(rule
(f1288_0_applyTreeChanger_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1294_0_applyTreeChanger_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (<= arg1P arg1) (> arg1 (- 1))) (> arg2 0))
(> arg1P (- 1)))
)

(rule
(f933_0_createTree_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f1076_0_insert_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (> arg3 arg2)) (> arg3 0)) (> arg4 1))
(> arg2P (- 1)))
(< arg5 arg4))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(<= (+ arg6 2) arg1))
(= arg4 arg3P))
(= arg6 arg4P))
)

(rule
(f1076_0_insert_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f1076_0_insert_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg3 1) (< arg4 arg2)) (<= (+ arg1P 2) arg1))
(> arg1 2))
(> arg1P 0))
(<= (+ arg4 2) arg1))
(<= (+ arg4P 4) arg1))
(= arg2 arg2P))
(= arg3 arg3P))
)

(rule
(f1076_0_insert_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f1076_0_insert_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg3 1) (>= arg4 arg2)) (>= arg1 (+ arg1P 2)))
(> arg1 2))
(> arg1P 0))
(>= arg1 (+ arg4 2)))
(>= arg1 (+ arg4P 4)))
(= arg2 arg2P))
(= arg3 arg3P))
)

(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P))

