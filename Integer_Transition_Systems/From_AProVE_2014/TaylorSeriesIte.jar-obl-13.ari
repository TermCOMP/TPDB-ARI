(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f1011_0_power_GT (-> Int Int Int Int Int))
(fun f1048_0_fact_Return (-> Int Int Int Int Int))
(fun f1049_0_fact_Return (-> Int Int Int Int Int))
(fun |f1049_0_fact_Return'| (-> Int Int Int Int Int))
(fun f1113_0_fact_GT (-> Int Int Int Int Int))
(fun f165_0_main_GE (-> Int Int Int Int Int))
(fun |f165_0_main_GE'| (-> Int Int Int Int Int))
(fun f1_0_main_ConstantStackPush (-> Int Int Int Int Int))
(fun f319_0_main_GE (-> Int Int Int Int Int))
(fun f544_0_exp_GT (-> Int Int Int Int Int))
(fun |f544_0_exp_GT'| (-> Int Int Int Int Int))
(fun f765_0_fact_Return (-> Int Int Int Int Int))
(fun f861_0_sin_GT (-> Int Int Int Int Int))
(fun |f861_0_sin_GT'| (-> Int Int Int Int Int))
(fun f862_0_cos_GT (-> Int Int Int Int Int))
(fun |f862_0_cos_GT'| (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_ConstantStackPush arg1 arg2 arg3 arg4)
(f165_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (<= arg1P arg1) (> arg2 (- 1))) (> arg1 0)) (> arg1P 0))
(= 0 arg2P))
(= arg2 arg3P))
)
(rule
(f165_0_main_GE arg1 arg2 arg3 arg4)
(|f165_0_main_GE'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x51 Int) (x54 Int) (x66 Int) (x69 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (= (- arg2 (* 2 x51)) 1) (> arg3 arg2))
(> (- arg2 (* 5 x54)) 0))
(> (- arg2 (* 3 x66)) 0))
(<= x69 arg1))
(> arg1 0))
(> x69 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)
(rule
(|f165_0_main_GE'| arg1 arg2 arg3 arg4)
(f319_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(exists
((x89 Int) (x96 Int) (x97 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (> (- arg2 (* 5 x89)) 0) (> (- arg2 (* 3 x96)) 0))
(= (- arg2 (* 2 x97)) 1))
(> arg3 arg2))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(>= (- arg2 (* 2 x97)) 0))
(< (- arg2 (* 2 x97)) 2))
(< (- arg2 (* 3 x96)) 3))
(< (- arg2 (* 5 x89)) 5))
(= arg2 arg2P))
(= 0 arg3P))
(= arg3 arg4P))
)
)
(rule
(f319_0_main_GE arg1 arg2 arg3 arg4)
(f319_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (>= arg1 arg1P) (< arg3 100)) (> arg1 0)) (> arg1P 0))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
(= arg4 arg4P))
)
(rule
(f319_0_main_GE arg1 arg2 arg3 arg4)
(f165_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (> arg4 (- 1)) (> arg3 99)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(= (+ arg2 1) arg2P))
(= arg4 arg3P))
)
(rule
(f165_0_main_GE arg1 arg2 arg3 arg4)
(|f165_0_main_GE'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x101 Int) (x102 Int) (x103 Int) (x104 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x101)) 1))
(> (- arg2 (* 3 x102)) 0))
(= (- arg2 (* 5 x103)) 0))
(<= x104 arg1))
(> arg1 0))
(> x104 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)
(rule
(|f165_0_main_GE'| arg1 arg2 arg3 arg4)
(f165_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(exists
((x109 Int) (x110 Int) (x111 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> (- arg2 (* 3 x109)) 0) (> arg3 arg2)) (> arg3 0))
(= (- arg2 (* 2 x110)) 1))
(= (- arg2 (* 5 x111)) 0))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(>= (- arg2 (* 2 x110)) 0))
(< (- arg2 (* 2 x110)) 2))
(< (- arg2 (* 3 x109)) 3))
(< (- arg2 (* 5 x111)) 5))
(>= (- arg2 (* 5 x111)) 0))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
)
)
(rule
(f165_0_main_GE arg1 arg2 arg3 arg4)
(|f165_0_main_GE'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x115 Int) (x116 Int))
(and
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x115)) 0))
(<= x116 arg1))
(> arg1 0))
(> x116 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)
(rule
(|f165_0_main_GE'| arg1 arg2 arg3 arg4)
(f165_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(exists
((x121 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x121)) 0))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(< (- arg2 (* 2 x121)) 2))
(>= (- arg2 (* 2 x121)) 0))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
)
)
(rule
(f165_0_main_GE arg1 arg2 arg3 arg4)
(|f165_0_main_GE'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x125 Int) (x126 Int) (x127 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x125)) 1))
(= (- arg2 (* 3 x126)) 0))
(<= x127 arg1))
(> arg1 0))
(> x127 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)
(rule
(|f165_0_main_GE'| arg1 arg2 arg3 arg4)
(f165_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(exists
((x132 Int) (x133 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x132)) 1))
(= (- arg2 (* 3 x133)) 0))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(>= (- arg2 (* 2 x132)) 0))
(< (- arg2 (* 2 x132)) 2))
(< (- arg2 (* 3 x133)) 3))
(>= (- arg2 (* 3 x133)) 0))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
)
)
(rule
(f165_0_main_GE arg1 arg2 arg3 arg4)
(|f165_0_main_GE'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x137 Int))
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x137)) 0))
(> arg1 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)
(rule
(|f165_0_main_GE'| arg1 arg2 arg3 arg4)
(f861_0_sin_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x141 Int))
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x141)) 0))
(> arg1 0))
(< (- arg2 (* 2 x141)) 2))
(>= (- arg2 (* 2 x141)) 0))
(= 3 arg1P))
(= arg2 arg2P))
)
)
(rule
(f1048_0_fact_Return arg1 arg2 arg3 arg4)
(f861_0_sin_GT arg1P arg2P arg3P arg4P)
:guard
(and (= (+ arg2 2) arg1P) (= arg1 arg2P)))
(rule
(f861_0_sin_GT arg1 arg2 arg3 arg4)
(|f861_0_sin_GT'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x37 Int))
(and (and (and (> x37 0) (>= arg2 arg1)) (= arg1 arg1P)) (= arg2 arg2P)))
)
(rule
(|f861_0_sin_GT'| arg1 arg2 arg3 arg4)
(f861_0_sin_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x144 Int) (x145 Int) (x146 Int) (x147 Int) (x148 Int))
(and
(and
(and
(and
(and
(and (and (>= arg2 arg1) (> x144 0)) (>= (- arg1 (* 2 x145)) 0))
(< (- arg1 (* 2 x145)) 2))
(< (- (* x146 x147) (* x144 x148)) x144))
(>= (- (* x146 x147) (* x144 x148)) 0))
(= (+ arg1 2) arg1P))
(= arg2 arg2P))
)
)
(rule
(f165_0_main_GE arg1 arg2 arg3 arg4)
(|f165_0_main_GE'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x152 Int) (x153 Int))
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x152)) 1))
(= (- arg2 (* 3 x153)) 0))
(> arg1 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)
(rule
(|f165_0_main_GE'| arg1 arg2 arg3 arg4)
(f862_0_cos_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x157 Int) (x158 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x157)) 1))
(= (- arg2 (* 3 x158)) 0))
(> arg1 0))
(>= (- arg2 (* 2 x157)) 0))
(< (- arg2 (* 2 x157)) 2))
(< (- arg2 (* 3 x158)) 3))
(>= (- arg2 (* 3 x158)) 0))
(= 2 arg1P))
(= arg2 arg2P))
)
)
(rule
(f1049_0_fact_Return arg1 arg2 arg3 arg4)
(|f1049_0_fact_Return'| arg1P arg2P arg3P arg4P)
:guard
(and (= arg1 arg1P) (= arg2 arg2P)))
(rule
(|f1049_0_fact_Return'| arg1 arg2 arg3 arg4)
(f862_0_cos_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x161 Int) (x162 Int) (x163 Int))
(and
(and
(and (> x161 (- x162 (* x161 x163))) (>= (- x162 (* x161 x163)) 0))
(= (+ arg2 2) arg1P))
(= arg1 arg2P))
)
)
(rule
(f862_0_cos_GT arg1 arg2 arg3 arg4)
(|f862_0_cos_GT'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x166 Int))
(and
(and
(and
(and (and (and (> arg1 1) (> x166 0)) (> arg2 1)) (>= arg2 arg1))
(> arg1 x166))
(= arg1 arg1P))
(= arg2 arg2P))
)
)
(rule
(|f862_0_cos_GT'| arg1 arg2 arg3 arg4)
(f862_0_cos_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x169 Int) (x170 Int) (x171 Int) (x172 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg1 1) (> x169 0)) (> arg2 1)) (> arg1 x169))
(>= arg2 arg1))
(>= (- arg1 (* 2 x169)) 0))
(< (- arg1 (* 2 x169)) 2))
(> x170 (- x171 (* x170 x172))))
(>= (- x171 (* x170 x172)) 0))
(= (+ arg1 2) arg1P))
(= arg2 arg2P))
)
)
(rule
(f165_0_main_GE arg1 arg2 arg3 arg4)
(|f165_0_main_GE'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x176 Int) (x177 Int) (x178 Int))
(and
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg3 0)) (= (- arg2 (* 2 x176)) 1))
(> (- arg2 (* 3 x177)) 0))
(= (- arg2 (* 5 x178)) 0))
(> arg1 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)
(rule
(|f165_0_main_GE'| arg1 arg2 arg3 arg4)
(f544_0_exp_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x182 Int) (x183 Int) (x184 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> (- arg2 (* 3 x182)) 0) (> arg3 arg2)) (> arg3 0))
(= (- arg2 (* 2 x183)) 1))
(= (- arg2 (* 5 x184)) 0))
(> arg1 0))
(>= (- arg2 (* 2 x183)) 0))
(< (- arg2 (* 2 x183)) 2))
(< (- arg2 (* 3 x182)) 3))
(< (- arg2 (* 5 x184)) 5))
(>= (- arg2 (* 5 x184)) 0))
(= arg3 arg1P))
(= 0 arg2P))
(= arg2 arg3P))
)
)
(rule
(f765_0_fact_Return arg1 arg2 arg3 arg4)
(f544_0_exp_GT arg1P arg2P arg3P arg4P)
:guard
(and (and (= arg1 arg1P) (= (+ arg3 1) arg2P)) (= arg2 arg3P)))
(rule
(f544_0_exp_GT arg1 arg2 arg3 arg4)
(|f544_0_exp_GT'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x64 Int))
(and
(and
(and
(and (and (and (> arg1 0) (> arg3 (- 1))) (>= arg3 arg2)) (> x64 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)
(rule
(|f544_0_exp_GT'| arg1 arg2 arg3 arg4)
(f544_0_exp_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x188 Int) (x189 Int) (x190 Int))
(and
(and
(and
(and
(and
(and (and (and (> arg1 0) (> arg3 (- 1))) (> x188 0)) (>= arg3 arg2))
(< (- x189 (* x188 x190)) x188))
(>= (- x189 (* x188 x190)) 0))
(= arg1 arg1P))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
)
)
(rule
(f861_0_sin_GT arg1 arg2 arg3 arg4)
(|f861_0_sin_GT'| arg1P arg2P arg3P arg4P)
:guard
(and (and (>= arg2 arg1) (= arg1 arg1P)) (= arg2 arg2P)))
(rule
(|f861_0_sin_GT'| arg1 arg2 arg3 arg4)
(f1011_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (>= arg2 arg1) (< (- arg1 (* 2 arg2P)) 2))
(>= (- arg1 (* 2 arg2P)) 0))
(= 1 arg1P))
)
(rule
(f861_0_sin_GT arg1 arg2 arg3 arg4)
(|f861_0_sin_GT'| arg1P arg2P arg3P arg4P)
:guard
(and (and (>= arg2 arg1) (= arg1 arg1P)) (= arg2 arg2P)))
(rule
(|f861_0_sin_GT'| arg1 arg2 arg3 arg4)
(f1011_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x196 Int))
(and
(and
(and
(and (>= arg2 arg1) (< (- arg1 (* 2 x196)) 2))
(>= (- arg1 (* 2 x196)) 0))
(= 1 arg1P))
(= arg1 arg2P))
)
)
(rule
(f862_0_cos_GT arg1 arg2 arg3 arg4)
(|f862_0_cos_GT'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x199 Int))
(and
(and
(and
(and (and (and (> arg1 1) (> x199 0)) (> arg2 1)) (>= arg2 arg1))
(> arg1 x199))
(= arg1 arg1P))
(= arg2 arg2P))
)
)
(rule
(|f862_0_cos_GT'| arg1 arg2 arg3 arg4)
(f1011_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (and (> arg1 1) (> arg2P 0)) (> arg2 1)) (> arg1 arg2P))
(>= arg2 arg1))
(< (- arg1 (* 2 arg2P)) 2))
(>= (- arg1 (* 2 arg2P)) 0))
(= 1 arg1P))
)
(rule
(f862_0_cos_GT arg1 arg2 arg3 arg4)
(|f862_0_cos_GT'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x205 Int))
(and
(and
(and
(and (and (and (> arg1 1) (> x205 0)) (> arg2 1)) (>= arg2 arg1))
(> arg1 x205))
(= arg1 arg1P))
(= arg2 arg2P))
)
)
(rule
(|f862_0_cos_GT'| arg1 arg2 arg3 arg4)
(f1011_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x208 Int))
(and
(and
(and
(and
(and
(and (and (and (> arg1 1) (> x208 0)) (> arg2 1)) (> arg1 x208))
(>= arg2 arg1))
(< (- arg1 (* 2 x208)) 2))
(>= (- arg1 (* 2 x208)) 0))
(= 1 arg1P))
(= arg1 arg2P))
)
)
(rule
(f544_0_exp_GT arg1 arg2 arg3 arg4)
(f1011_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (> arg1 0) (>= arg3 arg2)) (> arg3 (- 1))) (= 1 arg1P))
(= arg2 arg2P))
)
(rule
(f1011_0_power_GT arg1 arg2 arg3 arg4)
(f1011_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and (and (<= arg1 arg2) (= (+ arg1 1) arg1P)) (= arg2 arg2P)))
(rule
(f861_0_sin_GT arg1 arg2 arg3 arg4)
(|f861_0_sin_GT'| arg1P arg2P arg3P arg4P)
:guard
(and (and (>= arg2 arg1) (= arg1 arg1P)) (= arg2 arg2P)))
(rule
(|f861_0_sin_GT'| arg1 arg2 arg3 arg4)
(f1113_0_fact_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x211 Int))
(and
(and
(and
(and
(and
(and (>= arg2 arg1) (< (- arg1 (* 2 x211)) 2))
(>= (- arg1 (* 2 x211)) 0))
(= 1 arg1P))
(= 1 arg2P))
(= 1 arg3P))
(= arg1 arg4P))
)
)
(rule
(f862_0_cos_GT arg1 arg2 arg3 arg4)
(|f862_0_cos_GT'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x214 Int))
(and
(and
(and
(and (and (and (> arg1 1) (> x214 0)) (> arg2 1)) (>= arg2 arg1))
(> arg1 x214))
(= arg1 arg1P))
(= arg2 arg2P))
)
)
(rule
(|f862_0_cos_GT'| arg1 arg2 arg3 arg4)
(f1113_0_fact_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x217 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg1 1) (> x217 0)) (> arg2 1)) (> arg1 x217))
(>= arg2 arg1))
(< (- arg1 (* 2 x217)) 2))
(>= (- arg1 (* 2 x217)) 0))
(= 1 arg1P))
(= 1 arg2P))
(= 1 arg3P))
(= arg1 arg4P))
)
)
(rule
(f544_0_exp_GT arg1 arg2 arg3 arg4)
(f1113_0_fact_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (> arg1 0) (>= arg3 arg2)) (> arg3 (- 1))) (= 1 arg1P))
(= 1 arg2P))
(= 1 arg3P))
(= arg2 arg4P))
)
(rule
(f1113_0_fact_GT arg1 arg2 arg3 arg4)
(f1113_0_fact_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (and (<= arg2 arg4) (> arg1 0)) (> arg2 0)) (= arg2 arg3))
(= (* arg1 arg2) arg1P))
(= (+ arg2 1) arg2P))
(= (+ arg2 1) arg3P))
(= arg4 arg4P))
)
(rule
(__init arg1 arg2 arg3 arg4)
(f1_0_main_ConstantStackPush arg1P arg2P arg3P arg4P))
