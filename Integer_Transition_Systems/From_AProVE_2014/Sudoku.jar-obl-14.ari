(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int))
(fun f10649_0_resolve_aux_GE (-> Int Int Int Int Int Int Int))
(fun f10650_0_resolve_aux_GE (-> Int Int Int Int Int Int Int))
(fun f1158_0__init__GE (-> Int Int Int Int Int Int Int))
(fun f1907_0_resolve_GE (-> Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int))
(fun f2103_0_resolve_GE (-> Int Int Int Int Int Int Int))
(fun f7719_0_resolve_aux_LE (-> Int Int Int Int Int Int Int))
(fun f8234_0_resolve_aux_GE (-> Int Int Int Int Int Int Int))
(fun f8384_0_possibleValues_GE (-> Int Int Int Int Int Int Int))
(fun f8467_0_resolve_aux_GE (-> Int Int Int Int Int Int Int))
(fun f8739_0_possibleValues_GE (-> Int Int Int Int Int Int Int))
(fun f913_0__init__GE (-> Int Int Int Int Int Int Int))
(fun f9214_0_possibleValues_GE (-> Int Int Int Int Int Int Int))
(fun |f9214_0_possibleValues_GE'| (-> Int Int Int Int Int Int Int))
(fun f9340_0_possibleValues_GE (-> Int Int Int Int Int Int Int))
(fun f9691_0_possibleValues_GE (-> Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f913_0__init__GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and (and (and (<= arg1P arg1) (> arg2 1)) (> arg1 0)) (> arg1P 0))
(= 0 arg2P))
(= arg2 arg3P))
)

(rule
(f913_0__init__GE arg1 arg2 arg3 arg4 arg5 arg6)
(f1158_0__init__GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (< arg2 9)) (> arg1 0)) (> arg1P 0))
(= arg2 arg2P))
(= 0 arg3P))
(= arg3 arg4P))
)

(rule
(f1158_0__init__GE arg1 arg2 arg3 arg4 arg5 arg6)
(f913_0__init__GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and (and (and (>= arg1 arg1P) (> arg3 8)) (> arg1 0)) (> arg1P 0))
(= (+ arg2 1) arg2P))
(= arg4 arg3P))
)

(rule
(f1158_0__init__GE arg1 arg2 arg3 arg4 arg5 arg6)
(f1158_0__init__GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x17 Int) (x18 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< arg2 9) (< arg3 9)) (> x17 (- 1))) (> x17 arg3))
(> x18 arg3))
(> x18 (- 1)))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
(= arg4 arg4P))
)
)

(rule
(f913_0__init__GE arg1 arg2 arg3 arg4 arg5 arg6)
(f1907_0_resolve_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg2 8)) (> arg1 0)) (> arg1P 0))
(= 0 arg2P))
(= 0 arg3P))
(= 0 arg4P))
(= arg3 arg5P))
)

(rule
(f1907_0_resolve_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f7719_0_resolve_aux_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (and (> arg3 8) (> arg5 1)) (> arg1 0)) (= arg3 arg4))
(= arg2 arg1P))
)

(rule
(f1907_0_resolve_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f2103_0_resolve_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (< arg3 9)) (> arg1 0)) (> arg1P 0))
(= arg3 arg4))
(= arg2 arg2P))
(= arg3 arg3P))
(= 0 arg4P))
(= arg5 arg5P))
)

(rule
(f2103_0_resolve_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f1907_0_resolve_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg4 8)) (> arg1 0)) (> arg1P 0))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
(= (+ arg3 1) arg4P))
(= arg5 arg5P))
)

(rule
(f2103_0_resolve_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f2103_0_resolve_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x44 Int) (x45 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< arg3 9) (< arg4 9)) (> x44 (- 1))) (< x45 0))
(> x44 arg4))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
(= arg5 arg5P))
)
)

(rule
(f2103_0_resolve_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f2103_0_resolve_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x195 Int) (x196 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< arg3 9) (< arg4 9)) (> x195 (- 1))) (> x196 0))
(> x195 arg4))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
(= arg5 arg5P))
)
)

(rule
(f2103_0_resolve_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f2103_0_resolve_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x52 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< arg3 9) (< arg4 9)) (> x52 arg4)) (> x52 (- 1)))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
(= arg5 arg5P))
)
)

(rule
(f7719_0_resolve_aux_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f8234_0_resolve_aux_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and (and (and (> arg1 0) (= arg1 arg1P)) (= 0 arg2P)) (= 0 arg3P)))

(rule
(f8234_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f8467_0_resolve_aux_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and (and (and (< arg3 9) (= arg1 arg1P)) (= arg3 arg2P)) (= 0 arg3P)))

(rule
(f8467_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f8234_0_resolve_aux_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (> arg3 8) (= arg1 arg1P)) (= arg3 arg2P))
(= (+ arg2 1) arg3P))
)

(rule
(f8467_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f8467_0_resolve_aux_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x63 Int) (x64 Int) (x65 Int))
(and
(and
(and
(and
(and
(and (and (and (> x63 (- 1)) (< arg3 9)) (> x63 arg2)) (> x64 (- 1)))
(> x64 arg3))
(< x65 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
)
)

(rule
(f8467_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f8467_0_resolve_aux_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x200 Int) (x201 Int) (x202 Int))
(and
(and
(and
(and
(and
(and
(and (and (> x200 (- 1)) (< arg3 9)) (> x200 arg2))
(> x201 (- 1)))
(> x201 arg3))
(> x202 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
)
)

(rule
(f8234_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f10649_0_resolve_aux_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and (and (and (> arg1 0) (> arg3 8)) (= arg1 arg1P)) (= arg3 arg2P))
(= arg2 arg3P))
(= 0 arg4P))
)

(rule
(f8467_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f10650_0_resolve_aux_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x72 Int) (x73 Int))
(and
(and
(and
(and
(and
(and
(and (and (and (> x72 (- 1)) (< arg3 9)) (> x72 arg2)) (> x73 (- 1)))
(> x73 arg3))
(> arg1 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= 0 arg4P))
)
)

(rule
(f10649_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f10649_0_resolve_aux_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (and (< arg4 9) (= arg1 arg1P)) (= arg2 arg2P)) (= arg3 arg3P))
(= (+ arg4 1) arg4P))
)

(rule
(f10650_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f10650_0_resolve_aux_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (and (< arg4 9) (= arg1 arg1P)) (= arg2 arg2P)) (= arg3 arg3P))
(= (+ arg4 1) arg4P))
)

(rule
(f10649_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f7719_0_resolve_aux_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x86 Int) (x87 Int) (x88 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< x86 0) (< arg4 9)) (> x87 (- 1))) (> x87 arg2))
(> arg4 (- 1)))
(> x88 (- 1)))
(> x88 arg3))
(> arg2 1))
(< (- arg1 1) arg1))
(> arg1 0))
(= (- arg1 1) arg1P))
)
)

(rule
(f10649_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f7719_0_resolve_aux_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x207 Int) (x208 Int) (x209 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> x207 0) (< arg4 9)) (> x208 (- 1))) (> x208 arg2))
(> arg4 (- 1)))
(> x209 (- 1)))
(> x209 arg3))
(> arg2 1))
(< (- arg1 1) arg1))
(> arg1 0))
(= (- arg1 1) arg1P))
)
)

(rule
(f10650_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f7719_0_resolve_aux_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x93 Int) (x94 Int) (x95 Int))
(and
(and
(and
(and
(and
(and
(and (and (and (< x93 0) (< arg4 9)) (> x94 (- 1))) (> x94 arg2))
(> arg4 (- 1)))
(> x95 (- 1)))
(> x95 arg3))
(< (- arg1 1) arg1))
(> arg1 0))
(= (- arg1 1) arg1P))
)
)

(rule
(f10650_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f7719_0_resolve_aux_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x214 Int) (x215 Int) (x216 Int))
(and
(and
(and
(and
(and
(and
(and (and (and (> x214 0) (< arg4 9)) (> x215 (- 1))) (> x215 arg2))
(> arg4 (- 1)))
(> x216 (- 1)))
(> x216 arg3))
(< (- arg1 1) arg1))
(> arg1 0))
(= (- arg1 1) arg1P))
)
)

(rule
(f10649_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f10649_0_resolve_aux_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x100 Int) (x101 Int) (x102 Int) (x103 Int) (x104 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< x100 0) (< arg4 9)) (> x101 (- 1))) (< arg2 x101))
(> arg4 (- 1)))
(> x102 (- 1)))
(< arg3 x102))
(> arg2 1))
(> arg1 0))
(< (- arg1 1) arg1))
(> x103 (- 1)))
(< arg2 x103))
(> x104 (- 1)))
(< arg3 x104))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
)
)

(rule
(f10649_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f10649_0_resolve_aux_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x221 Int) (x222 Int) (x223 Int) (x224 Int) (x225 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> x221 0) (< arg4 9)) (> x222 (- 1))) (< arg2 x222))
(> arg4 (- 1)))
(> x223 (- 1)))
(< arg3 x223))
(> arg2 1))
(> arg1 0))
(< (- arg1 1) arg1))
(> x224 (- 1)))
(< arg2 x224))
(> x225 (- 1)))
(< arg3 x225))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
)
)

(rule
(f10650_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f10650_0_resolve_aux_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x109 Int) (x110 Int) (x111 Int) (x112 Int) (x113 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< x109 0) (< arg4 9)) (> x110 (- 1))) (> x110 arg2))
(> arg4 (- 1)))
(> x111 (- 1)))
(> x111 arg3))
(> arg1 0))
(< (- arg1 1) arg1))
(> x112 (- 1)))
(> x112 arg2))
(> x113 (- 1)))
(> x113 arg3))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
)
)

(rule
(f10650_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f10650_0_resolve_aux_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x230 Int) (x231 Int) (x232 Int) (x233 Int) (x234 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> x230 0) (< arg4 9)) (> x231 (- 1))) (> x231 arg2))
(> arg4 (- 1)))
(> x232 (- 1)))
(> x232 arg3))
(> arg1 0))
(< (- arg1 1) arg1))
(> x233 (- 1)))
(> x233 arg2))
(> x234 (- 1)))
(> x234 arg3))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
)
)

(rule
(f8234_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f8384_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (and (> arg1 0) (> arg3 8)) (= arg3 arg1P)) (= arg2 arg2P))
(= 0 arg3P))
)

(rule
(f8467_0_resolve_aux_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f8384_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x120 Int) (x121 Int))
(and
(and
(and
(and
(and
(and
(and (and (> x120 (- 1)) (< arg3 9)) (> x120 arg2))
(> x121 (- 1)))
(> x121 arg3))
(> arg1 0))
(= arg2 arg1P))
(= arg3 arg2P))
(= 0 arg3P))
)
)

(rule
(f8384_0_possibleValues_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f8384_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (< arg3 9) (= arg1 arg1P)) (= arg2 arg2P))
(= (+ arg3 1) arg3P))
)

(rule
(f8384_0_possibleValues_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f8739_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and (and (and (> arg3 8) (= arg1 arg1P)) (= arg2 arg2P)) (= 0 arg3P)))

(rule
(f8739_0_possibleValues_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f8739_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x131 Int) (x132 Int))
(and
(and
(and
(and
(and
(and (and (> x131 (- 1)) (< arg3 9)) (> x131 arg1))
(> x132 (- 1)))
(> x132 arg3))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
)
)

(rule
(f8739_0_possibleValues_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f8739_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x136 Int) (x137 Int) (x138 Int) (x139 Int) (x140 Int) (x141 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> x136 (- 1)) (< arg3 9)) (> x136 arg1))
(> x137 (- 1)))
(> x137 arg3))
(< x138 0))
(> x139 (- 1)))
(> x139 arg1))
(> x140 (- 1)))
(> x140 arg3))
(< x141 10))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
)
)

(rule
(f8739_0_possibleValues_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f8739_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x238 Int) (x239 Int) (x240 Int) (x241 Int) (x242 Int) (x243 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> x238 (- 1)) (< arg3 9)) (> x238 arg1))
(> x239 (- 1)))
(> x239 arg3))
(> x240 0))
(> x241 (- 1)))
(> x241 arg1))
(> x242 (- 1)))
(> x242 arg3))
(< x243 10))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
)
)

(rule
(f8739_0_possibleValues_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f9214_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and (and (and (> arg3 8) (= arg1 arg1P)) (= arg2 arg2P)) (= 0 arg3P)))

(rule
(f9214_0_possibleValues_GE arg1 arg2 arg3 arg4 arg5 arg6)
(|f9214_0_possibleValues_GE'| arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x247 Int) (x248 Int))
(and
(and
(and
(and
(and
(and (and (>= (- arg1 (* 3 x247)) 0) (> arg3 8)) (> arg1 (- 1)))
(>= (- arg2 (* 3 x248)) 0))
(> arg2 (- 1)))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)

(rule
(|f9214_0_possibleValues_GE'| arg1 arg2 arg3 arg4 arg5 arg6)
(f9340_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x257 Int) (x258 Int) (x253 Int) (x254 Int) (x255 Int) (x256 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= (- arg1 (* 3 x257)) 0) (> arg3 8)) (> arg1 (- 1)))
(> arg2 (- 1)))
(>= (- arg2 (* 3 x258)) 0))
(< (- arg1 (* 3 x257)) 3))
(< (- arg2 (* 3 x258)) 3))
(>= (- arg2 (* 3 x253)) 0))
(< (- arg2 (* 3 x253)) 3))
(>= (- arg2 (* 3 x254)) 0))
(< (- arg2 (* 3 x254)) 3))
(>= (- arg1 (* 3 x255)) 0))
(< (- arg1 (* 3 x255)) 3))
(< (- arg1 (* 3 x256)) 3))
(>= (- arg1 (* 3 x256)) 0))
(= (- arg2 (- arg2 (* 3 x253))) arg1P))
(= (+ (- arg2 (- arg2 (* 3 x254))) 3) arg2P))
(= (- arg1 (- arg1 (* 3 x255))) arg3P))
(= (+ (- arg1 (- arg1 (* 3 x256))) 3) arg4P))
)
)

(rule
(f9214_0_possibleValues_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f9214_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x151 Int) (x152 Int))
(and
(and
(and
(and
(and
(and (and (> x151 (- 1)) (< arg3 9)) (> x151 arg3))
(> x152 (- 1)))
(> x152 arg2))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
)
)

(rule
(f9214_0_possibleValues_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f9214_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x156 Int) (x157 Int) (x158 Int) (x159 Int) (x160 Int) (x161 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> x156 (- 1)) (< arg3 9)) (> x156 arg3))
(> x157 (- 1)))
(> x157 arg2))
(< x158 0))
(> x159 (- 1)))
(> x159 arg3))
(> x160 (- 1)))
(> x160 arg2))
(< x161 10))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
)
)

(rule
(f9214_0_possibleValues_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f9214_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x262 Int) (x263 Int) (x264 Int) (x265 Int) (x266 Int) (x267 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> x262 (- 1)) (< arg3 9)) (> x262 arg3))
(> x263 (- 1)))
(> x263 arg2))
(> x264 0))
(> x265 (- 1)))
(> x265 arg3))
(> x266 (- 1)))
(> x266 arg2))
(< x267 10))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
)
)

(rule
(f9340_0_possibleValues_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f9691_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and (and (> arg4 arg3) (= arg1 arg1P)) (= arg4 arg2P))
(= arg3 arg3P))
(= arg1 arg4P))
(= arg1 arg5P))
(= arg2 arg6P))
)

(rule
(f9691_0_possibleValues_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f9340_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (<= arg6 arg4) (= arg4 arg5)) (= arg1 arg1P))
(= arg6 arg2P))
(= (+ arg3 1) arg3P))
(= arg2 arg4P))
)

(rule
(f9691_0_possibleValues_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f9691_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x176 Int) (x177 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> x176 (- 1)) (> arg6 arg4)) (> x176 arg3))
(> x177 (- 1)))
(> x177 arg4))
(= arg4 arg5))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
(= (+ arg4 1) arg5P))
(= arg6 arg6P))
)
)

(rule
(f9691_0_possibleValues_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f9691_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x183 Int) (x184 Int) (x185 Int) (x186 Int) (x187 Int) (x188 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> x183 (- 1)) (> arg6 arg4)) (> x183 arg3))
(> x184 (- 1)))
(> x184 arg4))
(< x185 0))
(> x186 (- 1)))
(> x186 arg3))
(> x187 (- 1)))
(> x187 arg4))
(< x188 10))
(= arg4 arg5))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
(= (+ arg4 1) arg5P))
(= arg6 arg6P))
)
)

(rule
(f9691_0_possibleValues_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f9691_0_possibleValues_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x274 Int) (x275 Int) (x276 Int) (x277 Int) (x278 Int) (x279 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> x274 (- 1)) (> arg6 arg4)) (> x274 arg3))
(> x275 (- 1)))
(> x275 arg4))
(> x276 0))
(> x277 (- 1)))
(> x277 arg3))
(> x278 (- 1)))
(> x278 arg4))
(< x279 10))
(= arg4 arg5))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
(= (+ arg4 1) arg5P))
(= arg6 arg6P))
)
)

(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P))

