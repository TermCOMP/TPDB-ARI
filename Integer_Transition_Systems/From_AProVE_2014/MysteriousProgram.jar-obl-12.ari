(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int))
(fun f1202_0_mysteriousRecursive_ArrayLength (-> Int Int Int Int Int Int))
(fun f1372_0_display_GE (-> Int Int Int Int Int Int))
(fun f1376_0_display_GE (-> Int Int Int Int Int Int))
(fun f167_0_init_GE (-> Int Int Int Int Int Int))
(fun f1763_0_mysteriousRecursive_GE (-> Int Int Int Int Int Int))
(fun f1764_0_mysteriousRecursive_GE (-> Int Int Int Int Int Int))
(fun f1_0_main_ConstantStackPush (-> Int Int Int Int Int Int))
(fun f2030_0_swap3_ArrayAccess (-> Int Int Int Int Int Int))
(fun f2034_0_swap3_ArrayAccess (-> Int Int Int Int Int Int))
(fun f312_0_display_GE (-> Int Int Int Int Int Int))
(fun f575_0_mysterious_GE (-> Int Int Int Int Int Int))
(fun f92_0_main_GE (-> Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_ConstantStackPush arg1 arg2 arg3 arg4 arg5)
(f92_0_main_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg2 (- 1))) (> arg1 0)) (> arg1P 0))
(= 2 arg2P))
(= 0 arg3P))
(= arg2 arg4P))
)
(rule
(f92_0_main_GE arg1 arg2 arg3 arg4 arg5)
(f92_0_main_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> arg2 1)) (> arg4 arg3))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= (* 2 arg2) arg2P))
(= (+ arg3 1) arg3P))
(= arg4 arg4P))
)
(rule
(f92_0_main_GE arg1 arg2 arg3 arg4 arg5)
(f167_0_init_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and (and (<= arg4 arg3) (> arg2 (- 1))) (>= arg1 arg1P))
(> arg1 0))
(> arg1P 0))
(= 0 arg2P))
(= arg2 arg3P))
)
(rule
(f167_0_init_GE arg1 arg2 arg3 arg4 arg5)
(f167_0_init_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg2 (- 1))) (> arg3 (- 1)))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
)
(rule
(f167_0_init_GE arg1 arg2 arg3 arg4 arg5)
(f575_0_mysterious_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and (and (< (- arg3 1) arg3) (> arg3 0)) (<= arg3 arg2))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= 0 arg2P))
(= arg3 arg3P))
)
(rule
(f575_0_mysterious_GE arg1 arg2 arg3 arg4 arg5)
(f575_0_mysterious_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and (and (and (> arg3 arg2) (> arg3 1)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
)
(rule
(f575_0_mysterious_GE arg1 arg2 arg3 arg4 arg5)
(f312_0_display_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and (and (and (> arg3 arg2) (> arg3 1)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(= 0 arg2P))
(= arg3 arg3P))
)
(rule
(f312_0_display_GE arg1 arg2 arg3 arg4 arg5)
(f312_0_display_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and (and (> arg3 (- 1)) (> arg3 arg2)) (<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
)
(rule
(f575_0_mysterious_GE arg1 arg2 arg3 arg4 arg5)
(f1202_0_mysteriousRecursive_ArrayLength arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 1) (<= arg3 arg2)) (<= arg1P arg1))
(<= arg2P arg1))
(<= arg4P arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P 0))
(> arg4P 0))
(= 0 arg3P))
(= arg3 arg5P))
)
(rule
(f1202_0_mysteriousRecursive_ArrayLength arg1 arg2 arg3 arg4 arg5)
(f1372_0_display_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg2P arg1) (> arg5 0)) (<= arg2P arg2))
(<= arg2P arg4))
(> arg1 0))
(> arg2 0))
(> arg4 0))
(> arg2P 0))
(= arg3 (- arg5 1)))
(= (- arg5 1) arg1P))
(= 0 arg3P))
(= arg5 arg4P))
)
(rule
(f1202_0_mysteriousRecursive_ArrayLength arg1 arg2 arg3 arg4 arg5)
(f1376_0_display_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg2P arg1) (> arg5 0)) (<= arg2P arg2))
(<= arg2P arg4))
(> arg1 0))
(> arg2 0))
(> arg4 0))
(> arg2P 0))
(= arg3 (- arg5 1)))
(= (- arg5 1) arg1P))
(= 0 arg3P))
(= arg5 arg4P))
)
(rule
(f1372_0_display_GE arg1 arg2 arg3 arg4 arg5)
(f1372_0_display_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> arg4 arg3)) (<= arg2P arg2))
(> arg2 0))
(> arg2P 0))
(= arg1 arg1P))
(= (+ arg3 1) arg3P))
(= arg4 arg4P))
)
(rule
(f1376_0_display_GE arg1 arg2 arg3 arg4 arg5)
(f1376_0_display_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> arg4 arg3)) (<= arg2P arg2))
(> arg2 0))
(> arg2P 0))
(= arg1 arg1P))
(= (+ arg3 1) arg3P))
(= arg4 arg4P))
)
(rule
(f1202_0_mysteriousRecursive_ArrayLength arg1 arg2 arg3 arg4 arg5)
(f1763_0_mysteriousRecursive_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> (- arg5 1) arg3) (> arg5 0)) (<= arg1P arg1))
(<= arg1P arg2))
(<= arg1P arg4))
(> arg1 0))
(> arg2 0))
(> arg4 0))
(> arg1P 0))
(= arg3 arg2P))
(= arg3 arg3P))
(= arg3 arg4P))
(= arg5 arg5P))
)
(rule
(f1202_0_mysteriousRecursive_ArrayLength arg1 arg2 arg3 arg4 arg5)
(f1763_0_mysteriousRecursive_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (< (- arg5 1) arg3) (> arg5 0)) (<= arg1P arg1))
(<= arg1P arg2))
(<= arg1P arg4))
(> arg1 0))
(> arg2 0))
(> arg4 0))
(> arg1P 0))
(= arg3 arg2P))
(= arg3 arg3P))
(= arg3 arg4P))
(= arg5 arg5P))
)
(rule
(f1372_0_display_GE arg1 arg2 arg3 arg4 arg5)
(f1763_0_mysteriousRecursive_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (<= arg4 arg3)) (<= arg1P arg2))
(> arg2 0))
(> arg1P 0))
(= arg1 arg2P))
(= arg1 arg3P))
(= arg1 arg4P))
(= arg4 arg5P))
)
(rule
(f1202_0_mysteriousRecursive_ArrayLength arg1 arg2 arg3 arg4 arg5)
(f1764_0_mysteriousRecursive_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> (- arg5 1) arg3) (> arg5 0)) (<= arg1P arg1))
(<= arg1P arg2))
(<= arg1P arg4))
(> arg1 0))
(> arg2 0))
(> arg4 0))
(> arg1P 0))
(= arg3 arg2P))
(= arg3 arg3P))
(= arg3 arg4P))
(= arg5 arg5P))
)
(rule
(f1202_0_mysteriousRecursive_ArrayLength arg1 arg2 arg3 arg4 arg5)
(f1764_0_mysteriousRecursive_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (< (- arg5 1) arg3) (> arg5 0)) (<= arg1P arg1))
(<= arg1P arg2))
(<= arg1P arg4))
(> arg1 0))
(> arg2 0))
(> arg4 0))
(> arg1P 0))
(= arg3 arg2P))
(= arg3 arg3P))
(= arg3 arg4P))
(= arg5 arg5P))
)
(rule
(f1376_0_display_GE arg1 arg2 arg3 arg4 arg5)
(f1764_0_mysteriousRecursive_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (<= arg4 arg3)) (<= arg1P arg2))
(> arg2 0))
(> arg1P 0))
(= arg1 arg2P))
(= arg1 arg3P))
(= arg1 arg4P))
(= arg4 arg5P))
)
(rule
(f1763_0_mysteriousRecursive_GE arg1 arg2 arg3 arg4 arg5)
(f1202_0_mysteriousRecursive_ArrayLength arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 arg2) (> arg5 1)) (> arg5 arg3)) (> arg2 (- 1)))
(> (+ arg2 1) arg2))
(<= arg1P arg1))
(<= arg2P arg1))
(<= arg4P arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P 0))
(> arg4P 0))
(= arg3 arg4))
(= (+ arg2 1) arg3P))
(= arg5 arg5P))
)
(rule
(f1764_0_mysteriousRecursive_GE arg1 arg2 arg3 arg4 arg5)
(f1202_0_mysteriousRecursive_ArrayLength arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 arg2) (> arg5 1)) (> arg5 arg3)) (> arg2 (- 1)))
(> (+ arg2 1) arg2))
(<= arg1P arg1))
(<= arg2P arg1))
(<= arg4P arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P 0))
(> arg4P 0))
(= arg3 arg4))
(= (+ arg2 1) arg3P))
(= arg5 arg5P))
)
(rule
(f1763_0_mysteriousRecursive_GE arg1 arg2 arg3 arg4 arg5)
(f2030_0_swap3_ArrayAccess arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 arg2) (> arg5 1)) (> arg5 arg3)) (> arg2 (- 1)))
(> (+ arg2 1) arg2))
(<= arg2P arg1))
(> arg1 0))
(> arg2P 0))
(= arg3 arg4))
(= arg3 arg1P))
(= arg2 arg3P))
(= arg5 arg4P))
)
(rule
(f1763_0_mysteriousRecursive_GE arg1 arg2 arg3 arg4 arg5)
(f2030_0_swap3_ArrayAccess arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 arg2) (> arg5 1)) (> arg5 arg3)) (> arg2 (- 1)))
(> (+ arg2 1) arg2))
(<= arg2P arg1))
(> arg1 0))
(> arg2P 0))
(= arg3 arg4))
(= arg3 arg1P))
(= arg2 arg3P))
)
(rule
(f1764_0_mysteriousRecursive_GE arg1 arg2 arg3 arg4 arg5)
(f2034_0_swap3_ArrayAccess arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 arg2) (> arg5 1)) (> arg5 arg3)) (> arg2 (- 1)))
(> (+ arg2 1) arg2))
(<= arg2P arg1))
(> arg1 0))
(> arg2P 0))
(= arg3 arg4))
(= arg3 arg1P))
(= arg2 arg3P))
(= arg5 arg4P))
)
(rule
(f1764_0_mysteriousRecursive_GE arg1 arg2 arg3 arg4 arg5)
(f2034_0_swap3_ArrayAccess arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 arg2) (> arg5 1)) (> arg5 arg3)) (> arg2 (- 1)))
(> (+ arg2 1) arg2))
(<= arg2P arg1))
(> arg1 0))
(> arg2P 0))
(= arg3 arg4))
(= arg3 arg1P))
(= arg2 arg3P))
)
(rule
(f2030_0_swap3_ArrayAccess arg1 arg2 arg3 arg4 arg5)
(f1763_0_mysteriousRecursive_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 arg3) (> arg4 arg1)) (> arg4 (- 1)))
(<= arg1P arg2))
(> arg2 0))
(> arg1P 0))
(= arg3 arg2P))
(= (+ arg1 1) arg3P))
(= (+ arg1 1) arg4P))
(= arg4 arg5P))
)
(rule
(f2034_0_swap3_ArrayAccess arg1 arg2 arg3 arg4 arg5)
(f1764_0_mysteriousRecursive_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 arg3) (> arg4 arg1)) (> arg4 (- 1)))
(<= arg1P arg2))
(> arg2 0))
(> arg1P 0))
(= arg3 arg2P))
(= (+ arg1 1) arg3P))
(= (+ arg1 1) arg4P))
(= arg4 arg5P))
)
(rule
(__init arg1 arg2 arg3 arg4 arg5)
(f1_0_main_ConstantStackPush arg1P arg2P arg3P arg4P arg5P))
