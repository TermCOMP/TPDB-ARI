(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int))
(fun f1016_0_main_InvokeMethod (-> Int Int Int Int Int Int Int))
(fun f1034_0_growList_NONNULL (-> Int Int Int Int Int Int Int))
(fun f1168_0_growTree_Return (-> Int Int Int Int Int Int Int))
(fun f1232_0_growList_InvokeMethod (-> Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int))
(fun f348_0_createTree_Return (-> Int Int Int Int Int Int Int))
(fun f495_0_createTree_GT (-> Int Int Int Int Int Int Int))
(fun f998_0_createTree_GE (-> Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f495_0_createTree_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (and (> arg1P (- 1)) (> arg2 0)) (> arg1 0)) (= arg2 arg2P))
(= 1 arg3P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f1016_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x8 Int))
(and
(and
(and (and (and (> x8 (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P (- 1)))
)
)
(rule
(f348_0_createTree_Return arg1 arg2 arg3 arg4 arg5 arg6)
(f1016_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 1) arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P (- 1)))
(= arg2 arg3P))
)
(rule
(f1016_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f1034_0_growList_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x14 Int))
(and
(and
(and
(and (and (and (> x14 0) (> arg3 1)) (<= arg1P arg2)) (> arg1 0))
(> arg2 (- 1)))
(> arg1P (- 1)))
(= arg3 arg2P))
)
)
(rule
(f495_0_createTree_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f998_0_createTree_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (and (> arg2 (- 1)) (> arg1 0)) (> arg3 0)) (< arg3 arg2))
(> arg4P (- 1)))
(= arg1 arg1P))
(= (- arg1 1) arg2P))
(= 0 arg3P))
(= arg2 arg5P))
(= (+ arg3 1) arg6P))
)
(rule
(f998_0_createTree_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f495_0_createTree_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg4 0) (> arg4 arg3)) (> arg1 0)) (> arg6 1))
(< arg2 arg1))
(< (- arg2 1) arg1))
(> arg2 (- 1)))
(< (- arg2 1) arg2))
(= (- arg2 1) arg1P))
(= arg5 arg2P))
(= arg6 arg3P))
)
(rule
(f998_0_createTree_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f998_0_createTree_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg4 0) (> arg4 arg3)) (> arg1 0)) (> arg6 1))
(< arg2 arg1))
(< (- arg2 1) arg1))
(> arg2 (- 1)))
(< (- arg2 1) arg2))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
(= arg6 arg6P))
)
(rule
(f998_0_createTree_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f998_0_createTree_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg4 0) (> arg4 arg3)) (> arg1 0)) (> arg6 1))
(< arg2 arg1))
(< (- arg2 1) arg1))
(> arg2 (- 1)))
(< (- arg2 1) arg2))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)
(rule
(f1034_0_growList_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1034_0_growList_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and (and (<= (+ arg1P 2) arg1) (> arg2 1)) (> arg1 1))
(> arg1P (- 1)))
(= arg2 arg2P))
)
(rule
(f1034_0_growList_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1232_0_growList_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ arg2P 1) arg1) (> arg2 1)) (<= (+ arg5P 1) arg1))
(> arg1 0))
(> arg1P 4))
(> arg2P (- 1)))
(> arg5P (- 1)))
(= arg2 arg4P))
)
(rule
(f1168_0_growTree_Return arg1 arg2 arg3 arg4 arg5 arg6)
(f1232_0_growList_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 2) arg1)) (<= arg2P arg5))
(<= (+ arg5P 2) arg1))
(<= arg5P arg5))
(> arg1 5))
(> arg5 (- 1)))
(> arg1P 5))
(> arg2P (- 1)))
(> arg5P (- 1)))
(<= (+ arg4 6) arg1))
(= arg2 arg3P))
(= arg3 arg4P))
)
(rule
(f1034_0_growList_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1232_0_growList_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= (- arg1P 7) arg1) (> arg2 1)) (<= (+ arg2P 1) arg1))
(<= (+ arg5P 1) arg1))
(> arg1 0))
(> arg1P 7))
(> arg2P (- 1)))
(> arg5P (- 1)))
(= arg2 arg4P))
)
(rule
(f1232_0_growList_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f1034_0_growList_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (> arg4 1)) (<= arg1P arg2))
(<= arg1P arg5))
(> arg1 4))
(> arg2 (- 1)))
(> arg5 (- 1)))
(> arg1P (- 1)))
(= arg4 arg2P))
)
(rule
(f1034_0_growList_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1034_0_growList_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and (and (<= (+ arg1P 4) arg1) (> arg2 1)) (> arg1 4))
(> arg1P 0))
(= arg2 arg2P))
)
(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P))
