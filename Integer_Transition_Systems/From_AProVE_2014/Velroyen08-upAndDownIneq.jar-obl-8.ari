(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int))
(fun f120_0_upAndDown_GT (-> Int Int Int))
(fun f1_0_main_Load (-> Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2)
(f120_0_upAndDown_GT arg1P arg2P)
:guard
(and (and (and (> arg1 0) (> arg2 (- 1))) (= 0 arg1P)) (= arg2 arg2P)))

(rule
(f120_0_upAndDown_GT arg1 arg2)
(f120_0_upAndDown_GT arg1P arg2P)
:guard
(and
(and
(and (and (and (< arg2 10) (> arg2 0)) (< arg2 11)) (= 0 arg1))
(= 0 arg1P))
(= (- arg2 1) arg2P))
)

(rule
(f120_0_upAndDown_GT arg1 arg2)
(f120_0_upAndDown_GT arg1P arg2P)
:guard
(and
(and
(and (and (and (< arg2 10) (< arg2 11)) (> arg2 0)) (= 1 arg1))
(= 1 arg1P))
(= (+ arg2 1) arg2P))
)

(rule
(f120_0_upAndDown_GT arg1 arg2)
(f120_0_upAndDown_GT arg1P arg2P)
:guard
(and (and (= 10 arg2) (= 0 arg1P)) (= 9 arg2P)))

(rule
(f120_0_upAndDown_GT arg1 arg2)
(f120_0_upAndDown_GT arg1P arg2P)
:guard
(and (and (= 0 arg2) (= 1 arg1P)) (= 1 arg2P)))

(rule (__init arg1 arg2) (f1_0_main_Load arg1P arg2P))
