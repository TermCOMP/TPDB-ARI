(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int Int))
(fun f852_0_loop_LT (-> Int Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f852_0_loop_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and (and (and (> arg1 0) (= 0 arg2)) (= 0 arg1P)) (= 0 arg2P))
(= 0 arg3P))
(= 0 arg4P))
(= 0 arg5P))
(= 0 arg6P))
(= 0 arg7P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f852_0_loop_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and (and (and (> arg1 0) (> arg2P (- 1))) (= 1 arg2)) (= 0 arg1P))
(= 0 arg3P))
(= 0 arg4P))
(= 0 arg5P))
(= 1 arg6P))
(= 1 arg7P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f852_0_loop_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and (and (and (> arg2P (- 1)) (> arg3P (- 1))) (> arg1 0)) (= 2 arg2))
(= 0 arg1P))
(= 0 arg4P))
(= 0 arg5P))
(= 2 arg6P))
(= 2 arg7P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f852_0_loop_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg2P (- 1)) (> arg2 2)) (> arg1P (- 1)))
(> arg3P (- 1)))
(> arg1 0))
(= arg1P arg4P))
(= arg1P arg5P))
(= arg2 arg6P))
(= 3 arg7P))
)

(rule
(f852_0_loop_LT arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f852_0_loop_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg1 (- 1)) (> arg6 (- 1))) (>= arg7 arg6))
(> arg3 (- 1)))
(> (- (* 2 arg2) arg3) 0))
(>= (* 2 arg2) 0))
(= arg1 arg4))
(= arg1 arg5))
(= arg1 arg1P))
(= 0 arg2P))
(= 0 arg3P))
(= arg1 arg4P))
(= arg1 arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
)

(rule
(f852_0_loop_LT arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f852_0_loop_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg1 (- 1)) (> arg6 (- 1))) (> arg7 (- 1)))
(< arg7 arg6))
(> arg2P (- 1)))
(>= (+ arg7 1) arg6))
(> arg3 (- 1)))
(>= (* 2 arg2) 0))
(>= (* 2 arg2P) 0))
(>= (+ arg1 (* 2 arg2P)) 0))
(< (* 2 arg2P) (- (* 2 arg2) arg3)))
(= arg1 arg4))
(= arg1 arg5))
(= (+ arg1 (* 2 arg2P)) arg1P))
(= 0 arg3P))
(= (+ arg1 (* 2 arg2P)) arg4P))
(= (+ arg1 (* 2 arg2P)) arg5P))
(= arg6 arg6P))
(= (+ arg7 1) arg7P))
)

(rule
(f852_0_loop_LT arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f852_0_loop_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg6 1) (< (+ arg7 1) arg6)) (> arg1 (- 1)))
(> arg7 (- 1)))
(> arg2P (- 1)))
(> arg3P (- 1)))
(> arg3 (- 1)))
(>= (* 2 arg2) 0))
(>= (* 2 arg2P) 0))
(< (- (* 2 arg2P) arg3P) (- (* 2 arg2) arg3)))
(>= (+ arg1 (* 2 arg2P)) 0))
(<= (+ arg7 2) arg6))
(= arg1 arg4))
(= arg1 arg5))
(= (- (+ arg1 (* 2 arg2P)) arg3P) arg1P))
(= (- (+ arg1 (* 2 arg2P)) arg3P) arg4P))
(= (- (+ arg1 (* 2 arg2P)) arg3P) arg5P))
(= arg6 arg6P))
(= (+ arg7 2) arg7P))
)

(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P arg7P))

