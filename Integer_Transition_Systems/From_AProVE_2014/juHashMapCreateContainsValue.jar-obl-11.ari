(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int))
(fun
f1755_0_equals_CheckCast
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f1_0_main_Load
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f4007_0_createMap_LE
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f4085_0_random_ArrayAccess
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f4571_0_containsValue_GE
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f4672_0_containsValue_NULL
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f4731_0_containsValue_EQ
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f4768_0_put_NULL
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f4846_0_put_EQ
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f5292_0_transfer_GE
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f5387_0_transfer_ArrayAccess
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f603_0_createMap_Return
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int))

(entrypoint __init)
(rule
(f1_0_main_Load
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4085_0_random_ArrayAccess
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(exists
((x7 Int))
(and
(and (and (and (> x7 (- 1)) (> arg2 0)) (> arg1 0)) (> arg1P 3))
(= arg2 arg2P))
)
)

(rule
(f603_0_createMap_Return
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4085_0_random_ArrayAccess
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg2) (> arg1 0)) (> arg2 14)) (> arg1P 14))
(<= (+ arg5 3) arg2))
(= 16 arg4))
(= 12 arg6))
(= 16 arg3P))
(= arg5 arg4P))
(= 12 arg5P))
)

(rule
(f1_0_main_Load
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4007_0_createMap_LE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg2P (- 1)) (> arg2 0)) (<= (- arg1P 14) arg1))
(> arg1 0))
(> arg1P 14))
(= arg2 arg3P))
(= 1 arg4P))
(= 16 arg5P))
(= 0 arg6P))
(= 12 arg7P))
)

(rule
(f4007_0_createMap_LE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4007_0_createMap_LE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(exists
((x29 Int) (x30 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg2 0) (< (+ arg4 1) arg3)) (> arg3 (- 1)))
(> arg4 (- 1)))
(> x29 (- 1)))
(> x30 (- 1)))
(> arg5 1))
(> arg1 3))
(> arg1P 3))
(<= (+ arg7 3) arg1))
(<= (+ arg6 3) arg1))
(= (- arg2 1) arg2P))
(= arg3 arg3P))
(= (+ arg4 2) arg4P))
)
)

(rule
(f4085_0_random_ArrayAccess
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4571_0_containsValue_GE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(exists
((x32 Int) (x38 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< x32 arg2) (> arg3 1)) (> x32 (- 1))) (> x38 (- 1)))
(> arg2 0))
(<= (+ arg1P 3) arg1))
(> arg1 3))
(> arg1P 0))
(<= (+ arg5 3) arg1))
(<= (+ arg4 3) arg1))
(= 0 arg2P))
(= arg3 arg3P))
)
)

(rule
(f4571_0_containsValue_GE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4672_0_containsValue_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg3 arg2)) (> arg1 0)) (> arg1P 0))
(> arg3P (- 1)))
(= arg2 arg2P))
(= arg3 arg5P))
)

(rule
(f4672_0_containsValue_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4571_0_containsValue_GE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> arg5 (- 1))) (<= (- arg1P 1) arg3))
(> arg1 0))
(> arg3 (- 1)))
(> arg1P 0))
(= (+ arg2 1) arg2P))
(= arg5 arg3P))
)

(rule
(f4672_0_containsValue_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f1755_0_equals_CheckCast
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and (and (and (> arg5 1) (> arg5 arg2)) (> arg1 0)) (> arg3 0))
(> arg2P 0))
(<= (+ arg3P 2) arg3))
)

(rule
(f4672_0_containsValue_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4731_0_containsValue_EQ
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg5 1) (> arg5 arg2)) (<= arg1P arg1))
(<= (+ arg1P 2) arg3))
(<= arg3P arg3))
(<= (+ arg8P 2) arg3))
(> arg1 0))
(> arg3 2))
(> arg1P 0))
(> arg3P 2))
(> arg8P (- 1)))
(<= (+ arg7P 4) arg3))
(<= (+ arg10P 2) arg3))
(<= (+ arg9P 2) arg3))
(= arg2 arg2P))
(= 0 arg4P))
(= arg4 arg5P))
(= arg5 arg6P))
)

(rule
(f4672_0_containsValue_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4731_0_containsValue_EQ
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg5 1) (> arg5 arg2)) (<= arg1P arg1))
(<= (+ arg1P 2) arg3))
(<= arg3P arg3))
(<= (+ arg8P 2) arg3))
(> arg1 0))
(> arg3 2))
(> arg1P 0))
(> arg3P 2))
(> arg8P (- 1)))
(<= (+ arg7P 4) arg3))
(<= (+ arg10P 2) arg3))
(<= (+ arg9P 2) arg3))
(= arg2 arg2P))
(= 1 arg4P))
(= arg4 arg5P))
(= arg5 arg6P))
)

(rule
(f4672_0_containsValue_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4672_0_containsValue_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg5 1) (> arg5 arg2)) (<= arg1P arg1))
(<= (+ arg1P 1) arg3))
(<= (+ arg3P 2) arg3))
(> arg1 0))
(> arg3 1))
(> arg1P 0))
(> arg3P (- 1)))
(= arg2 arg2P))
(= arg4 arg4P))
(= arg5 arg5P))
)

(rule
(f4672_0_containsValue_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4672_0_containsValue_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg5 1) (> arg5 arg2)) (<= arg1P arg1))
(<= (+ arg1P 2) arg3))
(<= (+ arg3P 2) arg3))
(> arg1 0))
(> arg3 2))
(> arg1P 0))
(> arg3P (- 1)))
(= arg2 arg2P))
(= arg4 arg4P))
(= arg5 arg5P))
)

(rule
(f4731_0_containsValue_EQ
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4672_0_containsValue_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg1 arg1P) (>= arg3 (+ arg1P 2))) (<= (- arg1P 1) arg8))
(>= arg3 (+ arg3P 2)))
(<= arg3P arg8))
(> arg1 0))
(> arg3 2))
(> arg8 (- 1)))
(> arg1P 0))
(> arg3P (- 1)))
(>= arg3 (+ arg7 4)))
(>= arg3 (+ arg9 2)))
(>= arg3 (+ arg10 2)))
(= 0 arg4))
(= arg2 arg2P))
(= arg5 arg4P))
(= arg6 arg5P))
)

(rule
(f4007_0_createMap_LE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4768_0_put_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(exists
((x118 Int) (x119 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (< (+ arg4 1) arg3) (> arg5 1)) (> arg2 0))
(> arg3 (- 1)))
(> arg4 (- 1)))
(> x118 (- 1)))
(> x119 (- 1)))
(< arg3P arg5))
(<= arg1P arg1))
(> arg1 3))
(> arg1P 3))
(> arg4P (- 1)))
(<= (+ arg7 3) arg1))
(<= (+ arg6 3) arg1))
(= (+ arg4 2) arg5P))
(= arg5 arg6P))
(= arg6 arg7P))
(= arg7 arg8P))
)
)

(rule
(f4768_0_put_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f1755_0_equals_CheckCast
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and (and (and (> arg6 1) (> arg5 1)) (> arg1 3)) (> arg4 0))
(> arg2P 0))
(<= (+ arg7 3) arg1))
(<= (+ arg8 3) arg1))
(<= (+ arg3P 2) arg4))
(>= arg4 (+ arg2 2)))
)

(rule
(f4768_0_put_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4846_0_put_EQ
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg6 1) (> arg5 1)) (<= arg1P arg1)) (<= arg3P arg4))
(<= (+ arg10P 2) arg4))
(> arg1 3))
(> arg4 2))
(> arg1P 3))
(> arg3P 2))
(> arg10P (- 1)))
(<= (+ arg7 3) arg1))
(<= (+ arg8 3) arg1))
(<= (+ arg9P 2) arg4))
(>= arg4 (+ arg2 2)))
(<= (+ arg12P 4) arg4))
(= arg3 arg2P))
(= 0 arg4P))
(= arg5 arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
(= arg8 arg8P))
(= arg2 arg11P))
)

(rule
(f4768_0_put_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4846_0_put_EQ
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg6 1) (> arg5 1)) (<= arg1P arg1)) (<= arg3P arg4))
(<= (+ arg10P 2) arg4))
(> arg1 3))
(> arg4 2))
(> arg1P 3))
(> arg3P 2))
(> arg10P (- 1)))
(<= (+ arg7 3) arg1))
(<= (+ arg8 3) arg1))
(<= (+ arg9P 2) arg4))
(>= arg4 (+ arg2 2)))
(<= (+ arg12P 4) arg4))
(= arg3 arg2P))
(= 1 arg4P))
(= arg5 arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
(= arg8 arg8P))
(= arg2 arg11P))
)

(rule
(f4768_0_put_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4768_0_put_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(exists
((x168 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< x168 arg2)) (<= (+ arg4P 1) arg4))
(> arg1 3))
(> arg4 0))
(> arg1P 3))
(> arg4P (- 1)))
(<= (+ arg7 3) arg1))
(<= (+ arg8 3) arg1))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg5 arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
(= arg8 arg8P))
)
)

(rule
(f4768_0_put_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4768_0_put_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(exists
((x299 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> x299 arg2)) (<= (+ arg4P 1) arg4))
(> arg1 3))
(> arg4 0))
(> arg1P 3))
(> arg4P (- 1)))
(<= (+ arg7 3) arg1))
(<= (+ arg8 3) arg1))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg5 arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
(= arg8 arg8P))
)
)

(rule
(f4768_0_put_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4768_0_put_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg6 1) (> arg5 1)) (<= arg1P arg1))
(<= (+ arg4P 2) arg4))
(> arg1 3))
(> arg4 1))
(> arg1P 3))
(> arg4P (- 1)))
(<= (+ arg7 3) arg1))
(<= (+ arg8 3) arg1))
(>= arg4 (+ arg2 2)))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg5 arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
(= arg8 arg8P))
)

(rule
(f4768_0_put_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4768_0_put_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg6 1) (> arg5 1)) (<= arg1P arg1))
(<= (+ arg4P 2) arg4))
(> arg1 3))
(> arg4 2))
(> arg1P 3))
(> arg4P (- 1)))
(<= (+ arg7 3) arg1))
(<= (+ arg8 3) arg1))
(>= arg4 (+ arg2 2)))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg5 arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
(= arg8 arg8P))
)

(rule
(f4846_0_put_EQ
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f4768_0_put_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg4P 2) arg3)) (<= arg4P arg10))
(> arg1 3))
(> arg3 2))
(> arg10 (- 1)))
(> arg1P 3))
(> arg4P (- 1)))
(<= (+ arg7 3) arg1))
(<= (+ arg8 3) arg1))
(<= (+ arg9 2) arg3))
(>= arg3 (+ arg11 2)))
(<= (+ arg12 4) arg3))
(= 0 arg4))
(= arg11 arg2P))
(= arg2 arg3P))
(= arg5 arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
(= arg8 arg8P))
)

(rule
(f4768_0_put_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f5292_0_transfer_GE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg6 arg3) (> arg6 1)) (<= arg8 arg7))
(>= (* 2 arg6) 0))
(< arg6 1073741824))
(<= (- arg1P 1) arg1))
(<= (+ arg2P 3) arg1))
(<= (- arg2P 1) arg4))
(<= (+ arg3P 3) arg1))
(<= (- arg3P 1) arg4))
(> arg1 3))
(> arg4 (- 1)))
(> arg1P 3))
(> arg2P 0))
(> arg3P 0))
(<= (+ arg7 3) arg1))
(<= (+ arg8 3) arg1))
(= 0 arg4P))
(= (+ arg7 1) arg5P))
(= arg8 arg6P))
(= (* 2 arg6) arg7P))
(= arg6 arg8P))
)

(rule
(f4768_0_put_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f5292_0_transfer_GE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg6 arg3) (> arg6 1073741824)) (>= (* 2 arg6) 0))
(<= arg8 arg7))
(<= (- arg1P 1) arg1))
(<= (+ arg2P 3) arg1))
(<= (- arg2P 1) arg4))
(<= (+ arg3P 3) arg1))
(<= (- arg3P 1) arg4))
(> arg1 3))
(> arg4 (- 1)))
(> arg1P 3))
(> arg2P 0))
(> arg3P 0))
(<= (+ arg7 3) arg1))
(<= (+ arg8 3) arg1))
(= 0 arg4P))
(= (+ arg7 1) arg5P))
(= arg8 arg6P))
(= (* 2 arg6) arg7P))
(= arg6 arg8P))
)

(rule
(f5292_0_transfer_GE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f5387_0_transfer_ArrayAccess
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg7 0) (> arg8 arg4)) (<= arg1P arg1))
(<= (+ arg2P 3) arg1))
(<= arg2P arg2))
(<= arg2P arg3))
(<= (+ arg6P 3) arg1))
(<= arg6P arg2))
(<= arg6P arg3))
(> arg1 3))
(> arg2 0))
(> arg3 0))
(> arg1P 3))
(> arg2P 0))
(> arg4P (- 1)))
(> arg5P 0))
(> arg6P 0))
(<= (+ arg5 3) arg1))
(<= (+ arg6 3) arg1))
(= arg4 arg3P))
(= arg5 arg8P))
(= arg6 arg9P))
(= arg8 arg10P))
(= arg7 arg14P))
)

(rule
(f5387_0_transfer_ArrayAccess
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f5387_0_transfer_ArrayAccess
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg14 arg7) (> arg14 0)) (<= arg1P arg1))
(<= (+ arg2P 3) arg1))
(<= arg2P arg2))
(<= arg2P arg4))
(<= (+ arg2P 2) arg5))
(<= arg2P arg6))
(<= (+ arg4P 1) arg4))
(<= (+ arg4P 3) arg5))
(<= arg5P arg4))
(<= (+ arg5P 2) arg5))
(<= (+ arg6P 3) arg1))
(<= arg6P arg2))
(<= arg6P arg4))
(<= (+ arg6P 2) arg5))
(<= arg6P arg6))
(> arg1 3))
(> arg2 0))
(> arg4 0))
(> arg5 2))
(> arg6 0))
(> arg1P 3))
(> arg2P 0))
(> arg4P (- 1)))
(> arg5P 0))
(> arg6P 0))
(<= (+ arg8 3) arg1))
(<= (+ arg9 3) arg1))
(<= (+ arg11P 2) arg4))
(<= (+ arg12P 2) arg4))
(<= (+ arg13P 2) arg4))
(<= (+ arg11 2) arg5))
(<= (+ arg11P 4) arg5))
(<= (+ arg12P 4) arg5))
(<= (+ arg13P 4) arg5))
(<= (+ arg12 2) arg5))
(<= (+ arg13 2) arg5))
(= arg3 arg3P))
(= arg8 arg8P))
(= arg9 arg9P))
(= arg10 arg10P))
(= arg14 arg14P))
)

(rule
(f5292_0_transfer_GE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f5292_0_transfer_GE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg8 (- 1)) (> arg8 arg4)) (<= arg1P arg1))
(<= (+ arg2P 3) arg1))
(<= arg2P arg2))
(<= arg2P arg3))
(<= (+ arg3P 3) arg1))
(<= arg3P arg2))
(<= arg3P arg3))
(> arg1 3))
(> arg2 0))
(> arg3 0))
(> arg1P 3))
(> arg2P 0))
(> arg3P 0))
(<= (+ arg5 3) arg1))
(<= (+ arg6 3) arg1))
(= (+ arg4 1) arg4P))
(= arg5 arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
(= arg8 arg8P))
)

(rule
(f5387_0_transfer_ArrayAccess
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f5292_0_transfer_GE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg10 (- 1)) (> arg14 arg7)) (<= arg1P arg1))
(<= (+ arg2P 3) arg1))
(<= arg2P arg2))
(<= (- arg2P 1) arg4))
(<= (+ arg2P 1) arg5))
(<= arg2P arg6))
(<= (+ arg3P 3) arg1))
(<= arg3P arg2))
(<= (- arg3P 1) arg4))
(<= (+ arg3P 1) arg5))
(<= arg3P arg6))
(> arg1 3))
(> arg2 0))
(> arg4 (- 1)))
(> arg5 1))
(> arg6 0))
(> arg1P 3))
(> arg2P 0))
(> arg3P 0))
(<= (+ arg8 3) arg1))
(<= (+ arg9 3) arg1))
(<= (+ arg11 2) arg5))
(<= (+ arg12 2) arg5))
(<= (+ arg13 2) arg5))
(= (+ arg3 1) arg4P))
(= arg8 arg5P))
(= arg9 arg6P))
(= arg14 arg7P))
(= arg10 arg8P))
)

(rule
(__init
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14)
(f1_0_main_Load
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P)
)

