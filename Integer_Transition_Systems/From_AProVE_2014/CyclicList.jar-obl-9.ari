(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f108_0_main_ArrayAccess (-> Int Int Int Int Int))
(fun f147_0_get_LE (-> Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int))
(fun f80_0_create_LE (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f80_0_create_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg2 (- 1))) (> arg1 0)) (> arg1P 0))
(= (- arg2 1) arg2P))
(= 0 arg3P))
(= arg2 arg4P))
)
(rule
(f80_0_create_LE arg1 arg2 arg3 arg4)
(f108_0_main_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (< arg2 1) (> arg3 0)) (> arg2P arg3)) (<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg4 arg3P))
)
(rule
(f80_0_create_LE arg1 arg2 arg3 arg4)
(f108_0_main_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (>= arg1 arg1P) (< arg2 1)) (> arg1 0)) (> arg1P 0))
(= 1 arg2P))
(= arg4 arg3P))
)
(rule
(f80_0_create_LE arg1 arg2 arg3 arg4)
(f80_0_create_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (<= arg1P arg1) (> arg2 0)) (> arg1 0)) (> arg1P 0))
(= (- arg2 1) arg2P))
(= arg4 arg4P))
)
(rule
(f108_0_main_ArrayAccess arg1 arg2 arg3 arg4)
(f147_0_get_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x23 Int))
(and
(and
(and (and (> arg3 0) (> x23 (- 1))) (> arg1 0))
(= (- x23 1) arg1P))
(= arg2 arg2P))
)
)
(rule
(f147_0_get_LE arg1 arg2 arg3 arg4)
(f147_0_get_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x27 Int))
(and
(and
(and (and (and (> arg2 (- 1)) (> x27 0)) (< x27 arg2)) (> arg1 0))
(< x27 arg2P))
(= (- arg1 1) arg1P))
)
)
(rule
(f147_0_get_LE arg1 arg2 arg3 arg4)
(f147_0_get_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x30 Int))
(and
(and
(and (and (> arg1 0) (< x30 arg2)) (> arg2 (- 1)))
(= (- arg1 1) arg1P))
(= 1 arg2P))
)
)
(rule (__init arg1 arg2 arg3 arg4) (f1_0_main_Load arg1P arg2P arg3P arg4P))
