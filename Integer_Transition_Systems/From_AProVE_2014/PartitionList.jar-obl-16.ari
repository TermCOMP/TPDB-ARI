(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int))
(fun f1674_0_number_greater_LT (-> Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int))
(fun f2372_0_main_InvokeMethod (-> Int Int Int Int Int Int Int))
(fun f2373_0_generation_InvokeMethod (-> Int Int Int Int Int Int Int))
(fun f2374_0_generation_InvokeMethod (-> Int Int Int Int Int Int Int))
(fun f2375_0_generation_InvokeMethod (-> Int Int Int Int Int Int Int))
(fun f2440_0_insert_NONNULL (-> Int Int Int Int Int Int Int))
(fun f2470_0_sublistAutoDual_InvokeMethod (-> Int Int Int Int Int Int Int))
(fun f2503_0_isEqual_NONNULL (-> Int Int Int Int Int Int Int))
(fun f2504_0_union_NONNULL (-> Int Int Int Int Int Int Int))
(fun f2774_0_isEqual_EQ (-> Int Int Int Int Int Int Int))
(fun f283_0_partitionOf_GT (-> Int Int Int Int Int Int Int))
(fun f2881_0_isEqual_EQ (-> Int Int Int Int Int Int Int))
(fun f3187_0_generation_InvokeMethod (-> Int Int Int Int Int Int Int))
(fun f3192_0_dual_LE (-> Int Int Int Int Int Int Int))
(fun f3327_0_sublistAutoDual_NE (-> Int Int Int Int Int Int Int))
(fun f3328_0_sublistAutoDual_NE (-> Int Int Int Int Int Int Int))
(fun f3931_0_sublistAutoDual_InvokeMethod (-> Int Int Int Int Int Int Int))
(fun f3984_0_sublistAutoDual_NE (-> Int Int Int Int Int Int Int))
(fun f3985_0_sublistAutoDual_NE (-> Int Int Int Int Int Int Int))
(fun f4119_0_main_InvokeMethod (-> Int Int Int Int Int Int Int))
(fun f4135_0_sublistAutoDual_InvokeMethod (-> Int Int Int Int Int Int Int))
(fun
f4661_0_sublistOddDistinctParts_InvokeMethod
(-> Int Int Int Int Int Int Int))

(fun
|f4661_0_sublistOddDistinctParts_InvokeMethod'|
(-> Int Int Int Int Int Int Int))

(fun f4689_0_oddDistinctParts_NE (-> Int Int Int Int Int Int Int))
(fun |f4689_0_oddDistinctParts_NE'| (-> Int Int Int Int Int Int Int))
(fun f4740_0_sublistOddDistinctParts_NULL (-> Int Int Int Int Int Int Int))
(fun f4841_0_oddDistinctParts_EQ (-> Int Int Int Int Int Int Int))
(fun f4854_0_sublistOddDistinctParts_EQ (-> Int Int Int Int Int Int Int))
(fun f609_0_generation_NONNULL (-> Int Int Int Int Int Int Int))
(fun f654_0_generation_NE (-> Int Int Int Int Int Int Int))
(fun f740_0_generation_Return (-> Int Int Int Int Int Int Int))
(fun f741_0_generation_Return (-> Int Int Int Int Int Int Int))
(fun f742_0_generation_Return (-> Int Int Int Int Int Int Int))
(fun f789_0_generation_Return (-> Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f283_0_partitionOf_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> arg2 (- 1))) (<= (- arg2P 2) arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P 2))
(= 2 arg3P))
(= arg2 arg4P))
(= 1 arg5P))
)

(rule
(f283_0_partitionOf_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f609_0_generation_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= arg2P arg2) (< arg4 arg3)) (>= arg2 arg3P))
(> arg1 0))
(> arg2 0))
(> arg2P 0))
(> arg3P 0))
(<= (+ arg5 2) arg2))
(= arg4 arg1P))
)

(rule
(f283_0_partitionOf_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f283_0_partitionOf_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (>= arg4 arg3)) (<= arg1P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 2))
(<= (+ arg5 2) arg2))
(= (+ arg3 1) arg3P))
(= arg4 arg4P))
(= arg3 arg5P))
)

(rule
(f283_0_partitionOf_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f2372_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and (and (<= (+ arg1P 1) arg1) (< arg4 arg3)) (<= (+ arg1P 1) arg2))
(> arg1 0))
(> arg2 0))
(> arg1P (- 1)))
(<= (+ arg5 2) arg2))
)

(rule
(f283_0_partitionOf_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f2372_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (and (> arg1 0) (< arg4 arg3)) (> arg2 0)) (> arg1P (- 1)))
(<= (+ arg5 2) arg2))
)

(rule
(f740_0_generation_Return arg1 arg2 arg3 arg4 arg5 arg6)
(f2372_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and (and (<= (+ arg1P 1) arg1) (> arg1 0)) (> arg1P (- 1))))

(rule
(f2372_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f4119_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (<= arg1P arg1) (> arg1 4)) (> arg1P 4))
(<= (+ arg2P 4) arg1))
)

(rule
(f2372_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f4119_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (<= arg1P arg1) (> arg1 4)) (> arg1P 4))
(<= (+ arg2P 4) arg1))
)

(rule
(f2372_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f4119_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (<= arg1P arg1) (> arg1 4)) (> arg1P 4))
(<= (+ arg2P 4) arg1))
)

(rule
(f2372_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f4119_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (<= arg1P arg1) (> arg1 2)) (> arg1P 2))
(<= (+ arg2P 4) arg1))
)

(rule
(f2372_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f4119_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (<= arg1P arg1) (> arg1 3)) (> arg1P 3))
(<= (+ arg2P 4) arg1))
)

(rule
(f2372_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f4119_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (<= arg1P arg1) (> arg1 4)) (> arg1P 4))
(<= (+ arg2P 4) arg1))
)

(rule
(f609_0_generation_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f654_0_generation_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg2P arg2) (<= (- arg1 arg4P) 0)) (<= arg2P arg3))
(<= (+ arg5P 1) arg2))
(<= (+ arg5P 1) arg3))
(> arg2 0))
(> arg3 0))
(> arg2P 0))
(> arg5P (- 1)))
(<= (+ arg4P 2) arg2))
(<= (+ arg4P 2) arg3))
(= arg1 arg1P))
(= (- arg1 arg4P) arg3P))
)

(rule
(f609_0_generation_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f654_0_generation_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= (- arg1 arg4P) arg1) (> (- arg1 arg4P) 0)) (<= arg2P arg2))
(<= arg2P arg3))
(<= (+ arg5P 1) arg2))
(<= (+ arg5P 1) arg3))
(> arg2 0))
(> arg3 0))
(> arg2P 0))
(> arg5P (- 1)))
(<= (+ arg4P 2) arg2))
(<= (+ arg4P 2) arg3))
(= arg1 arg1P))
(= (- arg1 arg4P) arg3P))
)

(rule
(f609_0_generation_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f609_0_generation_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x66 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (< (- arg1 x66) arg1) (> (- arg1 x66) 0)) (<= arg2P arg2))
(<= arg2P arg3))
(<= arg3P arg2))
(<= arg3P arg3))
(> arg2 0))
(> arg3 0))
(> arg2P 0))
(> arg3P 0))
(<= (+ x66 2) arg2))
(<= (+ x66 2) arg3))
(= (- arg1 x66) arg1P))
)
)

(rule
(f654_0_generation_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f609_0_generation_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg2P 1) arg2) (< arg3 0)) (<= arg2P arg5))
(<= (+ arg3P 1) arg2))
(<= arg3P arg5))
(> arg2 0))
(> arg5 (- 1)))
(> arg2P (- 1)))
(> arg3P (- 1)))
(<= (+ arg4 2) arg2))
(= arg1 arg1P))
)

(rule
(f654_0_generation_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f609_0_generation_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg2P 1) arg2) (> arg3 0)) (<= arg2P arg5))
(<= (+ arg3P 1) arg2))
(<= arg3P arg5))
(> arg2 0))
(> arg5 (- 1)))
(> arg2P (- 1)))
(> arg3P (- 1)))
(<= (+ arg4 2) arg2))
(= arg1 arg1P))
)

(rule
(f654_0_generation_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f609_0_generation_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg2P 1) arg2) (<= arg2P arg5)) (<= (+ arg3P 1) arg2))
(<= arg3P arg5))
(> arg2 0))
(> arg5 (- 1)))
(> arg2P (- 1)))
(> arg3P (- 1)))
(<= (+ arg4 2) arg2))
(= 0 arg3))
(= arg1 arg1P))
)

(rule
(f609_0_generation_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f2373_0_generation_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (< (- arg1 arg4P) arg1) (> (- arg1 arg4P) 0)) (<= arg2P arg2))
(<= arg2P arg3))
(<= (+ arg3P 1) arg2))
(<= (+ arg3P 1) arg3))
(<= (+ arg5P 1) arg2))
(<= (+ arg5P 1) arg3))
(> arg2 0))
(> arg3 0))
(> arg2P 0))
(> arg3P (- 1)))
(> arg5P (- 1)))
(<= (+ arg4P 2) arg2))
(<= (+ arg4P 2) arg3))
(= arg1 arg1P))
)

(rule
(f609_0_generation_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f2373_0_generation_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (< (- arg1 arg4P) arg1) (> (- arg1 arg4P) 0)) (<= arg2P arg2))
(<= arg2P arg3))
(<= (+ arg5P 1) arg2))
(<= (+ arg5P 1) arg3))
(> arg2 0))
(> arg3 0))
(> arg2P 0))
(> arg3P (- 1)))
(> arg5P (- 1)))
(<= (+ arg4P 2) arg2))
(<= (+ arg4P 2) arg3))
(= arg1 arg1P))
)

(rule
(f741_0_generation_Return arg1 arg2 arg3 arg4 arg5 arg6)
(f2373_0_generation_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg2 arg2P) (>= arg2 (+ arg3P 1))) (>= arg4 arg3P))
(>= arg2 (+ arg5P 1)))
(>= arg4 arg5P))
(> arg2 0))
(> arg4 (- 1)))
(> arg2P 0))
(> arg3P (- 1)))
(> arg5P (- 1)))
(<= (+ arg3 2) arg2))
(= arg1 arg1P))
(= arg3 arg4P))
)

(rule
(f654_0_generation_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f2374_0_generation_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and (and (> arg2 0) (< arg3 0)) (> arg5 (- 1)))
(<= (+ arg4 2) arg2))
(= arg1 arg1P))
)

(rule
(f654_0_generation_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f2374_0_generation_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and (and (> arg2 0) (> arg3 0)) (> arg5 (- 1)))
(<= (+ arg4 2) arg2))
(= arg1 arg1P))
)

(rule
(f742_0_generation_Return arg1 arg2 arg3 arg4 arg5 arg6)
(f2374_0_generation_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and (= arg1 arg1P) (= arg2 arg2P)))

(rule
(f654_0_generation_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f2375_0_generation_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and (and (<= (- arg1P 3) arg2) (> arg2 0)) (> arg5 (- 1)))
(> arg1P 3))
(<= (+ arg4 2) arg2))
(= 0 arg3))
(= arg4 arg2P))
)

(rule
(f789_0_generation_Return arg1 arg2 arg3 arg4 arg5 arg6)
(f2375_0_generation_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and (and (<= arg1P arg1) (> arg1 3)) (> arg1P 3))
(<= (+ arg2 4) arg1))
(= arg2 arg2P))
)

(rule
(f2373_0_generation_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f2440_0_insert_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (<= arg1P arg3) (> arg2 0)) (> arg3 (- 1)))
(> arg5 (- 1)))
(> arg1P (- 1)))
(<= (+ arg4 2) arg2))
)

(rule
(f2374_0_generation_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f2504_0_union_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(> arg1P (- 1)))

(rule
(f2375_0_generation_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f2504_0_union_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (<= arg1P arg1) (> arg1 3)) (> arg1P 3))
(<= (+ arg2 4) arg1))
)

(rule
(f2373_0_generation_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f609_0_generation_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg2P 1) arg2) (<= arg2P arg5)) (<= (+ arg3P 1) arg2))
(<= arg3P arg5))
(> arg2 0))
(> arg3 (- 1)))
(> arg5 (- 1)))
(> arg2P (- 1)))
(> arg3P (- 1)))
(<= (+ arg4 2) arg2))
(= arg1 arg1P))
)

(rule
(f2373_0_generation_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f2504_0_union_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 1) arg2) (<= arg1P arg3)) (<= arg1P arg5))
(> arg2 0))
(> arg3 (- 1)))
(> arg5 (- 1)))
(> arg1P (- 1)))
(<= (+ arg4 2) arg2))
)

(rule
(f2373_0_generation_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3187_0_generation_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg3P 1) arg2) (<= arg3P arg5)) (> arg2 0))
(> arg3 (- 1)))
(> arg5 (- 1)))
(> arg1P 2))
(> arg3P (- 1)))
(<= (+ arg4 2) arg2))
(= arg1 arg2P))
(= arg4 arg4P))
)

(rule
(f2373_0_generation_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3187_0_generation_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg3P 1) arg2) (<= arg3P arg5)) (> arg2 0))
(> arg3 (- 1)))
(> arg5 (- 1)))
(> arg1P 4))
(> arg3P (- 1)))
(<= (+ arg4 2) arg2))
(= arg1 arg2P))
(= arg4 arg4P))
)

(rule
(f3187_0_generation_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f609_0_generation_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= arg2P arg3) (<= arg3P arg3)) (> arg1 2))
(> arg3 (- 1)))
(> arg2P (- 1)))
(> arg3P (- 1)))
(<= (+ arg4 4) arg1))
(<= (+ arg5 4) arg1))
(= arg2 arg1P))
)

(rule
(f3187_0_generation_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f2504_0_union_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and (and (and (<= arg1P arg1) (> arg1 2)) (> arg3 (- 1))) (> arg1P 2))
(<= (+ arg4 4) arg1))
(<= (+ arg5 4) arg1))
)

(rule
(f2440_0_insert_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f2440_0_insert_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and (and (<= (+ arg1P 1) arg1) (> arg1 0)) (> arg1P (- 1))))

(rule
(f2504_0_union_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f2504_0_union_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and (and (<= (+ arg1P 1) arg1) (> arg1 0)) (> arg1P (- 1))))

(rule
(f2372_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f2470_0_sublistAutoDual_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 1) arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P (- 1)))
(<= (+ arg3P 2) arg1))
)

(rule
(f2470_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3192_0_dual_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 2) arg1)) (<= arg2P arg2))
(<= (+ arg3P 3) arg1))
(<= (+ arg3P 1) arg2))
(> arg1 2))
(> arg2 0))
(> arg1P 2))
(> arg2P 0))
(> arg3P (- 1)))
(<= (+ arg4P 4) arg1))
(<= (+ arg3 2) arg1))
(<= (+ arg4P 2) arg2))
(= arg4P arg5P))
(= arg4P arg6P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2470_0_sublistAutoDual_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (< arg4 1)) (<= (+ arg2P 3) arg1))
(> arg1 2))
(> arg2 0))
(> arg3 (- 1)))
(> arg1P 0))
(> arg2P (- 1)))
(<= (+ arg5 4) arg1))
(<= (+ arg3P 4) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2503_0_isEqual_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (< arg4 1)) (<= arg1P arg2))
(<= arg2P arg3))
(> arg1 2))
(> arg2 0))
(> arg3 (- 1)))
(> arg1P 0))
(> arg2P (- 1)))
(<= (+ arg5 4) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3327_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (- arg1P 2) arg2))
(<= arg2P arg3))
(> arg1 3))
(> arg2 1))
(> arg3 0))
(> arg1P 3))
(> arg2P 0))
(<= (+ arg5 4) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
(= 0 arg3P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3327_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (- arg1P 2) arg2))
(<= (- arg1P 2) arg3))
(<= arg2P arg3))
(> arg1 3))
(> arg2 1))
(> arg3 2))
(> arg1P 3))
(> arg2P 2))
(<= (+ arg5 4) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= arg5 arg6))
(= 0 arg3P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3327_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (- arg1P 2) arg2))
(<= (- arg1P 2) arg3))
(<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(<= arg2P arg3))
(> arg1 3))
(> arg2 1))
(> arg3 1))
(> arg1P 3))
(> arg2P 1))
(<= (+ arg5 4) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= arg5 arg6))
(= 1 arg3P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3328_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (- arg1P 2) arg2))
(<= arg2P arg3))
(> arg1 4))
(> arg2 2))
(> arg3 0))
(> arg1P 4))
(> arg2P 0))
(<= (+ arg5 4) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
(= 0 arg3P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3328_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (- arg1P 2) arg2))
(<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(<= arg2P arg3))
(> arg1 4))
(> arg2 2))
(> arg3 1))
(> arg1P 4))
(> arg2P 1))
(<= (+ arg5 4) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= arg5 arg6))
(= 0 arg3P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3328_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (- arg1P 2) arg2))
(<= arg2P arg3))
(> arg1 5))
(> arg2 3))
(> arg3 2))
(> arg1P 5))
(> arg2P 2))
(<= (+ arg5 4) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= arg5 arg6))
(= 0 arg3P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3328_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (- arg1P 2) arg2))
(<= arg2P arg3))
(> arg1 5))
(> arg2 3))
(> arg3 2))
(> arg1P 5))
(> arg2P 2))
(<= (+ arg5 4) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= arg5 arg6))
(= 1 arg3P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3328_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (- arg1P 2) arg2))
(<= arg2P arg3))
(> arg1 6))
(> arg2 4))
(> arg3 2))
(> arg1P 6))
(> arg2P 2))
(<= (+ arg5 4) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= arg5 arg6))
(= 0 arg3P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3328_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (- arg1P 2) arg2))
(<= arg2P arg3))
(> arg1 6))
(> arg2 4))
(> arg3 2))
(> arg1P 6))
(> arg2P 2))
(<= (+ arg5 4) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= arg5 arg6))
(= 1 arg3P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3192_0_dual_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> arg4 0)) (<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(> arg1 4))
(> arg2 2))
(> arg3 (- 1)))
(> arg1P 4))
(> arg2P 2))
(> arg3P 0))
(<= (+ arg5 4) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
(= (- arg4 1) arg4P))
(= arg5 arg5P))
(= arg5 arg6P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3192_0_dual_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> arg4 0)) (<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(<= (- arg3P 2) arg3))
(> arg1 3))
(> arg2 1))
(> arg3 (- 1)))
(> arg1P 3))
(> arg2P 1))
(> arg3P 1))
(<= (+ arg5 4) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
(= (- arg4 1) arg4P))
(= arg5 arg5P))
(= arg5 arg6P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3192_0_dual_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> arg4 0)) (<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(<= (- arg3P 3) arg3))
(> arg1 3))
(> arg2 1))
(> arg3 (- 1)))
(> arg1P 3))
(> arg2P 1))
(> arg3P 2))
(<= (+ arg5 4) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
(= (- arg4 1) arg4P))
(= arg5 arg5P))
(= arg5 arg6P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3931_0_sublistAutoDual_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(<= arg3P arg3))
(> arg1 6))
(> arg2 0))
(> arg3 (- 1)))
(> arg1P 6))
(> arg2P 0))
(> arg3P (- 1)))
(<= (+ arg5 4) arg1))
(<= (+ arg4P 6) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
(= arg5 arg5P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3931_0_sublistAutoDual_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(<= arg3P arg3))
(> arg1 6))
(> arg2 0))
(> arg3 (- 1)))
(> arg1P 6))
(> arg2P 0))
(> arg3P (- 1)))
(<= (+ arg5 4) arg1))
(<= (+ arg4P 6) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
(= arg5 arg5P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3931_0_sublistAutoDual_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(<= arg3P arg3))
(> arg1 6))
(> arg2 0))
(> arg3 (- 1)))
(> arg1P 6))
(> arg2P 0))
(> arg3P (- 1)))
(<= (+ arg5 4) arg1))
(<= (+ arg4P 6) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
(= arg5 arg5P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3931_0_sublistAutoDual_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(<= arg3P arg3))
(> arg1 4))
(> arg2 0))
(> arg3 (- 1)))
(> arg1P 4))
(> arg2P 0))
(> arg3P (- 1)))
(<= (+ arg5 4) arg1))
(<= (+ arg4P 6) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
(= arg5 arg5P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3931_0_sublistAutoDual_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(<= arg3P arg3))
(> arg1 5))
(> arg2 0))
(> arg3 (- 1)))
(> arg1P 5))
(> arg2P 0))
(> arg3P (- 1)))
(<= (+ arg5 4) arg1))
(<= (+ arg4P 6) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
(= arg5 arg5P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f3931_0_sublistAutoDual_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(<= arg3P arg3))
(> arg1 6))
(> arg2 0))
(> arg3 (- 1)))
(> arg1P 6))
(> arg2P 0))
(> arg3P (- 1)))
(<= (+ arg5 4) arg1))
(<= (+ arg4P 6) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
(= arg5 arg5P))
)

(rule
(f3931_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f2503_0_isEqual_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= arg1P arg2)) (<= arg2P arg3))
(> arg1 4))
(> arg2 0))
(> arg3 (- 1)))
(> arg1P 0))
(> arg2P (- 1)))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
)

(rule
(f3931_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3984_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg3)) (> arg1 4)) (> arg2 1))
(> arg3 0))
(> arg1P 4))
(> arg2P 0))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(= 0 arg3P))
)

(rule
(f3931_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3984_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg3)) (> arg1 4)) (> arg2 1))
(> arg3 2))
(> arg1P 4))
(> arg2P 2))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= 0 arg3P))
)

(rule
(f3931_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3984_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 2) arg1)) (<= arg2P arg2))
(<= arg2P arg3))
(> arg1 4))
(> arg2 1))
(> arg3 1))
(> arg1P 4))
(> arg2P 1))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= 1 arg3P))
)

(rule
(f3931_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3985_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg3)) (> arg1 4)) (> arg2 2))
(> arg3 0))
(> arg1P 4))
(> arg2P 0))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(= 0 arg3P))
)

(rule
(f3931_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3985_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 2) arg1)) (<= arg2P arg2))
(<= arg2P arg3))
(> arg1 4))
(> arg2 2))
(> arg3 1))
(> arg1P 4))
(> arg2P 1))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= 0 arg3P))
)

(rule
(f3931_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3985_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg3)) (> arg1 5)) (> arg2 3))
(> arg3 2))
(> arg1P 5))
(> arg2P 2))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= 0 arg3P))
)

(rule
(f3931_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3985_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg3)) (> arg1 5)) (> arg2 3))
(> arg3 2))
(> arg1P 5))
(> arg2P 2))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= 1 arg3P))
)

(rule
(f3931_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3985_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg3)) (> arg1 6)) (> arg2 4))
(> arg3 2))
(> arg1P 6))
(> arg2P 2))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= 0 arg3P))
)

(rule
(f3931_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3985_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg3)) (> arg1 6)) (> arg2 4))
(> arg3 2))
(> arg1P 6))
(> arg2P 2))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= 1 arg3P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f4135_0_sublistAutoDual_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(<= arg3P arg3))
(> arg1 6))
(> arg2 0))
(> arg3 (- 1)))
(> arg1P 6))
(> arg2P 0))
(> arg3P (- 1)))
(<= (+ arg5 4) arg1))
(<= (+ arg4P 6) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
(= arg5 arg5P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f4135_0_sublistAutoDual_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(<= arg3P arg3))
(> arg1 6))
(> arg2 0))
(> arg3 (- 1)))
(> arg1P 6))
(> arg2P 0))
(> arg3P (- 1)))
(<= (+ arg5 4) arg1))
(<= (+ arg4P 6) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
(= arg5 arg5P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f4135_0_sublistAutoDual_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(<= arg3P arg3))
(> arg1 5))
(> arg2 0))
(> arg3 (- 1)))
(> arg1P 5))
(> arg2P 0))
(> arg3P (- 1)))
(<= (+ arg5 4) arg1))
(<= (+ arg4P 6) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
(= arg5 arg5P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f4135_0_sublistAutoDual_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 1)) (<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(<= arg3P arg3))
(> arg1 6))
(> arg2 0))
(> arg3 (- 1)))
(> arg1P 6))
(> arg2P 0))
(> arg3P (- 1)))
(<= (+ arg5 4) arg1))
(<= (+ arg4P 6) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
(= arg5 arg5P))
)

(rule
(f4135_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f2503_0_isEqual_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= arg1P arg2)) (<= arg2P arg3))
(> arg1 4))
(> arg2 0))
(> arg3 (- 1)))
(> arg1P 0))
(> arg2P (- 1)))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
)

(rule
(f4135_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3984_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg3)) (> arg1 4)) (> arg2 1))
(> arg3 0))
(> arg1P 4))
(> arg2P 0))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(= 0 arg3P))
)

(rule
(f4135_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3984_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg3)) (> arg1 4)) (> arg2 1))
(> arg3 2))
(> arg1P 4))
(> arg2P 2))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= 0 arg3P))
)

(rule
(f4135_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3984_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 2) arg1)) (<= arg2P arg2))
(<= arg2P arg3))
(> arg1 4))
(> arg2 1))
(> arg3 1))
(> arg1P 4))
(> arg2P 1))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= 1 arg3P))
)

(rule
(f4135_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3985_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg3)) (> arg1 4)) (> arg2 2))
(> arg3 0))
(> arg1P 4))
(> arg2P 0))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(= 0 arg3P))
)

(rule
(f4135_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3985_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 2) arg1)) (<= arg2P arg2))
(<= arg2P arg3))
(> arg1 4))
(> arg2 2))
(> arg3 1))
(> arg1P 4))
(> arg2P 1))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= 0 arg3P))
)

(rule
(f4135_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3985_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg3)) (> arg1 5)) (> arg2 3))
(> arg3 2))
(> arg1P 5))
(> arg2P 2))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= 0 arg3P))
)

(rule
(f4135_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3985_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg3)) (> arg1 5)) (> arg2 3))
(> arg3 2))
(> arg1P 5))
(> arg2P 2))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= 1 arg3P))
)

(rule
(f4135_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3985_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg3)) (> arg1 6)) (> arg2 4))
(> arg3 2))
(> arg1P 6))
(> arg2P 2))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= 0 arg3P))
)

(rule
(f4135_0_sublistAutoDual_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f3985_0_sublistAutoDual_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg3)) (> arg1 6)) (> arg2 4))
(> arg3 2))
(> arg1P 6))
(> arg2P 2))
(<= (+ arg5 4) arg1))
(<= (+ arg4 6) arg1))
(<= (+ arg5 2) arg2))
(<= (+ arg5 2) arg3))
(= 1 arg3P))
)

(rule
(f3192_0_dual_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f1674_0_number_greater_LT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (> arg4 0)) (<= arg1P arg2))
(> arg1 2))
(> arg2 0))
(> arg3 (- 1)))
(> arg1P 0))
(<= (+ arg5 4) arg1))
(<= (+ arg5 2) arg2))
(= arg5 arg6))
(= arg4 arg2P))
(= arg5 arg3P))
)

(rule
(f1674_0_number_greater_LT arg1 arg2 arg3 arg4 arg5 arg6)
(f1674_0_number_greater_LT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg2 0) (> arg2 arg3)) (<= (+ arg1P 2) arg1))
(> arg1 2))
(> arg1P 0))
(<= (+ arg3 2) arg1))
(<= (+ arg3P 4) arg1))
(= arg2 arg2P))
)

(rule
(f1674_0_number_greater_LT arg1 arg2 arg3 arg4 arg5 arg6)
(f1674_0_number_greater_LT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (<= arg2 arg3)) (> arg2 0))
(<= (+ arg1P 2) arg1))
(> arg1 2))
(> arg1P 0))
(<= (+ arg3 2) arg1))
(<= (+ arg3P 4) arg1))
(= arg2 arg2P))
)

(rule
(f2503_0_isEqual_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f2503_0_isEqual_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= (+ arg2P 1) arg2)) (> arg1 2))
(> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
)

(rule
(f2503_0_isEqual_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f2881_0_isEqual_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg2)) (> arg1 4)) (> arg2 2))
(> arg1P 4))
(> arg2P 2))
(= 0 arg3P))
)

(rule
(f2503_0_isEqual_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f2881_0_isEqual_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= arg2P arg1)) (<= arg2P arg2))
(> arg1 4))
(> arg2 3))
(> arg1P 4))
(> arg2P 3))
(= 0 arg3P))
)

(rule
(f2503_0_isEqual_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f2881_0_isEqual_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg2)) (> arg1 5)) (> arg2 4))
(> arg1P 5))
(> arg2P 4))
(= 0 arg3P))
)

(rule
(f2503_0_isEqual_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f2881_0_isEqual_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg2)) (> arg1 5)) (> arg2 4))
(> arg1P 5))
(> arg2P 4))
(= 1 arg3P))
)

(rule
(f2503_0_isEqual_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f2881_0_isEqual_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg2)) (> arg1 6)) (> arg2 4))
(> arg1P 6))
(> arg2P 4))
(= 0 arg3P))
)

(rule
(f2503_0_isEqual_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f2881_0_isEqual_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg2)) (> arg1 6)) (> arg2 4))
(> arg1P 6))
(> arg2P 4))
(= 1 arg3P))
)

(rule
(f2503_0_isEqual_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f2774_0_isEqual_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg2P arg2)) (> arg1 3)) (> arg2 2))
(> arg1P 3))
(> arg2P 2))
(= 0 arg3P))
)

(rule
(f2503_0_isEqual_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f2774_0_isEqual_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= arg1P arg2)) (<= arg2P arg2))
(> arg1 3))
(> arg2 4))
(> arg1P 3))
(> arg2P 4))
(= 0 arg3P))
)

(rule
(f2503_0_isEqual_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f2774_0_isEqual_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= arg1P arg2)) (<= arg2P arg1))
(<= arg2P arg2))
(> arg1 3))
(> arg2 3))
(> arg1P 3))
(> arg2P 3))
(= 1 arg3P))
)

(rule
(f4119_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f4661_0_sublistOddDistinctParts_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P)
:guard
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 2) arg1)) (> arg1 2))
(> arg1P 2))
(> arg2P 0))
(<= (+ arg2 4) arg1))
)

(rule
(f4661_0_sublistOddDistinctParts_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f4740_0_sublistOddDistinctParts_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 2) arg1)) (> arg1 2))
(> arg2 0))
(> arg1P 2))
(> arg2P (- 1)))
(<= (+ arg3P 4) arg1))
(<= (+ arg3P 2) arg2))
)

(rule
(f4740_0_sublistOddDistinctParts_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f4661_0_sublistOddDistinctParts_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= arg1P arg2)) (<= (+ arg2P 3) arg1))
(<= (+ arg2P 1) arg2))
(> arg1 2))
(> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
(<= (+ arg3 4) arg1))
)

(rule
(f4661_0_sublistOddDistinctParts_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f4661_0_sublistOddDistinctParts_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P)
:guard
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= (+ arg2P 4) arg1)) (> arg1 3))
(> arg2 1))
(> arg1P 0))
(> arg2P (- 1)))
)

(rule
(f4661_0_sublistOddDistinctParts_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f4854_0_sublistOddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg1 5)) (> arg2 3)) (> arg1P 5))
(<= (+ arg3P 4) arg1))
(<= (+ arg4P 6) arg1))
(<= (+ arg3P 2) arg2))
(<= (+ arg4P 4) arg2))
(= 1 arg2P))
)

(rule
(f4661_0_sublistOddDistinctParts_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f4854_0_sublistOddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg1 6)) (> arg2 4)) (> arg1P 6))
(<= (+ arg3P 4) arg1))
(<= (+ arg4P 6) arg1))
(<= (+ arg3P 2) arg2))
(<= (+ arg4P 4) arg2))
(= 0 arg2P))
)

(rule
(f4661_0_sublistOddDistinctParts_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f4854_0_sublistOddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg1 6)) (> arg2 4)) (> arg1P 6))
(<= (+ arg3P 4) arg1))
(<= (+ arg4P 6) arg1))
(<= (+ arg3P 2) arg2))
(<= (+ arg4P 4) arg2))
(= 1 arg2P))
)

(rule
(f4661_0_sublistOddDistinctParts_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f4854_0_sublistOddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg1 4)) (> arg2 2)) (> arg1P 4))
(<= (+ arg3P 6) arg1))
(<= (+ arg3P 4) arg2))
(= 0 arg2P))
(= arg3P arg4P))
)

(rule
(f4661_0_sublistOddDistinctParts_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f4854_0_sublistOddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg1 4)) (> arg2 2)) (> arg1P 4))
(<= (+ arg3P 4) arg1))
(<= (+ arg4P 6) arg1))
(<= (+ arg3P 2) arg2))
(<= (+ arg4P 4) arg2))
(= 0 arg2P))
)

(rule
(f4854_0_sublistOddDistinctParts_EQ arg1 arg2 arg3 arg4 arg5 arg6)
(f4740_0_sublistOddDistinctParts_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 2) arg1)) (> arg1 4))
(> arg1P 4))
(> arg2P (- 1)))
(<= (+ arg3 4) arg1))
(<= (+ arg4 6) arg1))
(= 0 arg2))
(= arg3 arg3P))
)

(rule
(f4854_0_sublistOddDistinctParts_EQ arg1 arg2 arg3 arg4 arg5 arg6)
(f4661_0_sublistOddDistinctParts_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= (+ arg2P 4) arg1)) (> arg1 4))
(> arg1P 0))
(> arg2P (- 1)))
(<= (+ arg3 4) arg1))
(<= (+ arg4 6) arg1))
(= 1 arg2))
)

(rule
(f4661_0_sublistOddDistinctParts_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(|f4661_0_sublistOddDistinctParts_InvokeMethod'|
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P)
:guard
(exists
((x630 Int) (x631 Int))
(and
(and
(and
(and
(and
(and
(and (and (<= (+ x630 2) arg1) (<= x630 arg2)) (> arg1 2))
(> arg2 0))
(> x630 0))
(<= (+ x631 4) arg1))
(<= (+ x631 2) arg2))
(= arg1 arg1P))
(= arg2 arg2P))
)
)

(rule
(|f4661_0_sublistOddDistinctParts_InvokeMethod'| arg1 arg2 arg3 arg4 arg5 arg6)
(f4689_0_oddDistinctParts_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x691 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= arg1P arg2)) (> arg1 2))
(> arg2 0))
(> arg1P 0))
(<= (+ arg3P 4) arg1))
(<= (+ arg3P 2) arg2))
(< (- arg3P (* 2 x691)) 2))
(>= (- arg3P (* 2 x691)) 0))
(= (- arg3P (* 2 x691)) arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(|f4689_0_oddDistinctParts_NE'| arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x636 Int) (x635 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (< arg2 0) (> x636 arg3)) (<= (+ x635 2) arg1))
(> arg1 2))
(> x635 0))
(<= (+ arg3 2) arg1))
(<= (+ x636 4) arg1))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(|f4689_0_oddDistinctParts_NE'| arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x695 Int) (x696 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg2 0) (> x695 arg3)) (<= (+ x696 2) arg1))
(> arg1 2))
(> x696 0))
(<= (+ arg3 2) arg1))
(<= (+ x695 4) arg1))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(|f4689_0_oddDistinctParts_NE'| arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x700 Int) (x701 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (< arg2 0) (< x700 arg3)) (<= (+ x701 2) arg1))
(> arg1 2))
(> x701 0))
(<= (+ arg3 2) arg1))
(<= (+ x700 4) arg1))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(|f4689_0_oddDistinctParts_NE'| arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x705 Int) (x706 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg2 0) (< x705 arg3)) (<= (+ x706 2) arg1))
(> arg1 2))
(> x706 0))
(<= (+ arg3 2) arg1))
(<= (+ x705 4) arg1))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
)
)

(rule
(|f4689_0_oddDistinctParts_NE'| arg1 arg2 arg3 arg4 arg5 arg6)
(f4689_0_oddDistinctParts_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x712 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (< arg2 0) (> arg3P arg3)) (<= (+ arg1P 2) arg1))
(> arg1 2))
(> arg1P 0))
(<= (+ arg3 2) arg1))
(<= (+ arg3P 4) arg1))
(< (- arg3P (* 2 x712)) 2))
(>= (- arg3P (* 2 x712)) 0))
(= (- arg3P (* 2 x712)) arg2P))
)
)

(rule
(|f4689_0_oddDistinctParts_NE'| arg1 arg2 arg3 arg4 arg5 arg6)
(f4689_0_oddDistinctParts_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x718 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg2 0) (> arg3P arg3)) (<= (+ arg1P 2) arg1))
(> arg1 2))
(> arg1P 0))
(<= (+ arg3 2) arg1))
(<= (+ arg3P 4) arg1))
(< (- arg3P (* 2 x718)) 2))
(>= (- arg3P (* 2 x718)) 0))
(= (- arg3P (* 2 x718)) arg2P))
)
)

(rule
(|f4689_0_oddDistinctParts_NE'| arg1 arg2 arg3 arg4 arg5 arg6)
(f4689_0_oddDistinctParts_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x724 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (< arg2 0) (< arg3P arg3)) (<= (+ arg1P 2) arg1))
(> arg1 2))
(> arg1P 0))
(<= (+ arg3 2) arg1))
(<= (+ arg3P 4) arg1))
(< (- arg3P (* 2 x724)) 2))
(>= (- arg3P (* 2 x724)) 0))
(= (- arg3P (* 2 x724)) arg2P))
)
)

(rule
(|f4689_0_oddDistinctParts_NE'| arg1 arg2 arg3 arg4 arg5 arg6)
(f4689_0_oddDistinctParts_NE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x730 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg2 0) (< arg3P arg3)) (<= (+ arg1P 2) arg1))
(> arg1 2))
(> arg1P 0))
(<= (+ arg3 2) arg1))
(<= (+ arg3P 4) arg1))
(< (- arg3P (* 2 x730)) 2))
(>= (- arg3P (* 2 x730)) 0))
(= (- arg3P (* 2 x730)) arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x641 Int))
(and
(and
(and
(and (and (and (< arg2 0) (> x641 arg3)) (<= arg1P arg1)) (> arg1 5))
(> arg1P 5))
(<= (+ arg3 2) arg1))
(= 1 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x735 Int))
(and
(and
(and
(and (and (and (> arg2 0) (> x735 arg3)) (<= arg1P arg1)) (> arg1 5))
(> arg1P 5))
(<= (+ arg3 2) arg1))
(= 1 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x740 Int))
(and
(and
(and
(and (and (and (< arg2 0) (< x740 arg3)) (<= arg1P arg1)) (> arg1 5))
(> arg1P 5))
(<= (+ arg3 2) arg1))
(= 1 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x745 Int))
(and
(and
(and
(and (and (and (> arg2 0) (< x745 arg3)) (<= arg1P arg1)) (> arg1 5))
(> arg1P 5))
(<= (+ arg3 2) arg1))
(= 1 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x646 Int))
(and
(and
(and
(and (and (and (< arg2 0) (> x646 arg3)) (<= arg1P arg1)) (> arg1 6))
(> arg1P 6))
(<= (+ arg3 2) arg1))
(= 0 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x750 Int))
(and
(and
(and
(and (and (and (> arg2 0) (> x750 arg3)) (<= arg1P arg1)) (> arg1 6))
(> arg1P 6))
(<= (+ arg3 2) arg1))
(= 0 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x755 Int))
(and
(and
(and
(and (and (and (< arg2 0) (< x755 arg3)) (<= arg1P arg1)) (> arg1 6))
(> arg1P 6))
(<= (+ arg3 2) arg1))
(= 0 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x760 Int))
(and
(and
(and
(and (and (and (> arg2 0) (< x760 arg3)) (<= arg1P arg1)) (> arg1 6))
(> arg1P 6))
(<= (+ arg3 2) arg1))
(= 0 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x651 Int))
(and
(and
(and
(and (and (and (< arg2 0) (> x651 arg3)) (<= arg1P arg1)) (> arg1 6))
(> arg1P 6))
(<= (+ arg3 2) arg1))
(= 1 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x765 Int))
(and
(and
(and
(and (and (and (> arg2 0) (> x765 arg3)) (<= arg1P arg1)) (> arg1 6))
(> arg1P 6))
(<= (+ arg3 2) arg1))
(= 1 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x770 Int))
(and
(and
(and
(and (and (and (< arg2 0) (< x770 arg3)) (<= arg1P arg1)) (> arg1 6))
(> arg1P 6))
(<= (+ arg3 2) arg1))
(= 1 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x775 Int))
(and
(and
(and
(and (and (and (> arg2 0) (< x775 arg3)) (<= arg1P arg1)) (> arg1 6))
(> arg1P 6))
(<= (+ arg3 2) arg1))
(= 1 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x656 Int))
(and
(and
(and
(and (and (and (< arg2 0) (> x656 arg3)) (<= arg1P arg1)) (> arg1 4))
(> arg1P 4))
(<= (+ arg3 2) arg1))
(= 0 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x780 Int))
(and
(and
(and
(and (and (and (> arg2 0) (> x780 arg3)) (<= arg1P arg1)) (> arg1 4))
(> arg1P 4))
(<= (+ arg3 2) arg1))
(= 0 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x785 Int))
(and
(and
(and
(and (and (and (< arg2 0) (< x785 arg3)) (<= arg1P arg1)) (> arg1 4))
(> arg1P 4))
(<= (+ arg3 2) arg1))
(= 0 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x790 Int))
(and
(and
(and
(and (and (and (> arg2 0) (< x790 arg3)) (<= arg1P arg1)) (> arg1 4))
(> arg1P 4))
(<= (+ arg3 2) arg1))
(= 0 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x661 Int))
(and
(and
(and
(and (and (and (< arg2 0) (> x661 arg3)) (<= arg1P arg1)) (> arg1 4))
(> arg1P 4))
(<= (+ arg3 2) arg1))
(= 0 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x795 Int))
(and
(and
(and
(and (and (and (> arg2 0) (> x795 arg3)) (<= arg1P arg1)) (> arg1 4))
(> arg1P 4))
(<= (+ arg3 2) arg1))
(= 0 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x800 Int))
(and
(and
(and
(and (and (and (< arg2 0) (< x800 arg3)) (<= arg1P arg1)) (> arg1 4))
(> arg1P 4))
(<= (+ arg3 2) arg1))
(= 0 arg2P))
)
)

(rule
(f4689_0_oddDistinctParts_NE arg1 arg2 arg3 arg4 arg5 arg6)
(f4841_0_oddDistinctParts_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x805 Int))
(and
(and
(and
(and (and (and (> arg2 0) (< x805 arg3)) (<= arg1P arg1)) (> arg1 4))
(> arg1P 4))
(<= (+ arg3 2) arg1))
(= 0 arg2P))
)
)

(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P))

