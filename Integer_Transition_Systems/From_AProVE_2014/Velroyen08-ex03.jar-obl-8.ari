(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int))
(fun f128_0_loop_GE (-> Int Int Int))
(fun f1_0_main_Load (-> Int Int Int))
(fun |f1_0_main_Load'| (-> Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2)
(|f1_0_main_Load'| arg1P arg2P)
:guard
(exists
((x8 Int) (x9 Int) (x10 Int))
(and
(and
(and
(and
(and (and (> x8 (- 1)) (> arg2 1)) (= (- x9 (* 2 x10)) 0))
(> x9 (- 1)))
(> arg1 0))
(= arg1 arg1P))
(= arg2 arg2P))
)
)
(rule
(|f1_0_main_Load'| arg1 arg2)
(f128_0_loop_GE arg1P arg2P)
:guard
(exists
((x13 Int) (x14 Int) (x15 Int))
(and
(and
(and
(and
(and
(and (and (> x13 (- 1)) (> arg2 1)) (= (- x14 (* 2 x15)) 0))
(> x14 (- 1)))
(> arg1 0))
(< (- x14 (* 2 x15)) 2))
(>= (- x14 (* 2 x15)) 0))
(= (- 0 x13) arg1P))
)
)
(rule
(f128_0_loop_GE arg1 arg2)
(f128_0_loop_GE arg1P arg2P)
:guard
(and (= (- 5) arg1) (= (- 5) arg1P)))
(rule
(f128_0_loop_GE arg1 arg2)
(f128_0_loop_GE arg1P arg2P)
:guard
(and (and (< arg1 0) (< arg1 (- 5))) (= (+ arg1 1) arg1P)))
(rule
(f128_0_loop_GE arg1 arg2)
(f128_0_loop_GE arg1P arg2P)
:guard
(and (and (< arg1 0) (> arg1 (- 5))) (= (+ arg1 1) arg1P)))
(rule (__init arg1 arg2) (f1_0_main_Load arg1P arg2P))
