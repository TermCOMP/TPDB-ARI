(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f135_0_loop_aux_InvokeMethod (-> Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int))
(fun f74_0_loop_aux_LE (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f74_0_loop_aux_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (> arg1 0) (> arg2 (- 1))) (= arg2 arg1P))
(= arg2 arg2P))
(= arg2 arg3P))
)
(rule
(f74_0_loop_aux_LE arg1 arg2 arg3 arg4)
(f74_0_loop_aux_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (>= arg1 arg2) (> arg1 1)) (> arg2 4)) (= arg1 arg3))
(= (- arg1 1) arg1P))
(= (- arg2 1) arg2P))
(= (- arg1 1) arg3P))
)
(rule
(f74_0_loop_aux_LE arg1 arg2 arg3 arg4)
(f135_0_loop_aux_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (< arg1 arg2) (> arg2 1)) (>= (+ arg1 1) (* 2 arg2)))
(> arg1 0))
(= arg1 arg3))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg1 1) arg3P))
(= (+ arg2 1) arg4P))
)
(rule
(f74_0_loop_aux_LE arg1 arg2 arg3 arg4)
(f135_0_loop_aux_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (< arg1 arg2) (> arg2 1)) (< (+ arg1 1) (* 2 arg2)))
(> arg1 0))
(= arg1 arg3))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg1 1) arg3P))
(= (- arg2 1) arg4P))
)
(rule
(f135_0_loop_aux_InvokeMethod arg1 arg2 arg3 arg4)
(f74_0_loop_aux_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (and (> arg1 0) (> arg2 1)) (> arg3 1)) (> arg4 0))
(> arg2 arg1))
(>= arg2 arg3))
(<= arg1 arg4))
(= arg3 arg1P))
(= arg4 arg2P))
(= arg3 arg3P))
)
(rule
(f74_0_loop_aux_LE arg1 arg2 arg3 arg4)
(f74_0_loop_aux_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg1 0) (>= arg1 arg2)) (< arg2 5))
(<= (- (- arg1 1) (+ arg2 1)) 2))
(> arg2 (- 1)))
(= arg1 arg3))
(= (- arg1 1) arg1P))
(= (+ arg2 2) arg2P))
(= (- arg1 1) arg3P))
)
(rule
(f74_0_loop_aux_LE arg1 arg2 arg3 arg4)
(f74_0_loop_aux_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg1 0) (>= arg1 arg2)) (< arg2 5))
(> (- (- arg1 1) (+ arg2 1)) 2))
(> arg2 (- 1)))
(= arg1 arg3))
(= arg1 arg1P))
(= (+ arg2 1) arg2P))
(= arg1 arg3P))
)
(rule (__init arg1 arg2 arg3 arg4) (f1_0_main_Load arg1P arg2P arg3P arg4P))
