(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int))
(fun f160_0_factorial_GT (-> Int Int Int Int Int Int Int))
(fun f1_0_main_New (-> Int Int Int Int Int Int Int))
(fun f83_0_doSum_NONNULL (-> Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_New arg1 arg2 arg3 arg4 arg5 arg6)
(f83_0_doSum_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(> arg1P 3))
(rule
(f83_0_doSum_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f160_0_factorial_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg6P 1) arg1)) (> arg1 0))
(> arg1P 0))
(> arg6P (- 1)))
(<= (+ arg5P 2) arg1))
(= 1 arg2P))
(= 1 arg3P))
(= 1 arg4P))
)
(rule
(f160_0_factorial_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f83_0_doSum_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg2 0) (< arg5 arg3)) (>= arg1 (+ arg1P 1)))
(>= arg6 arg1P))
(> arg1 0))
(> arg6 (- 1)))
(> arg1P (- 1)))
(<= (+ arg5 2) arg1))
(= arg3 arg4))
)
(rule
(f160_0_factorial_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f160_0_factorial_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (>= arg5 arg3) (> arg3 0)) (> arg2 0)) (<= arg1P arg1))
(<= (+ arg6P 1) arg1))
(<= arg6P arg6))
(> arg1 0))
(> arg6 (- 1)))
(> arg1P 0))
(> arg6P (- 1)))
(<= (+ arg5 2) arg1))
(= arg3 arg4))
(= (* arg2 arg3) arg2P))
(= (+ arg3 1) arg3P))
(= (+ arg3 1) arg4P))
(= arg5 arg5P))
)
(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6)
(f1_0_main_New arg1P arg2P arg3P arg4P arg5P arg6P))
