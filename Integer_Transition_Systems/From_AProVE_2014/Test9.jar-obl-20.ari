(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int))
(fun f106_0_test_LE (-> Int Int Int Int))
(fun f120_0_test_LE (-> Int Int Int Int))
(fun f134_0_test_LE (-> Int Int Int Int))
(fun f148_0_test_LE (-> Int Int Int Int))
(fun f162_0_test_LE (-> Int Int Int Int))
(fun f176_0_test_LE (-> Int Int Int Int))
(fun f190_0_test_LE (-> Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int))
(fun f204_0_test_LE (-> Int Int Int Int))
(fun f218_0_test_LE (-> Int Int Int Int))
(fun f31_0_main_Cmp (-> Int Int Int Int))
(fun f43_0_main_GE (-> Int Int Int Int))
(fun f64_0_test_LE (-> Int Int Int Int))
(fun f78_0_test_LE (-> Int Int Int Int))
(fun f92_0_test_LE (-> Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f31_0_main_Cmp arg1P arg2P arg3P)
:guard
(and (and (> arg1 0) (> arg2 (- 1))) (= arg2 arg1P)))

(rule
(f31_0_main_Cmp arg1 arg2 arg3)
(f43_0_main_GE arg1P arg2P arg3P)
:guard
(and (and (= arg1 arg1P) (= arg1 arg2P)) (= arg1 arg3P)))

(rule
(f43_0_main_GE arg1 arg2 arg3)
(f31_0_main_Cmp arg1P arg2P arg3P)
:guard
(and
(and (and (> arg1 0) (> arg2 99)) (= arg2 arg3))
(= (- arg1 1) arg1P))
)

(rule
(f43_0_main_GE arg1 arg2 arg3)
(f43_0_main_GE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (and (> arg2 0) (< arg2 100)) (= arg2 arg3)) (= arg1 arg1P))
(= (+ arg2 1) arg2P))
(= (+ arg2 1) arg3P))
)

(rule
(f43_0_main_GE arg1 arg2 arg3)
(f64_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (and (> arg2 0) (< arg2 100)) (= arg2 arg3)) (= arg2 arg1P))
(= arg2 arg2P))
(= arg2 arg3P))
)

(rule
(f64_0_test_LE arg1 arg2 arg3)
(f64_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (> arg2 0) (= arg2 arg3)) (= arg1 arg1P))
(= (- arg2 1) arg2P))
(= (- arg2 1) arg3P))
)

(rule
(f64_0_test_LE arg1 arg2 arg3)
(f78_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and (and (and (= 0 arg2) (= 0 arg3)) (= arg1 arg1P)) (= arg1 arg2P))
(= arg1 arg3P))
)

(rule
(f78_0_test_LE arg1 arg2 arg3)
(f78_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (> arg2 0) (= arg2 arg3)) (= arg1 arg1P))
(= (- arg2 1) arg2P))
(= (- arg2 1) arg3P))
)

(rule
(f78_0_test_LE arg1 arg2 arg3)
(f92_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and (and (and (= 0 arg2) (= 0 arg3)) (= arg1 arg1P)) (= arg1 arg2P))
(= arg1 arg3P))
)

(rule
(f92_0_test_LE arg1 arg2 arg3)
(f92_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (> arg2 0) (= arg2 arg3)) (= arg1 arg1P))
(= (- arg2 1) arg2P))
(= (- arg2 1) arg3P))
)

(rule
(f92_0_test_LE arg1 arg2 arg3)
(f106_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and (and (and (= 0 arg2) (= 0 arg3)) (= arg1 arg1P)) (= arg1 arg2P))
(= arg1 arg3P))
)

(rule
(f106_0_test_LE arg1 arg2 arg3)
(f106_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (> arg2 0) (= arg2 arg3)) (= arg1 arg1P))
(= (- arg2 1) arg2P))
(= (- arg2 1) arg3P))
)

(rule
(f106_0_test_LE arg1 arg2 arg3)
(f120_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and (and (and (= 0 arg2) (= 0 arg3)) (= arg1 arg1P)) (= arg1 arg2P))
(= arg1 arg3P))
)

(rule
(f120_0_test_LE arg1 arg2 arg3)
(f120_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (> arg2 0) (= arg2 arg3)) (= arg1 arg1P))
(= (- arg2 1) arg2P))
(= (- arg2 1) arg3P))
)

(rule
(f120_0_test_LE arg1 arg2 arg3)
(f134_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and (and (and (= 0 arg2) (= 0 arg3)) (= arg1 arg1P)) (= arg1 arg2P))
(= arg1 arg3P))
)

(rule
(f134_0_test_LE arg1 arg2 arg3)
(f134_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (> arg2 0) (= arg2 arg3)) (= arg1 arg1P))
(= (- arg2 1) arg2P))
(= (- arg2 1) arg3P))
)

(rule
(f134_0_test_LE arg1 arg2 arg3)
(f148_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and (and (and (= 0 arg2) (= 0 arg3)) (= arg1 arg1P)) (= arg1 arg2P))
(= arg1 arg3P))
)

(rule
(f148_0_test_LE arg1 arg2 arg3)
(f148_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (> arg2 0) (= arg2 arg3)) (= arg1 arg1P))
(= (- arg2 1) arg2P))
(= (- arg2 1) arg3P))
)

(rule
(f148_0_test_LE arg1 arg2 arg3)
(f162_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and (and (and (= 0 arg2) (= 0 arg3)) (= arg1 arg1P)) (= arg1 arg2P))
(= arg1 arg3P))
)

(rule
(f162_0_test_LE arg1 arg2 arg3)
(f162_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (> arg2 0) (= arg2 arg3)) (= arg1 arg1P))
(= (- arg2 1) arg2P))
(= (- arg2 1) arg3P))
)

(rule
(f162_0_test_LE arg1 arg2 arg3)
(f176_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and (and (and (= 0 arg2) (= 0 arg3)) (= arg1 arg1P)) (= arg1 arg2P))
(= arg1 arg3P))
)

(rule
(f176_0_test_LE arg1 arg2 arg3)
(f176_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (> arg2 0) (= arg2 arg3)) (= arg1 arg1P))
(= (- arg2 1) arg2P))
(= (- arg2 1) arg3P))
)

(rule
(f176_0_test_LE arg1 arg2 arg3)
(f190_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and (and (and (= 0 arg2) (= 0 arg3)) (= arg1 arg1P)) (= arg1 arg2P))
(= arg1 arg3P))
)

(rule
(f190_0_test_LE arg1 arg2 arg3)
(f190_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (> arg2 0) (= arg2 arg3)) (= arg1 arg1P))
(= (- arg2 1) arg2P))
(= (- arg2 1) arg3P))
)

(rule
(f190_0_test_LE arg1 arg2 arg3)
(f204_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and (and (and (= 0 arg2) (= 0 arg3)) (= arg1 arg1P)) (= arg1 arg2P))
(= arg1 arg3P))
)

(rule
(f204_0_test_LE arg1 arg2 arg3)
(f204_0_test_LE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (> arg2 0) (= arg2 arg3)) (= arg1 arg1P))
(= (- arg2 1) arg2P))
(= (- arg2 1) arg3P))
)

(rule
(f204_0_test_LE arg1 arg2 arg3)
(f218_0_test_LE arg1P arg2P arg3P)
:guard
(and (and (= 0 arg2) (= 0 arg3)) (= arg1 arg1P)))

(rule
(f218_0_test_LE arg1 arg2 arg3)
(f218_0_test_LE arg1P arg2P arg3P)
:guard
(and (> arg1 0) (= (- arg1 1) arg1P)))

(rule (__init arg1 arg2 arg3) (f1_0_main_Load arg1P arg2P arg3P))
