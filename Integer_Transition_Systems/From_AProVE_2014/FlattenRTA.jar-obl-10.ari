(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int))
(fun f1223_0_random_ArrayAccess (-> Int Int Int Int Int Int Int))
(fun f1548_0_flatten_NULL (-> Int Int Int Int Int Int Int))
(fun f1714_0_createTree_Return (-> Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int))
(fun f2482_0_createTree_LE (-> Int Int Int Int Int Int Int))
(fun f962_0_main_LE (-> Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f962_0_main_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg2 (- 1)) (> arg3P (- 1))) (<= arg1P arg1))
(<= (+ arg2P 1) arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P (- 1)))
(= 1 arg4P))
)
(rule
(f962_0_main_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f962_0_main_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x5 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> x5 0)) (>= arg1 arg1P))
(>= arg2 (- arg1P 1)))
(>= arg2 (- arg2P 2)))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P 1))
(= (- arg3 1) arg3P))
)
)
(rule
(f962_0_main_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f962_0_main_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x13 Int))
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> x13 0)) (<= arg1P arg1))
(<= (- arg1P 1) arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P 2))
(= (- arg3 1) arg3P))
)
)
(rule
(f1714_0_createTree_Return arg1 arg2 arg3 arg4 arg5 arg6)
(f962_0_main_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg1P 1) arg4)) (> arg1 0))
(> arg4 1))
(> arg1P 0))
(> arg2P 3))
(<= (+ arg6 2) arg4))
(= (- arg3 1) arg3P))
(= arg5 arg4P))
)
(rule
(f962_0_main_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f1548_0_flatten_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x30 Int))
(and
(and
(and
(and
(and (and (and (<= arg1P arg2) (> x30 0)) (<= arg2P arg2)) (> arg1 0))
(> arg2 (- 1)))
(> arg1P (- 1)))
(> arg2P (- 1)))
(= 0 arg3))
)
)
(rule
(f1548_0_flatten_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1548_0_flatten_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ arg1P 2) arg1) (<= (+ arg1P 2) arg2))
(<= (+ arg2P 2) arg1))
(<= (+ arg2P 2) arg2))
(> arg1 1))
(> arg2 1))
(> arg1P (- 1)))
(> arg2P (- 1)))
)
(rule
(f1548_0_flatten_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1548_0_flatten_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (- arg1P 2) arg1) (<= (- arg1P 2) arg2))
(<= (- arg2P 2) arg1))
(<= (- arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 2))
(> arg2P 2))
)
(rule
(f962_0_main_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2482_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x46 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg3P 0) (> x46 0)) (> arg3 0)) (> arg4 (- 1)))
(<= (- arg1P 1) arg1))
(<= (- arg1P 2) arg2))
(<= (- arg2P 1) arg1))
(<= (- arg2P 2) arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 1))
(> arg2P 1))
)
)
(rule
(f2482_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2482_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> arg3 0)) (<= arg1P arg1))
(<= (+ arg2P 2) arg2))
(> arg1 0))
(> arg2 2))
(> arg1P 0))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
(rule
(f2482_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2482_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x67 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg3 0) (> x67 0)) (> arg4 (- 1))) (<= arg1P arg1))
(<= (+ arg2P 2) arg2))
(> arg1 0))
(> arg2 2))
(> arg1P 0))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
)
(rule
(f2482_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2482_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x75 Int))
(and
(and
(and
(and
(and (and (and (> arg4 (- 1)) (> x75 0)) (> arg3 0)) (> arg1 0))
(> arg2 1))
(> arg1P 0))
(> arg2P 0))
(= (- arg3 1) arg3P))
)
)
(rule
(f2482_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2482_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (and (> arg3 0) (> arg4 (- 1))) (> arg1 0)) (> arg2 1))
(> arg1P 0))
(> arg2P 0))
(= (- arg3 1) arg3P))
)
(rule
(f2482_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2482_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> arg4 (- 1))) (<= (- arg1P 2) arg1))
(<= (- arg1P 2) arg2))
(<= (- arg2P 2) arg1))
(<= (- arg2P 2) arg2))
(> arg1 1))
(> arg2 1))
(> arg1P 3))
(> arg2P 3))
(= (- arg3 1) arg3P))
)
(rule
(f2482_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2482_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x97 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> x97 0)) (> arg3 0))
(<= (- arg1P 2) arg1))
(<= (- arg1P 2) arg2))
(<= (- arg2P 2) arg1))
(<= (- arg2P 2) arg2))
(> arg1 1))
(> arg2 1))
(> arg1P 3))
(> arg2P 3))
(= (- arg3 1) arg3P))
)
)
(rule
(f962_0_main_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f1223_0_random_ArrayAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x104 Int) (x98 Int))
(and
(and
(and
(and
(and
(and
(and (and (and (> x104 0) (> x98 0)) (> arg3 0)) (> arg4 (- 1)))
(<= arg1P arg1))
(<= (- arg1P 1) arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(= (+ arg4 1) arg2P))
)
)
(rule
(f2482_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f1223_0_random_ArrayAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> arg4 (- 1))) (<= arg1P arg1))
(<= (+ arg1P 1) arg2))
(> arg1 0))
(> arg2 1))
(> arg1P 0))
(= (+ arg4 1) arg2P))
)
(rule
(f2482_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f1223_0_random_ArrayAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x117 Int))
(and
(and
(and
(and
(and
(and (and (and (> arg4 (- 1)) (> x117 0)) (> arg3 0)) (<= arg1P arg1))
(<= (+ arg1P 1) arg2))
(> arg1 0))
(> arg2 1))
(> arg1P 0))
(= (+ arg4 1) arg2P))
)
)
(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P))
