(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int))
(fun f117_0_createList_GE (-> Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int))
(fun f232_0_main_InvokeMethod (-> Int Int Int Int))
(fun f389_0_dupList_NONNULL (-> Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f117_0_createList_GE arg1P arg2P arg3P)
:guard
(and (and (> arg1P (- 1)) (> arg2 0)) (> arg1 0)))

(rule
(f1_0_main_Load arg1 arg2 arg3)
(f232_0_main_InvokeMethod arg1P arg2P arg3P)
:guard
(exists
((x7 Int))
(and
(and
(and
(and (and (and (> x7 (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P 3))
(= 0 arg3P))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3)
(f232_0_main_InvokeMethod arg1P arg2P arg3P)
:guard
(exists
((x12 Int))
(and
(and
(and
(and
(and
(and (and (> x12 (- 1)) (> arg2 0)) (>= arg1 arg1P))
(>= arg1 (- arg2P 1)))
(> arg1 0))
(> arg1P 0))
(> arg2P 1))
(= 0 arg3P))
)
)

(rule
(f117_0_createList_GE arg1 arg2 arg3)
(f117_0_createList_GE arg1P arg2P arg3P)
:guard
(and (and (> arg1 (- 1)) (< (- arg1 1) arg1)) (= (- arg1 1) arg1P)))

(rule
(f232_0_main_InvokeMethod arg1 arg2 arg3)
(f389_0_dupList_NONNULL arg1P arg2P arg3P)
:guard
(exists
((x15 Int))
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (> x15 0)) (<= (+ arg2P 2) arg2))
(> arg1 0))
(> arg2 1))
(> arg1P 1))
(> arg2P (- 1)))
(= 0 arg3))
(= 0 arg3P))
)
)

(rule
(f389_0_dupList_NONNULL arg1 arg2 arg3)
(f389_0_dupList_NONNULL arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (< arg3 0)) (<= arg1P arg2))
(<= (+ arg2P 3) arg1))
(<= (+ arg2P 1) arg2))
(> arg1 2))
(> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
(<= (+ arg3P 4) arg1))
(<= (+ arg3 2) arg1))
(<= (+ arg3P 2) arg2))
)

(rule
(f389_0_dupList_NONNULL arg1 arg2 arg3)
(f389_0_dupList_NONNULL arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (> arg3 0)) (<= arg1P arg2))
(<= (+ arg2P 3) arg1))
(<= (+ arg2P 1) arg2))
(> arg1 2))
(> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
(<= (+ arg3P 4) arg1))
(<= (+ arg3 2) arg1))
(<= (+ arg3P 2) arg2))
)

(rule
(f389_0_dupList_NONNULL arg1 arg2 arg3)
(f389_0_dupList_NONNULL arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (- arg1P 2) arg2)) (<= (+ arg2P 2) arg1))
(<= arg2P arg2))
(> arg1 2))
(> arg2 0))
(> arg1P 2))
(> arg2P 0))
(= 0 arg3))
(= 1 arg3P))
)

(rule (__init arg1 arg2 arg3) (f1_0_main_Load arg1P arg2P arg3P))
