(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int))
(fun f161_0_createList_Return (-> Int Int Int))
(fun f1_0_main_Load (-> Int Int Int))
(fun f201_0_createList_LE (-> Int Int Int))
(fun f227_0_isCyclic_NONNULL (-> Int Int Int))
(fun f331_0_isCyclic_NULL (-> Int Int Int))
(entrypoint __init)
(rule
(f161_0_createList_Return arg1 arg2)
(f227_0_isCyclic_NONNULL arg1P arg2P)
:guard
(and (and (<= arg1P arg1) (> arg1 (- 1))) (> arg1P (- 1))))
(rule
(f1_0_main_Load arg1 arg2)
(f227_0_isCyclic_NONNULL arg1P arg2P)
:guard
(and (> arg1 0) (> arg1P (- 1))))
(rule
(f227_0_isCyclic_NONNULL arg1 arg2)
(f331_0_isCyclic_NULL arg1P arg2P)
:guard
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 1) arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P (- 1)))
)
(rule
(f331_0_isCyclic_NULL arg1 arg2)
(f331_0_isCyclic_NULL arg1P arg2P)
:guard
(and
(and
(and
(and (and (>= arg1 (+ arg1P 1)) (>= arg2 (+ arg2P 3))) (> arg1 0))
(> arg2 2))
(> arg1P (- 1)))
(> arg2P (- 1)))
)
(rule
(f1_0_main_Load arg1 arg2)
(f201_0_createList_LE arg1P arg2P)
:guard
(and (and (> arg2 (- 1)) (> arg1P (- 1))) (> arg1 0)))
(rule
(f201_0_createList_LE arg1 arg2)
(f201_0_createList_LE arg1P arg2P)
:guard
(and (> arg1 0) (= (- arg1 1) arg1P)))
(rule (__init arg1 arg2) (f1_0_main_Load arg1P arg2P))
