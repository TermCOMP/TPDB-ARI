(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int))
(fun f155_0_main_ArrayAccess (-> Int Int Int Int Int Int))
(fun f1_0_main_New (-> Int Int Int Int Int Int))
(fun f201_0_main_InvokeMethod (-> Int Int Int Int Int Int))
(fun f226_0_isZero_NONNULL (-> Int Int Int Int Int Int))
(fun f287_0_isZero_NONNULL (-> Int Int Int Int Int Int))
(fun f321_0_copy_NONNULL (-> Int Int Int Int Int Int))
(fun f534_0_div_InvokeMethod (-> Int Int Int Int Int Int))
(fun f555_0_div_InvokeMethod (-> Int Int Int Int Int Int))
(fun f69_0__init__GT (-> Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_New arg1 arg2 arg3 arg4 arg5)
(f155_0_main_ArrayAccess arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x4 Int))
(and
(and
(and
(and (and (and (> x4 (- 1)) (> arg2 0)) (<= arg2P arg1)) (> arg1 0))
(> arg1P 2))
(> arg2P 0))
(= arg2 arg3P))
)
)

(rule
(f1_0_main_New arg1 arg2 arg3 arg4 arg5)
(f155_0_main_ArrayAccess arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and (and (<= (- arg1P 1) arg1) (> arg2 0)) (<= arg2P arg1))
(> arg1 0))
(> arg1P 1))
(> arg2P 0))
(= arg2 arg3P))
)

(rule
(f155_0_main_ArrayAccess arg1 arg2 arg3 arg4 arg5)
(f201_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg1 arg1P) (> arg3 1)) (<= arg1P arg2))
(>= arg1 arg2P))
(>= arg1 (- arg3P 1)))
(<= (- arg3P 1) arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 0))
(> arg3P 1))
(>= arg1 (+ arg5P 2)))
(= arg3 arg4P))
)

(rule
(f155_0_main_ArrayAccess arg1 arg2 arg3 arg4 arg5)
(f201_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x23 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> x23 (- 1)) (> arg3 1)) (<= arg1P arg1))
(<= arg1P arg2))
(<= arg2P arg1))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 0))
(> arg3P 2))
(<= (+ arg5P 2) arg1))
(= arg3 arg4P))
)
)

(rule
(f1_0_main_New arg1 arg2 arg3 arg4 arg5)
(f69_0__init__GT arg1P arg2P arg3P arg4P arg5P)
:guard
(and (and (> arg1P (- 1)) (> arg2 0)) (> arg1 0)))

(rule
(f155_0_main_ArrayAccess arg1 arg2 arg3 arg4 arg5)
(f69_0__init__GT arg1P arg2P arg3P arg4P arg5P)
:guard
(and (and (and (> arg1P (- 1)) (> arg3 1)) (> arg1 0)) (> arg2 0)))

(rule
(f69_0__init__GT arg1 arg2 arg3 arg4 arg5)
(f69_0__init__GT arg1P arg2P arg3P arg4P arg5P)
:guard
(and (and (> arg1 0) (< (- arg1 1) arg1)) (= (- arg1 1) arg1P)))

(rule
(f201_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f226_0_isZero_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (> arg4 1)) (<= arg2P arg3))
(<= (+ arg3P 1) arg3))
(> arg1 0))
(> arg2 0))
(> arg3 0))
(> arg1P 0))
(> arg2P 0))
(> arg3P (- 1)))
(<= (+ arg5 2) arg2))
)

(rule
(f226_0_isZero_NONNULL arg1 arg2 arg3 arg4 arg5)
(f226_0_isZero_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= (+ arg1P 1) arg1) (<= (+ arg1P 3) arg2))
(<= (+ arg1P 1) arg3))
(<= arg2P arg2))
(<= (- arg2P 2) arg3))
(<= (+ arg3P 2) arg2))
(<= arg3P arg3))
(> arg1 2))
(> arg2 4))
(> arg3 2))
(> arg1P 1))
(> arg2P 4))
(> arg3P 2))
)

(rule
(f226_0_isZero_NONNULL arg1 arg2 arg3 arg4 arg5)
(f534_0_div_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(and (and (and (> arg1 2) (> arg2 3)) (> arg3 1)) (> arg1P 2)))

(rule
(f226_0_isZero_NONNULL arg1 arg2 arg3 arg4 arg5)
(f534_0_div_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and (and (<= (+ arg1P 1) arg1) (<= (+ arg1P 2) arg2)) (<= arg1P arg3))
(> arg1 2))
(> arg2 3))
(> arg3 1))
(> arg1P 1))
)

(rule
(f534_0_div_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f226_0_isZero_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (- arg2P 3) arg1)) (<= (- arg3P 1) arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P 3))
(> arg3P 1))
)

(rule
(f226_0_isZero_NONNULL arg1 arg2 arg3 arg4 arg5)
(f555_0_div_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and (and (<= (- arg2P 3) arg1) (<= arg2P arg2)) (<= (- arg2P 2) arg3))
(> arg1 2))
(> arg2 5))
(> arg3 3))
(> arg1P 0))
(> arg2P 5))
)

(rule
(f226_0_isZero_NONNULL arg1 arg2 arg3 arg4 arg5)
(f555_0_div_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and (and (<= arg2P arg2) (<= (- arg2P 2) arg3)) (> arg1 2))
(> arg2 6))
(> arg3 4))
(> arg1P 0))
(> arg2P 6))
)

(rule
(f226_0_isZero_NONNULL arg1 arg2 arg3 arg4 arg5)
(f555_0_div_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= (+ arg1P 1) arg1) (<= (+ arg1P 5) arg2))
(<= (+ arg1P 3) arg3))
(<= arg2P arg2))
(<= (- arg2P 2) arg3))
(> arg1 2))
(> arg2 6))
(> arg3 4))
(> arg1P 1))
(> arg2P 6))
)

(rule
(f555_0_div_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f226_0_isZero_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= arg2P arg2)) (<= (+ arg3P 2) arg2))
(> arg1 0))
(> arg2 4))
(> arg1P 0))
(> arg2P 4))
(> arg3P 2))
)

(rule
(f226_0_isZero_NONNULL arg1 arg2 arg3 arg4 arg5)
(f287_0_isZero_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= (+ arg2P 2) arg2)) (<= arg2P arg3))
(<= (+ arg3P 3) arg2))
(<= (+ arg3P 1) arg3))
(> arg1 2))
(> arg2 2))
(> arg3 0))
(> arg1P 0))
(> arg2P 0))
(> arg3P (- 1)))
)

(rule
(f287_0_isZero_NONNULL arg1 arg2 arg3 arg4 arg5)
(f287_0_isZero_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= (+ arg2P 2) arg2)) (<= arg2P arg3))
(<= (+ arg3P 3) arg2))
(<= (+ arg3P 1) arg3))
(> arg1 2))
(> arg2 2))
(> arg3 0))
(> arg1P 0))
(> arg2P 0))
(> arg3P (- 1)))
)

(rule
(f287_0_isZero_NONNULL arg1 arg2 arg3 arg4 arg5)
(f321_0_copy_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 1) arg1)) (> arg1 0))
(> arg2 1))
(> arg3 (- 1)))
(> arg1P 0))
(> arg2P (- 1)))
)

(rule
(f321_0_copy_NONNULL arg1 arg2 arg3 arg4 arg5)
(f321_0_copy_NONNULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= arg1P arg2)) (<= (+ arg2P 3) arg1))
(<= (+ arg2P 1) arg2))
(> arg1 2))
(> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
)

(rule
(__init arg1 arg2 arg3 arg4 arg5)
(f1_0_main_New arg1P arg2P arg3P arg4P arg5P))

