(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int))
(fun f1214_0_member_NULL (-> Int Int Int Int Int Int Int))
(fun f1489_0_max_NULL (-> Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int))
(fun f252_0_createIntList_Return (-> Int Int Int Int Int Int Int))
(fun f605_0_createIntList_LE (-> Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f252_0_createIntList_Return arg1 arg2 arg3 arg4 arg5 arg6)
(f1489_0_max_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (- arg1P 1) arg2)) (<= arg3P arg2))
(<= arg4P arg2))
(<= arg6P arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(> arg3P (- 1)))
(> arg4P (- 1)))
(> arg6P (- 1)))
(= 0 arg2P))
(= 0 arg5P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f1489_0_max_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)) (> arg3P (- 1)))
(> arg4P (- 1)))
(> arg6P (- 1)))
(= 0 arg2P))
(= 0 arg5P))
)

(rule
(f1489_0_max_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1489_0_max_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x24 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= x24 arg5)) (<= (- arg1P 1) arg3))
(<= arg1P arg4))
(<= arg1P arg6))
(<= arg3P arg3))
(<= (+ arg4P 1) arg4))
(<= (+ arg4P 1) arg6))
(<= (+ arg6P 1) arg4))
(<= (+ arg6P 1) arg6))
(> arg1 0))
(> arg3 (- 1)))
(> arg4 0))
(> arg6 0))
(> arg1P 0))
(> arg3P (- 1)))
(> arg4P (- 1)))
(> arg6P (- 1)))
(= arg2 arg2P))
(= arg5 arg5P))
)
)

(rule
(f1489_0_max_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1489_0_max_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> arg5P arg5)) (<= (- arg1P 1) arg3))
(<= arg1P arg4))
(<= arg1P arg6))
(<= arg3P arg3))
(<= (+ arg4P 1) arg4))
(<= (+ arg4P 1) arg6))
(<= (+ arg6P 1) arg4))
(<= (+ arg6P 1) arg6))
(> arg1 0))
(> arg3 (- 1)))
(> arg4 0))
(> arg6 0))
(> arg1P 0))
(> arg3P (- 1)))
(> arg4P (- 1)))
(> arg6P (- 1)))
(<= (+ arg5P 2) arg4))
(<= (+ arg5P 2) arg6))
(= arg2 arg2P))
)

(rule
(f1489_0_max_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1489_0_max_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x37 Int) (x48 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (>= arg5 arg2) (> x37 0)) (> x48 0)) (<= arg1P arg1))
(<= (- arg1P 1) arg3))
(<= (- arg1P 1) arg4))
(<= (- arg1P 1) arg6))
(<= arg3P arg3))
(<= arg4P arg3))
(<= arg6P arg3))
(> arg1 0))
(> arg3 (- 1)))
(> arg4 (- 1)))
(> arg6 (- 1)))
(> arg1P 0))
(> arg3P (- 1)))
(> arg4P (- 1)))
(> arg6P (- 1)))
(= (+ arg2 1) arg2P))
(= 0 arg5P))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f605_0_createIntList_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and (and (and (> arg2 (- 1)) (> arg1P (- 1))) (> arg1 0)) (= 1 arg2P)))

(rule
(f605_0_createIntList_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f605_0_createIntList_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (> arg1 0) (> arg2 0)) (= (- arg1 1) arg1P))
(= (+ arg2 1) arg2P))
)

(rule
(f1489_0_max_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1214_0_member_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x54 Int) (x63 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (>= arg5 arg2) (> x54 0)) (> x63 0)) (<= arg2P arg3))
(<= arg3P arg3))
(> arg1 0))
(> arg3 (- 1)))
(> arg4 (- 1)))
(> arg6 (- 1)))
(> arg2P (- 1)))
(> arg3P (- 1)))
(= arg2 arg1P))
)
)

(rule
(f1214_0_member_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1214_0_member_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x70 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg2P 1) arg2) (< x70 arg1)) (<= (+ arg2P 1) arg3))
(<= (+ arg3P 1) arg2))
(<= (+ arg3P 1) arg3))
(> arg2 0))
(> arg3 0))
(> arg2P (- 1)))
(> arg3P (- 1)))
(= arg1 arg1P))
)
)

(rule
(f1214_0_member_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1214_0_member_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x72 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg2P 1) arg2) (> x72 arg1)) (<= (+ arg2P 1) arg3))
(<= (+ arg3P 1) arg2))
(<= (+ arg3P 1) arg3))
(> arg2 0))
(> arg3 0))
(> arg2P (- 1)))
(> arg3P (- 1)))
(= arg1 arg1P))
)
)

(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P))

