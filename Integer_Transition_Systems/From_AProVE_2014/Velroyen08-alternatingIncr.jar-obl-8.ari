(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int))
(fun f1_0_main_Load (-> Int Int Int))
(fun f49_0_increase_LE (-> Int Int Int))
(fun |f49_0_increase_LE'| (-> Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2)
(f49_0_increase_LE arg1P arg2P)
:guard
(and (and (> arg1 0) (> arg2 (- 1))) (= arg2 arg1P)))
(rule
(f49_0_increase_LE arg1 arg2)
(|f49_0_increase_LE'| arg1P arg2P)
:guard
(exists
((x5 Int))
(and (and (= (- arg1 (* 2 x5)) 0) (> arg1 0)) (= arg1 arg1P)))
)
(rule
(|f49_0_increase_LE'| arg1 arg2)
(f49_0_increase_LE arg1P arg2P)
:guard
(exists
((x7 Int))
(and
(and
(and (and (> arg1 0) (= (- arg1 (* 2 x7)) 0)) (< (- arg1 (* 2 x7)) 2))
(>= (- arg1 (* 2 x7)) 0))
(= (- arg1 1) arg1P))
)
)
(rule
(f49_0_increase_LE arg1 arg2)
(|f49_0_increase_LE'| arg1P arg2P)
:guard
(exists
((x9 Int))
(and (and (> arg1 0) (= (- arg1 (* 2 x9)) 1)) (= arg1 arg1P)))
)
(rule
(|f49_0_increase_LE'| arg1 arg2)
(f49_0_increase_LE arg1P arg2P)
:guard
(exists
((x11 Int))
(and
(and
(and
(and (= (- arg1 (* 2 x11)) 1) (> arg1 0))
(< (- arg1 (* 2 x11)) 2))
(>= (- arg1 (* 2 x11)) 0))
(= (+ arg1 3) arg1P))
)
)
(rule (__init arg1 arg2) (f1_0_main_Load arg1P arg2P))
