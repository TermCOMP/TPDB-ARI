(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int))
(fun f1007_0_main_InvokeMethod (-> Int Int Int Int Int Int Int))
(fun f1142_0_insert_GT (-> Int Int Int Int Int Int Int))
(fun f1332_0_rotateEachNode_FieldAccess (-> Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int))
(fun f358_0_createTree_Return (-> Int Int Int Int Int Int Int))
(fun f972_0_createTree_GE (-> Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f1007_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x7 Int))
(and
(and
(and (and (and (> x7 (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P 0))
)
)

(rule
(f358_0_createTree_Return arg1 arg2 arg3 arg4 arg5 arg6)
(f1007_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg1 arg1P) (<= arg1P arg2)) (<= arg2P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 0))
(<= (+ arg3 2) arg2))
(<= (+ arg5 2) arg2))
(<= (+ arg4 2) arg2))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)

(rule
(f1007_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f1332_0_rotateEachNode_FieldAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x16 Int))
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg2) (> x16 1)) (<= arg2P arg2)) (> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 0))
(<= (+ arg3 2) arg2))
(<= (+ arg5 2) arg2))
(<= (+ arg4 2) arg2))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f972_0_createTree_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and (and (and (> arg6P (- 1)) (> arg2 1)) (> arg3P (- 1))) (> arg1 0))
(> arg1P 1))
(= 0 arg2P))
(= arg2 arg4P))
(= 2 arg5P))
)

(rule
(f972_0_createTree_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f972_0_createTree_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x37 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (> arg3 arg2)) (> arg3 0)) (> arg4 1))
(> x37 (- 1)))
(< arg5 arg4))
(> arg1 0))
(> arg1P 3))
(<= (+ arg6 2) arg1))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
)

(rule
(f972_0_createTree_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f972_0_createTree_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x46 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (> arg3 arg2)) (> arg3 0)) (> arg4 1))
(> x46 (- 1)))
(< arg5 arg4))
(> arg1 0))
(> arg1P 3))
(<= (+ arg6 2) arg1))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
)

(rule
(f972_0_createTree_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f972_0_createTree_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x55 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (> arg3 arg2)) (> arg3 0)) (> arg4 1))
(> x55 (- 1)))
(< arg5 arg4))
(> arg1 0))
(> arg1P 2))
(<= (+ arg6 2) arg1))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
)

(rule
(f972_0_createTree_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f972_0_createTree_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x64 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (> arg3 arg2)) (> arg3 0)) (> arg4 1))
(> x64 (- 1)))
(< arg5 arg4))
(> arg1 0))
(> arg1P 2))
(<= (+ arg6 2) arg1))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
)

(rule
(f1332_0_rotateEachNode_FieldAccess arg1 arg2 arg3 arg4 arg5 arg6)
(f1332_0_rotateEachNode_FieldAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ arg1P 3) arg1) (<= (+ arg1P 3) arg2))
(<= (+ arg2P 3) arg1))
(<= (+ arg2P 3) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P (- 1)))
(> arg2P (- 1)))
)

(rule
(f1332_0_rotateEachNode_FieldAccess arg1 arg2 arg3 arg4 arg5 arg6)
(f1332_0_rotateEachNode_FieldAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ arg1P 2) arg1) (<= (+ arg1P 2) arg2))
(<= (+ arg2P 2) arg1))
(<= (+ arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P (- 1)))
(> arg2P (- 1)))
)

(rule
(f972_0_createTree_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f1142_0_insert_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (> arg3 arg2)) (> arg3 0)) (> arg4 1))
(> arg2P (- 1)))
(< arg5 arg4))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(<= (+ arg6 2) arg1))
(= arg4 arg3P))
(= arg6 arg4P))
)

(rule
(f1142_0_insert_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f1142_0_insert_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg3 1) (< arg4 arg2)) (<= (+ arg1P 2) arg1))
(> arg1 2))
(> arg1P 0))
(<= (+ arg4 2) arg1))
(<= (+ arg4P 4) arg1))
(= arg2 arg2P))
(= arg3 arg3P))
)

(rule
(f1142_0_insert_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f1142_0_insert_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg3 1) (>= arg4 arg2)) (<= (+ arg1P 2) arg1))
(> arg1 2))
(> arg1P 0))
(<= (+ arg4 2) arg1))
(<= (+ arg4P 4) arg1))
(= arg2 arg2P))
(= arg3 arg3P))
)

(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P))

