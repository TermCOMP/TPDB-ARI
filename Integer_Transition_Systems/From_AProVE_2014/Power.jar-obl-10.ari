(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f116_0_even_NE (-> Int Int Int Int Int))
(fun f168_0_odd_NE (-> Int Int Int Int Int))
(fun f1_0_main_ConstantStackPush (-> Int Int Int Int Int))
(fun f60_0_power_GT (-> Int Int Int Int Int))
(fun |f60_0_power_GT'| (-> Int Int Int Int Int))
(fun f626_0_main_GE (-> Int Int Int Int Int))
(fun f675_0_main_InvokeMethod (-> Int Int Int Int Int))
(fun f712_0_main_ArrayAccess (-> Int Int Int Int Int))
(fun f753_0_main_InvokeMethod (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_ConstantStackPush arg1 arg2 arg3 arg4)
(f626_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (<= arg1P arg1) (> arg2 (- 1))) (> arg1 0)) (> arg1P 0))
(= 0 arg2P))
(= arg2 arg3P))
)
(rule
(f626_0_main_GE arg1 arg2 arg3 arg4)
(f675_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x8 Int))
(and
(and
(and
(and
(and (and (and (> arg3 arg2) (> arg3 0)) (> x8 (- 1))) (<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= arg3 arg4P))
)
)
(rule
(f626_0_main_GE arg1 arg2 arg3 arg4)
(f60_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (> arg3 arg2) (> arg3 0)) (> arg2P (- 1))) (> arg1 0))
(= arg3 arg1P))
)
(rule
(f626_0_main_GE arg1 arg2 arg3 arg4)
(f675_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (and (> arg3 arg2) (> arg3 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= 1 arg3P))
(= arg3 arg4P))
)
(rule
(f626_0_main_GE arg1 arg2 arg3 arg4)
(f675_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x21 Int))
(and
(and
(and
(and
(and
(and (and (and (> arg3 arg2) (> arg3 0)) (> x21 (- 1))) (<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg3 arg4P))
)
)
(rule
(f675_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f712_0_main_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (> arg4 0) (> arg3 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= arg4 arg3P))
)
(rule
(f712_0_main_ArrayAccess arg1 arg2 arg3 arg4)
(f60_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (> arg3 0) (> arg2P (- 1))) (< arg2 arg3)) (> arg1 0))
(= arg3 arg1P))
)
(rule
(f712_0_main_ArrayAccess arg1 arg2 arg3 arg4)
(f753_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x36 Int))
(and
(and
(and
(and
(and (and (and (> arg3 0) (> x36 (- 1))) (< arg2 arg3)) (<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= arg3 arg4P))
)
)
(rule
(f712_0_main_ArrayAccess arg1 arg2 arg3 arg4)
(f753_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (and (< arg2 arg3) (> arg3 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= 1 arg3P))
(= arg3 arg4P))
)
(rule
(f712_0_main_ArrayAccess arg1 arg2 arg3 arg4)
(f753_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x45 Int))
(and
(and
(and
(and
(and
(and (and (and (> arg3 0) (> x45 (- 1))) (< arg2 arg3)) (<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg3 arg4P))
)
)
(rule
(f753_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f626_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg4 0)) (> arg1 0)) (> arg1P 0))
(= 1 arg3))
(= (+ arg2 1) arg2P))
(= arg4 arg3P))
)
(rule
(f753_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f626_0_main_GE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (> arg3 0) (> arg4 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(= (+ arg2 1) arg2P))
(= arg4 arg3P))
)
(rule
(f60_0_power_GT arg1 arg2 arg3 arg4)
(|f60_0_power_GT'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x69 Int))
(and
(and
(and
(and (and (and (> arg1 0) (> arg2 1)) (>= (* arg1 arg1) 1)) (> x69 0))
(> arg2 x69))
(= arg1 arg1P))
(= arg2 arg2P))
)
)
(rule
(|f60_0_power_GT'| arg1 arg2 arg3 arg4)
(f60_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg1 0) (> arg2 1)) (>= (* arg1 arg1) 1))
(> arg2 arg2P))
(> arg2P 0))
(< (- arg2 (* 2 arg2P)) 2))
(>= (- arg2 (* 2 arg2P)) 0))
(= (* arg1 arg1) arg1P))
)
(rule
(f675_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f116_0_even_NE arg1P arg2P arg3P arg4P)
:guard
(and (and (and (> arg3 0) (> arg4 0)) (> arg1 0)) (= arg3 arg1P)))
(rule
(f753_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f168_0_odd_NE arg1P arg2P arg3P arg4P)
:guard
(and (and (and (> arg3 0) (> arg4 0)) (> arg1 0)) (= arg3 arg1P)))
(rule
(f116_0_even_NE arg1 arg2 arg3 arg4)
(f168_0_odd_NE arg1P arg2P arg3P arg4P)
:guard
(and (and (> arg1 1) (< (- arg1 1) arg1)) (= (- arg1 1) arg1P)))
(rule
(f168_0_odd_NE arg1 arg2 arg3 arg4)
(f116_0_even_NE arg1P arg2P arg3P arg4P)
:guard
(and (and (> arg1 1) (< (- arg1 1) arg1)) (= (- arg1 1) arg1P)))
(rule
(__init arg1 arg2 arg3 arg4)
(f1_0_main_ConstantStackPush arg1P arg2P arg3P arg4P))
