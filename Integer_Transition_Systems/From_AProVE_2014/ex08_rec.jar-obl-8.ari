(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int))
(fun f128_0_loop_aux_EQ (-> Int Int Int Int))
(fun f1_0_main_ConstantStackPush (-> Int Int Int Int))
(fun f99_0_loop_aux_LE (-> Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_ConstantStackPush arg1 arg2 arg3)
(f99_0_loop_aux_LE arg1P arg2P arg3P)
:guard
(and
(and (and (and (> arg1 0) (> arg2 (- 1))) (= 0 arg1P)) (= 0 arg2P))
(= (* 10 arg2) arg3P))
)

(rule
(f99_0_loop_aux_LE arg1 arg2 arg3)
(f128_0_loop_aux_EQ arg1P arg2P arg3P)
:guard
(and
(and (and (and (< arg3 10) (> arg3 1)) (= arg1 arg1P)) (= arg3 arg2P))
(= arg2 arg3P))
)

(rule
(f99_0_loop_aux_LE arg1 arg2 arg3)
(f128_0_loop_aux_EQ arg1P arg2P arg3P)
:guard
(and
(and (and (> arg3 10) (= arg1 arg1P)) (= arg3 arg2P))
(= arg2 arg3P))
)

(rule
(f128_0_loop_aux_EQ arg1 arg2 arg3)
(f99_0_loop_aux_LE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (and (< arg1 2) (> arg2 1)) (= 0 arg3)) (= 0 arg1P))
(= 0 arg2P))
(= (- arg2 1) arg3P))
)

(rule
(f99_0_loop_aux_LE arg1 arg2 arg3)
(f99_0_loop_aux_LE arg1P arg2P arg3P)
:guard
(and
(and (and (and (< arg1 2) (= 1 arg3)) (= 1 arg1P)) (= 1 arg2P))
(= 2 arg3P))
)

(rule
(f99_0_loop_aux_LE arg1 arg2 arg3)
(f99_0_loop_aux_LE arg1P arg2P arg3P)
:guard
(and
(and (and (and (< arg1 2) (= 10 arg3)) (= 0 arg1P)) (= 0 arg2P))
(= 9 arg3P))
)

(rule
(f128_0_loop_aux_EQ arg1 arg2 arg3)
(f99_0_loop_aux_LE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (and (< arg1 2) (> arg2 1)) (= 1 arg3)) (= 1 arg1P))
(= 1 arg2P))
(= (+ arg2 1) arg3P))
)

(rule
(__init arg1 arg2 arg3)
(f1_0_main_ConstantStackPush arg1P arg2P arg3P))

