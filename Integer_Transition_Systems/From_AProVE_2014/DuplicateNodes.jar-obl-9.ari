(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f1257_0_random_ArrayAccess (-> Int Int Int Int Int))
(fun f1843_0_main_InvokeMethod (-> Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int))
(fun f2233_0_randomlyDuplicate_NULL (-> Int Int Int Int Int))
(fun f2251_0_createTree_LE (-> Int Int Int Int Int))
(fun f323_0_createTree_Return (-> Int Int Int Int Int))
(fun f521_0_createNode_Return (-> Int Int Int Int Int))
(fun f588_0_createNode_Return (-> Int Int Int Int Int))
(fun f931_0_random_ArrayAccess (-> Int Int Int Int Int))
(fun f977_0_random_ArrayAccess (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f1843_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and (and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)) (> arg2P (- 1))))
(rule
(f323_0_createTree_Return arg1 arg2 arg3 arg4)
(f1843_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (- arg1P 1) arg2)) (<= arg2P arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P (- 1)))
(= 2 arg3P))
)
(rule
(f521_0_createNode_Return arg1 arg2 arg3 arg4)
(f931_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(> arg1P 0))
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f931_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)))
(rule
(f588_0_createNode_Return arg1 arg2 arg3 arg4)
(f977_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(> arg1P 0))
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f977_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)))
(rule
(f977_0_random_ArrayAccess arg1 arg2 arg3 arg4)
(f2251_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x25 Int))
(and
(and
(and
(and (and (> x25 0) (> arg2P (- 1))) (<= (- arg1P 3) arg1))
(> arg1 0))
(> arg1P 3))
(= (+ x25 1) arg4P))
)
)
(rule
(f931_0_random_ArrayAccess arg1 arg2 arg3 arg4)
(f2251_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x30 Int))
(and
(and
(and
(and (and (> x30 0) (> arg2P (- 1))) (<= (- arg1P 1) arg1))
(> arg1 0))
(> arg1P 1))
(= (+ x30 1) arg4P))
)
)
(rule
(f2251_0_createTree_LE arg1 arg2 arg3 arg4)
(f2251_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (> arg2 0)) (> arg1 1))
(> arg1P (- 1)))
(= (- arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
)
(rule
(f2251_0_createTree_LE arg1 arg2 arg3 arg4)
(f2251_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x45 Int))
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg4 0)) (> x45 0)) (<= (- arg1P 2) arg1))
(> arg1 2))
(> arg1P 3))
(= (- arg2 1) arg2P))
(= arg3 arg3P))
)
)
(rule
(f2251_0_createTree_LE arg1 arg2 arg3 arg4)
(f2251_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x52 Int))
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg4 0)) (> x52 0)) (<= (- arg1P 2) arg1))
(> arg1 2))
(> arg1P 3))
(= (- arg2 1) arg2P))
(= arg3 arg3P))
)
)
(rule
(f2251_0_createTree_LE arg1 arg2 arg3 arg4)
(f2251_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x59 Int))
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg4 0)) (> x59 0)) (<= (- arg1P 3) arg1))
(> arg1 2))
(> arg1P 5))
(= (- arg2 1) arg2P))
(= arg3 arg3P))
)
)
(rule
(f2251_0_createTree_LE arg1 arg2 arg3 arg4)
(f2251_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x66 Int))
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg4 0)) (> x66 0)) (<= (- arg1P 3) arg1))
(> arg1 2))
(> arg1P 5))
(= (- arg2 1) arg2P))
(= arg3 arg3P))
)
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f1257_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> arg2 (- 1))) (<= arg2P arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P 0))
(= 0 arg3P))
)
(rule
(f2251_0_createTree_LE arg1 arg2 arg3 arg4)
(f1257_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (> arg2 0) (> arg4 0)) (> arg3 (- 1)))
(<= (+ arg2P 2) arg1))
(> arg1 2))
(> arg2P 0))
(= arg4 arg3P))
)
(rule
(f2251_0_createTree_LE arg1 arg2 arg3 arg4)
(f1257_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (> arg2 0) (> arg4 0)) (> arg3P 0)) (> arg3 (- 1)))
(<= (+ arg2P 2) arg1))
(> arg1 2))
(> arg2P 0))
)
(rule
(f1843_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f2233_0_randomlyDuplicate_NULL arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (<= arg1P arg2) (> arg1 0)) (> arg2 (- 1)))
(> arg1P (- 1)))
(= arg3 arg3P))
)
(rule
(f2233_0_randomlyDuplicate_NULL arg1 arg2 arg3 arg4)
(f2233_0_randomlyDuplicate_NULL arg1P arg2P arg3P arg4P)
:guard
(exists
((x93 Int))
(and
(and
(and
(and
(and
(and
(and (and (> arg2 (- 1)) (> arg3 (- 1))) (< x93 43))
(> x93 (- 1)))
(<= (+ arg1P 1) arg1))
(> arg1 0))
(> arg1P (- 1)))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
)
)
(rule
(f2233_0_randomlyDuplicate_NULL arg1 arg2 arg3 arg4)
(f2233_0_randomlyDuplicate_NULL arg1P arg2P arg3P arg4P)
:guard
(exists
((x98 Int))
(and
(and
(and
(and
(and
(and (and (> arg2 (- 1)) (> x98 42)) (> arg3 (- 1)))
(<= (+ arg1P 1) arg1))
(> arg1 0))
(> arg1P (- 1)))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
)
)
(rule (__init arg1 arg2 arg3 arg4) (f1_0_main_Load arg1P arg2P arg3P arg4P))
