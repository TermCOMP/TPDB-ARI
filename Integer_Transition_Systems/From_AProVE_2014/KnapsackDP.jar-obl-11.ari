(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int))
(fun f2602_0_SolveDP_GE (-> Int Int Int Int Int Int Int))
(fun f261_0_SolveDP_GT (-> Int Int Int Int Int Int Int))
(fun f3537_0_SolveDP_GT (-> Int Int Int Int Int Int Int))
(fun f3585_0_Display_GE (-> Int Int Int Int Int Int Int))
(fun f3740_0_SolveDP_ArrayAccess (-> Int Int Int Int Int Int Int))
(fun f3817_0_SolveDP_ArrayAccess (-> Int Int Int Int Int Int Int))
(fun f3902_0_Display_GT (-> Int Int Int Int Int Int Int))
(fun f4251_0_max_LE (-> Int Int Int Int Int Int Int))
(fun f4331_0_SolveDP_ArrayAccess (-> Int Int Int Int Int Int Int))
(fun f4377_0_InterpretArray_LT (-> Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f261_0_SolveDP_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (and (<= arg1P arg1) (> arg2 (- 1))) (> arg1 0)) (> arg1P 0))
(= 0 arg2P))
)

(rule
(f261_0_SolveDP_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f261_0_SolveDP_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x3 Int) (x7 Int))
(and
(and
(and
(and
(and
(and (and (and (< arg2 2) (< arg2 13)) (> x3 0)) (> x7 arg2))
(> x7 (- 1)))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= (+ arg2 1) arg2P))
)
)

(rule
(f261_0_SolveDP_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f261_0_SolveDP_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x8 Int) (x12 Int))
(and
(and
(and
(and
(and
(and (and (and (> arg2 1) (< arg2 13)) (> x8 0)) (> x12 arg2))
(> x12 (- 1)))
(>= arg1 arg1P))
(> arg1 0))
(> arg1P 0))
(= (+ arg2 1) arg2P))
)
)

(rule
(f261_0_SolveDP_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f2602_0_SolveDP_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (and (<= arg1P arg1) (> arg2 12)) (> arg1 0)) (> arg1P 0))
(= 1 arg2P))
)

(rule
(f2602_0_SolveDP_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f3537_0_SolveDP_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x17 Int))
(and
(and
(and (and (and (<= arg1P arg1) (< arg2 x17)) (> arg1 0)) (> arg1P 0))
(= arg2 arg2P))
(= 0 arg3P))
)
)

(rule
(f3537_0_SolveDP_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f2602_0_SolveDP_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (and (<= arg1P arg1) (> arg3 12)) (> arg1 0)) (> arg1P 0))
(= (+ arg2 1) arg2P))
)

(rule
(f2602_0_SolveDP_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f3585_0_Display_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x26 Int))
(and
(and (and (and (<= arg1P arg1) (>= arg2 x26)) (> arg1 0)) (> arg1P 0))
(= 0 arg2P))
)
)

(rule
(f3537_0_SolveDP_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f3740_0_SolveDP_ArrayAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x36 Int) (x30 Int) (x37 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (< arg2 8) (< arg3 13)) (> arg3 (- 1)))
(< (- arg3 x36) 0))
(< arg2 x30))
(> arg2 0))
(< (- arg2 1) x30))
(> x37 arg3))
(> x37 (- 1)))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(> arg3P (- 1)))
(= arg2 arg2P))
(= arg3 arg4P))
)
)

(rule
(f3537_0_SolveDP_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f3740_0_SolveDP_ArrayAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x44 Int) (x38 Int) (x45 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (< arg2 8) (< arg3 13)) (> arg3 (- 1)))
(< (- arg3 x44) 0))
(< arg2 x38))
(> arg2 0))
(< (- arg2 1) x38))
(> x45 arg3))
(> x45 (- 1)))
(<= arg1P arg1))
(<= arg3P arg1))
(> arg1 0))
(> arg1P 0))
(> arg3P 0))
(= arg2 arg2P))
(= arg3 arg4P))
)
)

(rule
(f3537_0_SolveDP_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f3817_0_SolveDP_ArrayAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x52 Int) (x46 Int) (x53 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (< arg2 8) (< arg3 13)) (> arg3 (- 1)))
(>= (- arg3 x52) 0))
(< arg2 x46))
(> arg2 0))
(< (- arg2 1) x46))
(> x53 (- 1)))
(> x53 arg3))
(> arg1 0))
(> arg2P (- 1)))
(= arg2 arg1P))
(= arg3 arg3P))
(= (- arg2 1) arg5P))
)
)

(rule
(f3537_0_SolveDP_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f3817_0_SolveDP_ArrayAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x60 Int) (x54 Int) (x61 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (< arg2 8) (< arg3 13)) (> arg3 (- 1)))
(>= (- arg3 x60) 0))
(< arg2 x54))
(> arg2 0))
(< (- arg2 1) x54))
(> x61 (- 1)))
(> x61 arg3))
(<= arg2P arg1))
(> arg1 0))
(> arg2P 0))
(= arg2 arg1P))
(= arg3 arg3P))
(= (- arg2 1) arg5P))
)
)

(rule
(f3585_0_Display_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f3902_0_Display_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x62 Int))
(and
(and
(and (and (and (<= arg1P arg1) (< arg2 x62)) (> arg1 0)) (> arg1P 0))
(= arg2 arg2P))
(= 0 arg3P))
)
)

(rule
(f3902_0_Display_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f3585_0_Display_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (and (<= arg1P arg1) (> arg3 12)) (> arg1 0)) (> arg1P 0))
(= (+ arg2 1) arg2P))
)

(rule
(f3902_0_Display_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f3902_0_Display_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (and (< arg3 13) (< arg3 12)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
)

(rule
(f3902_0_Display_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f3902_0_Display_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and (and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)) (= 12 arg3))
(= arg2 arg2P))
(= 13 arg3P))
)

(rule
(f3817_0_SolveDP_ArrayAccess arg1 arg2 arg3 arg4 arg5 arg6)
(f4251_0_max_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x80 Int) (x90 Int) (x91 Int) (x88 Int) (x89 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< arg1 8) (< arg5 x80)) (> arg3 (- 1))) (> x90 (- 1)))
(> x90 (- arg3 x91)))
(<= (- arg1P 1) arg2))
(<= arg3P arg2))
(> arg2 (- 1)))
(> arg1P 0))
(> arg3P (- 1)))
(= arg1 arg2P))
(= arg3 arg4P))
(= arg4 arg5P))
(= (+ x88 x89) arg6P))
)
)

(rule
(f3817_0_SolveDP_ArrayAccess arg1 arg2 arg3 arg4 arg5 arg6)
(f4251_0_max_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x92 Int) (x102 Int) (x103 Int) (x100 Int) (x101 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< arg1 8) (< arg5 x92)) (> arg3 (- 1))) (> x102 (- 1)))
(< (- arg3 x103) x102))
(<= arg1P arg2))
(<= arg3P arg2))
(> arg2 0))
(> arg1P 0))
(> arg3P 0))
(= arg1 arg2P))
(= arg3 arg4P))
(= arg4 arg5P))
(= (+ x100 x101) arg6P))
)
)

(rule
(f4251_0_max_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f4331_0_SolveDP_ArrayAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (>= arg6 arg5)) (<= (- arg1P 1) arg3))
(<= arg3P arg3))
(> arg1 0))
(> arg3 (- 1)))
(> arg1P 0))
(> arg3P (- 1)))
(= arg2 arg2P))
(= arg4 arg4P))
)

(rule
(f4251_0_max_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f4331_0_SolveDP_ArrayAccess arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg6 arg5)) (<= (- arg1P 1) arg3))
(<= arg3P arg3))
(> arg1 0))
(> arg3 (- 1)))
(> arg1P 0))
(> arg3P (- 1)))
(= arg2 arg2P))
(= arg4 arg4P))
)

(rule
(f3585_0_Display_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f4377_0_InterpretArray_LT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x122 Int))
(and
(and
(and
(and
(and (and (>= arg2 x122) (> x122 (- 1))) (<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= 12 arg2P))
(= (- x122 1) arg3P))
)
)

(rule
(f3740_0_SolveDP_ArrayAccess arg1 arg2 arg3 arg4 arg5 arg6)
(f3537_0_SolveDP_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x132 Int))
(and
(and
(and
(and
(and
(and
(and (and (> x132 (- 1)) (> x132 arg4)) (<= arg1P arg1))
(<= arg1P arg3))
(> arg1 0))
(> arg3 0))
(> arg1P 0))
(= arg2 arg2P))
(= (+ arg4 1) arg3P))
)
)

(rule
(f4331_0_SolveDP_ArrayAccess arg1 arg2 arg3 arg4 arg5 arg6)
(f3537_0_SolveDP_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x139 Int))
(and
(and
(and
(and
(and
(and
(and (and (> x139 (- 1)) (> x139 arg4)) (<= arg1P arg1))
(<= arg1P arg3))
(> arg1 0))
(> arg3 0))
(> arg1P 0))
(= arg2 arg2P))
(= (+ arg4 1) arg3P))
)
)

(rule
(f4377_0_InterpretArray_LT arg1 arg2 arg3 arg4 arg5 arg6)
(f4377_0_InterpretArray_LT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x140 Int) (x145 Int) (x146 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< arg3 x140) (> arg3 0)) (> x145 (- 1))) (> x145 arg2))
(< (- arg3 1) x140))
(> x146 arg2))
(> x146 (- 1)))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= (- arg3 1) arg3P))
)
)

(rule
(f4377_0_InterpretArray_LT arg1 arg2 arg3 arg4 arg5 arg6)
(f4377_0_InterpretArray_LT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x147 Int) (x153 Int) (x154 Int) (x156 Int) (x155 Int) (x152 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< arg3 x147) (> arg3 0)) (> x153 (- 1))) (> x153 arg2))
(< (- arg3 1) x147))
(> x154 (- 1)))
(> x154 arg2))
(> x156 x155))
(< arg3 8))
(> arg2 (- 1)))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= (- arg2 x152) arg2P))
(= (- arg3 1) arg3P))
)
)

(rule
(f4377_0_InterpretArray_LT arg1 arg2 arg3 arg4 arg5 arg6)
(f4377_0_InterpretArray_LT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x104 Int) (x113 Int) (x126 Int) (x133 Int) (x157 Int) (x76 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< arg3 x104) (> arg3 0)) (> x113 (- 1))) (> x113 arg2))
(< (- arg3 1) x104))
(> x126 (- 1)))
(> x126 arg2))
(< x133 x157))
(< arg3 8))
(> arg2 (- 1)))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= (- arg2 x76) arg2P))
(= (- arg3 1) arg3P))
)
)

(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P))

