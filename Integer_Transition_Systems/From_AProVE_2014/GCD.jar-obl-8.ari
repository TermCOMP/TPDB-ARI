(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int))
(fun f152_0_gcd_EQ (-> Int Int Int))
(fun f1_0_main_Load (-> Int Int Int))
(fun f207_0_mod_LE (-> Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2)
(f152_0_gcd_EQ arg1P arg2P)
:guard
(and
(and (and (> arg2P (- 1)) (> arg2 (- 1))) (> arg1P (- 1)))
(> arg1 0))
)
(rule
(f152_0_gcd_EQ arg1 arg2)
(f207_0_mod_LE arg1P arg2P)
:guard
(and
(and (and (and (> arg2 0) (> arg2 arg1)) (> arg1 0)) (= arg1 arg1P))
(= arg2 arg2P))
)
(rule
(f152_0_gcd_EQ arg1 arg2)
(f207_0_mod_LE arg1P arg2P)
:guard
(and
(and (and (and (> arg2 0) (< arg2 arg1)) (> arg1 0)) (= arg1 arg1P))
(= arg2 arg2P))
)
(rule
(f152_0_gcd_EQ arg1 arg2)
(f152_0_gcd_EQ arg1P arg2P)
:guard
(and (and (and (> arg2 0) (= 0 arg1)) (= arg2 arg1P)) (= 0 arg2P)))
(rule
(f152_0_gcd_EQ arg1 arg2)
(f152_0_gcd_EQ arg1P arg2P)
:guard
(and (and (and (> arg1 0) (= arg1 arg2)) (= arg1 arg1P)) (= 0 arg2P)))
(rule
(f207_0_mod_LE arg1 arg2)
(f207_0_mod_LE arg1P arg2P)
:guard
(and
(and
(and (and (< arg2 arg1) (> arg1 0)) (> arg2 0))
(= (- arg1 arg2) arg1P))
(= arg2 arg2P))
)
(rule
(f207_0_mod_LE arg1 arg2)
(f152_0_gcd_EQ arg1P arg2P)
:guard
(and (and (> arg2 arg1) (= arg2 arg1P)) (= arg1 arg2P)))
(rule (__init arg1 arg2) (f1_0_main_Load arg1P arg2P))
