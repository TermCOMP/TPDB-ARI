(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f155_0_main_InvokeMethod (-> Int Int Int Int Int))
(fun f162_0_power_GT (-> Int Int Int Int Int))
(fun |f162_0_power_GT'| (-> Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int))
(fun f213_0_power_NE (-> Int Int Int Int Int))
(fun |f213_0_power_NE'| (-> Int Int Int Int Int))
(fun f97_0_random_GT (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f162_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and (and (and (> arg1 0) (= 0 arg2)) (= 0 arg1P)) (= 0 arg2P)))
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f97_0_random_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (<= arg1P arg1) (> arg2 0)) (> arg1 0)) (> arg1P 0))
(= 0 arg2P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f97_0_random_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (> arg2P (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
)
(rule
(f97_0_random_GT arg1 arg2 arg3 arg4)
(f162_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and (and (> arg1 0) (= arg2 arg1P)) (= 0 arg2P)))
(rule
(f97_0_random_GT arg1 arg2 arg3 arg4)
(f155_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x10 Int))
(and
(and
(and (and (and (<= arg1P arg1) (> x10 1)) (> arg1 0)) (> arg1P 0))
(= arg2 arg2P))
(= 0 arg3P))
)
)
(rule
(f97_0_random_GT arg1 arg2 arg3 arg4)
(f155_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x14 Int))
(and
(and
(and (and (and (> x14 1) (> arg3P (- 1))) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
)
)
(rule
(f155_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f162_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x19 Int))
(and (and (and (> arg1 0) (> x19 1)) (= arg2 arg1P)) (= arg3 arg2P)))
)
(rule
(f162_0_power_GT arg1 arg2 arg3 arg4)
(|f162_0_power_GT'| arg1P arg2P arg3P arg4P)
:guard
(and (and (and (< arg1 2) (> arg2 1)) (= arg1 arg1P)) (= arg2 arg2P)))
(rule
(|f162_0_power_GT'| arg1 arg2 arg3 arg4)
(f213_0_power_NE arg1P arg2P arg3P arg4P)
:guard
(exists
((x37 Int))
(and
(and
(and
(and
(and (and (> arg2 1) (< arg1 2)) (< (- arg2 (* 2 x37)) 2))
(>= (- arg2 (* 2 x37)) 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= (- arg2 (* 2 x37)) arg3P))
)
)
(rule
(f162_0_power_GT arg1 arg2 arg3 arg4)
(|f162_0_power_GT'| arg1P arg2P arg3P arg4P)
:guard
(and (and (and (> arg1 2) (> arg2 1)) (= arg1 arg1P)) (= arg2 arg2P)))
(rule
(|f162_0_power_GT'| arg1 arg2 arg3 arg4)
(f213_0_power_NE arg1P arg2P arg3P arg4P)
:guard
(exists
((x41 Int))
(and
(and
(and
(and
(and (and (> arg2 1) (> arg1 2)) (< (- arg2 (* 2 x41)) 2))
(>= (- arg2 (* 2 x41)) 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= (- arg2 (* 2 x41)) arg3P))
)
)
(rule
(f213_0_power_NE arg1 arg2 arg3 arg4)
(|f213_0_power_NE'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x47 Int))
(and
(and
(and
(and
(and (and (and (> arg2 1) (> x47 0)) (> arg2 x47)) (= 0 arg3))
(= arg1 arg1P))
(= arg2 arg2P))
(= 0 arg3P))
(= arg4 arg4P))
)
)
(rule
(|f213_0_power_NE'| arg1 arg2 arg3 arg4)
(f162_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (> arg2 1) (> arg2 arg2P)) (> arg2P 0))
(< (- arg2 (* 2 arg2P)) 2))
(>= (- arg2 (* 2 arg2P)) 0))
(= 0 arg3))
(= arg1 arg1P))
)
(rule
(f213_0_power_NE arg1 arg2 arg3 arg4)
(f162_0_power_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (> arg2 1) (< (- arg2 1) arg2)) (= 1 arg3))
(= arg1 arg1P))
(= (- arg2 1) arg2P))
)
(rule (__init arg1 arg2 arg3 arg4) (f1_0_main_Load arg1P arg2P arg3P arg4P))
