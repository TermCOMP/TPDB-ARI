(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f162_0_mk_LE (-> Int Int Int Int Int))
(fun f1_0_main_ConstantStackPush (-> Int Int Int Int Int))
(fun f276_0_mk_LE (-> Int Int Int Int Int))
(fun f401_0_mk_LE (-> Int Int Int Int Int))
(fun f470_0_length_NONNULL (-> Int Int Int Int Int))
(fun f576_0_test_LT (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_ConstantStackPush arg1 arg2 arg3 arg4)
(f162_0_mk_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg2 (- 1))) (> arg1 0)) (> arg1P 0))
(= (- arg2 1) arg2P))
(= arg2 arg3P))
(= arg2 arg4P))
)
(rule
(f162_0_mk_LE arg1 arg2 arg3 arg4)
(f162_0_mk_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg3 0)) (> arg1 0)) (> arg1P 0))
(= (- arg2 1) arg2P))
(= arg2 arg3P))
(= arg4 arg4P))
)
(rule
(f162_0_mk_LE arg1 arg2 arg3 arg4)
(f276_0_mk_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (and (< arg3 1) (> arg4 (- 1))) (>= arg1 arg1P)) (> arg1 0))
(> arg1P 0))
(= (- arg4 1) arg2P))
(= arg4 arg3P))
(= arg4 arg4P))
)
(rule
(f276_0_mk_LE arg1 arg2 arg3 arg4)
(f276_0_mk_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg3 0)) (> arg1 0)) (> arg1P 0))
(= (- arg2 1) arg2P))
(= arg2 arg3P))
(= arg4 arg4P))
)
(rule
(f276_0_mk_LE arg1 arg2 arg3 arg4)
(f401_0_mk_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (< arg3 1) (> arg4 (- 1))) (> arg1 0))
(= (- arg4 1) arg1P))
(= arg4 arg2P))
)
(rule
(f401_0_mk_LE arg1 arg2 arg3 arg4)
(f576_0_test_LT arg1P arg2P arg3P arg4P)
:guard
(and (< arg2 1) (= 2 arg1P)))
(rule
(f401_0_mk_LE arg1 arg2 arg3 arg4)
(f401_0_mk_LE arg1P arg2P arg3P arg4P)
:guard
(and (and (> arg2 0) (= (- arg1 1) arg1P)) (= arg1 arg2P)))
(rule
(f576_0_test_LT arg1 arg2 arg3 arg4)
(f470_0_length_NONNULL arg1P arg2P arg3P arg4P)
:guard
(and (and (> arg1 (- 1)) (> arg1P (- 1))) (< arg1 3)))
(rule
(f576_0_test_LT arg1 arg2 arg3 arg4)
(f576_0_test_LT arg1P arg2P arg3P arg4P)
:guard
(and (and (> arg1 (- 1)) (< arg1 3)) (= (- arg1 1) arg1P)))
(rule
(f470_0_length_NONNULL arg1 arg2 arg3 arg4)
(f470_0_length_NONNULL arg1P arg2P arg3P arg4P)
:guard
(and (and (<= (+ arg1P 1) arg1) (> arg1 0)) (> arg1P (- 1))))
(rule
(__init arg1 arg2 arg3 arg4)
(f1_0_main_ConstantStackPush arg1P arg2P arg3P arg4P))
