(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f117_0_main_GT (-> Int Int Int Int Int))
(fun f197_0_main_GT (-> Int Int Int Int Int))
(fun f1_0_main_ConstantStackPush (-> Int Int Int Int Int))
(fun f216_0_parts_GT (-> Int Int Int Int Int))
(fun f310_0_parts_Return (-> Int Int Int Int Int))
(fun f314_0_parts_Return (-> Int Int Int Int Int))
(fun f409_0_parts_InvokeMethod (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_ConstantStackPush arg1 arg2 arg3 arg4)
(f117_0_main_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (<= arg1P arg1) (> arg2 (- 1))) (> arg1 0)) (> arg1P 0))
(= 0 arg2P))
(= arg2 arg3P))
)
(rule
(f117_0_main_GT arg1 arg2 arg3 arg4)
(f197_0_main_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and (and (>= arg3 arg2) (> arg3 (- 1))) (<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= 0 arg3P))
(= arg3 arg4P))
)
(rule
(f197_0_main_GT arg1 arg2 arg3 arg4)
(f117_0_main_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (> arg3 arg4) (> arg4 (- 1))) (>= arg1 arg1P))
(> arg1 0))
(> arg1P 0))
(= (+ arg2 1) arg2P))
(= arg4 arg3P))
)
(rule
(f197_0_main_GT arg1 arg2 arg3 arg4)
(f216_0_parts_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (>= arg4 arg2) (>= arg4 arg3)) (> arg1 0)) (= arg3 arg1P))
(= arg2 arg2P))
)
(rule
(f197_0_main_GT arg1 arg2 arg3 arg4)
(f197_0_main_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (>= arg4 arg3)) (<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= 0 arg2))
(= 0 arg2P))
(= (+ arg3 1) arg3P))
(= arg4 arg4P))
)
(rule
(f197_0_main_GT arg1 arg2 arg3 arg4)
(f197_0_main_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (>= arg4 arg2) (> arg4 (- 1))) (<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= 0 arg3))
(= arg2 arg2P))
(= 1 arg3P))
(= arg4 arg4P))
)
(rule
(f310_0_parts_Return arg1 arg2 arg3 arg4)
(f197_0_main_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg4 (- 1))) (> arg1 0)) (> arg1P 0))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
(= arg4 arg4P))
)
(rule
(f197_0_main_GT arg1 arg2 arg3 arg4)
(f197_0_main_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (>= arg4 arg2) (>= arg4 arg3)) (> arg4 (- 1)))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
(= arg4 arg4P))
)
(rule
(f216_0_parts_GT arg1 arg2 arg3 arg4)
(f216_0_parts_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (> arg2 0) (< arg2 arg1)) (> arg1 1)) (= arg2 arg1P))
(= arg2 arg2P))
)
(rule
(f216_0_parts_GT arg1 arg2 arg3 arg4)
(f216_0_parts_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (> arg2 0) (>= arg2 arg1)) (> arg1 0)) (= arg1 arg1P))
(= (- arg2 arg1) arg2P))
)
(rule
(f216_0_parts_GT arg1 arg2 arg3 arg4)
(f409_0_parts_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (> arg2 0) (> arg1 0)) (= (- arg2 arg1) 0))
(>= arg2 arg1))
(= arg1 arg1P))
(= arg2 arg2P))
(= (- arg1 1) arg3P))
)
(rule
(f314_0_parts_Return arg1 arg2 arg3 arg4)
(f409_0_parts_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (> arg2 0) (= arg2 arg1P)) (= arg1 arg2P))
(= (- arg2 1) arg3P))
)
(rule
(f216_0_parts_GT arg1 arg2 arg3 arg4)
(f409_0_parts_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (> arg2 0) (>= arg2 arg1)) (> arg1 0)) (= arg1 arg1P))
(= arg2 arg2P))
(= (- arg1 1) arg3P))
)
(rule
(f409_0_parts_InvokeMethod arg1 arg2 arg3 arg4)
(f216_0_parts_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x47 Int))
(and
(and
(and (and (and (> arg2 0) (> arg1 0)) (> x47 0)) (< arg3 arg1))
(= arg3 arg1P))
(= arg2 arg2P))
)
)
(rule
(f216_0_parts_GT arg1 arg2 arg3 arg4)
(f216_0_parts_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x50 Int))
(and
(and
(and
(and
(and (and (> arg2 0) (> arg1 1)) (>= arg2 arg1))
(< (- arg1 1) arg1))
(> x50 0))
(= (- arg1 1) arg1P))
(= arg2 arg2P))
)
)
(rule
(__init arg1 arg2 arg3 arg4)
(f1_0_main_ConstantStackPush arg1P arg2P arg3P arg4P))
