(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int))
(fun f325_0_loop_GT (-> Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f325_0_loop_GT arg1P arg2P arg3P)
:guard
(and
(and
(and (and (> arg1 0) (> arg2 (- 1))) (= 20 arg1P))
(= (- 20) arg2P))
(= arg2 arg3P))
)
(rule
(f325_0_loop_GT arg1 arg2 arg3)
(f325_0_loop_GT arg1P arg2P arg3P)
:guard
(and
(and
(and
(and (and (< (- arg1 arg3) 5) (<= arg3 arg1)) (>= arg3 arg2))
(= arg1 arg1P))
(= (- 0 arg1) arg2P))
(= (* (- 1) arg3) arg3P))
)
(rule
(f325_0_loop_GT arg1 arg2 arg3)
(f325_0_loop_GT arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and (and (<= arg3 arg1) (>= arg3 arg2)) (>= (- arg1 arg3) 5))
(< (+ arg1 arg3) 5))
(= arg1 arg1P))
(= (- 0 arg1) arg2P))
(= (* (- 1) arg3) arg3P))
)
(rule
(f325_0_loop_GT arg1 arg2 arg3)
(f325_0_loop_GT arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and
(and (and (>= arg1 arg3) (<= arg2 arg3)) (>= (- arg1 arg3) 5))
(>= (+ arg1 arg3) 5))
(< arg3 1))
(= (+ arg1 1) arg1P))
(= (- 0 (+ arg1 1)) arg2P))
(= (- arg3 1) arg3P))
)
(rule
(f325_0_loop_GT arg1 arg2 arg3)
(f325_0_loop_GT arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and
(and (and (>= arg1 arg3) (<= arg2 arg3)) (>= (- arg1 arg3) 5))
(>= (+ arg1 arg3) 5))
(> arg3 1))
(= (+ arg1 1) arg1P))
(= (- 0 (+ arg1 1)) arg2P))
(= (- arg3 1) arg3P))
)
(rule
(f325_0_loop_GT arg1 arg2 arg3)
(f325_0_loop_GT arg1P arg2P arg3P)
:guard
(and
(and
(and (and (and (> arg1 5) (< arg2 2)) (= 1 arg3)) (= (- 1) arg1P))
(= 1 arg2P))
(= 0 arg3P))
)
(rule (__init arg1 arg2 arg3) (f1_0_main_Load arg1P arg2P arg3P))
