(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f1317_0_mirror_NULL (-> Int Int Int Int Int))
(fun f1551_0_createTree_LE (-> Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int))
(fun f322_0_createTree_Return (-> Int Int Int Int Int))
(fun f477_0_createNode_Return (-> Int Int Int Int Int))
(fun f512_0_createNode_Return (-> Int Int Int Int Int))
(fun f731_0_random_ArrayAccess (-> Int Int Int Int Int))
(fun f750_0_random_ArrayAccess (-> Int Int Int Int Int))
(fun f973_0_random_ArrayAccess (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f1317_0_mirror_NULL arg1P arg2P arg3P arg4P)
:guard
(and (> arg1 0) (> arg1P (- 1))))

(rule
(f322_0_createTree_Return arg1 arg2 arg3 arg4)
(f1317_0_mirror_NULL arg1P arg2P arg3P arg4P)
:guard
(and (and (<= arg1P arg1) (> arg1 (- 1))) (> arg1P (- 1))))

(rule
(f1317_0_mirror_NULL arg1 arg2 arg3 arg4)
(f1317_0_mirror_NULL arg1P arg2P arg3P arg4P)
:guard
(and (and (<= (+ arg1P 1) arg1) (> arg1 0)) (> arg1P (- 1))))

(rule
(f477_0_createNode_Return arg1 arg2 arg3 arg4)
(f731_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(> arg1P 0))

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f731_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)))

(rule
(f512_0_createNode_Return arg1 arg2 arg3 arg4)
(f750_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(> arg1P 0))

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f750_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)))

(rule
(f750_0_random_ArrayAccess arg1 arg2 arg3 arg4)
(f1551_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x22 Int))
(and
(and
(and
(and (and (> x22 0) (> arg2P (- 1))) (<= (- arg1P 3) arg1))
(> arg1 0))
(> arg1P 3))
(= (+ x22 1) arg4P))
)
)

(rule
(f731_0_random_ArrayAccess arg1 arg2 arg3 arg4)
(f1551_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x27 Int))
(and
(and
(and
(and (and (> x27 0) (> arg2P (- 1))) (<= (- arg1P 1) arg1))
(> arg1 0))
(> arg1P 1))
(= (+ x27 1) arg4P))
)
)

(rule
(f1551_0_createTree_LE arg1 arg2 arg3 arg4)
(f1551_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (> arg2 0)) (> arg1 1))
(> arg1P (- 1)))
(= (- arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
)

(rule
(f1551_0_createTree_LE arg1 arg2 arg3 arg4)
(f1551_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x42 Int))
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg4 0)) (> x42 0)) (<= (- arg1P 2) arg1))
(> arg1 2))
(> arg1P 3))
(= (- arg2 1) arg2P))
(= arg3 arg3P))
)
)

(rule
(f1551_0_createTree_LE arg1 arg2 arg3 arg4)
(f1551_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x49 Int))
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg4 0)) (> x49 0)) (<= (- arg1P 2) arg1))
(> arg1 2))
(> arg1P 3))
(= (- arg2 1) arg2P))
(= arg3 arg3P))
)
)

(rule
(f1551_0_createTree_LE arg1 arg2 arg3 arg4)
(f1551_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x56 Int))
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg4 0)) (> x56 0)) (<= (- arg1P 3) arg1))
(> arg1 2))
(> arg1P 5))
(= (- arg2 1) arg2P))
(= arg3 arg3P))
)
)

(rule
(f1551_0_createTree_LE arg1 arg2 arg3 arg4)
(f1551_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x63 Int))
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg4 0)) (> x63 0)) (<= (- arg1P 3) arg1))
(> arg1 2))
(> arg1P 5))
(= (- arg2 1) arg2P))
(= arg3 arg3P))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f973_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> arg2 (- 1))) (<= arg2P arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P 0))
(= 0 arg3P))
)

(rule
(f1551_0_createTree_LE arg1 arg2 arg3 arg4)
(f973_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (> arg2 0) (> arg4 0)) (> arg3 (- 1)))
(<= (+ arg2P 2) arg1))
(> arg1 2))
(> arg2P 0))
(= arg4 arg3P))
)

(rule
(f1551_0_createTree_LE arg1 arg2 arg3 arg4)
(f973_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (> arg2 0) (> arg4 0)) (> arg3P 0)) (> arg3 (- 1)))
(<= (+ arg2P 2) arg1))
(> arg1 2))
(> arg2P 0))
)

(rule (__init arg1 arg2 arg3 arg4) (f1_0_main_Load arg1P arg2P arg3P arg4P))
