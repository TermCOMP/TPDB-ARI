(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int))
(fun f33_0_rec_Cmp (-> Int Int Int Int))
(fun f48_0_rec_GE (-> Int Int Int Int))
(fun f77_0_descend_LE (-> Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f33_0_rec_Cmp arg1P arg2P arg3P)
:guard
(and (and (> arg1 0) (> arg2 (- 1))) (= arg2 arg1P)))

(rule
(f33_0_rec_Cmp arg1 arg2 arg3)
(f48_0_rec_GE arg1P arg2P arg3P)
:guard
(and (and (= arg1 arg1P) (= arg1 arg2P)) (= arg1 arg3P)))

(rule
(f48_0_rec_GE arg1 arg2 arg3)
(f33_0_rec_Cmp arg1P arg2P arg3P)
:guard
(and
(and
(and (and (< (- arg1 1) arg1) (> arg1 0)) (> arg2 99))
(= arg2 arg3))
(= (- arg1 1) arg1P))
)

(rule
(f48_0_rec_GE arg1 arg2 arg3)
(f77_0_descend_LE arg1P arg2P arg3P)
:guard
(and (and (and (> arg2 0) (< arg2 100)) (= arg2 arg3)) (= arg2 arg1P)))

(rule
(f48_0_rec_GE arg1 arg2 arg3)
(f77_0_descend_LE arg1P arg2P arg3P)
:guard
(and (and (and (< arg2 100) (> arg2 0)) (= arg2 arg3)) (= arg2 arg1P)))

(rule
(f48_0_rec_GE arg1 arg2 arg3)
(f48_0_rec_GE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (and (< arg2 100) (> arg2 0)) (= arg2 arg3)) (= arg1 arg1P))
(= (+ arg2 1) arg2P))
(= (+ arg2 1) arg3P))
)

(rule
(f77_0_descend_LE arg1 arg2 arg3)
(f77_0_descend_LE arg1P arg2P arg3P)
:guard
(and (and (> arg1 0) (< (- arg1 1) arg1)) (= (- arg1 1) arg1P)))

(rule (__init arg1 arg2 arg3) (f1_0_main_Load arg1P arg2P arg3P))
