(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int))
(fun f1_0_main_Load (-> Int Int Int))
(fun f54_0_loop_LE (-> Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2)
(f54_0_loop_LE arg1P arg2P)
:guard
(and
(and (and (> arg1 0) (> arg2 (- 1))) (= arg2 arg1P))
(= arg2 arg2P))
)

(rule
(f54_0_loop_LE arg1 arg2)
(f54_0_loop_LE arg1P arg2P)
:guard
(and
(and
(and (and (> arg1 4) (> arg2 0)) (>= arg2 arg1))
(= (- arg1 1) arg1P))
(= (- arg2 1) arg2P))
)

(rule
(f54_0_loop_LE arg1 arg2)
(f54_0_loop_LE arg1P arg2P)
:guard
(and
(and
(and
(and
(and (and (> arg2 0) (>= arg2 arg1)) (< arg1 5))
(<= (- (- arg2 1) (+ arg1 1)) 2))
(> arg1 (- 1)))
(= (+ arg1 2) arg1P))
(= (- arg2 1) arg2P))
)

(rule
(f54_0_loop_LE arg1 arg2)
(f54_0_loop_LE arg1P arg2P)
:guard
(and
(and
(and
(and
(and (and (> arg2 0) (>= arg2 arg1)) (< arg1 5))
(> (- (- arg2 1) (+ arg1 1)) 2))
(> arg1 (- 1)))
(= (+ arg1 1) arg1P))
(= arg2 arg2P))
)

(rule
(f54_0_loop_LE arg1 arg2)
(f54_0_loop_LE arg1P arg2P)
:guard
(and
(and
(and
(and (and (< arg2 arg1) (> arg1 1)) (>= (+ arg2 1) (* 2 arg1)))
(> arg2 0))
(= (+ arg1 1) arg1P))
(= (+ arg2 1) arg2P))
)

(rule
(f54_0_loop_LE arg1 arg2)
(f54_0_loop_LE arg1P arg2P)
:guard
(and
(and
(and
(and (and (< arg2 arg1) (> arg1 1)) (< (+ arg2 1) (* 2 arg1)))
(> arg2 0))
(= (- arg1 1) arg1P))
(= (+ arg2 1) arg2P))
)

(rule (__init arg1 arg2) (f1_0_main_Load arg1P arg2P))
