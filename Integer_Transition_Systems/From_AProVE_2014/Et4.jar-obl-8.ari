(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int Int))
(fun f671_0_main_LT (-> Int Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f671_0_main_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)) (= 0 arg2))
(= 0 arg2P))
(= 0 arg3P))
(= 0 arg4P))
(= 0 arg5P))
(= 0 arg6P))
(= 0 arg7P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f671_0_main_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg2P (- 1))) (> arg1 0)) (> arg1P 0))
(= 1 arg2))
(= 0 arg3P))
(= 0 arg4P))
(= 1 arg5P))
(= 1 arg6P))
(= 1 arg7P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f671_0_main_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg2P (- 1)) (> arg4P (- 1))) (<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= 2 arg2))
(= 0 arg3P))
(= 2 arg5P))
(= 2 arg6P))
(= 2 arg7P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f671_0_main_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x14 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg2P (- 1)) (> arg2 2)) (> x14 (- 1)))
(> arg3P (- 1)))
(>= arg1 arg1P))
(> arg1 0))
(> arg1P 0))
(= (- x14 arg3P) arg4P))
(= arg2 arg5P))
(= 3 arg6P))
(= arg2 arg7P))
)
)

(rule
(f671_0_main_LT arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f671_0_main_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 0) (> arg2 (- 1))) (>= arg6 arg5))
(> arg5 (- 1)))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg2 arg3))
(= arg5 arg7))
(= (+ arg2 1) arg2P))
(= (+ arg2 1) arg3P))
(= (- 10 (+ arg2 1)) arg4P))
(= arg5 arg5P))
(= arg6 arg6P))
(= arg5 arg7P))
)

(rule
(f671_0_main_LT arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f671_0_main_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x27 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg5 (- 1)) (> arg4 0)) (> arg6 (- 1)))
(< arg6 arg5))
(> x27 (- 1)))
(> arg2 (- 1)))
(>= (+ (+ arg2 1) x27) 0))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg2 arg3))
(= arg5 arg7))
(= (+ (+ arg2 1) x27) arg2P))
(= (+ (+ arg2 1) x27) arg3P))
(= (- 10 (+ (+ arg2 1) x27)) arg4P))
(= arg5 arg5P))
(= (+ arg6 1) arg6P))
(= arg5 arg7P))
)
)

(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P arg7P))

