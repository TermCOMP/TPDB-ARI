(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int))
(fun f193_0__init__LE (-> Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int))
(fun f388_0_height_NONNULL (-> Int Int Int Int))
(fun f480_0_main_InvokeMethod (-> Int Int Int Int))
(fun f481_0_main_InvokeMethod (-> Int Int Int Int))
(fun f482_0_main_InvokeMethod (-> Int Int Int Int))
(fun f518_0__init__InvokeMethod (-> Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f480_0_main_InvokeMethod arg1P arg2P arg3P)
:guard
(and (and (> arg1 0) (> arg1P 2)) (= 0 arg2)))
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f480_0_main_InvokeMethod arg1P arg2P arg3P)
:guard
(and
(and (and (<= (- arg1P 1) arg1) (> arg1 0)) (> arg1P 1))
(= 0 arg2))
)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f481_0_main_InvokeMethod arg1P arg2P arg3P)
:guard
(exists
((x6 Int))
(and (and (and (> arg1 0) (> x6 (- 1))) (> arg1P 2)) (= 1 arg2)))
)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f481_0_main_InvokeMethod arg1P arg2P arg3P)
:guard
(exists
((x64 Int))
(and
(and
(and (and (<= (- arg1P 1) arg1) (> x64 (- 1))) (> arg1 0))
(> arg1P 1))
(= 1 arg2))
)
)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f482_0_main_InvokeMethod arg1P arg2P arg3P)
:guard
(exists
((x14 Int) (x15 Int))
(and
(and
(and
(and
(and
(and (and (>= (* x14 x15) 0) (> arg2 1)) (> x15 (- 1)))
(> x14 (- 1)))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P 2))
)
)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f482_0_main_InvokeMethod arg1P arg2P arg3P)
:guard
(exists
((x20 Int) (x21 Int))
(and
(and
(and
(and
(and
(and
(and (and (>= (* x20 x21) 0) (> arg2 1)) (> x21 (- 1)))
(> x20 (- 1)))
(<= arg1P arg1))
(<= (- arg2P 1) arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P 1))
)
)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f193_0__init__LE arg1P arg2P arg3P)
:guard
(and (and (> arg1 0) (= 0 arg2)) (= 10 arg1P)))
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f193_0__init__LE arg1P arg2P arg3P)
:guard
(exists
((x69 Int))
(and (and (and (> arg1 0) (> x69 (- 1))) (= 1 arg2)) (= 10 arg1P)))
)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f193_0__init__LE arg1P arg2P arg3P)
:guard
(exists
((x27 Int) (x28 Int))
(and
(and
(and
(and (and (>= (* x27 x28) 0) (> arg2 1)) (> x28 (- 1)))
(> x27 (- 1)))
(> arg1 0))
(= (+ (* x27 x28) 10) arg1P))
)
)
(rule
(f193_0__init__LE arg1 arg2 arg3)
(f193_0__init__LE arg1P arg2P arg3P)
:guard
(and (and (> arg1 1) (< (- arg1 1) arg1)) (= (- arg1 1) arg1P)))
(rule
(f193_0__init__LE arg1 arg2 arg3)
(f518_0__init__InvokeMethod arg1P arg2P arg3P)
:guard
(and
(and (and (< (- arg1 1) arg1) (> arg1P 4)) (> arg1 1))
(= (- arg1 1) arg2P))
)
(rule
(f193_0__init__LE arg1 arg2 arg3)
(f518_0__init__InvokeMethod arg1P arg2P arg3P)
:guard
(and
(and (and (< (- arg1 1) arg1) (> arg1P 3)) (> arg1 1))
(= (- arg1 1) arg2P))
)
(rule
(f518_0__init__InvokeMethod arg1 arg2 arg3)
(f193_0__init__LE arg1P arg2P arg3P)
:guard
(and (and (> arg1 2) (> arg2 0)) (= arg2 arg1P)))
(rule
(f480_0_main_InvokeMethod arg1 arg2 arg3)
(f388_0_height_NONNULL arg1P arg2P arg3P)
:guard
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 1) arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P (- 1)))
)
(rule
(f481_0_main_InvokeMethod arg1 arg2 arg3)
(f388_0_height_NONNULL arg1P arg2P arg3P)
:guard
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 1) arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P (- 1)))
)
(rule
(f482_0_main_InvokeMethod arg1 arg2 arg3)
(f388_0_height_NONNULL arg1P arg2P arg3P)
:guard
(exists
((x46 Int))
(and
(and
(and
(and
(and (and (<= arg1P arg2) (> x46 1)) (<= (+ arg2P 1) arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
)
)
(rule
(f388_0_height_NONNULL arg1 arg2 arg3)
(f388_0_height_NONNULL arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= arg1P arg2)) (<= (+ arg2P 3) arg1))
(<= (+ arg2P 1) arg2))
(> arg1 2))
(> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
)
(rule
(f388_0_height_NONNULL arg1 arg2 arg3)
(f388_0_height_NONNULL arg1P arg2P arg3P)
:guard
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= (+ arg2P 3) arg1)) (> arg1 2))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P (- 1)))
)
(rule (__init arg1 arg2 arg3) (f1_0_main_Load arg1P arg2P arg3P))
