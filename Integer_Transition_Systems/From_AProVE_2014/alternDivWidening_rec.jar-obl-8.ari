(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int))
(fun f169_0_loop_EQ (-> Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f169_0_loop_EQ arg1P arg2P arg3P)
:guard
(and
(and (and (and (> arg1 0) (> arg2 (- 1))) (= 1 arg1P)) (= 1 arg2P))
(= arg2 arg3P))
)

(rule
(f169_0_loop_EQ arg1 arg2 arg3)
(f169_0_loop_EQ arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (< arg3 0) (>= arg3 (- 0 arg2))) (<= arg3 arg2))
(> arg2 0))
(< arg3 (+ arg2 1)))
(> arg1 0))
(= (+ arg2 1) arg1P))
(= (+ arg2 1) arg2P))
(= 0 arg3P))
)

(rule
(f169_0_loop_EQ arg1 arg2 arg3)
(f169_0_loop_EQ arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (>= arg3 (- 0 arg2))) (<= arg3 arg2))
(> arg2 0))
(< arg3 (+ arg2 1)))
(> arg1 0))
(= (+ arg2 1) arg1P))
(= (+ arg2 1) arg2P))
(= 0 arg3P))
)

(rule
(f169_0_loop_EQ arg1 arg2 arg3)
(f169_0_loop_EQ arg1P arg2P arg3P)
:guard
(and
(and
(and
(and (and (and (< arg3 0) (< arg3 (- 0 arg2))) (> arg1 0)) (> arg2 0))
(= (+ arg2 1) arg1P))
(= (+ arg2 1) arg2P))
(= (+ (* (- 1) arg3) 1) arg3P))
)

(rule
(f169_0_loop_EQ arg1 arg2 arg3)
(f169_0_loop_EQ arg1P arg2P arg3P)
:guard
(and
(and
(and
(and (and (and (> arg3 0) (< arg3 (- 0 arg2))) (> arg1 0)) (> arg2 0))
(= (+ arg2 1) arg1P))
(= (+ arg2 1) arg2P))
(= (+ (* (- 1) arg3) 1) arg3P))
)

(rule
(f169_0_loop_EQ arg1 arg2 arg3)
(f169_0_loop_EQ arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg3 (- 0 arg2)) (> arg3 1)) (< arg2 arg3))
(> arg1 0))
(> 2 (* (- 1) arg3)))
(<= (+ arg2 1) arg3))
(> arg2 0))
(= (+ arg2 1) arg1P))
(= (+ arg2 1) arg2P))
(= (- (* (- 1) arg3) 1) arg3P))
)

(rule (__init arg1 arg2 arg3) (f1_0_main_Load arg1P arg2P arg3P))
