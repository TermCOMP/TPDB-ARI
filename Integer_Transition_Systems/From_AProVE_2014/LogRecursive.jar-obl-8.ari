(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int))
(fun f154_0_main_InvokeMethod (-> Int Int Int Int))
(fun f167_0_log_LT (-> Int Int Int Int))
(fun |f167_0_log_LT'| (-> Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int))
(fun f96_0_random_GT (-> Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f96_0_random_GT arg1P arg2P arg3P)
:guard
(and
(and (and (and (<= arg1P arg1) (> arg2 0)) (> arg1 0)) (> arg1P 0))
(= 0 arg2P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f96_0_random_GT arg1P arg2P arg3P)
:guard
(and
(and (and (and (> arg2P (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
)
(rule
(f96_0_random_GT arg1 arg2 arg3)
(f154_0_main_InvokeMethod arg1P arg2P arg3P)
:guard
(exists
((x7 Int))
(and
(and
(and (and (and (>= arg1 arg1P) (> x7 1)) (> arg1 0)) (> arg1P 0))
(= arg2 arg2P))
(= 0 arg3P))
)
)
(rule
(f96_0_random_GT arg1 arg2 arg3)
(f154_0_main_InvokeMethod arg1P arg2P arg3P)
:guard
(exists
((x11 Int))
(and
(and
(and (and (and (> x11 1) (> arg3P (- 1))) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
)
)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f167_0_log_LT arg1P arg2P arg3P)
:guard
(and
(and (and (and (> arg1 0) (= 0 arg2)) (= 0 arg1P)) (= 0 arg2P))
(= 0 arg3P))
)
(rule
(f96_0_random_GT arg1 arg2 arg3)
(f167_0_log_LT arg1P arg2P arg3P)
:guard
(and (and (and (> arg1 0) (= 0 arg1P)) (= arg2 arg2P)) (= 0 arg3P)))
(rule
(f154_0_main_InvokeMethod arg1 arg2 arg3)
(f167_0_log_LT arg1P arg2P arg3P)
:guard
(exists
((x19 Int))
(and
(and (and (and (> arg1 0) (> x19 1)) (= arg3 arg1P)) (= arg2 arg2P))
(= arg3 arg3P))
)
)
(rule
(f167_0_log_LT arg1 arg2 arg3)
(|f167_0_log_LT'| arg1P arg2P arg3P)
:guard
(exists
((x28 Int))
(and
(and
(and
(and
(and (and (and (> arg2 1) (> arg1 1)) (> arg2 x28)) (<= arg1 arg2))
(= arg1 arg3))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg1 arg3P))
)
)
(rule
(|f167_0_log_LT'| arg1 arg2 arg3)
(f167_0_log_LT arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and
(and (and (and (> arg2 1) (> arg1 1)) (<= arg1 arg2)) (> arg2 arg2P))
(> arg1 (- arg2 (* arg1 arg2P))))
(>= (- arg2 (* arg1 arg2P)) 0))
(= arg1 arg3))
(= arg1 arg1P))
(= arg1 arg3P))
)
(rule (__init arg1 arg2 arg3) (f1_0_main_Load arg1P arg2P arg3P))
