(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int Int Int Int))
(fun f1014_0_mirror_InvokeMethod (-> Int Int Int Int Int Int Int Int Int Int))
(fun f101_0_main_InvokeMethod (-> Int Int Int Int Int Int Int Int Int Int))
(fun f1458_0_createTree_LE (-> Int Int Int Int Int Int Int Int Int Int))
(fun f1475_0_main_InvokeMethod (-> Int Int Int Int Int Int Int Int Int Int))
(fun f1514_0_createTree_NONNULL (-> Int Int Int Int Int Int Int Int Int Int))
(fun
f1562_0_createTree_FieldAccess
(-> Int Int Int Int Int Int Int Int Int Int))
(fun f1596_0_createTree_LE (-> Int Int Int Int Int Int Int Int Int Int))
(fun
f1650_0_createTree_FieldAccess
(-> Int Int Int Int Int Int Int Int Int Int))
(fun f179_0_createNode_Return (-> Int Int Int Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int Int Int Int))
(fun f554_0_random_GT (-> Int Int Int Int Int Int Int Int Int Int))
(fun f674_0_createTree_Return (-> Int Int Int Int Int Int Int Int Int Int))
(fun f727_0_mirror_NONNULL (-> Int Int Int Int Int Int Int Int Int Int))
(fun f97_0_createTree_NE (-> Int Int Int Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f101_0_main_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P)
:guard
(and
(and
(and (and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)) (= 0 arg2))
(= 0 arg2P))
(= 0 arg3P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f101_0_main_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P)
:guard
(and
(and (and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)) (= 1 arg2P))
(= arg2 arg3P))
)
(rule
(f101_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f727_0_mirror_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and (and (<= (+ arg1P 1) arg1) (< arg2 2)) (> arg1 0))
(> arg1P (- 1)))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1475_0_main_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P)
:guard
(and (and (and (>= arg1 arg1P) (> arg1 0)) (> arg1P 0)) (> arg2P 0)))
(rule
(f674_0_createTree_Return arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1475_0_main_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg1P 1) arg2)) (<= arg2P arg2))
(> arg1 0))
(> arg2 1))
(> arg1P 0))
(> arg2P 1))
(<= (+ arg3 2) arg2))
(= arg3 arg3P))
)
(rule
(f1475_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f727_0_mirror_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and (and (and (<= arg1P arg2) (> arg1 0)) (> arg2 0)) (> arg1P 0))
(<= (+ arg3 2) arg2))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f97_0_createTree_NE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and (and (and (> arg1 0) (> arg2 0)) (= 0 arg1P)) (= arg2 arg2P)))
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f97_0_createTree_NE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and (and (and (> arg1P (- 1)) (> arg2 0)) (> arg1 0)) (= arg2 arg2P)))
(rule
(f97_0_createTree_NE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1458_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and (and (and (> arg1 0) (> arg2 0)) (> arg2P 1)) (> arg1P 1))
(= arg1 arg3P))
(= arg2 arg4P))
(= 1 arg5P))
)
(rule
(f97_0_createTree_NE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1458_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and (and (and (> arg1 0) (> arg2 0)) (> arg2P 1)) (> arg1P 1))
(= arg1 arg3P))
(= arg2 arg4P))
)
(rule
(f179_0_createNode_Return arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1458_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and (and (and (> arg2P 1) (> arg1P 1)) (= arg1 arg3P)) (= arg2 arg4P))
(= arg3 arg5P))
)
(rule
(f1458_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1514_0_createTree_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg5 arg4) (> arg4 (- 1))) (> arg3 0))
(<= arg2P arg1))
(<= arg3P arg2))
(<= (+ arg4P 1) arg2))
(> arg1 0))
(> arg2 0))
(> arg2P 0))
(> arg3P 0))
(> arg4P (- 1)))
(<= (+ arg7P 2) arg1))
(<= (+ arg8P 2) arg1))
(<= (+ arg9P 2) arg2))
(= arg3 arg1P))
(= arg4 arg5P))
(= arg5 arg6P))
)
(rule
(f1514_0_createTree_NONNULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1458_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (<= (+ arg2P 2) arg3)) (<= arg2P arg4))
(> arg2 0))
(> arg3 2))
(> arg4 0))
(> arg1P 0))
(> arg2P 0))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(<= (+ arg9 2) arg3))
(= (- arg1 1) arg3P))
(= arg5 arg4P))
(= arg6 arg5P))
)
(rule
(f1514_0_createTree_NONNULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1562_0_createTree_FieldAccess
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg6 arg5) (> arg1 0)) (<= arg2P arg2))
(<= arg3P arg3))
(> arg2 0))
(> arg3 1))
(> arg4 (- 1)))
(> arg2P 0))
(> arg3P 1))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(<= (+ arg9 2) arg3))
(= arg1 arg1P))
(= arg5 arg4P))
(= arg6 arg5P))
(= arg8 arg6P))
(= arg9 arg7P))
)
(rule
(f1514_0_createTree_NONNULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1562_0_createTree_FieldAccess
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg6 arg5) (> arg1 0)) (<= arg2P arg2))
(<= arg3P arg3))
(> arg2 0))
(> arg3 1))
(> arg4 (- 1)))
(> arg2P 0))
(> arg3P 1))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(<= (+ arg9 2) arg3))
(= arg1 arg1P))
(= arg5 arg4P))
(= arg8 arg6P))
(= arg9 arg7P))
)
(rule
(f1458_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1596_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> arg4 (- 1))) (< arg5 arg4))
(> arg5 (- 1)))
(<= arg2P arg1))
(<= arg3P arg2))
(> arg1 0))
(> arg2 0))
(> arg2P 0))
(> arg3P 0))
(<= (+ arg7P 2) arg1))
(<= (+ arg8P 2) arg1))
(= arg3 arg1P))
(= 0 arg4P))
(= arg4 arg5P))
(= (+ arg5 1) arg6P))
)
(rule
(f1458_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1596_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> arg4 (- 1))) (< arg5 arg4))
(> arg5 (- 1)))
(> arg4P (- 1)))
(<= arg2P arg1))
(<= arg3P arg2))
(> arg1 0))
(> arg2 0))
(> arg2P 0))
(> arg3P 0))
(<= (+ arg7P 2) arg1))
(<= (+ arg8P 2) arg1))
(= arg3 arg1P))
(= arg4 arg5P))
(= (+ arg5 1) arg6P))
)
(rule
(f1562_0_createTree_FieldAccess arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1458_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg3 1)) (> arg1P 0)) (> arg2P 0))
(<= (+ arg6 2) arg2))
(<= (+ arg7 2) arg3))
(= (- arg1 1) arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)
(rule
(f1562_0_createTree_FieldAccess arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1458_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= (- arg1P 2) arg2) (<= (- arg1P 2) arg3))
(<= (- arg2P 2) arg2))
(<= (- arg2P 2) arg3))
(> arg2 1))
(> arg3 1))
(> arg1P 3))
(> arg2P 3))
(<= (+ arg6 2) arg2))
(<= (+ arg6 2) arg3))
(= arg6 arg7))
(= (- arg1 1) arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)
(rule
(f1596_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1514_0_createTree_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg2P arg2) (<= arg3P arg3)) (<= (+ arg4P 1) arg3))
(> arg2 0))
(> arg3 0))
(> arg2P 0))
(> arg3P 0))
(> arg4P (- 1)))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(<= (+ arg9P 2) arg3))
(= 0 arg4))
(= arg1 arg1P))
(= arg5 arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
(= arg8 arg8P))
)
(rule
(f1596_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1458_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (> arg4 0)) (<= (+ arg2P 2) arg3))
(> arg2 0))
(> arg3 2))
(> arg1P 0))
(> arg2P 0))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(= (- arg1 1) arg3P))
(= arg5 arg4P))
(= arg6 arg5P))
)
(rule
(f1596_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1650_0_createTree_FieldAccess
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg4 0) (> arg6 0)) (> arg1 0)) (<= arg2P arg2))
(<= arg3P arg3))
(> arg2 0))
(> arg3 1))
(> arg2P 0))
(> arg3P 1))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(<= (+ arg7P 2) arg3))
(= arg1 arg1P))
(= arg5 arg4P))
(= arg6 arg5P))
(= arg7 arg6P))
)
(rule
(f1596_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1650_0_createTree_FieldAccess
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg4 0) (> arg6 0)) (> arg1 0)) (<= arg2P arg2))
(<= arg3P arg3))
(> arg2 0))
(> arg3 1))
(> arg2P 0))
(> arg3P 1))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(<= (+ arg7P 2) arg3))
(= arg1 arg1P))
(= arg5 arg4P))
(= arg7 arg6P))
)
(rule
(f1650_0_createTree_FieldAccess arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1458_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg3 1)) (> arg1P 0)) (> arg2P 0))
(<= (+ arg6 2) arg2))
(<= (+ arg7 2) arg3))
(= (- arg1 1) arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)
(rule
(f1650_0_createTree_FieldAccess arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1458_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= (- arg1P 2) arg2) (<= (- arg1P 2) arg3))
(<= (- arg2P 2) arg2))
(<= (- arg2P 2) arg3))
(> arg2 1))
(> arg3 1))
(> arg1P 3))
(> arg2P 3))
(<= (+ arg6 2) arg2))
(<= (+ arg6 2) arg3))
(= arg6 arg7))
(= (- arg1 1) arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)
(rule
(f727_0_mirror_NONNULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f727_0_mirror_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and (and (<= (+ arg1P 1) arg1) (> arg1 0)) (> arg1P (- 1))))
(rule
(f727_0_mirror_NONNULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f727_0_mirror_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and (and (<= (+ arg1P 2) arg1) (> arg1 1)) (> arg1P (- 1))))
(rule
(f727_0_mirror_NONNULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1014_0_mirror_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P)
:guard
(and
(and
(and
(and (and (<= (+ arg2P 1) arg1) (<= (+ arg4P 1) arg1)) (> arg1 0))
(> arg1P 4))
(> arg2P (- 1)))
(> arg4P (- 1)))
)
(rule
(f727_0_mirror_NONNULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1014_0_mirror_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P)
:guard
(and
(and
(and
(and (and (<= (+ arg2P 1) arg1) (<= (+ arg4P 1) arg1)) (> arg1 0))
(> arg1P 4))
(> arg2P (- 1)))
(> arg4P (- 1)))
)
(rule
(f727_0_mirror_NONNULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1014_0_mirror_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P)
:guard
(and
(and
(and
(and (and (<= (+ arg2P 1) arg1) (<= (+ arg4P 1) arg1)) (> arg1 0))
(> arg1P 4))
(> arg2P (- 1)))
(> arg4P (- 1)))
)
(rule
(f727_0_mirror_NONNULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1014_0_mirror_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P)
:guard
(and
(and
(and
(and
(and
(and (<= (- arg1P 3) arg1) (<= (+ arg2P 1) arg1))
(<= (+ arg4P 1) arg1))
(> arg1 0))
(> arg1P 3))
(> arg2P (- 1)))
(> arg4P (- 1)))
)
(rule
(f1014_0_mirror_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f727_0_mirror_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= arg1P arg2)) (<= arg1P arg4))
(> arg1 2))
(> arg2 (- 1)))
(> arg4 (- 1)))
(> arg1P (- 1)))
)
(rule
(f97_0_createTree_NE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f554_0_random_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and (and (and (> arg2 0) (> arg1 0)) (= arg2 arg2P)) (= 1 arg3P)))
(rule
(f1514_0_createTree_NONNULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f554_0_random_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (>= arg6 arg5)) (> arg1 0)) (> arg2 0))
(> arg3 1))
(> arg4 (- 1)))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(<= (+ arg9 2) arg3))
(= arg5 arg2P))
(= arg6 arg3P))
)
(rule
(f1596_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f554_0_random_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (and (> arg1 0) (> arg6 0)) (> arg5 (- 1))) (> arg4 0))
(> arg2 0))
(> arg3 1))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(= arg5 arg2P))
(= arg6 arg3P))
)
(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P))
