(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int))
(fun f1_0_main_Load (-> Int Int Int))
(fun f297_0_createIntList_Return (-> Int Int Int))
(fun f508_0_random_ArrayAccess (-> Int Int Int))
(fun f658_0_createIntList_LE (-> Int Int Int))
(fun f698_0_nth_LE (-> Int Int Int))
(fun f746_0_main_LE (-> Int Int Int))
(entrypoint __init)
(rule
(f297_0_createIntList_Return arg1 arg2)
(f508_0_random_ArrayAccess arg1P arg2P)
:guard
(and (and (<= arg1P arg1) (> arg1 (- 1))) (> arg1P (- 1))))

(rule
(f1_0_main_Load arg1 arg2)
(f508_0_random_ArrayAccess arg1P arg2P)
:guard
(and (> arg1 0) (> arg1P (- 1))))

(rule
(f508_0_random_ArrayAccess arg1 arg2)
(f698_0_nth_LE arg1P arg2P)
:guard
(exists
((x7 Int))
(and
(and (and (and (> arg2P (- 1)) (> x7 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
)
)

(rule
(f698_0_nth_LE arg1 arg2)
(f746_0_main_LE arg1P arg2P)
:guard
(and (and (> arg1 0) (< arg2 2)) (<= (+ arg1P 2) arg1)))

(rule
(f698_0_nth_LE arg1 arg2)
(f698_0_nth_LE arg1P arg2P)
:guard
(and
(and
(and (and (<= (+ arg1P 1) arg1) (> arg2 1)) (> arg1 0))
(> arg1P (- 1)))
(= (- arg2 1) arg2P))
)

(rule
(f746_0_main_LE arg1 arg2)
(f746_0_main_LE arg1P arg2P)
:guard
(and (> arg1 0) (= (- arg1 1) arg1P)))

(rule
(f1_0_main_Load arg1 arg2)
(f658_0_createIntList_LE arg1P arg2P)
:guard
(and (and (and (> arg2 (- 1)) (> arg1P (- 1))) (> arg1 0)) (= 1 arg2P)))

(rule
(f658_0_createIntList_LE arg1 arg2)
(f658_0_createIntList_LE arg1P arg2P)
:guard
(and
(and (and (> arg1 0) (> arg2 0)) (= (- arg1 1) arg1P))
(= (+ arg2 1) arg2P))
)

(rule (__init arg1 arg2) (f1_0_main_Load arg1P arg2P))
