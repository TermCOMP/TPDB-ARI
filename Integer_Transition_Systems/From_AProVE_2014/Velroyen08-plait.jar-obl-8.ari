(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int))
(fun f257_0_loop_GT (-> Int Int Int Int Int))
(fun |f257_0_loop_GT'| (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f257_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (> arg4P (- 1)) (> arg2 2)) (> arg2P (- 1)))
(> arg1P (- 1)))
(> arg1 0))
(= 0 arg3P))
)
(rule
(f257_0_loop_GT arg1 arg2 arg3 arg4)
(|f257_0_loop_GT'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x20 Int))
(and
(and
(and
(and (and (and (>= arg2 x20) (> arg4 0)) (= 1 arg3)) (= arg1 arg1P))
(= arg2 arg2P))
(= 1 arg3P))
(= arg4 arg4P))
)
)
(rule
(|f257_0_loop_GT'| arg1 arg2 arg3 arg4)
(f257_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg4 0) (>= arg2 arg1P)) (< (- arg2 (* 2 arg1P)) 2))
(>= (- arg2 (* 2 arg1P)) 0))
(= 1 arg3))
(= (* 2 arg1) arg2P))
(= 0 arg3P))
(= arg4 arg4P))
)
(rule
(f257_0_loop_GT arg1 arg2 arg3 arg4)
(|f257_0_loop_GT'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x31 Int))
(and
(and
(and
(and (and (and (> arg4 0) (>= arg1 x31)) (= 0 arg3)) (= arg1 arg1P))
(= arg2 arg2P))
(= 0 arg3P))
(= arg4 arg4P))
)
)
(rule
(|f257_0_loop_GT'| arg1 arg2 arg3 arg4)
(f257_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and (and (>= arg1 arg4P) (> arg4 0)) (< (- arg1 (* 2 arg4P)) 2))
(>= (- arg1 (* 2 arg4P)) 0))
(= 0 arg3))
(= (* 2 arg4) arg1P))
(= arg2 arg2P))
(= 1 arg3P))
)
(rule
(f257_0_loop_GT arg1 arg2 arg3 arg4)
(|f257_0_loop_GT'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x41 Int))
(and
(and
(and
(and
(and (and (and (>= arg2 x41) (> arg1 0)) (= 1 arg3)) (= 0 arg4))
(= arg1 arg1P))
(= arg2 arg2P))
(= 1 arg3P))
(= 0 arg4P))
)
)
(rule
(|f257_0_loop_GT'| arg1 arg2 arg3 arg4)
(f257_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg1 0) (>= arg2 arg1P)) (< (- arg2 (* 2 arg1P)) 2))
(>= (- arg2 (* 2 arg1P)) 0))
(= 1 arg3))
(= 0 arg4))
(= (* 2 arg1) arg2P))
(= 0 arg3P))
(= 0 arg4P))
)
(rule
(f257_0_loop_GT arg1 arg2 arg3 arg4)
(|f257_0_loop_GT'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x51 Int))
(and
(and
(and
(and
(and (and (and (> arg1 0) (> arg1 x51)) (= 0 arg3)) (= 0 arg4))
(= arg1 arg1P))
(= arg2 arg2P))
(= 0 arg3P))
(= 0 arg4P))
)
)
(rule
(|f257_0_loop_GT'| arg1 arg2 arg3 arg4)
(f257_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg1 arg4P) (> arg1 0)) (< (- arg1 (* 2 arg4P)) 2))
(>= (- arg1 (* 2 arg4P)) 0))
(= 0 arg3))
(= 0 arg4))
(= 0 arg1P))
(= arg2 arg2P))
(= 1 arg3P))
)
(rule
(f257_0_loop_GT arg1 arg2 arg3 arg4)
(|f257_0_loop_GT'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x61 Int))
(and
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg2 x61)) (= 0 arg1)) (= 1 arg3))
(= 0 arg4))
(= 0 arg1P))
(= arg2 arg2P))
(= 1 arg3P))
(= 0 arg4P))
)
)
(rule
(|f257_0_loop_GT'| arg1 arg2 arg3 arg4)
(f257_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg2 arg1P) (> arg2 0)) (< (- arg2 (* 2 arg1P)) 2))
(>= (- arg2 (* 2 arg1P)) 0))
(= 0 arg1))
(= 1 arg3))
(= 0 arg4))
(= 0 arg2P))
(= 0 arg3P))
(= 0 arg4P))
)
(rule
(f257_0_loop_GT arg1 arg2 arg3 arg4)
(f257_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (and (> arg2 0) (= 0 arg1)) (= 0 arg3)) (= 0 arg4))
(= 0 arg1P))
(= arg2 arg2P))
(= 1 arg3P))
(= 0 arg4P))
)
(rule (__init arg1 arg2 arg3 arg4) (f1_0_main_Load arg1P arg2P arg3P arg4P))
