(format LCTRS)
(theory Ints)
(fun
__init
(->
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int)
)
(fun
f1_0_main_Load
(->
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int)
)
(fun
f309_0_createList_Load
(->
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int)
)
(fun
f510_0_createList_Load
(->
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int)
)
(fun
f673_0_createList_LE
(->
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int
Int)
)
(entrypoint __init)
(rule
(f309_0_createList_Load
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14
arg15
arg16
arg17
arg18
arg19
arg20)
(f510_0_createList_Load
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P
arg15P
arg16P
arg17P
arg18P
arg19P
arg20P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg2P arg2) (> arg2 9)) (> arg2P 9))
(<= (+ arg7 3) arg2))
(<= (+ arg6 5) arg2))
(= arg1 arg1P))
(= 0 arg3P))
(= 0 arg4P))
(= arg3 arg5P))
(= 0 arg7P))
(= 0 arg8P))
(= 0 arg9P))
(= arg3 arg13P))
(= arg4 arg14P))
(= arg4 arg15P))
(= arg5 arg17P))
(= arg6 arg18P))
(= arg7 arg19P))
)
(rule
(f1_0_main_Load
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14
arg15
arg16
arg17
arg18
arg19
arg20)
(f309_0_createList_Load
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P
arg15P
arg16P
arg17P
arg18P
arg19P
arg20P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg1P (- 1)) (> arg2 0)) (<= (- arg2P 7) arg1))
(> arg1 0))
(> arg2P 7))
(= 1 arg5P))
(= 0 arg6P))
(= 0 arg7P))
)
(rule
(f510_0_createList_Load
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14
arg15
arg16
arg17
arg18
arg19
arg20)
(f673_0_createList_LE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P
arg15P
arg16P
arg17P
arg18P
arg19P
arg20P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg2 11) (> arg1P 11)) (<= (+ arg19 3) arg2))
(<= (+ arg18 5) arg2))
(= arg1 arg2P))
(= arg4 arg3P))
(= arg5 arg4P))
(= arg11 arg5P))
(= arg10 arg6P))
(= arg3 arg7P))
(= arg6 arg8P))
(= arg7 arg9P))
(= arg8 arg10P))
(= arg9 arg11P))
(= arg12 arg12P))
(= arg13 arg13P))
(= arg14 arg14P))
(= arg15 arg15P))
(= arg17 arg16P))
(= arg18 arg19P))
(= arg19 arg20P))
)
(rule
(f673_0_createList_LE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14
arg15
arg16
arg17
arg18
arg19
arg20)
(f673_0_createList_LE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P
arg15P
arg16P
arg17P
arg18P
arg19P
arg20P)
:guard
(exists
((x41 Int) (x76 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg2 0) (> x41 (- 1))) (> arg16 0)) (< arg16 x41))
(> arg4 0))
(> arg3 0))
(> arg7 0))
(> arg6 0))
(> arg5 0))
(> arg15 0))
(> x76 (- 1)))
(> arg9 0))
(> arg12 0))
(> arg10 0))
(> arg14 0))
(> arg13 0))
(> arg11 0))
(> arg8 0))
(> arg20 (- 1)))
(> arg19 (- 1)))
(> arg1 11))
(> arg1P 11))
(<= (+ arg17 11) arg1))
(<= (+ arg18 9) arg1))
(<= (+ arg20 3) arg1))
(<= (+ arg19 5) arg1))
(= (- arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= (+ arg16 1) arg16P))
(= (+ arg19 1) arg19P))
(= (+ arg20 1) arg20P))
)
)
(rule
(__init
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12
arg13
arg14
arg15
arg16
arg17
arg18
arg19
arg20)
(f1_0_main_Load
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P
arg13P
arg14P
arg15P
arg16P
arg17P
arg18P
arg19P
arg20P)
)
