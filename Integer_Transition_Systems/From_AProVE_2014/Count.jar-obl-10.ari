(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f1542_0_count_NULL (-> Int Int Int Int Int))
(fun f1770_0_createTree_LE (-> Int Int Int Int Int))
(fun f1797_0_main_InvokeMethod (-> Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int))
(fun f2102_0_flatten_NULL (-> Int Int Int Int Int))
(fun f462_0_createTree_Return (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f1797_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and (and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)) (> arg2P 0)))

(rule
(f462_0_createTree_Return arg1 arg2 arg3 arg4)
(f1797_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg1P 1) arg2)) (>= arg2 arg2P))
(> arg1 0))
(> arg2 1))
(> arg1P 0))
(> arg2P 1))
(<= (+ arg3 2) arg2))
(= arg3 arg3P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f1770_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg3P 0) (> arg2 (- 1))) (<= (- arg1P 1) arg1))
(<= (- arg2P 1) arg1))
(> arg1 0))
(> arg1P 1))
(> arg2P 1))
(= 1 arg4P))
)

(rule
(f1770_0_createTree_LE arg1 arg2 arg3 arg4)
(f1770_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> arg3 0)) (<= arg1P arg1))
(<= (+ arg2P 2) arg2))
(> arg1 0))
(> arg2 2))
(> arg1P 0))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)

(rule
(f1770_0_createTree_LE arg1 arg2 arg3 arg4)
(f1770_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x28 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg3 0) (> x28 0)) (> arg4 (- 1))) (<= arg1P arg1))
(<= (+ arg2P 2) arg2))
(> arg1 0))
(> arg2 2))
(> arg1P 0))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
)

(rule
(f1770_0_createTree_LE arg1 arg2 arg3 arg4)
(f1770_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x35 Int))
(and
(and
(and
(and
(and
(and (and (and (> arg3 0) (> x35 0)) (> arg4 (- 1))) (> arg1 0))
(> arg2 1))
(> arg1P 0))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
)

(rule
(f1770_0_createTree_LE arg1 arg2 arg3 arg4)
(f1770_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (and (> arg4 (- 1)) (> arg3 0)) (> arg1 0)) (> arg2 1))
(> arg1P 0))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)

(rule
(f1770_0_createTree_LE arg1 arg2 arg3 arg4)
(f1770_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> arg3 0)) (<= (- arg1P 2) arg1))
(<= (- arg1P 2) arg2))
(<= (- arg2P 2) arg1))
(<= (- arg2P 2) arg2))
(> arg1 1))
(> arg2 1))
(> arg1P 3))
(> arg2P 3))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)

(rule
(f1770_0_createTree_LE arg1 arg2 arg3 arg4)
(f1770_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x54 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> x54 0)) (> arg4 (- 1)))
(<= (- arg1P 2) arg1))
(<= (- arg1P 2) arg2))
(<= (- arg2P 2) arg1))
(<= (- arg2P 2) arg2))
(> arg1 1))
(> arg2 1))
(> arg1P 3))
(> arg2P 3))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f1542_0_count_NULL arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (<= (+ arg1P 1) arg1) (> arg2 0)) (<= (+ arg2P 1) arg1))
(> arg1 0))
(> arg1P (- 1)))
(> arg2P (- 1)))
)

(rule
(f1797_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f1542_0_count_NULL arg1P arg2P arg3P arg4P)
:guard
(exists
((x59 Int))
(and
(and
(and
(and
(and (and (and (<= arg1P arg2) (> x59 0)) (<= arg2P arg2)) (> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 0))
(<= (+ arg3 2) arg2))
)
)

(rule
(f1542_0_count_NULL arg1 arg2 arg3 arg4)
(f1542_0_count_NULL arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ arg1P 2) arg1) (<= (+ arg1P 2) arg2))
(<= (+ arg2P 2) arg1))
(<= (+ arg2P 2) arg2))
(> arg1 1))
(> arg2 1))
(> arg1P (- 1)))
(> arg2P (- 1)))
)

(rule
(f1542_0_count_NULL arg1 arg2 arg3 arg4)
(f1542_0_count_NULL arg1P arg2P arg3P arg4P)
:guard
(and (and (and (> arg1 2) (> arg2 2)) (> arg1P (- 1))) (> arg2P (- 1))))

(rule
(f1542_0_count_NULL arg1 arg2 arg3 arg4)
(f2102_0_flatten_NULL arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (<= arg1P arg1) (<= arg1P arg2)) (> arg1 2)) (> arg2 2))
(> arg1P 2))
)

(rule
(f2102_0_flatten_NULL arg1 arg2 arg3 arg4)
(f2102_0_flatten_NULL arg1P arg2P arg3P arg4P)
:guard
(and (and (<= (+ arg1P 2) arg1) (> arg1 1)) (> arg1P (- 1))))

(rule
(f2102_0_flatten_NULL arg1 arg2 arg3 arg4)
(f2102_0_flatten_NULL arg1P arg2P arg3P arg4P)
:guard
(and (and (<= (- arg1P 2) arg1) (> arg1 2)) (> arg1P 2)))

(rule (__init arg1 arg2 arg3 arg4) (f1_0_main_Load arg1P arg2P arg3P arg4P))
