(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int Int Int Int))
(fun f101_0_main_GE (-> Int Int Int Int Int Int Int Int Int Int))
(fun f1_0_main_ConstantStackPush (-> Int Int Int Int Int Int Int Int Int Int))
(fun f255_0_main_GE (-> Int Int Int Int Int Int Int Int Int Int))
(fun f292_0_main_LT (-> Int Int Int Int Int Int Int Int Int Int))
(fun f422_0_main_GE (-> Int Int Int Int Int Int Int Int Int Int))
(fun f448_0_main_LT (-> Int Int Int Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_ConstantStackPush arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f101_0_main_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and (and (and (<= arg1P arg1) (> arg2 (- 1))) (> arg1 0)) (> arg1P 0))
(= 0 arg2P))
(= arg2 arg3P))
)

(rule
(f101_0_main_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f255_0_main_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg3 arg2)) (> arg1 0)) (> arg1P 0))
(= arg2 arg2P))
(= 0 arg3P))
(= (* 2 arg2) arg4P))
(= arg3 arg5P))
)

(rule
(f255_0_main_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f101_0_main_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and (and (>= arg3 arg4) (> arg5 (- 1))) (>= arg1 arg1P))
(> arg1 0))
(> arg1P 0))
(= (+ arg2 1) arg2P))
(= arg5 arg3P))
)

(rule
(f255_0_main_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f292_0_main_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 arg3) (> arg3 (- 1))) (> arg2 (- 1)))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= arg4 arg3P))
(= arg3 arg4P))
(= (+ arg2 arg3) arg5P))
(= arg5 arg6P))
)

(rule
(f292_0_main_LT arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f255_0_main_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (< arg5 0)) (> arg1 0)) (> arg1P 0))
(= arg2 arg2P))
(= (+ arg4 1) arg3P))
(= arg3 arg4P))
(= arg6 arg5P))
)

(rule
(f292_0_main_LT arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f422_0_main_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= (* 3 arg4) 0) (> arg5 (- 1))) (>= (* 2 arg2) 0))
(>= (+ (* 2 arg2) (* 3 arg4)) 0))
(>= (* 4 arg5) 0))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
(= 0 arg6P))
(= (+ (+ (* 2 arg2) (* 3 arg4)) (* 4 arg5)) arg7P))
(= arg6 arg8P))
)

(rule
(f422_0_main_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f292_0_main_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (<= arg7 arg6)) (> arg1 0)) (> arg1P 0))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= (- arg5 1) arg5P))
(= arg8 arg6P))
)

(rule
(f422_0_main_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f448_0_main_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= (* 100 arg4) 0) (> arg7 arg6)) (>= (* 1000 arg2) 0))
(>= (* 10 arg5) 0))
(>= (+ (* 1000 arg2) (* 100 arg4)) 0))
(>= (+ (+ (* 1000 arg2) (* 100 arg4)) (* 10 arg5)) 0))
(> arg6 (- 1)))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
(= arg7 arg6P))
(= arg6 arg7P))
(= (+ (+ (+ (* 1000 arg2) (* 100 arg4)) (* 10 arg5)) arg6) arg8P))
(= arg8 arg9P))
)

(rule
(f448_0_main_LT arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f422_0_main_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (< arg8 0)) (> arg1 0)) (> arg1P 0))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
(= (+ arg7 1) arg6P))
(= arg6 arg7P))
(= arg9 arg8P))
)

(rule
(f448_0_main_LT arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f448_0_main_LT arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg8 (- 1))) (> arg1 0)) (> arg1P 0))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
(= (- arg8 1) arg8P))
(= arg9 arg9P))
)

(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9)
(f1_0_main_ConstantStackPush
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P)
)

