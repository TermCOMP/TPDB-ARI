(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int))
(fun f260_0_loop_LE (-> Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f260_0_loop_LE arg1P arg2P arg3P)
:guard
(and
(and (and (and (> arg1 0) (= 0 arg2)) (= 0 arg1P)) (= 0 arg2P))
(= 0 arg3P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f260_0_loop_LE arg1P arg2P arg3P)
:guard
(exists
((x2 Int))
(and
(and
(and (and (and (> arg1 0) (> x2 (- 1))) (= 1 arg2)) (= 0 arg1P))
(= (- 0 x2) arg2P))
(= 0 arg3P))
)
)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f260_0_loop_LE arg1P arg2P arg3P)
:guard
(exists
((x5 Int) (x6 Int))
(and
(and
(and
(and (and (and (> x5 (- 1)) (> arg2 1)) (> x6 (- 1))) (> arg1 0))
(= (- 0 x6) arg1P))
(= (- 0 x5) arg2P))
(= (- 0 x6) arg3P))
)
)
(rule
(f260_0_loop_LE arg1 arg2 arg3)
(f260_0_loop_LE arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and (and (< arg1 arg2) (> (+ arg2 1) arg2)) (< arg1 (+ arg2 1)))
(= arg1 arg3))
(= (+ arg1 arg2) arg1P))
(= (+ arg2 1) arg2P))
(= (+ arg1 arg2) arg3P))
)
(rule (__init arg1 arg2 arg3) (f1_0_main_Load arg1P arg2P arg3P))
