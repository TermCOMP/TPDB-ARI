(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int))
(fun f490_0_loop_GT (-> Int Int Int Int Int))
(fun f564_0_loop_NE (-> Int Int Int Int Int))
(fun f565_0_loop_NE (-> Int Int Int Int Int))
(fun f573_0_loop_NE (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f490_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (> arg1 0) (> arg2 (- 1))) (= 20 arg1P)) (= 0 arg2P))
(= arg2 arg3P))
)

(rule
(f490_0_loop_GT arg1 arg2 arg3 arg4)
(f564_0_loop_NE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (and (> arg3 0) (< arg3 arg1)) (> arg1 (- 1))) (< arg2 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
(= (- arg1 2) arg4P))
)

(rule
(f490_0_loop_GT arg1 arg2 arg3 arg4)
(f564_0_loop_NE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (and (> arg3 0) (< arg3 arg1)) (> arg1 (- 1))) (> arg2 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
(= (- arg1 2) arg4P))
)

(rule
(f490_0_loop_GT arg1 arg2 arg3 arg4)
(f565_0_loop_NE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (> arg1 (- 1)) (> arg3 0)) (< arg3 arg1)) (= 0 arg2))
(= arg1 arg1P))
(= (- arg3 1) arg2P))
(= (- arg1 2) arg3P))
)

(rule
(f490_0_loop_GT arg1 arg2 arg3 arg4)
(f573_0_loop_NE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (> arg1 0) (= arg1 arg3)) (= arg1 arg1P))
(= (- arg1 1) arg2P))
(= (- arg1 2) arg3P))
)

(rule
(f564_0_loop_NE arg1 arg2 arg3 arg4)
(f490_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (> arg4 arg3) (= arg1 arg1P)) (= arg2 arg2P))
(= arg3 arg3P))
)

(rule
(f564_0_loop_NE arg1 arg2 arg3 arg4)
(f490_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (< arg4 arg3) (= arg1 arg1P)) (= arg2 arg2P))
(= arg3 arg3P))
)

(rule
(f565_0_loop_NE arg1 arg2 arg3 arg4)
(f490_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and (and (and (> arg3 arg2) (= arg1 arg1P)) (= 0 arg2P)) (= arg2 arg3P)))

(rule
(f565_0_loop_NE arg1 arg2 arg3 arg4)
(f490_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and (and (and (< arg3 arg2) (= arg1 arg1P)) (= 0 arg2P)) (= arg2 arg3P)))

(rule
(f573_0_loop_NE arg1 arg2 arg3 arg4)
(f490_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and (and (and (> arg3 arg2) (= arg1 arg1P)) (= 0 arg2P)) (= arg2 arg3P)))

(rule
(f573_0_loop_NE arg1 arg2 arg3 arg4)
(f490_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and (and (and (< arg3 arg2) (= arg1 arg1P)) (= 0 arg2P)) (= arg2 arg3P)))

(rule
(f490_0_loop_GT arg1 arg2 arg3 arg4)
(f490_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (> arg1 0) (< arg1 3)) (= 0 arg3)) (= arg1 arg1P))
(= 1 arg2P))
(= 1 arg3P))
)

(rule
(f490_0_loop_GT arg1 arg2 arg3 arg4)
(f490_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (> arg1 3) (= 0 arg3)) (= arg1 arg1P)) (= 1 arg2P))
(= 1 arg3P))
)

(rule
(f564_0_loop_NE arg1 arg2 arg3 arg4)
(f490_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (= arg3 arg4) (= (- arg1 1) arg1P)) (= arg2 arg2P))
(= arg3 arg3P))
)

(rule
(f490_0_loop_GT arg1 arg2 arg3 arg4)
(f490_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (= 0 arg1) (= 0 arg3)) (= 0 arg1P)) (= 0 arg2P))
(= (- 1) arg3P))
)

(rule
(f565_0_loop_NE arg1 arg2 arg3 arg4)
(f490_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (= arg2 arg3) (= (- arg1 1) arg1P)) (= 0 arg2P))
(= arg2 arg3P))
)

(rule
(f573_0_loop_NE arg1 arg2 arg3 arg4)
(f490_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (= arg2 arg3) (= (- arg1 1) arg1P)) (= 0 arg2P))
(= arg2 arg3P))
)

(rule
(f490_0_loop_GT arg1 arg2 arg3 arg4)
(f490_0_loop_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (= 3 arg1) (= 0 arg3)) (= 2 arg1P)) (= 1 arg2P))
(= 1 arg3P))
)

(rule (__init arg1 arg2 arg3 arg4) (f1_0_main_Load arg1P arg2P arg3P arg4P))
