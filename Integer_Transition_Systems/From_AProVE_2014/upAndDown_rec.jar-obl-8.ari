(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int))
(fun f91_0_upAndDown_GT (-> Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f91_0_upAndDown_GT arg1P arg2P arg3P)
:guard
(and
(and (and (and (> arg1 0) (> arg2 (- 1))) (= 0 arg1P)) (= 0 arg2P))
(= arg2 arg3P))
)

(rule
(f91_0_upAndDown_GT arg1 arg2 arg3)
(f91_0_upAndDown_GT arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and (and (and (< arg3 10) (< arg3 11)) (< arg1 2)) (> arg3 0))
(= 0 arg2))
(= 0 arg1P))
(= 0 arg2P))
(= (- arg3 1) arg3P))
)

(rule
(f91_0_upAndDown_GT arg1 arg2 arg3)
(f91_0_upAndDown_GT arg1P arg2P arg3P)
:guard
(and
(and (and (and (< arg1 2) (= 10 arg3)) (= 0 arg1P)) (= 0 arg2P))
(= 9 arg3P))
)

(rule
(f91_0_upAndDown_GT arg1 arg2 arg3)
(f91_0_upAndDown_GT arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and (and (and (< arg3 11) (> arg3 0)) (< arg3 10)) (< arg1 2))
(= 1 arg2))
(= 1 arg1P))
(= 1 arg2P))
(= (+ arg3 1) arg3P))
)

(rule
(f91_0_upAndDown_GT arg1 arg2 arg3)
(f91_0_upAndDown_GT arg1P arg2P arg3P)
:guard
(and
(and (and (and (< arg1 2) (= 0 arg3)) (= 1 arg1P)) (= 1 arg2P))
(= 1 arg3P))
)

(rule (__init arg1 arg2 arg3) (f1_0_main_Load arg1P arg2P arg3P))
