(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int))
(fun f194_0_height_NONNULL (-> Int Int Int Int))
(fun f1_0_main_New (-> Int Int Int Int))
(fun f262_0_main_InvokeMethod (-> Int Int Int Int))
(fun f288_0__init__InvokeMethod (-> Int Int Int Int))
(fun f76_0__init__LE (-> Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_New arg1 arg2 arg3)
(f262_0_main_InvokeMethod arg1P arg2P arg3P)
:guard
(> arg1P 2))
(rule
(f1_0_main_New arg1 arg2 arg3)
(f262_0_main_InvokeMethod arg1P arg2P arg3P)
:guard
(> arg1P 1))
(rule
(f1_0_main_New arg1 arg2 arg3)
(f76_0__init__LE arg1P arg2P arg3P)
:guard
(and (and (= 5 arg1P) (= 5 arg2P)) (= 5 arg3P)))
(rule
(f76_0__init__LE arg1 arg2 arg3)
(f76_0__init__LE arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and (and (< (- arg2 1) arg2) (> arg1 0)) (> arg2 1))
(= arg2 arg3))
(= (- arg2 1) arg1P))
(= (- arg2 1) arg2P))
(= (- arg2 1) arg3P))
)
(rule
(f76_0__init__LE arg1 arg2 arg3)
(f288_0__init__InvokeMethod arg1P arg2P arg3P)
:guard
(and
(and
(and
(and (and (and (< (- arg2 1) arg2) (> arg2 1)) (> arg2P 4)) (> arg1 0))
(= arg2 arg3))
(= arg1 arg1P))
(= (- arg2 1) arg3P))
)
(rule
(f76_0__init__LE arg1 arg2 arg3)
(f288_0__init__InvokeMethod arg1P arg2P arg3P)
:guard
(and
(and
(and
(and (and (and (< (- arg2 1) arg2) (> arg2 1)) (> arg2P 3)) (> arg1 0))
(= arg2 arg3))
(= arg1 arg1P))
(= (- arg2 1) arg3P))
)
(rule
(f288_0__init__InvokeMethod arg1 arg2 arg3)
(f76_0__init__LE arg1P arg2P arg3P)
:guard
(and
(and
(and (and (and (> arg3 0) (> arg1 0)) (> arg2 2)) (= arg3 arg1P))
(= arg3 arg2P))
(= arg3 arg3P))
)
(rule
(f262_0_main_InvokeMethod arg1 arg2 arg3)
(f194_0_height_NONNULL arg1P arg2P arg3P)
:guard
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 1) arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P (- 1)))
)
(rule
(f194_0_height_NONNULL arg1 arg2 arg3)
(f194_0_height_NONNULL arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= arg1P arg2)) (<= (+ arg2P 3) arg1))
(<= (+ arg2P 1) arg2))
(> arg1 2))
(> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
)
(rule
(f194_0_height_NONNULL arg1 arg2 arg3)
(f194_0_height_NONNULL arg1P arg2P arg3P)
:guard
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= (+ arg2P 3) arg1)) (> arg1 2))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P (- 1)))
)
(rule (__init arg1 arg2 arg3) (f1_0_main_New arg1P arg2P arg3P))
