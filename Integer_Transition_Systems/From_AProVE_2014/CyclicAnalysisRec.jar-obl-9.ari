(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f177_0_appendNewList_Return (-> Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int))
(fun f343_0_appendNewList_GT (-> Int Int Int Int Int))
(fun f415_0_main_InvokeMethod (-> Int Int Int Int Int))
(fun f480_0_main_InvokeMethod (-> Int Int Int Int Int))
(fun f519_0_length_NONNULL (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f177_0_appendNewList_Return arg1P arg2P arg3P arg4P)
:guard
(exists
((x5 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (> x5 (- 1)) (> arg2 0)) (<= arg1P arg1))
(<= (- arg2P 7) arg1))
(<= (- arg3P 5) arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P 7))
(> arg3P 5))
(= 0 arg4P))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f177_0_appendNewList_Return arg1P arg2P arg3P arg4P)
:guard
(exists
((x12 Int))
(and
(and
(and
(and (and (and (> x12 (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P 8))
(> arg3P 6))
)
)

(rule
(f177_0_appendNewList_Return arg1 arg2 arg3 arg4)
(f415_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x19 Int) (x13 Int))
(and
(and
(and
(and
(and
(and
(and (and (> x19 (- 1)) (> x13 1)) (<= arg1P arg1))
(<= (+ arg1P 7) arg2))
(<= (+ arg1P 5) arg3))
(> arg1 0))
(> arg2 7))
(> arg3 5))
(> arg1P 0))
)
)

(rule
(f177_0_appendNewList_Return arg1 arg2 arg3 arg4)
(f415_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x26 Int) (x27 Int) (x28 Int) (x20 Int) (x29 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> x26 arg4) (> arg4 0)) (> x27 arg4)) (> x28 arg4))
(> x20 1))
(> x29 (- 1)))
(<= arg1P arg1))
(<= (+ arg1P 6) arg2))
(<= (+ arg1P 4) arg3))
(> arg1 0))
(> arg2 6))
(> arg3 4))
(> arg1P 0))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f415_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x33 Int) (x34 Int))
(and
(and
(and
(and (and (> x33 (- 1)) (> arg2 1)) (> x34 (- 1)))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
)
)

(rule
(f177_0_appendNewList_Return arg1 arg2 arg3 arg4)
(f480_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x42 Int) (x43 Int) (x44 Int) (x35 Int) (x45 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> x42 arg4) (> arg4 0)) (> x43 arg4)) (> x44 arg4))
(> x35 1))
(> x45 (- 1)))
(<= arg1P arg1))
(<= (+ arg1P 6) arg2))
(<= (+ arg1P 4) arg3))
(> arg1 0))
(> arg2 6))
(> arg3 4))
(> arg1P 0))
(> arg2P 6))
)
)

(rule
(f177_0_appendNewList_Return arg1 arg2 arg3 arg4)
(f480_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x53 Int) (x46 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> x53 (- 1)) (> x46 1)) (<= arg1P arg1))
(<= (+ arg1P 7) arg2))
(<= (+ arg1P 5) arg3))
(<= (- arg2P 5) arg1))
(<= (+ arg2P 2) arg2))
(<= arg2P arg3))
(> arg1 0))
(> arg2 7))
(> arg3 5))
(> arg1P 0))
(> arg2P 5))
)
)

(rule
(f177_0_appendNewList_Return arg1 arg2 arg3 arg4)
(f480_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x61 Int) (x54 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (> x61 (- 1)) (> x54 1)) (<= arg1P arg1))
(<= (+ arg1P 7) arg2))
(<= (+ arg1P 5) arg3))
(> arg1 0))
(> arg2 7))
(> arg3 5))
(> arg1P 0))
(> arg2P 6))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f480_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x66 Int) (x67 Int))
(and
(and
(and
(and
(and (and (> x66 (- 1)) (> arg2 1)) (> x67 (- 1)))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P 6))
)
)

(rule
(f177_0_appendNewList_Return arg1 arg2 arg3 arg4)
(f480_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x75 Int) (x76 Int) (x77 Int) (x68 Int) (x78 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> x75 arg4) (> arg4 0)) (> x76 arg4)) (> x77 arg4))
(> x68 1))
(> x78 (- 1)))
(<= arg1P arg1))
(<= (+ arg1P 6) arg2))
(<= (+ arg1P 4) arg3))
(<= (- arg2P 5) arg1))
(<= (+ arg2P 1) arg2))
(<= (- arg2P 1) arg3))
(> arg1 0))
(> arg2 6))
(> arg3 4))
(> arg1P 0))
(> arg2P 5))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f480_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x83 Int) (x84 Int))
(and
(and
(and
(and
(and
(and (and (> x83 (- 1)) (> arg2 1)) (> x84 (- 1)))
(<= arg1P arg1))
(<= (- arg2P 5) arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P 5))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f343_0_appendNewList_GT arg1P arg2P arg3P arg4P)
:guard
(and (and (and (> arg1P (- 1)) (> arg2 0)) (> arg1 0)) (= 1 arg2P)))

(rule
(f177_0_appendNewList_Return arg1 arg2 arg3 arg4)
(f343_0_appendNewList_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x94 Int) (x95 Int) (x96 Int) (x88 Int))
(and
(and
(and
(and
(and
(and
(and (and (and (> x94 arg4) (> arg4 0)) (> x95 arg4)) (> x96 arg4))
(> x88 1))
(> arg1P (- 1)))
(> arg1 0))
(> arg2 6))
(> arg3 4))
(= 2 arg2P))
)
)

(rule
(f177_0_appendNewList_Return arg1 arg2 arg3 arg4)
(f343_0_appendNewList_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x97 Int))
(and
(and
(and (and (and (> arg1P (- 1)) (> x97 1)) (> arg1 0)) (> arg2 7))
(> arg3 5))
(= 2 arg2P))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f343_0_appendNewList_GT arg1P arg2P arg3P arg4P)
:guard
(exists
((x106 Int))
(and
(and (and (and (> x106 (- 1)) (> arg2 1)) (> arg1P (- 1))) (> arg1 0))
(= 2 arg2P))
)
)

(rule
(f343_0_appendNewList_GT arg1 arg2 arg3 arg4)
(f343_0_appendNewList_GT arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (< (- arg1 1) arg1) (> arg2 0)) (> arg1 1))
(= (- arg1 1) arg1P))
(= arg2 arg2P))
)

(rule
(f415_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f519_0_length_NONNULL arg1P arg2P arg3P arg4P)
:guard
(exists
((x110 Int))
(and
(and
(and
(and (and (<= (- arg1P 3) arg1) (> x110 1)) (<= (- arg2P 1) arg1))
(> arg1 0))
(> arg1P 3))
(> arg2P 1))
)
)

(rule
(f480_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f519_0_length_NONNULL arg1P arg2P arg3P arg4P)
:guard
(exists
((x114 Int))
(and
(and
(and
(and
(and (and (<= arg1P arg2) (> x114 1)) (<= (+ arg2P 2) arg2))
(> arg1 0))
(> arg2 4))
(> arg1P 4))
(> arg2P 2))
)
)

(rule
(f519_0_length_NONNULL arg1 arg2 arg3 arg4)
(f519_0_length_NONNULL arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= arg1P arg2)) (<= (+ arg2P 3) arg1))
(<= (+ arg2P 1) arg2))
(> arg1 2))
(> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
)

(rule (__init arg1 arg2 arg3 arg4) (f1_0_main_Load arg1P arg2P arg3P arg4P))
