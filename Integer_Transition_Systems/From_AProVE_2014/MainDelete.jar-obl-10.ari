(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int Int Int Int Int Int Int))
(fun
f1099_0_getFirst_NONNULL
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f121_0_createList_Return
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f1224_0_find_InvokeMethod
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f1232_0_createList_GE
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f1370_0_findR_NE
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f1541_0_createList_NULL
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f1543_0_delete_NULL
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f1583_0_delete_FieldAccess
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f1618_0_delete_FieldAccess
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun f1_0_main_Load (-> Int Int Int Int Int Int Int Int Int Int Int Int Int))
(fun
f971_0_random_GT
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f988_0_main_InvokeMethod
(-> Int Int Int Int Int Int Int Int Int Int Int Int Int))

(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12)
(f971_0_random_GT
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and (and (and (<= arg1P arg1) (> arg2 (- 1))) (> arg1 0)) (> arg1P 0))
(> arg2P (- 1)))
)

(rule
(f121_0_createList_Return
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f971_0_random_GT
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(exists
((x5 Int))
(and
(and
(and
(and (and (<= arg1P arg1) (> x5 (- 1))) (<= (+ arg2P 1) arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P (- 1)))
)
)

(rule
(f971_0_random_GT
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f988_0_main_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(exists
((x10 Int))
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (>= arg3P x10)) (<= (- arg1P 1) arg2))
(<= arg2P arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P (- 1)))
)
)

(rule
(f971_0_random_GT
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f988_0_main_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(exists
((x17 Int) (x16 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (< x17 x16) (> x17 (- 1))) (<= arg1P arg1))
(<= (- arg1P 1) arg2))
(<= arg2P arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P (- 1)))
(= (+ x17 1) arg3P))
)
)

(rule
(f988_0_main_InvokeMethod
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1224_0_find_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(exists
((x22 Int))
(and
(and
(and
(and
(and (and (<= arg1P arg1) (>= arg3 x22)) (<= arg1P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 1))
)
)

(rule
(f1224_0_find_InvokeMethod
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1543_0_delete_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and (and (and (> arg1 0) (> arg2 1)) (> arg1P 1)) (<= (+ arg4 2) arg2))
(<= (+ arg3 2) arg2))
)

(rule
(f971_0_random_GT
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1543_0_delete_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(exists
((x38 Int) (x42 Int))
(and
(and
(and
(and
(and
(and
(and (and (< x38 arg2P) (> x38 (- 1))) (> arg2P 0))
(<= (+ x38 1) arg2P))
(> x42 (- 1)))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(= (+ x38 1) arg3P))
)
)

(rule
(f1224_0_find_InvokeMethod
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1543_0_delete_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and
(and
(and (and (<= (+ arg1P 1) arg1) (<= (+ arg1P 2) arg2)) (> arg1 0))
(> arg2 1))
(> arg1P (- 1)))
(<= (+ arg4 2) arg2))
(<= (+ arg3 2) arg2))
)

(rule
(f971_0_random_GT
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1543_0_delete_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(exists
((x51 Int) (x55 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (< x51 arg2P) (> x51 (- 1))) (> arg2P 0))
(<= (+ x51 1) arg2P))
(> x55 (- 1)))
(<= (+ arg1P 1) arg1))
(<= (+ arg1P 1) arg2))
(> arg1 0))
(> arg2 0))
(> arg1P (- 1)))
(= (+ x51 1) arg3P))
)
)

(rule
(f1224_0_find_InvokeMethod
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1543_0_delete_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and (and (> arg1 0) (> arg2 1)) (> arg1P (- 1)))
(<= (+ arg4 2) arg2))
(<= (+ arg3 2) arg2))
)

(rule
(f971_0_random_GT
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1543_0_delete_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(exists
((x64 Int) (x68 Int))
(and
(and
(and
(and
(and
(and
(and (and (< x64 arg2P) (> x64 (- 1))) (> arg2P 0))
(<= (+ x64 1) arg2P))
(> x68 (- 1)))
(> arg1 0))
(> arg2 0))
(> arg1P (- 1)))
(= (+ x64 1) arg3P))
)
)

(rule
(f1543_0_delete_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1583_0_delete_FieldAccess
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= arg2P arg1)) (> arg1 2))
(> arg1P 0))
(> arg2P 2))
(> arg3P 0))
(<= (+ arg6P 4) arg1))
(<= (+ arg7P 4) arg1))
(<= (+ arg12P 4) arg1))
(<= (+ arg9P 2) arg1))
(<= (+ arg8P 2) arg1))
(= arg3 arg5P))
)

(rule
(f1583_0_delete_FieldAccess
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1618_0_delete_FieldAccess
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg1P 2) arg2)) (<= arg1P arg3))
(> arg1 0))
(> arg2 2))
(> arg3 0))
(> arg1P 0))
(> arg2P 0))
(> arg3P 2))
(<= (+ arg6 4) arg2))
(<= (+ arg7 4) arg2))
(<= (+ arg12 4) arg2))
(<= (+ arg8 2) arg2))
(<= (+ arg9 2) arg2))
(<= (+ arg10 2) arg3))
(<= (+ arg12 2) arg3))
(<= (+ arg11 2) arg3))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12)
(f1232_0_createList_GE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and
(and
(and
(and (and (>= arg1 (+ arg1P 1)) (> arg1 0)) (> arg1P (- 1)))
(= 0 arg2))
(= 0 arg2P))
(= 0 arg3P))
(= 0 arg4P))
(= 0 arg5P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12)
(f1232_0_createList_GE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 1) arg1) (> arg2 0)) (> arg1 0))
(> arg1P (- 1)))
(= 0 arg2P))
(= 0 arg3P))
(= arg2 arg4P))
(= 1 arg5P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12)
(f1232_0_createList_GE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg3P (- 1)) (> arg2 0)) (<= (+ arg1P 1) arg1))
(> arg1 0))
(> arg1P (- 1)))
(= 0 arg2P))
(= arg2 arg4P))
(= 1 arg5P))
)

(rule
(f1232_0_createList_GE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1232_0_createList_GE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg5 arg4) (> arg3 arg2)) (> arg4 (- 1)))
(<= (- arg1P 2) arg1))
(> arg1 (- 1)))
(> arg1P 1))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)

(rule
(f1232_0_createList_GE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1232_0_createList_GE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and
(and
(and
(and (and (and (>= arg5 arg4) (> arg3 arg2)) (> arg4 (- 1))) (> arg1 0))
(> arg1P 4))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)

(rule
(f1232_0_createList_GE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1541_0_createList_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> arg3 arg2)) (< arg5 arg4))
(> arg5 (- 1)))
(<= arg4P arg1))
(> arg1 (- 1)))
(> arg2P 1))
(> arg4P (- 1)))
(= arg3 arg1P))
(= arg2 arg3P))
(= arg4 arg5P))
(= (+ arg5 1) arg6P))
(= 0 arg7P))
)

(rule
(f1232_0_createList_GE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1541_0_createList_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> arg3 arg2)) (< arg5 arg4))
(> arg7P (- 1)))
(> arg5 (- 1)))
(<= arg4P arg1))
(> arg1 (- 1)))
(> arg2P 1))
(> arg4P (- 1)))
(= arg3 arg1P))
(= arg2 arg3P))
(= arg4 arg5P))
(= (+ arg5 1) arg6P))
)

(rule
(f1541_0_createList_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1232_0_createList_GE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg2) (> arg2 1)) (> arg4 (- 1))) (> arg1P 1))
(<= (+ arg7 2) arg2))
(= (+ arg3 1) arg2P))
(= arg1 arg3P))
(= arg5 arg4P))
(= arg6 arg5P))
)

(rule
(f1541_0_createList_NULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1232_0_createList_GE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and
(and
(and (and (and (> arg2 2) (> arg4 0)) (> arg1P 4)) (<= (+ arg7 2) arg2))
(= (+ arg3 1) arg2P))
(= arg1 arg3P))
(= arg5 arg4P))
(= arg6 arg5P))
)

(rule
(f988_0_main_InvokeMethod
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1099_0_getFirst_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(exists
((x151 Int))
(and
(and
(and
(and
(and (and (and (<= arg1P arg2) (>= arg3 x151)) (> arg1 0)) (> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
(<= (+ arg4P 2) arg2))
(<= (+ arg3P 2) arg2))
)
)

(rule
(f971_0_random_GT
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1099_0_getFirst_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(exists
((x160 Int) (x159 Int) (x167 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (< x160 x159) (> x160 (- 1))) (> x159 0))
(> x167 (- 1)))
(<= (+ x160 1) x159))
(<= arg1P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
(<= (+ arg4P 2) arg2))
(<= (+ arg3P 2) arg2))
)
)

(rule
(f1099_0_getFirst_NONNULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1099_0_getFirst_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and (and (and (> arg1 2) (> arg2 0)) (> arg1P 0)) (> arg2P (- 1)))
(<= (+ arg3 2) arg1))
(<= (+ arg4 2) arg1))
)

(rule
(f1224_0_find_InvokeMethod
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1370_0_findR_NE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and
(and
(and (and (and (<= arg1P arg2) (> arg1 0)) (> arg2 1)) (> arg1P 1))
(<= (+ arg4 2) arg2))
(<= (+ arg3 2) arg2))
(= 0 arg2P))
(= arg4 arg3P))
)

(rule
(f971_0_random_GT
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1370_0_findR_NE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(exists
((x184 Int) (x183 Int))
(and
(and
(and
(and
(and
(and (and (< x184 x183) (> x184 (- 1))) (> x183 0))
(<= (+ x184 1) x183))
(> arg2P (- 1)))
(> arg1 0))
(> arg2 0))
(> arg1P 1))
)
)

(rule
(f1370_0_findR_NE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1370_0_findR_NE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and (and (> arg1 2) (> arg2 arg3)) (> arg1P 0))
(<= (+ arg3 2) arg1))
(= arg2 arg2P))
)

(rule
(f1370_0_findR_NE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11
arg12)
(f1370_0_findR_NE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
:guard
(and
(and
(and (and (> arg1 2) (< arg2 arg3)) (> arg1P 0))
(<= (+ arg3 2) arg1))
(= arg2 arg2P))
)

(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12)
(f1_0_main_Load
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P
arg12P)
)

