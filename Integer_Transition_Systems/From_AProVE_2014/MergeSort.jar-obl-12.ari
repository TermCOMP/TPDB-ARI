(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int Int))
(fun f1440_0_merge_GT (-> Int Int Int Int Int Int Int Int))
(fun f1503_0_sort_InvokeMethod (-> Int Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int Int))
(fun f229_0_main_GE (-> Int Int Int Int Int Int Int Int))
(fun f507_0_sort_GE (-> Int Int Int Int Int Int Int Int))
(fun |f507_0_sort_GE'| (-> Int Int Int Int Int Int Int Int))
(fun f757_0_merge_GT (-> Int Int Int Int Int Int Int Int))
(fun f774_0_merge_GT (-> Int Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f229_0_main_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and (and (and (<= arg1P arg1) (> arg2 (- 1))) (> arg1 0)) (> arg1P 0))
(= 0 arg2P))
(= arg2 arg3P))
)
(rule
(f229_0_main_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f229_0_main_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and (and (and (<= arg1P arg1) (> arg3 arg2)) (> arg1 0)) (> arg1P 0))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
)
(rule
(f229_0_main_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f507_0_sort_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (< (- arg3 1) arg3) (> arg3 (- 1))) (<= arg3 arg2))
(>= arg1 arg1P))
(>= arg1 arg2P))
(> arg1 0))
(> arg1P 0))
(> arg2P 0))
(= 0 arg3P))
(= (- arg3 1) arg4P))
(= arg3 arg5P))
)
(rule
(f507_0_sort_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(|f507_0_sort_GE'| arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x56 Int) (x63 Int) (x116 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 arg3) (> (- arg4 arg3) (- x56 arg3))) (<= x63 arg1))
(<= x63 arg2))
(<= x116 arg1))
(<= x116 arg2))
(> arg1 0))
(> arg2 0))
(> x63 0))
(> x116 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)
)
(rule
(|f507_0_sort_GE'| arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f507_0_sort_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (> arg4 arg3) (> (- arg4 arg3) (- arg4P arg3)))
(<= arg1P arg1))
(<= arg1P arg2))
(<= arg2P arg1))
(<= arg2P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 0))
(< (- (+ arg3 arg4) (* 2 arg4P)) 2))
(>= (- (+ arg3 arg4) (* 2 arg4P)) 0))
(= arg3 arg3P))
(= arg5 arg5P))
)
(rule
(f507_0_sort_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(|f507_0_sort_GE'| arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x130 Int) (x131 Int) (x132 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (> arg4 arg3) (<= (- arg4 arg3) (- x130 arg3)))
(> (- arg4 arg3) (- arg4 (+ x130 1))))
(> (+ x130 1) x130))
(<= x131 arg1))
(<= x131 arg2))
(<= x132 arg1))
(<= x132 arg2))
(> arg1 0))
(> arg2 0))
(> x131 0))
(> x132 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)
)
(rule
(|f507_0_sort_GE'| arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f507_0_sort_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x140 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (> arg4 arg3) (<= (- arg4 arg3) (- x140 arg3)))
(> (- arg4 arg3) (- arg4 (+ x140 1))))
(> (+ x140 1) x140))
(<= arg1P arg1))
(<= arg1P arg2))
(<= arg2P arg1))
(<= arg2P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 0))
(< (- (+ arg3 arg4) (* 2 x140)) 2))
(>= (- (+ arg3 arg4) (* 2 x140)) 0))
(= (+ x140 1) arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)
)
(rule
(f507_0_sort_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(|f507_0_sort_GE'| arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x146 Int) (x147 Int) (x148 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (> arg4 arg3) (> (- arg4 arg3) (- x146 arg3)))
(> (+ x146 1) x146))
(> (- arg4 arg3) (- arg4 (+ x146 1))))
(<= x147 arg1))
(<= x147 arg2))
(<= x148 arg1))
(<= x148 arg2))
(> arg1 0))
(> arg2 0))
(> x147 0))
(> x148 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)
)
(rule
(|f507_0_sort_GE'| arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f507_0_sort_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x156 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (> arg4 arg3) (> (- arg4 arg3) (- x156 arg3)))
(> (+ x156 1) x156))
(> (- arg4 arg3) (- arg4 (+ x156 1))))
(<= arg1P arg1))
(<= arg1P arg2))
(<= arg2P arg1))
(<= arg2P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 0))
(< (- (+ arg3 arg4) (* 2 x156)) 2))
(>= (- (+ arg3 arg4) (* 2 x156)) 0))
(= (+ x156 1) arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)
)
(rule
(f507_0_sort_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(|f507_0_sort_GE'| arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x162 Int) (x163 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (> arg4 arg3) (> (- arg4 arg3) (- x162 arg3)))
(<= (- arg4 arg3) (- arg4 (+ x162 1))))
(<= x163 arg1))
(<= x163 arg2))
(> arg1 0))
(> arg2 0))
(> x163 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)
)
(rule
(|f507_0_sort_GE'| arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1503_0_sort_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (> arg4 arg3) (> (- arg4 arg3) (- arg3P arg3)))
(<= (- arg4 arg3) (- arg4 (+ arg3P 1))))
(<= arg4P arg1))
(<= arg4P arg2))
(> arg1 0))
(> arg2 0))
(> arg4P 0))
(< (- (+ arg3 arg4) (* 2 arg3P)) 2))
(>= (- (+ arg3 arg4) (* 2 arg3P)) 0))
(= arg3 arg1P))
(= arg4 arg2P))
(= arg5 arg5P))
)
(rule
(f507_0_sort_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(|f507_0_sort_GE'| arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x176 Int) (x177 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (> arg4 arg3) (> (- arg4 arg3) (- x176 arg3)))
(> (+ x176 1) x176))
(> (- arg4 arg3) (- arg4 (+ x176 1))))
(<= x177 arg1))
(<= x177 arg2))
(> arg1 0))
(> arg2 0))
(> x177 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)
)
(rule
(|f507_0_sort_GE'| arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1503_0_sort_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (> arg4 arg3) (> (- arg4 arg3) (- arg3P arg3)))
(> (+ arg3P 1) arg3P))
(> (- arg4 arg3) (- arg4 (+ arg3P 1))))
(<= arg4P arg1))
(<= arg4P arg2))
(> arg1 0))
(> arg2 0))
(> arg4P 0))
(< (- (+ arg3 arg4) (* 2 arg3P)) 2))
(>= (- (+ arg3 arg4) (* 2 arg3P)) 0))
(= arg3 arg1P))
(= arg4 arg2P))
(= arg5 arg5P))
)
(rule
(f507_0_sort_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(|f507_0_sort_GE'| arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x190 Int) (x191 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (> arg4 arg3) (<= (- arg4 arg3) (- x190 arg3)))
(<= (- arg4 arg3) (- arg4 (+ x190 1))))
(> arg5 (- 1)))
(<= x191 arg1))
(<= x191 arg2))
(> arg1 0))
(> arg2 0))
(> x191 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)
)
(rule
(|f507_0_sort_GE'| arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f757_0_merge_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (> arg4 arg3) (<= (- arg4 arg3) (- arg6P arg3)))
(<= (- arg4 arg3) (- arg4 (+ arg6P 1))))
(> arg5 (- 1)))
(<= arg3P arg1))
(<= arg3P arg2))
(> arg1 0))
(> arg2 0))
(> arg3P 0))
(< (- (+ arg3 arg4) (* 2 arg6P)) 2))
(>= (- (+ arg3 arg4) (* 2 arg6P)) 0))
(= arg3 arg1P))
(= arg4 arg2P))
(= arg3 arg4P))
(= arg3 arg5P))
(= arg5 arg7P))
)
(rule
(f507_0_sort_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(|f507_0_sort_GE'| arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x204 Int) (x205 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (> arg4 arg3) (<= (- arg4 arg3) (- x204 arg3)))
(> (- arg4 arg3) (- arg4 (+ x204 1))))
(> (+ x204 1) x204))
(> arg5 (- 1)))
(<= x205 arg1))
(<= x205 arg2))
(> arg1 0))
(> arg2 0))
(> x205 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)
)
(rule
(|f507_0_sort_GE'| arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f757_0_merge_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (> arg4 arg3) (<= (- arg4 arg3) (- arg6P arg3)))
(> (- arg4 arg3) (- arg4 (+ arg6P 1))))
(> (+ arg6P 1) arg6P))
(> arg5 (- 1)))
(<= arg3P arg1))
(<= arg3P arg2))
(> arg1 0))
(> arg2 0))
(> arg3P 0))
(< (- (+ arg3 arg4) (* 2 arg6P)) 2))
(>= (- (+ arg3 arg4) (* 2 arg6P)) 0))
(= arg3 arg1P))
(= arg4 arg2P))
(= arg3 arg4P))
(= arg3 arg5P))
(= arg5 arg7P))
)
(rule
(f1503_0_sort_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f757_0_merge_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg3P arg4) (> arg5 (- 1))) (> arg4 0)) (> arg3P 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg1 arg4P))
(= arg1 arg5P))
(= arg3 arg6P))
(= arg5 arg7P))
)
(rule
(f757_0_merge_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f774_0_merge_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg3P arg3) (< arg6 arg4)) (> arg3 0)) (> arg3P 0))
(= arg4 arg5))
(= arg1 arg1P))
(= arg6 arg2P))
(= (+ arg6 1) arg4P))
(= arg2 arg5P))
(= arg7 arg6P))
)
(rule
(f757_0_merge_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f757_0_merge_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (>= arg6 arg4) (> arg7 arg4)) (<= arg3P arg3)) (> arg3 0))
(> arg3P 0))
(= arg4 arg5))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg4 1) arg4P))
(= (+ arg4 1) arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
)
(rule
(f774_0_merge_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f774_0_merge_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (> arg6 (- (+ (+ arg5 arg2) 1) arg4)) (>= arg5 arg4))
(> arg6 arg4))
(<= arg3P arg3))
(> arg3 0))
(> arg3P 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg4 1) arg4P))
(= arg5 arg5P))
(= arg6 arg6P))
)
(rule
(f774_0_merge_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1440_0_merge_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg3) (< arg5 arg4)) (> arg3 0)) (> arg1P 0))
(= arg1 arg2P))
(= arg5 arg3P))
(= arg1 arg4P))
(= arg1 arg5P))
(= arg5 arg6P))
(= arg6 arg7P))
)
(rule
(f1440_0_merge_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1440_0_merge_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x106 Int) (x105 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg6 arg4) (< arg2 arg7)) (> arg7 arg3))
(>= x106 x105))
(> arg7 arg4))
(>= arg1 arg1P))
(> arg1 0))
(> arg1P 0))
(= arg4 arg5))
(= arg2 arg2P))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
(= (+ arg4 1) arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
)
)
(rule
(f1440_0_merge_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1440_0_merge_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x115 Int) (x114 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg6 arg4) (> arg7 arg2)) (> arg7 arg3))
(< x115 x114))
(> arg7 arg4))
(<= arg1P arg1))
(> arg1 0))
(> arg1P 0))
(= arg4 arg5))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
(= (+ arg4 1) arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
)
)
(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P arg7P))
