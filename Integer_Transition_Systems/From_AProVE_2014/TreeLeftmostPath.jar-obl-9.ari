(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int))
(fun f1295_0_createTree_LE (-> Int Int Int Int Int Int))
(fun f1602_0_main_NULL (-> Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int))
(fun f408_0_createTree_Return (-> Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5)
(f1602_0_main_NULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and (and (> arg1 0) (> arg1P 2)) (> arg2P (- 1))))

(rule
(f408_0_createTree_Return arg1 arg2 arg3 arg4 arg5)
(f1602_0_main_NULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 3) arg1)) (> arg1 2))
(> arg1P 2))
(> arg2P (- 1)))
(<= (+ arg2 2) arg1))
)

(rule
(f1602_0_main_NULL arg1 arg2 arg3 arg4 arg5)
(f1602_0_main_NULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and (>= arg1 (- arg1P 2)) (>= arg1 (+ arg2P 3)))
(>= arg2 (+ arg2P 1)))
(> arg1 2))
(> arg2 0))
(> arg1P 2))
(> arg2P (- 1)))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5)
(f1295_0_createTree_LE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (> arg2 0) (> arg3P 0)) (<= (- arg1P 2) arg1))
(<= (- arg2P 2) arg1))
(> arg1 0))
(> arg1P 2))
(> arg2P 2))
(= arg2 arg4P))
(= 1 arg5P))
)

(rule
(f1295_0_createTree_LE arg1 arg2 arg3 arg4 arg5)
(f1295_0_createTree_LE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> arg5 (- 1))) (< arg5 arg4))
(<= arg1P arg1))
(<= (+ arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 2))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)

(rule
(f1295_0_createTree_LE arg1 arg2 arg3 arg4 arg5)
(f1295_0_createTree_LE arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x31 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (> x31 0)) (> arg3 0)) (< arg5 arg4))
(<= arg1P arg1))
(<= (+ arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 2))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
)

(rule
(f1295_0_createTree_LE arg1 arg2 arg3 arg4 arg5)
(f1295_0_createTree_LE arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x39 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (> x39 0)) (> arg3 0)) (< arg5 arg4))
(> arg1 2))
(> arg2 1))
(> arg1P 2))
(> arg2P 2))
(= (- arg3 1) arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
)

(rule
(f1295_0_createTree_LE arg1 arg2 arg3 arg4 arg5)
(f1295_0_createTree_LE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (and (> arg3 0) (> arg5 (- 1))) (< arg5 arg4)) (> arg1 2))
(> arg2 1))
(> arg1P 2))
(> arg2P 2))
(= (- arg3 1) arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)

(rule
(f1295_0_createTree_LE arg1 arg2 arg3 arg4 arg5)
(f1295_0_createTree_LE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> arg5 (- 1))) (< arg5 arg4))
(<= (- arg1P 2) arg1))
(<= (- arg1P 2) arg2))
(<= (- arg2P 2) arg1))
(<= (- arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 4))
(> arg2P 4))
(= (- arg3 1) arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)

(rule
(f1295_0_createTree_LE arg1 arg2 arg3 arg4 arg5)
(f1295_0_createTree_LE arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x61 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (> x61 0)) (> arg3 0)) (< arg5 arg4))
(<= (- arg1P 2) arg1))
(<= (- arg1P 2) arg2))
(<= (- arg2P 2) arg1))
(<= (- arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 4))
(> arg2P 4))
(= (- arg3 1) arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
)

(rule
(__init arg1 arg2 arg3 arg4 arg5)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P))

