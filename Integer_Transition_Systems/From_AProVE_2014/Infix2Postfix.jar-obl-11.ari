(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int Int Int Int Int))
(fun
f1944_0_buildExpression_GT
(-> Int Int Int Int Int Int Int Int Int Int Int))
(fun f1999_0_toPostfix_NULL (-> Int Int Int Int Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int Int Int Int Int))
(fun
f2554_0_buildExpression_GE
(-> Int Int Int Int Int Int Int Int Int Int Int))
(fun f2578_0_toPostfix_NULL (-> Int Int Int Int Int Int Int Int Int Int Int))
(fun
f2651_0_buildExpression_GT
(-> Int Int Int Int Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f1944_0_buildExpression_GT
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> arg2 (- 1))) (<= (+ arg2P 1) arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P (- 1)))
(= 1 arg3P))
(= arg2 arg4P))
)
(rule
(f1944_0_buildExpression_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f2554_0_buildExpression_GE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 arg3)) (<= (- arg1P 1) arg2))
(<= arg2P arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P (- 1)))
(= 1 arg3P))
(= arg4 arg4P))
)
(rule
(f1944_0_buildExpression_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f2651_0_buildExpression_GT
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg4 arg3) (> arg4 0)) (< (- arg4 1) arg3))
(<= arg1P arg1))
(<= (- arg1P 1) arg2))
(<= (- arg2P 106) arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P 105))
(= arg3 arg3P))
(= (- arg4 1) arg4P))
(= arg4 arg5P))
(= 40 arg6P))
(= 97 arg7P))
(= 43 arg8P))
(= 98 arg9P))
(= 41 arg10P))
)
(rule
(f2554_0_buildExpression_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f2554_0_buildExpression_GE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> arg4 arg3)) (<= (- arg1P 1) arg2))
(<= (- arg2P 42) arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P 41))
(= (+ arg3 1) arg3P))
(= arg4 arg4P))
)
(rule
(f2651_0_buildExpression_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f1944_0_buildExpression_GT
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (< arg4 arg3)) (<= (+ arg1P 105) arg2))
(<= arg2P arg2))
(> arg1 0))
(> arg2 105))
(> arg1P 0))
(> arg2P 105))
(= 40 arg6))
(= 97 arg7))
(= 43 arg8))
(= 98 arg9))
(= 41 arg10))
(= (+ arg3 1) arg3P))
(= arg5 arg4P))
)
(rule
(f1944_0_buildExpression_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f2651_0_buildExpression_GT
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg4 arg3) (> arg4 0)) (>= (- arg4 1) arg3))
(<= arg1P arg1))
(<= (- arg1P 1) arg2))
(<= (- arg2P 106) arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P 105))
(= arg3 arg3P))
(= (- arg4 1) arg4P))
(= arg4 arg5P))
(= 40 arg6P))
(= 97 arg7P))
(= 43 arg8P))
(= 98 arg9P))
(= 41 arg10P))
)
(rule
(f2651_0_buildExpression_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f1944_0_buildExpression_GT
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (>= arg4 arg3)) (<= (+ arg1P 105) arg2))
(<= (- arg2P 2) arg2))
(> arg1 0))
(> arg2 105))
(> arg1P 0))
(> arg2P 107))
(= 40 arg6))
(= 97 arg7))
(= 43 arg8))
(= 98 arg9))
(= 41 arg10))
(= (+ arg3 1) arg3P))
(= arg5 arg4P))
)
(rule
(f2554_0_buildExpression_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f1999_0_toPostfix_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (<= arg4 arg3)) (<= (+ arg2P 1) arg1))
(<= arg2P arg2))
(<= (+ arg3P 1) arg1))
(<= arg3P arg2))
(<= arg4P arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P (- 1)))
(> arg2P (- 1)))
(> arg3P (- 1)))
(> arg4P (- 1)))
)
(rule
(f1999_0_toPostfix_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f1999_0_toPostfix_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= (+ arg1P 2) arg4)) (<= arg2P arg2))
(<= arg3P arg3))
(<= (+ arg4P 2) arg1))
(<= (+ arg4P 2) arg4))
(> arg1 41))
(> arg2 (- 1)))
(> arg3 (- 1)))
(> arg4 41))
(> arg1P (- 1)))
(> arg2P (- 1)))
(> arg3P (- 1)))
(> arg4P (- 1)))
)
(rule
(f1999_0_toPostfix_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f2578_0_toPostfix_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and (and (<= arg1P arg3) (> arg1 (- 1))) (> arg2 (- 1)))
(> arg3 (- 1)))
(> arg4 (- 1)))
(> arg1P (- 1)))
)
(rule
(f1999_0_toPostfix_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f1999_0_toPostfix_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= (+ arg1P 2) arg1) (<= (+ arg1P 2) arg4))
(<= (- arg2P 44) arg2))
(<= arg3P arg3))
(<= (+ arg4P 2) arg1))
(<= (+ arg4P 2) arg4))
(> arg1 43))
(> arg2 (- 1)))
(> arg3 (- 1)))
(> arg4 43))
(> arg1P (- 1)))
(> arg2P 43))
(> arg3P (- 1)))
(> arg4P (- 1)))
)
(rule
(f1999_0_toPostfix_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f1999_0_toPostfix_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= (+ arg1P 2) arg1) (<= (+ arg1P 2) arg4))
(<= (- arg2P 45) arg2))
(<= arg3P arg3))
(<= (+ arg4P 2) arg1))
(<= (+ arg4P 2) arg4))
(> arg1 44))
(> arg2 (- 1)))
(> arg3 (- 1)))
(> arg4 44))
(> arg1P (- 1)))
(> arg2P 44))
(> arg3P (- 1)))
(> arg4P (- 1)))
)
(rule
(f1999_0_toPostfix_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f1999_0_toPostfix_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= (+ arg1P 2) arg1) (<= (+ arg1P 2) arg4))
(<= (- arg2P 47) arg2))
(<= arg3P arg3))
(<= (+ arg4P 2) arg1))
(<= (+ arg4P 2) arg4))
(> arg1 46))
(> arg2 (- 1)))
(> arg3 (- 1)))
(> arg4 46))
(> arg1P (- 1)))
(> arg2P 46))
(> arg3P (- 1)))
(> arg4P (- 1)))
)
(rule
(f1999_0_toPostfix_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f1999_0_toPostfix_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= (+ arg1P 2) arg1) (<= (+ arg1P 2) arg4))
(<= (- arg2P 49) arg2))
(<= arg3P arg3))
(<= (+ arg4P 2) arg1))
(<= (+ arg4P 2) arg4))
(> arg1 48))
(> arg2 (- 1)))
(> arg3 (- 1)))
(> arg4 48))
(> arg1P (- 1)))
(> arg2P 48))
(> arg3P (- 1)))
(> arg4P (- 1)))
)
(rule
(f1999_0_toPostfix_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f1999_0_toPostfix_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(exists
((x103 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 1) arg1) (> x103 47)) (<= (+ arg1P 1) arg4))
(>= arg2 arg2P))
(>= arg1 (+ arg4P 1)))
(>= arg4 (+ arg4P 1)))
(> arg1 0))
(> arg2 (- 1)))
(> arg3 (- 1)))
(> arg4 0))
(> arg1P (- 1)))
(> arg2P (- 1)))
(> arg3P 0))
(> arg4P (- 1)))
)
)
(rule
(f1999_0_toPostfix_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f1999_0_toPostfix_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(exists
((x112 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 1) arg1) (< x112 40)) (<= (+ arg1P 1) arg4))
(<= arg2P arg2))
(<= (+ arg4P 1) arg1))
(<= (+ arg4P 1) arg4))
(> arg1 0))
(> arg2 (- 1)))
(> arg3 (- 1)))
(> arg4 0))
(> arg1P (- 1)))
(> arg2P (- 1)))
(> arg3P 0))
(> arg4P (- 1)))
)
)
(rule
(f1999_0_toPostfix_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f1999_0_toPostfix_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= (+ arg1P 2) arg4)) (<= arg2P arg2))
(<= (- arg3P 46) arg3))
(<= (+ arg4P 2) arg1))
(<= (+ arg4P 2) arg4))
(> arg1 45))
(> arg2 (- 1)))
(> arg3 (- 1)))
(> arg4 45))
(> arg1P (- 1)))
(> arg2P (- 1)))
(> arg3P 45))
(> arg4P (- 1)))
)
(rule
(f1999_0_toPostfix_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f1999_0_toPostfix_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= (+ arg1P 2) arg4)) (<= arg2P arg2))
(<= (- arg3P 48) arg3))
(<= (+ arg4P 2) arg1))
(<= (+ arg4P 2) arg4))
(> arg1 47))
(> arg2 (- 1)))
(> arg3 (- 1)))
(> arg4 47))
(> arg1P (- 1)))
(> arg2P (- 1)))
(> arg3P 47))
(> arg4P (- 1)))
)
(rule
(f1999_0_toPostfix_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f1999_0_toPostfix_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= (+ arg1P 2) arg1) (<= (+ arg1P 2) arg4))
(<= (+ arg2P 1) arg2))
(<= (+ arg4P 2) arg1))
(<= (+ arg4P 2) arg4))
(> arg1 42))
(> arg2 0))
(> arg3 (- 1)))
(> arg4 42))
(> arg1P (- 1)))
(> arg2P (- 1)))
(> arg3P 0))
(> arg4P (- 1)))
)
(rule
(f2578_0_toPostfix_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f2578_0_toPostfix_NULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P)
:guard
(and (and (<= (+ arg1P 1) arg1) (> arg1 0)) (> arg1P (- 1))))
(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P arg7P arg8P arg9P arg10P))
