(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f1614_0_main_InvokeMethod (-> Int Int Int Int Int))
(fun f1752_0_createForm_InvokeMethod (-> Int Int Int Int Int))
(fun f192_0_createForm_Return (-> Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int))
(fun f2239_0_norm_NONNULL (-> Int Int Int Int Int))
(fun f2738_0_norm_InvokeMethod (-> Int Int Int Int Int))
(fun f410_0_main_InvokeMethod (-> Int Int Int Int Int))
(fun f421_0_createForm_LE (-> Int Int Int Int Int))
(fun f534_0_createForm_InvokeMethod (-> Int Int Int Int Int))
(fun f571_0_createForm_InvokeMethod (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f421_0_createForm_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (> arg1P (- 1)) (> arg2 0)) (> arg1 0)) (= arg2 arg2P))
(= 1 arg3P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f410_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and (and (and (<= arg1P arg1) (> arg2 0)) (> arg1 0)) (> arg1P 0)))

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f410_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x9 Int))
(and
(and (and (and (> x9 (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
)
)

(rule
(f192_0_createForm_Return arg1 arg2 arg3 arg4)
(f410_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)))

(rule
(f410_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f2239_0_norm_NONNULL arg1P arg2P arg3P arg4P)
:guard
(exists
((x13 Int))
(and
(and (and (<= (+ arg1P 1) arg1) (> x13 0)) (> arg1 0))
(> arg1P (- 1)))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f1614_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x21 Int))
(and
(and
(and (and (and (> x21 (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P 2))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f1614_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x27 Int))
(and
(and
(and (and (and (> x27 (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P 2))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f1614_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x33 Int))
(and
(and
(and (and (and (> x33 (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P 2))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f1614_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x39 Int))
(and
(and
(and (and (and (> x39 (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P 2))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f1614_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x45 Int))
(and
(and
(and (and (and (> x45 (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P 2))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f1614_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x51 Int))
(and
(and
(and (and (and (> x51 (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P 2))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f1614_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x57 Int))
(and
(and
(and (and (and (> x57 (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P 2))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f1614_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x63 Int))
(and
(and
(and
(and
(and (and (> x63 (- 1)) (> arg2 0)) (<= arg1P arg1))
(<= (- arg2P 1) arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P 1))
)
)

(rule
(f1614_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f2239_0_norm_NONNULL arg1P arg2P arg3P arg4P)
:guard
(exists
((x64 Int))
(and
(and
(and (and (and (> x64 0) (> arg3 1)) (<= arg1P arg2)) (> arg1 0))
(> arg2 0))
(> arg1P 0))
)
)

(rule
(f421_0_createForm_LE arg1 arg2 arg3 arg4)
(f421_0_createForm_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x72 Int))
(and
(and
(and
(and
(and
(and
(and (and (and (> arg1 0) (> arg2 (- 1))) (> arg3 0)) (< arg3 arg2))
(> x72 (- 1)))
(< (- arg1 1) arg1))
(< x72 43))
(= (- arg1 1) arg1P))
(= arg2 arg2P))
(= (+ arg3 1) arg3P))
)
)

(rule
(f421_0_createForm_LE arg1 arg2 arg3 arg4)
(f534_0_createForm_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x75 Int))
(and
(and
(and
(and
(and
(and
(and (and (and (> arg3 0) (> arg2 (- 1))) (< arg3 arg2)) (< x75 43))
(> x75 (- 1)))
(= 1 arg1))
(= 1 arg1P))
(= 0 arg2P))
(= arg2 arg3P))
(= (+ arg3 1) arg4P))
)
)

(rule
(f421_0_createForm_LE arg1 arg2 arg3 arg4)
(f534_0_createForm_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x80 Int))
(and
(and
(and
(and
(and
(and
(and (and (and (> arg1 0) (> arg2 (- 1))) (> arg3 0)) (< arg3 arg2))
(> x80 (- 1)))
(< (- arg1 1) arg1))
(< x80 43))
(= arg1 arg1P))
(= (- arg1 1) arg2P))
(= arg2 arg3P))
)
)

(rule
(f534_0_createForm_InvokeMethod arg1 arg2 arg3 arg4)
(f421_0_createForm_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (< arg2 arg1) (> arg1 0)) (> arg4 1)) (= arg2 arg1P))
(= arg3 arg2P))
(= arg4 arg3P))
)

(rule
(f534_0_createForm_InvokeMethod arg1 arg2 arg3 arg4)
(f571_0_createForm_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (> arg4 1) (> arg1 0)) (= 0 arg2)) (= arg1 arg1P))
(= (- arg1 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
)

(rule
(f534_0_createForm_InvokeMethod arg1 arg2 arg3 arg4)
(f571_0_createForm_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (> arg1 0) (< arg2 arg1)) (> arg4 1)) (= arg1 arg1P))
(= (- arg1 1) arg2P))
(= arg3 arg3P))
)

(rule
(f571_0_createForm_InvokeMethod arg1 arg2 arg3 arg4)
(f421_0_createForm_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (< arg2 arg1) (> arg1 0)) (> arg4 1)) (= arg2 arg1P))
(= arg3 arg2P))
(= arg4 arg3P))
)

(rule
(f421_0_createForm_LE arg1 arg2 arg3 arg4)
(f421_0_createForm_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x101 Int))
(and
(and
(and
(and
(and
(and
(and (and (and (> arg1 0) (> arg2 (- 1))) (> arg3 0)) (< arg3 arg2))
(> x101 (- 1)))
(< x101 43))
(> arg3P 1))
(< (- arg1 1) arg1))
(= (- arg1 1) arg1P))
(= arg2 arg2P))
)
)

(rule
(f534_0_createForm_InvokeMethod arg1 arg2 arg3 arg4)
(f421_0_createForm_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (> arg1 0) (> arg4 1)) (> arg3P 1)) (< arg2 arg1))
(< (- arg1 1) arg1))
(= (- arg1 1) arg1P))
(= arg3 arg2P))
)

(rule
(f421_0_createForm_LE arg1 arg2 arg3 arg4)
(f1752_0_createForm_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x136 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> arg2 (- 1))) (< arg3 arg2))
(> x136 (- 1)))
(> arg4P 1))
(< x136 43))
(= 1 arg1))
(= 1 arg1P))
(= 0 arg2P))
(= arg2 arg3P))
)
)

(rule
(f421_0_createForm_LE arg1 arg2 arg3 arg4)
(f1752_0_createForm_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(exists
((x115 Int) (x116 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg1 0) (> arg2 (- 1))) (> arg3 0)) (< arg3 arg2))
(> x115 (- 1)))
(< x115 43))
(> x116 1))
(< (- arg1 1) arg1))
(= arg1 arg1P))
(= (- arg1 1) arg2P))
(= arg2 arg3P))
)
)

(rule
(f1752_0_createForm_InvokeMethod arg1 arg2 arg3 arg4)
(f421_0_createForm_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (< arg2 arg1) (> arg1 0)) (> arg4 1)) (= arg2 arg1P))
(= arg3 arg2P))
(= arg4 arg3P))
)

(rule
(f421_0_createForm_LE arg1 arg2 arg3 arg4)
(f421_0_createForm_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x125 Int) (x126 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg1 0) (> arg2 (- 1))) (> arg3 0)) (< arg3 arg2))
(> x125 (- 1)))
(< x125 43))
(< (- arg1 1) arg1))
(> arg3P 1))
(> x126 1))
(= (- arg1 1) arg1P))
(= arg2 arg2P))
)
)

(rule
(f2239_0_norm_NONNULL arg1 arg2 arg3 arg4)
(f2239_0_norm_NONNULL arg1P arg2P arg3P arg4P)
:guard
(and (and (<= (+ arg1P 2) arg1) (> arg1 1)) (> arg1P (- 1))))

(rule
(f2239_0_norm_NONNULL arg1 arg2 arg3 arg4)
(f2239_0_norm_NONNULL arg1P arg2P arg3P arg4P)
:guard
(and (and (<= (+ arg1P 2) arg1) (> arg1 1)) (> arg1P (- 1))))

(rule
(f2239_0_norm_NONNULL arg1 arg2 arg3 arg4)
(f2239_0_norm_NONNULL arg1P arg2P arg3P arg4P)
:guard
(and (and (<= (- arg1P 2) arg1) (> arg1 2)) (> arg1P 2)))

(rule
(f2239_0_norm_NONNULL arg1 arg2 arg3 arg4)
(f2239_0_norm_NONNULL arg1P arg2P arg3P arg4P)
:guard
(and (and (<= (+ arg1P 2) arg1) (> arg1 1)) (> arg1P (- 1))))

(rule
(f2239_0_norm_NONNULL arg1 arg2 arg3 arg4)
(f2738_0_norm_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and (<= (- arg1P 4) arg1) (<= (+ arg2P 2) arg1))
(<= (+ arg4P 2) arg1))
(> arg1 1))
(> arg1P 5))
(> arg2P (- 1)))
(> arg4P (- 1)))
)

(rule
(f2239_0_norm_NONNULL arg1 arg2 arg3 arg4)
(f2738_0_norm_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and (<= (- arg1P 4) arg1) (<= (+ arg2P 2) arg1))
(<= (+ arg4P 2) arg1))
(> arg1 1))
(> arg1P 5))
(> arg2P (- 1)))
(> arg4P (- 1)))
)

(rule
(f2239_0_norm_NONNULL arg1 arg2 arg3 arg4)
(f2738_0_norm_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and (<= (- arg1P 4) arg1) (<= (+ arg2P 2) arg1))
(<= (+ arg4P 2) arg1))
(> arg1 1))
(> arg1P 5))
(> arg2P (- 1)))
(> arg4P (- 1)))
)

(rule
(f2239_0_norm_NONNULL arg1 arg2 arg3 arg4)
(f2738_0_norm_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (<= (+ arg2P 2) arg1) (<= (+ arg4P 2) arg1)) (> arg1 1))
(> arg1P 5))
(> arg2P (- 1)))
(> arg4P (- 1)))
)

(rule
(f2239_0_norm_NONNULL arg1 arg2 arg3 arg4)
(f2738_0_norm_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (<= (+ arg2P 2) arg1) (<= (+ arg4P 2) arg1)) (> arg1 1))
(> arg1P 5))
(> arg2P (- 1)))
(> arg4P (- 1)))
)

(rule
(f2239_0_norm_NONNULL arg1 arg2 arg3 arg4)
(f2738_0_norm_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (<= (+ arg2P 2) arg1) (<= (+ arg4P 2) arg1)) (> arg1 1))
(> arg1P 5))
(> arg2P (- 1)))
(> arg4P (- 1)))
)

(rule
(f2239_0_norm_NONNULL arg1 arg2 arg3 arg4)
(f2738_0_norm_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (<= (+ arg2P 2) arg1) (<= (+ arg4P 2) arg1)) (> arg1 1))
(> arg1P 5))
(> arg2P (- 1)))
(> arg4P (- 1)))
)

(rule
(f2239_0_norm_NONNULL arg1 arg2 arg3 arg4)
(f2738_0_norm_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (<= (+ arg2P 2) arg1) (<= (+ arg4P 2) arg1)) (> arg1 1))
(> arg1P 5))
(> arg2P (- 1)))
(> arg4P (- 1)))
)

(rule
(f2239_0_norm_NONNULL arg1 arg2 arg3 arg4)
(f2738_0_norm_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg2P 2) arg1)) (<= (+ arg4P 2) arg1))
(> arg1 3))
(> arg1P 3))
(> arg2P (- 1)))
(> arg4P (- 1)))
)

(rule
(f2738_0_norm_InvokeMethod arg1 arg2 arg3 arg4)
(f2239_0_norm_NONNULL arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg1) (<= arg1P arg2)) (<= arg1P arg4))
(> arg1 3))
(> arg2 (- 1)))
(> arg4 (- 1)))
(> arg1P (- 1)))
)

(rule (__init arg1 arg2 arg3 arg4) (f1_0_main_Load arg1P arg2P arg3P arg4P))
