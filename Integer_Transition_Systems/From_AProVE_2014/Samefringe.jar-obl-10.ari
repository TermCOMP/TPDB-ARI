(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f1431_0_samefringe_NULL (-> Int Int Int Int Int))
(fun f1838_0_gopher_NULL (-> Int Int Int Int Int))
(fun f193_0_createTree_Return (-> Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int))
(fun f2326_0_createTree_LE (-> Int Int Int Int Int))
(fun f2344_0_main_InvokeMethod (-> Int Int Int Int Int))
(fun f2354_0_main_InvokeMethod (-> Int Int Int Int Int))
(fun f295_0_main_InvokeMethod (-> Int Int Int Int Int))
(fun f511_0_createTree_Return (-> Int Int Int Int Int))
(fun f512_0_createTree_Return (-> Int Int Int Int Int))
(fun f551_0_random_ArrayAccess (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f193_0_createTree_Return arg1 arg2 arg3 arg4)
(f295_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and (and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)) (= arg2 arg2P)))

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f295_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)))

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f2344_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and (and (and (>= arg1 arg1P) (> arg1 0)) (> arg1P 0)) (> arg2P 0)))

(rule
(f511_0_createTree_Return arg1 arg2 arg3 arg4)
(f2344_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg1P 1) arg2)) (<= arg2P arg2))
(> arg1 0))
(> arg2 1))
(> arg1P 0))
(> arg2P 1))
(<= (+ arg4 2) arg2))
(= arg3 arg3P))
(= arg4 arg4P))
)

(rule
(f295_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f2354_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and (and (and (<= arg1P arg1) (> arg2 0)) (> arg1 0)) (> arg1P 0))
(> arg2P 0))
)

(rule
(f512_0_createTree_Return arg1 arg2 arg3 arg4)
(f2354_0_main_InvokeMethod arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg1P 1) arg2)) (<= arg2P arg2))
(> arg1 0))
(> arg2 1))
(> arg1P 0))
(> arg2P 1))
(<= (+ arg3 2) arg2))
(= arg3 arg3P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f551_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(and (> arg1 0) (> arg2 (- 1))))

(rule
(f295_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f551_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(exists ((x35 Int)) (and (and (> x35 (- 1)) (> arg2 0)) (> arg1 0))))

(rule
(f2344_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f551_0_random_ArrayAccess arg1P arg2P arg3P arg4P)
:guard
(exists
((x38 Int))
(and
(and (and (> arg1 0) (> x38 (- 1))) (> arg2 0))
(<= (+ arg4 2) arg2))
)
)

(rule
(f551_0_random_ArrayAccess arg1 arg2 arg3 arg4)
(f2326_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x43 Int))
(and
(and (and (and (> arg3P 0) (> x43 (- 1))) (> arg2P 1)) (> arg1P 1))
(= (+ x43 1) arg4P))
)
)

(rule
(f2326_0_createTree_LE arg1 arg2 arg3 arg4)
(f2326_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> arg3 0)) (<= arg1P arg1))
(<= (+ arg2P 2) arg2))
(> arg1 0))
(> arg2 2))
(> arg1P 0))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)

(rule
(f2326_0_createTree_LE arg1 arg2 arg3 arg4)
(f2326_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x59 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg3 0) (> x59 0)) (> arg4 (- 1))) (<= arg1P arg1))
(<= (+ arg2P 2) arg2))
(> arg1 0))
(> arg2 2))
(> arg1P 0))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
)

(rule
(f2326_0_createTree_LE arg1 arg2 arg3 arg4)
(f2326_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x66 Int))
(and
(and
(and
(and
(and
(and (and (and (> arg3 0) (> x66 0)) (> arg4 (- 1))) (> arg1 0))
(> arg2 1))
(> arg1P 0))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
)

(rule
(f2326_0_createTree_LE arg1 arg2 arg3 arg4)
(f2326_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (and (> arg4 (- 1)) (> arg3 0)) (> arg1 0)) (> arg2 1))
(> arg1P 0))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)

(rule
(f2326_0_createTree_LE arg1 arg2 arg3 arg4)
(f2326_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> arg3 0)) (<= (- arg1P 2) arg1))
(<= (- arg1P 2) arg2))
(<= (- arg2P 2) arg1))
(<= (- arg2P 2) arg2))
(> arg1 1))
(> arg2 1))
(> arg1P 3))
(> arg2P 3))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)

(rule
(f2326_0_createTree_LE arg1 arg2 arg3 arg4)
(f2326_0_createTree_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x85 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> x85 0)) (> arg4 (- 1)))
(<= (- arg1P 2) arg1))
(<= (- arg1P 2) arg2))
(<= (- arg2P 2) arg1))
(<= (- arg2P 2) arg2))
(> arg1 1))
(> arg2 1))
(> arg1P 3))
(> arg2P 3))
(= (- arg3 1) arg3P))
(= (+ arg4 1) arg4P))
)
)

(rule
(f295_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f1431_0_samefringe_NULL arg1P arg2P arg3P arg4P)
:guard
(exists
((x92 Int))
(and
(and
(and
(and
(and
(and
(and (and (> x92 0) (> arg2 0)) (<= (+ arg1P 1) arg1))
(<= (+ arg2P 1) arg1))
(<= (+ arg3P 1) arg1))
(> arg1 0))
(> arg1P (- 1)))
(> arg2P (- 1)))
(> arg3P (- 1)))
)
)

(rule
(f2354_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f1431_0_samefringe_NULL arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 1) arg1) (<= (+ arg1P 1) arg2)) (<= arg2P arg2))
(<= (+ arg3P 1) arg1))
(<= (+ arg3P 1) arg2))
(> arg1 0))
(> arg2 0))
(> arg1P (- 1)))
(> arg2P 0))
(> arg3P (- 1)))
(<= (+ arg3 2) arg2))
)

(rule
(f2344_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f1431_0_samefringe_NULL arg1P arg2P arg3P arg4P)
:guard
(exists
((x108 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (> x108 0)) (<= (+ arg2P 1) arg1))
(<= (+ arg2P 1) arg2))
(<= arg3P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
(> arg3P 0))
(<= (+ arg4 2) arg2))
)
)

(rule
(f2344_0_main_InvokeMethod arg1 arg2 arg3 arg4)
(f1431_0_samefringe_NULL arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (and (<= arg1P arg2) (<= arg3P arg2)) (> arg1 0)) (> arg2 0))
(> arg1P 0))
(> arg2P 0))
(> arg3P 0))
(<= (+ arg4 2) arg2))
)

(rule
(f1431_0_samefringe_NULL arg1 arg2 arg3 arg4)
(f1431_0_samefringe_NULL arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (> arg1 0) (> arg2 0)) (> arg3 0)) (> arg1P (- 1)))
(> arg2P (- 1)))
(> arg3P (- 1)))
)

(rule
(f1431_0_samefringe_NULL arg1 arg2 arg3 arg4)
(f1838_0_gopher_NULL arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= arg1P arg3)) (<= arg2P arg1))
(<= arg2P arg3))
(<= (+ arg3P 1) arg1))
(<= (+ arg3P 1) arg3))
(> arg1 0))
(> arg2 0))
(> arg3 0))
(> arg1P 0))
(> arg2P 0))
(> arg3P (- 1)))
)

(rule
(f1431_0_samefringe_NULL arg1 arg2 arg3 arg4)
(f1838_0_gopher_NULL arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (<= arg2P arg2)) (<= (+ arg3P 1) arg2))
(> arg1 0))
(> arg2 0))
(> arg3 0))
(> arg1P 0))
(> arg2P 0))
(> arg3P (- 1)))
)

(rule
(f1838_0_gopher_NULL arg1 arg2 arg3 arg4)
(f1838_0_gopher_NULL arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (- arg2P 2) arg2)) (<= (+ arg3P 3) arg2))
(<= (+ arg3P 1) arg3))
(> arg1 0))
(> arg2 2))
(> arg3 0))
(> arg1P 0))
(> arg2P 2))
(> arg3P (- 1)))
)

(rule (__init arg1 arg2 arg3 arg4) (f1_0_main_Load arg1P arg2P arg3P arg4P))
