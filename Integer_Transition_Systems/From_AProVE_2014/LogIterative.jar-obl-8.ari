(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int))
(fun f1_0_main_Load (-> Int Int Int))
(fun f256_0_log_LT (-> Int Int Int))
(fun |f256_0_log_LT'| (-> Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2)
(f256_0_log_LT arg1P arg2P)
:guard
(and
(and (and (> arg2P (- 1)) (> arg2 (- 1))) (> arg1P (- 1)))
(> arg1 0))
)

(rule
(f256_0_log_LT arg1 arg2)
(|f256_0_log_LT'| arg1P arg2P)
:guard
(exists
((x8 Int))
(and
(and
(and (and (and (> arg1 1) (> arg2 1)) (<= arg2 arg1)) (> arg1 x8))
(= arg1 arg1P))
(= arg2 arg2P))
)
)

(rule
(|f256_0_log_LT'| arg1 arg2)
(f256_0_log_LT arg1P arg2P)
:guard
(and
(and
(and
(and (and (and (> arg1 1) (> arg2 1)) (> arg1 arg1P)) (<= arg2 arg1))
(> arg2 (- arg1 (* arg2 arg1P))))
(>= (- arg1 (* arg2 arg1P)) 0))
(= arg2 arg2P))
)

(rule (__init arg1 arg2) (f1_0_main_Load arg1P arg2P))
