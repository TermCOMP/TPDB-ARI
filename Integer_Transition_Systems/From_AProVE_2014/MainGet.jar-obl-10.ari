(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int))
(fun f1099_0_get_InvokeMethod (-> Int Int Int Int Int Int Int))
(fun f121_0_createList_Return (-> Int Int Int Int Int Int Int))
(fun f1248_0_createList_GE (-> Int Int Int Int Int Int Int))
(fun f1379_0_createList_NULL (-> Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int))
(fun f739_0_getFirst_NONNULL (-> Int Int Int Int Int Int Int))
(fun f975_0_random_GT (-> Int Int Int Int Int Int Int))
(fun f983_0_getR_EQ (-> Int Int Int Int Int Int Int))
(fun f998_0_main_InvokeMethod (-> Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f975_0_random_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (and (<= arg1P arg1) (> arg2 (- 1))) (> arg1 0)) (> arg1P 0))
(> arg2P (- 1)))
)

(rule
(f121_0_createList_Return arg1 arg2 arg3 arg4 arg5 arg6)
(f975_0_random_GT arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x5 Int))
(and
(and
(and
(and (and (<= arg1P arg1) (> x5 (- 1))) (<= (+ arg2P 1) arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P (- 1)))
)
)

(rule
(f975_0_random_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f998_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x10 Int))
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (>= arg3P x10)) (<= (- arg1P 1) arg2))
(<= arg2P arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P (- 1)))
)
)

(rule
(f998_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f1099_0_get_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x16 Int))
(and
(and
(and
(and
(and (and (<= arg1P arg1) (>= arg3 x16)) (<= arg1P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 1))
)
)

(rule
(f975_0_random_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f998_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x24 Int) (x23 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (< x24 x23) (> x24 (- 1))) (<= arg1P arg1))
(<= (- arg1P 1) arg2))
(<= arg2P arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P (- 1)))
(= (+ x24 1) arg3P))
)
)

(rule
(f1099_0_get_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f983_0_getR_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and (and (and (<= arg1P arg2) (> arg1 0)) (> arg2 1)) (> arg1P 1))
(<= (+ arg3 2) arg2))
(= 0 arg2P))
)

(rule
(f975_0_random_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f983_0_getR_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x35 Int) (x34 Int))
(and
(and
(and
(and
(and
(and (and (< x35 x34) (> x35 (- 1))) (> x34 0))
(<= (+ x35 1) x34))
(> arg2P (- 1)))
(> arg1 0))
(> arg2 0))
(> arg1P 1))
)
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f1248_0_createList_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 1) arg1) (> arg1 0)) (> arg1P (- 1)))
(= 0 arg2))
(= 0 arg2P))
(= 0 arg3P))
(= 0 arg4P))
(= 0 arg5P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f1248_0_createList_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 1) arg1) (> arg2 0)) (> arg1 0))
(> arg1P (- 1)))
(= 0 arg2P))
(= 0 arg3P))
(= arg2 arg4P))
(= 1 arg5P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f1248_0_createList_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg3P (- 1)) (> arg2 0)) (<= (+ arg1P 1) arg1))
(> arg1 0))
(> arg1P (- 1)))
(= 0 arg2P))
(= arg2 arg4P))
(= 1 arg5P))
)

(rule
(f1248_0_createList_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f1248_0_createList_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg5 arg4) (> arg4 (- 1))) (> arg3 arg2))
(<= (- arg1P 2) arg1))
(> arg1 (- 1)))
(> arg1P 1))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)

(rule
(f1248_0_createList_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f1248_0_createList_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (and (>= arg5 arg4) (> arg4 (- 1))) (> arg3 arg2)) (> arg1 0))
(> arg1P 4))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)

(rule
(f1248_0_createList_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f1379_0_createList_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg4 (- 1))) (< arg5 arg4))
(> arg5 (- 1)))
(<= arg4P arg1))
(> arg1 (- 1)))
(> arg2P 1))
(> arg4P (- 1)))
(= arg3 arg1P))
(= arg2 arg3P))
(= arg4 arg5P))
(= (+ arg5 1) arg6P))
)

(rule
(f1248_0_createList_GE arg1 arg2 arg3 arg4 arg5 arg6)
(f1379_0_createList_NULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x75 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 arg2) (> arg4 (- 1))) (< arg5 arg4))
(> arg5 (- 1)))
(> x75 (- 1)))
(<= arg4P arg1))
(> arg1 (- 1)))
(> arg2P 1))
(> arg4P (- 1)))
(= arg3 arg1P))
(= arg2 arg3P))
(= arg4 arg5P))
(= (+ arg5 1) arg6P))
)
)

(rule
(f1379_0_createList_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1248_0_createList_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (<= (- arg1P 2) arg4)) (> arg2 1))
(> arg4 (- 1)))
(> arg1P 1))
(= (+ arg3 1) arg2P))
(= arg1 arg3P))
(= arg5 arg4P))
(= arg6 arg5P))
)

(rule
(f1379_0_createList_NULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1248_0_createList_GE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and (and (and (> arg2 2) (> arg4 0)) (> arg1P 4)) (= (+ arg3 1) arg2P))
(= arg1 arg3P))
(= arg5 arg4P))
(= arg6 arg5P))
)

(rule
(f998_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6)
(f739_0_getFirst_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x90 Int))
(and
(and
(and
(and (and (and (<= arg1P arg2) (>= arg3 x90)) (> arg1 0)) (> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
(<= (+ arg3P 2) arg2))
)
)

(rule
(f975_0_random_GT arg1 arg2 arg3 arg4 arg5 arg6)
(f739_0_getFirst_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x98 Int) (x97 Int) (x104 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< x98 x97) (> x98 (- 1))) (> x97 0)) (> x104 (- 1)))
(<= (+ x98 1) x97))
(<= arg1P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
(<= (+ arg3P 2) arg2))
)
)

(rule
(f739_0_getFirst_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f739_0_getFirst_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (and (> arg1 2) (> arg2 0)) (> arg1P 0)) (> arg2P (- 1)))
(<= (+ arg3 2) arg1))
)

(rule
(f983_0_getR_EQ arg1 arg2 arg3 arg4 arg5 arg6)
(f983_0_getR_EQ arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and (and (and (< (- arg2 1) arg2) (> arg2 0)) (> arg1 2)) (> arg1P 0))
(= (- arg2 1) arg2P))
)

(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P))

