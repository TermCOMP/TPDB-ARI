(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int Int Int Int Int Int))
(fun
f1037_0_createNode_Return
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun f1_0_main_Load (-> Int Int Int Int Int Int Int Int Int Int Int Int))
(fun f2045_0_random_GT (-> Int Int Int Int Int Int Int Int Int Int Int Int))
(fun
f243_0_main_InvokeMethod
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f2703_0_createTree_LE
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f2736_0_main_InvokeMethod
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f2748_0_main_InvokeMethod
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f2820_0_createTree_NONNULL
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f2824_0_main_InvokeMethod
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f2917_0_createTree_FieldAccess
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f2969_0_createTree_LE
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f3061_0_createTree_FieldAccess
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f337_0_createTree_Return
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f3774_0_lessleaves_NONNULL
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f3815_0_append_Return
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f3836_0_append_NONNULL
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f4062_0_lessleaves_InvokeMethod
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f4063_0_lessleaves_InvokeMethod
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f61_0_createTree_Return
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f674_0_createTree_Return
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun
f675_0_createTree_Return
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(fun f716_0_random_GT (-> Int Int Int Int Int Int Int Int Int Int Int Int))
(fun
f835_0_createTree_NE
(-> Int Int Int Int Int Int Int Int Int Int Int Int))

(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11)
(f243_0_main_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and (and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)) (= 0 arg2P)))

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11)
(f243_0_main_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)))

(rule
(f61_0_createTree_Return
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f243_0_main_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and (> arg1P 0) (= 0 arg2P)))

(rule
(f243_0_main_InvokeMethod
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f337_0_createTree_Return
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)))

(rule
(f337_0_createTree_Return
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f3774_0_lessleaves_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (<= (+ arg1P 1) arg1) (<= (+ arg2P 1) arg1))
(<= (+ arg3P 1) arg1))
(<= (+ arg4P 1) arg1))
(> arg1 0))
(> arg1P (- 1)))
(> arg2P (- 1)))
(> arg3P (- 1)))
(> arg4P (- 1)))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11)
(f2736_0_main_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and (and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)) (> arg2P 0)))

(rule
(f674_0_createTree_Return
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2736_0_main_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg1P 1) arg2)) (<= arg2P arg2))
(> arg1 0))
(> arg2 1))
(> arg1P 0))
(> arg2P 1))
(<= (+ arg4 2) arg2))
(= arg3 arg3P))
(= arg4 arg4P))
)

(rule
(f243_0_main_InvokeMethod
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2748_0_main_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and (and (and (<= arg1P arg1) (> arg1 0)) (> arg1P 0)) (> arg2P 0)))

(rule
(f675_0_createTree_Return
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2748_0_main_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg1P 1) arg2)) (<= arg2P arg2))
(> arg1 0))
(> arg2 1))
(> arg1P 0))
(> arg2P 1))
(<= (+ arg3 2) arg2))
(= arg3 arg3P))
)

(rule
(f2748_0_main_InvokeMethod
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f3774_0_lessleaves_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (<= (+ arg2P 1) arg1)) (<= (+ arg2P 1) arg2))
(<= arg3P arg2))
(<= arg4P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
(> arg3P 0))
(> arg4P 0))
(<= (+ arg3 2) arg2))
)

(rule
(f2736_0_main_InvokeMethod
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2824_0_main_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= arg1P arg2)) (<= arg2P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 0))
(<= (+ arg4P 2) arg2))
(<= (+ arg4 2) arg2))
(= arg4 arg3P))
)

(rule
(f2824_0_main_InvokeMethod
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f3774_0_lessleaves_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 1) arg1) (<= (+ arg1P 1) arg2)) (<= arg2P arg2))
(<= (+ arg3P 1) arg1))
(<= (+ arg3P 1) arg2))
(<= (+ arg4P 1) arg1))
(<= (+ arg4P 1) arg2))
(> arg1 0))
(> arg2 0))
(> arg1P (- 1)))
(> arg2P 0))
(> arg3P (- 1)))
(> arg4P (- 1)))
(<= (+ arg4 2) arg2))
(<= (+ arg3 2) arg2))
)

(rule
(f2736_0_main_InvokeMethod
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f3774_0_lessleaves_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and (and (and (<= arg2P arg2) (> arg1 0)) (> arg2 0)) (> arg1P 0))
(> arg2P 0))
(> arg3P 0))
(> arg4P 0))
(<= (+ arg4 2) arg2))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11)
(f716_0_random_GT
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and (> arg1 0) (> arg2 (- 1))))

(rule
(f243_0_main_InvokeMethod
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f716_0_random_GT
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(exists ((x79 Int)) (and (> arg1 0) (> x79 (- 1)))))

(rule
(f2736_0_main_InvokeMethod
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f716_0_random_GT
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(exists
((x82 Int))
(and
(and (and (> arg1 0) (> x82 (- 1))) (> arg2 0))
(<= (+ arg4 2) arg2))
)
)

(rule
(f716_0_random_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11)
(f835_0_createTree_NE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(exists
((x88 Int))
(and
(and (and (> x88 (- 1)) (< x88 arg2P)) (= 0 arg1P))
(= (+ x88 1) arg3P))
)
)

(rule
(f716_0_random_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11)
(f835_0_createTree_NE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(exists
((x90 Int))
(and
(and (and (< x90 arg2P) (> arg1P (- 1))) (> x90 (- 1)))
(= (+ x90 1) arg3P))
)
)

(rule
(f1037_0_createNode_Return
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2703_0_createTree_LE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and (and (and (> arg2P 1) (> arg1P 1)) (= arg1 arg3P)) (= arg2 arg4P))
(= arg3 arg5P))
)

(rule
(f835_0_createTree_NE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11)
(f2703_0_createTree_LE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and (and (and (> arg1 0) (> arg3 0)) (> arg2P 1)) (> arg1P 1))
(= arg1 arg3P))
(= arg2 arg4P))
(= arg3 arg5P))
)

(rule
(f835_0_createTree_NE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11)
(f2703_0_createTree_LE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and (and (and (> arg1 0) (> arg3 0)) (> arg2P 1)) (> arg1P 1))
(= arg1 arg3P))
(= arg2 arg4P))
)

(rule
(f2703_0_createTree_LE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2820_0_createTree_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg5 arg4) (> arg4 (- 1))) (> arg3 0))
(<= arg2P arg1))
(<= arg3P arg2))
(<= (+ arg4P 1) arg2))
(> arg1 0))
(> arg2 0))
(> arg2P 0))
(> arg3P 0))
(> arg4P (- 1)))
(<= (+ arg7P 2) arg1))
(<= (+ arg8P 2) arg1))
(<= (+ arg9P 2) arg2))
(= arg3 arg1P))
(= arg4 arg5P))
(= arg5 arg6P))
)

(rule
(f2820_0_createTree_NONNULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2703_0_createTree_LE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (<= (+ arg2P 2) arg3)) (<= arg2P arg4))
(> arg2 0))
(> arg3 2))
(> arg4 0))
(> arg1P 0))
(> arg2P 0))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(<= (+ arg9 2) arg3))
(= (- arg1 1) arg3P))
(= arg5 arg4P))
(= arg6 arg5P))
)

(rule
(f2820_0_createTree_NONNULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2917_0_createTree_FieldAccess
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg6 arg5) (> arg1 0)) (<= arg2P arg2))
(<= arg3P arg3))
(> arg2 0))
(> arg3 1))
(> arg4 (- 1)))
(> arg2P 0))
(> arg3P 1))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(<= (+ arg9 2) arg3))
(= arg1 arg1P))
(= arg5 arg4P))
(= arg6 arg5P))
(= arg8 arg6P))
(= arg9 arg7P))
)

(rule
(f2820_0_createTree_NONNULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2917_0_createTree_FieldAccess
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg6 arg5) (> arg1 0)) (<= arg2P arg2))
(<= arg3P arg3))
(> arg2 0))
(> arg3 1))
(> arg4 (- 1)))
(> arg2P 0))
(> arg3P 1))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(<= (+ arg9 2) arg3))
(= arg1 arg1P))
(= arg5 arg4P))
(= arg8 arg6P))
(= arg9 arg7P))
)

(rule
(f2703_0_createTree_LE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2969_0_createTree_LE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> arg4 (- 1))) (< arg5 arg4))
(> arg5 (- 1)))
(<= arg2P arg1))
(<= arg3P arg2))
(> arg1 0))
(> arg2 0))
(> arg2P 0))
(> arg3P 0))
(<= (+ arg7P 2) arg1))
(<= (+ arg8P 2) arg1))
(= arg3 arg1P))
(= 0 arg4P))
(= arg4 arg5P))
(= (+ arg5 1) arg6P))
)

(rule
(f2703_0_createTree_LE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2969_0_createTree_LE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> arg4 (- 1))) (< arg5 arg4))
(> arg5 (- 1)))
(> arg4P (- 1)))
(<= arg2P arg1))
(<= arg3P arg2))
(> arg1 0))
(> arg2 0))
(> arg2P 0))
(> arg3P 0))
(<= (+ arg7P 2) arg1))
(<= (+ arg8P 2) arg1))
(= arg3 arg1P))
(= arg4 arg5P))
(= (+ arg5 1) arg6P))
)

(rule
(f2917_0_createTree_FieldAccess
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2703_0_createTree_LE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg3 1)) (> arg1P 0)) (> arg2P 0))
(<= (+ arg6 2) arg2))
(<= (+ arg7 2) arg3))
(= (- arg1 1) arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)

(rule
(f2917_0_createTree_FieldAccess
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2703_0_createTree_LE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= (- arg1P 2) arg2) (<= (- arg1P 2) arg3))
(<= (- arg2P 2) arg2))
(<= (- arg2P 2) arg3))
(> arg2 1))
(> arg3 1))
(> arg1P 3))
(> arg2P 3))
(<= (+ arg6 2) arg2))
(<= (+ arg6 2) arg3))
(= arg6 arg7))
(= (- arg1 1) arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)

(rule
(f2969_0_createTree_LE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2820_0_createTree_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg2P arg2) (<= arg3P arg3)) (<= (+ arg4P 1) arg3))
(> arg2 0))
(> arg3 0))
(> arg2P 0))
(> arg3P 0))
(> arg4P (- 1)))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(<= (+ arg9P 2) arg3))
(= 0 arg4))
(= arg1 arg1P))
(= arg5 arg5P))
(= arg6 arg6P))
(= arg7 arg7P))
(= arg8 arg8P))
)

(rule
(f2969_0_createTree_LE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2703_0_createTree_LE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (> arg4 0)) (<= (+ arg2P 2) arg3))
(> arg2 0))
(> arg3 2))
(> arg1P 0))
(> arg2P 0))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(= (- arg1 1) arg3P))
(= arg5 arg4P))
(= arg6 arg5P))
)

(rule
(f2969_0_createTree_LE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f3061_0_createTree_FieldAccess
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg4 0) (> arg6 0)) (> arg1 0)) (<= arg2P arg2))
(<= arg3P arg3))
(> arg2 0))
(> arg3 1))
(> arg2P 0))
(> arg3P 1))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(<= (+ arg7P 2) arg3))
(= arg1 arg1P))
(= arg5 arg4P))
(= arg6 arg5P))
(= arg7 arg6P))
)

(rule
(f2969_0_createTree_LE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f3061_0_createTree_FieldAccess
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg4 0) (> arg6 0)) (> arg1 0)) (<= arg2P arg2))
(<= arg3P arg3))
(> arg2 0))
(> arg3 1))
(> arg2P 0))
(> arg3P 1))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(<= (+ arg7P 2) arg3))
(= arg1 arg1P))
(= arg5 arg4P))
(= arg7 arg6P))
)

(rule
(f3061_0_createTree_FieldAccess
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2703_0_createTree_LE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and (and (and (> arg2 0) (> arg3 1)) (> arg1P 0)) (> arg2P 0))
(<= (+ arg6 2) arg2))
(<= (+ arg7 2) arg3))
(= (- arg1 1) arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)

(rule
(f3061_0_createTree_FieldAccess
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2703_0_createTree_LE
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= (- arg1P 2) arg2) (<= (- arg1P 2) arg3))
(<= (- arg2P 2) arg2))
(<= (- arg2P 2) arg3))
(> arg2 1))
(> arg3 1))
(> arg1P 3))
(> arg2P 3))
(<= (+ arg6 2) arg2))
(<= (+ arg6 2) arg3))
(= arg6 arg7))
(= (- arg1 1) arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)

(rule
(f3774_0_lessleaves_NONNULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f3815_0_append_Return
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (<= arg2P arg1)) (<= arg2P arg3))
(<= arg2P arg4))
(<= arg3P arg2))
(> arg1 0))
(> arg2 3))
(> arg3 0))
(> arg4 0))
(> arg1P 3))
(> arg2P 0))
(> arg3P 0))
(<= (+ arg5P 2) arg2))
(<= (+ arg6P 4) arg2))
)

(rule
(f3774_0_lessleaves_NONNULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f3815_0_append_Return
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (<= arg2P arg1)) (<= arg2P arg3))
(<= arg2P arg4))
(> arg1 0))
(> arg2 4))
(> arg3 0))
(> arg4 0))
(> arg1P 4))
(> arg2P 0))
(> arg3P 2))
(<= (+ arg5P 2) arg2))
(<= (+ arg6P 4) arg2))
)

(rule
(f3774_0_lessleaves_NONNULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f3836_0_append_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and (and (and (<= (+ arg1P 1) arg2) (> arg1 0)) (> arg2 0)) (> arg3 0))
(> arg4 0))
(> arg1P (- 1)))
)

(rule
(f3815_0_append_Return
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f3836_0_append_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and (and (and (<= (+ arg1P 1) arg2) (> arg1 2)) (> arg2 0)) (> arg3 0))
(> arg1P (- 1)))
(<= (+ arg5 2) arg1))
(<= (+ arg6 4) arg1))
(<= (+ arg6 2) arg3))
)

(rule
(f3774_0_lessleaves_NONNULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f3836_0_append_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ arg1P 1) arg1) (<= (+ arg1P 1) arg3))
(<= (+ arg1P 1) arg4))
(> arg1 0))
(> arg2 1))
(> arg3 0))
(> arg4 0))
(> arg1P (- 1)))
)

(rule
(f3774_0_lessleaves_NONNULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f3774_0_lessleaves_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= (+ arg1P 2) arg1) (<= (+ arg1P 2) arg3))
(<= (+ arg1P 2) arg4))
(<= (+ arg2P 2) arg2))
(<= (+ arg3P 2) arg1))
(<= (+ arg3P 2) arg3))
(<= (+ arg3P 2) arg4))
(<= (+ arg4P 2) arg1))
(<= (+ arg4P 2) arg3))
(<= (+ arg4P 2) arg4))
(> arg1 1))
(> arg2 1))
(> arg3 1))
(> arg4 1))
(> arg1P (- 1)))
(> arg2P (- 1)))
(> arg3P (- 1)))
(> arg4P (- 1)))
)

(rule
(f3815_0_append_Return
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f3774_0_lessleaves_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 2) arg2) (<= arg2P arg3)) (<= (+ arg3P 2) arg2))
(<= (+ arg4P 2) arg2))
(> arg1 2))
(> arg2 1))
(> arg3 0))
(> arg1P (- 1)))
(> arg2P 0))
(> arg3P (- 1)))
(> arg4P (- 1)))
(<= (+ arg5 2) arg1))
(<= (+ arg6 4) arg1))
(<= (+ arg6 2) arg3))
)

(rule
(f3774_0_lessleaves_NONNULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f4062_0_lessleaves_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (<= arg2P arg1)) (<= arg2P arg3))
(<= arg2P arg4))
(<= (+ arg3P 2) arg2))
(<= arg4P arg1))
(<= arg4P arg3))
(<= arg4P arg4))
(<= (+ arg6P 2) arg2))
(> arg1 3))
(> arg2 1))
(> arg3 3))
(> arg4 3))
(> arg1P 1))
(> arg2P 3))
(> arg3P (- 1)))
(> arg4P 0))
(> arg6P (- 1)))
(<= (+ arg7P 2) arg1))
(<= (+ arg8P 4) arg1))
(<= (+ arg7P 2) arg3))
(<= (+ arg8P 4) arg3))
(<= (+ arg7P 2) arg4))
(<= (+ arg8P 4) arg4))
)

(rule
(f3774_0_lessleaves_NONNULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f4062_0_lessleaves_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg2) (<= arg2P arg1)) (<= arg2P arg3))
(<= arg2P arg4))
(<= (+ arg3P 2) arg2))
(<= (+ arg6P 2) arg2))
(> arg1 4))
(> arg2 1))
(> arg3 4))
(> arg4 4))
(> arg1P 1))
(> arg2P 4))
(> arg3P (- 1)))
(> arg4P 2))
(> arg6P (- 1)))
(<= (+ arg7P 2) arg1))
(<= (+ arg8P 4) arg1))
(<= (+ arg7P 2) arg3))
(<= (+ arg8P 4) arg3))
(<= (+ arg7P 2) arg4))
(<= (+ arg8P 4) arg4))
)

(rule
(f3815_0_append_Return
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f4063_0_lessleaves_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= arg2P arg2)) (<= arg3P arg3))
(<= arg4P arg2))
(> arg1 2))
(> arg2 3))
(> arg3 0))
(> arg1P 2))
(> arg2P 3))
(> arg3P 0))
(> arg4P 0))
(<= (+ arg5 2) arg1))
(<= (+ arg7P 4) arg1))
(<= (+ arg6 4) arg1))
(<= (+ arg8P 2) arg2))
(<= (+ arg11P 4) arg2))
(<= (+ arg6 2) arg3))
(<= (+ arg9P 2) arg3))
(= arg4 arg5P))
(= arg5 arg6P))
(= arg6 arg10P))
)

(rule
(f3815_0_append_Return
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f4063_0_lessleaves_InvokeMethod
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= arg2P arg2)) (<= arg3P arg3))
(> arg1 2))
(> arg2 4))
(> arg3 0))
(> arg1P 2))
(> arg2P 4))
(> arg3P 0))
(> arg4P 2))
(<= (+ arg5 2) arg1))
(<= (+ arg7P 4) arg1))
(<= (+ arg6 4) arg1))
(<= (+ arg8P 2) arg2))
(<= (+ arg11P 4) arg2))
(<= (+ arg6 2) arg3))
(<= (+ arg9P 2) arg3))
(= arg4 arg5P))
(= arg5 arg6P))
(= arg6 arg10P))
)

(rule
(f4062_0_lessleaves_InvokeMethod
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f3774_0_lessleaves_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg4) (<= (+ arg2P 2) arg1)) (<= arg2P arg3))
(<= arg2P arg6))
(<= arg3P arg4))
(<= arg4P arg4))
(> arg1 1))
(> arg2 2))
(> arg3 (- 1)))
(> arg4 0))
(> arg6 (- 1)))
(> arg1P 0))
(> arg2P (- 1)))
(> arg3P 0))
(> arg4P 0))
(<= (+ arg7 2) arg2))
(<= (+ arg8 4) arg2))
(<= (+ arg8 2) arg4))
)

(rule
(f4063_0_lessleaves_InvokeMethod
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f3774_0_lessleaves_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg4) (<= arg2P arg3)) (<= arg3P arg4))
(<= arg4P arg4))
(> arg1 2))
(> arg2 2))
(> arg3 0))
(> arg4 0))
(> arg1P 0))
(> arg2P 0))
(> arg3P 0))
(> arg4P 0))
(<= (+ arg6 2) arg1))
(<= (+ arg7 4) arg1))
(<= (+ arg10 4) arg1))
(<= (+ arg8 2) arg2))
(<= (+ arg11 4) arg2))
(<= (+ arg9 2) arg3))
(<= (+ arg10 2) arg3))
(<= (+ arg11 2) arg4))
)

(rule
(f835_0_createTree_NE arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11)
(f2045_0_random_GT
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and (and (and (> arg1 0) (> arg2 (- 1))) (> arg3 0)) (= arg2 arg2P))
(= arg3 arg3P))
)

(rule
(f2820_0_createTree_NONNULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2045_0_random_GT
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (>= arg6 arg5)) (> arg1 0)) (> arg2 0))
(> arg3 1))
(> arg4 (- 1)))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(<= (+ arg9 2) arg3))
(= arg5 arg2P))
(= arg6 arg3P))
)

(rule
(f2969_0_createTree_LE
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f2045_0_random_GT
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (and (> arg1 0) (> arg6 0)) (> arg5 (- 1))) (> arg4 0))
(> arg2 0))
(> arg3 1))
(<= (+ arg7 2) arg2))
(<= (+ arg8 2) arg2))
(= arg5 arg2P))
(= arg6 arg3P))
)

(rule
(f3836_0_append_NONNULL
arg1
arg2
arg3
arg4
arg5
arg6
arg7
arg8
arg9
arg10
arg11)
(f3836_0_append_NONNULL
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
:guard
(and (and (<= (+ arg1P 1) arg1) (> arg1 0)) (> arg1P (- 1))))

(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11)
(f1_0_main_Load
arg1P
arg2P
arg3P
arg4P
arg5P
arg6P
arg7P
arg8P
arg9P
arg10P
arg11P)
)

