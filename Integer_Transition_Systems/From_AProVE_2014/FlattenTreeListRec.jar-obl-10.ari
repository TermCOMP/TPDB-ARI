(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int))
(fun f1367_0_createTree_Return (-> Int Int Int Int Int Int Int))
(fun f1962_0_flatten_NONNULL (-> Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int))
(fun f2618_0_createTree_LE (-> Int Int Int Int Int Int Int))
(fun f850_0_main_LE (-> Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6)
(f850_0_main_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg2 0) (> arg3P (- 1))) (<= arg1P arg1))
(<= (+ arg2P 1) arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P (- 1)))
(= 1 arg4P))
)
(rule
(f850_0_main_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f1962_0_flatten_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x5 Int))
(and
(and
(and (and (and (<= arg1P arg2) (> x5 0)) (> arg1 0)) (> arg2 (- 1)))
(> arg1P (- 1)))
(= 0 arg3))
)
)
(rule
(f850_0_main_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f850_0_main_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x10 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> x10 0)) (<= arg1P arg1))
(<= (- arg1P 1) arg2))
(<= (- arg2P 2) arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P 1))
(= (- arg3 1) arg3P))
)
)
(rule
(f850_0_main_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f850_0_main_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x18 Int))
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> x18 0)) (<= arg1P arg1))
(<= (- arg1P 1) arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P 4))
(= (- arg3 1) arg3P))
)
)
(rule
(f1367_0_createTree_Return arg1 arg2 arg3 arg4 arg5 arg6)
(f850_0_main_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg1P 2) arg4)) (> arg1 0))
(> arg4 2))
(> arg1P 0))
(> arg2P 4))
(<= (+ arg6 2) arg4))
(= (- arg3 1) arg3P))
(= arg5 arg4P))
)
(rule
(f1962_0_flatten_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1962_0_flatten_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and (and (<= (+ arg1P 2) arg1) (> arg1 1)) (> arg1P (- 1))))
(rule
(f1962_0_flatten_NONNULL arg1 arg2 arg3 arg4 arg5 arg6)
(f1962_0_flatten_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and (and (<= (- arg1P 2) arg1) (> arg1 2)) (> arg1P 2)))
(rule
(f850_0_main_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2618_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg3P 0) (> arg4P 0)) (> arg3 0)) (< arg4 arg4P))
(> arg4 (- 1)))
(<= (- arg1P 2) arg1))
(<= (- arg1P 3) arg2))
(<= (- arg2P 2) arg1))
(<= (- arg2P 3) arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 2))
(> arg2P 2))
(= (+ arg4 1) arg5P))
)
(rule
(f2618_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2618_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> arg5 (- 1))) (< arg5 arg4))
(<= arg1P arg1))
(<= (+ arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 2))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
(rule
(f2618_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2618_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x63 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (> x63 0)) (> arg3 0)) (< arg5 arg4))
(<= arg1P arg1))
(<= (+ arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 2))
(> arg2P 0))
(= (- arg3 1) arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
)
(rule
(f2618_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2618_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x71 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (> x71 0)) (> arg3 0)) (< arg5 arg4))
(> arg1 2))
(> arg2 1))
(> arg1P 2))
(> arg2P 2))
(= (- arg3 1) arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
)
(rule
(f2618_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2618_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (and (> arg3 0) (> arg5 (- 1))) (< arg5 arg4)) (> arg1 2))
(> arg2 1))
(> arg1P 2))
(> arg2P 2))
(= (- arg3 1) arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
(rule
(f2618_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2618_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg3 0) (> arg5 (- 1))) (< arg5 arg4))
(<= (- arg1P 2) arg1))
(<= (- arg1P 2) arg2))
(<= (- arg2P 2) arg1))
(<= (- arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 4))
(> arg2P 4))
(= (- arg3 1) arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
(rule
(f2618_0_createTree_LE arg1 arg2 arg3 arg4 arg5 arg6)
(f2618_0_createTree_LE arg1P arg2P arg3P arg4P arg5P arg6P)
:guard
(exists
((x93 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (> arg5 (- 1)) (> x93 0)) (> arg3 0)) (< arg5 arg4))
(<= (- arg1P 2) arg1))
(<= (- arg1P 2) arg2))
(<= (- arg2P 2) arg1))
(<= (- arg2P 2) arg2))
(> arg1 2))
(> arg2 2))
(> arg1P 4))
(> arg2P 4))
(= (- arg3 1) arg3P))
(= arg4 arg4P))
(= (+ arg5 1) arg5P))
)
)
(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P))
