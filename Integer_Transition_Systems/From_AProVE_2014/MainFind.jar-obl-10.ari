(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int Int Int))
(fun f1007_0_main_InvokeMethod (-> Int Int Int Int Int Int Int Int))
(fun f1026_0_findR_NE (-> Int Int Int Int Int Int Int Int))
(fun f1127_0_find_InvokeMethod (-> Int Int Int Int Int Int Int Int))
(fun f121_0_createList_Return (-> Int Int Int Int Int Int Int Int))
(fun f1273_0_createList_GE (-> Int Int Int Int Int Int Int Int))
(fun f1409_0_createList_NULL (-> Int Int Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int Int Int))
(fun f752_0_getFirst_NONNULL (-> Int Int Int Int Int Int Int Int))
(fun f988_0_random_GT (-> Int Int Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f988_0_random_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and (and (and (<= arg1P arg1) (> arg2 (- 1))) (> arg1 0)) (> arg1P 0))
(> arg2P (- 1)))
)
(rule
(f121_0_createList_Return arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f988_0_random_GT arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x5 Int))
(and
(and
(and
(and (and (<= arg1P arg1) (> x5 (- 1))) (<= (+ arg2P 1) arg1))
(> arg1 0))
(> arg1P 0))
(> arg2P (- 1)))
)
)
(rule
(f988_0_random_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1007_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x10 Int))
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (>= arg3P x10)) (<= (- arg1P 1) arg2))
(<= arg2P arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P (- 1)))
)
)
(rule
(f988_0_random_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1007_0_main_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x17 Int) (x16 Int))
(and
(and
(and
(and
(and
(and
(and
(and (and (< x17 x16) (> x17 (- 1))) (<= arg1P arg1))
(<= (- arg1P 1) arg2))
(<= arg2P arg2))
(> arg1 0))
(> arg2 (- 1)))
(> arg1P 0))
(> arg2P (- 1)))
(= (+ x17 1) arg3P))
)
)
(rule
(f1007_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1127_0_find_InvokeMethod arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x22 Int))
(and
(and
(and
(and
(and (and (<= arg1P arg1) (>= arg3 x22)) (<= arg1P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 1))
)
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1273_0_createList_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 1) arg1) (> arg1 0)) (> arg1P (- 1)))
(= 0 arg2))
(= 0 arg2P))
(= 0 arg3P))
(= 0 arg4P))
(= 0 arg5P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1273_0_createList_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ arg1P 1) arg1) (> arg2 0)) (> arg1 0))
(> arg1P (- 1)))
(= 0 arg2P))
(= 0 arg3P))
(= arg2 arg4P))
(= 1 arg5P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1273_0_createList_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg3P (- 1)) (> arg2 0)) (<= (+ arg1P 1) arg1))
(> arg1 0))
(> arg1P (- 1)))
(= 0 arg2P))
(= arg2 arg4P))
(= 1 arg5P))
)
(rule
(f1273_0_createList_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1273_0_createList_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (>= arg5 arg4) (> arg3 arg2)) (> arg4 (- 1)))
(<= (- arg1P 2) arg1))
(> arg1 (- 1)))
(> arg1P 1))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)
(rule
(f1273_0_createList_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1273_0_createList_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and (and (and (>= arg5 arg4) (> arg3 arg2)) (> arg4 (- 1))) (> arg1 0))
(> arg1P 4))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)
(rule
(f1273_0_createList_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1409_0_createList_NULL arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> arg3 arg2)) (< arg5 arg4))
(> arg5 (- 1)))
(<= arg4P arg1))
(> arg1 (- 1)))
(> arg2P 1))
(> arg4P (- 1)))
(= arg3 arg1P))
(= arg2 arg3P))
(= arg4 arg5P))
(= (+ arg5 1) arg6P))
(= 0 arg7P))
)
(rule
(f1273_0_createList_GE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1409_0_createList_NULL arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> arg4 (- 1)) (> arg3 arg2)) (< arg5 arg4))
(> arg7P (- 1)))
(> arg5 (- 1)))
(<= arg4P arg1))
(> arg1 (- 1)))
(> arg2P 1))
(> arg4P (- 1)))
(= arg3 arg1P))
(= arg2 arg3P))
(= arg4 arg5P))
(= (+ arg5 1) arg6P))
)
(rule
(f1409_0_createList_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1273_0_createList_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and
(and (and (and (<= arg1P arg2) (> arg2 1)) (> arg4 (- 1))) (> arg1P 1))
(<= (+ arg7 2) arg2))
(= (+ arg3 1) arg2P))
(= arg1 arg3P))
(= arg5 arg4P))
(= arg6 arg5P))
)
(rule
(f1409_0_createList_NULL arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1273_0_createList_GE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and (and (and (> arg2 2) (> arg4 0)) (> arg1P 4)) (<= (+ arg7 2) arg2))
(= (+ arg3 1) arg2P))
(= arg1 arg3P))
(= arg5 arg4P))
(= arg6 arg5P))
)
(rule
(f1007_0_main_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f752_0_getFirst_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x82 Int))
(and
(and
(and
(and
(and (and (and (<= arg1P arg2) (>= arg3 x82)) (> arg1 0)) (> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
(<= (+ arg4P 2) arg2))
(<= (+ arg3P 2) arg2))
)
)
(rule
(f988_0_random_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f752_0_getFirst_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x91 Int) (x90 Int) (x98 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (and (< x91 x90) (> x91 (- 1))) (> x90 0)) (> x98 (- 1)))
(<= (+ x91 1) x90))
(<= arg1P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P (- 1)))
(<= (+ arg4P 2) arg2))
(<= (+ arg3P 2) arg2))
)
)
(rule
(f752_0_getFirst_NONNULL arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f752_0_getFirst_NONNULL arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and (and (and (> arg1 2) (> arg2 0)) (> arg1P 0)) (> arg2P (- 1)))
(<= (+ arg3 2) arg1))
(<= (+ arg4 2) arg1))
)
(rule
(f1127_0_find_InvokeMethod arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1026_0_findR_NE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and
(and
(and (and (and (<= arg1P arg2) (> arg1 0)) (> arg2 1)) (> arg1P 1))
(<= (+ arg4 2) arg2))
(<= (+ arg3 2) arg2))
(= 0 arg2P))
(= arg3 arg3P))
)
(rule
(f988_0_random_GT arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1026_0_findR_NE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(exists
((x115 Int) (x114 Int))
(and
(and
(and
(and
(and
(and (and (< x115 x114) (> x115 (- 1))) (> x114 0))
(<= (+ x115 1) x114))
(> arg2P (- 1)))
(> arg1 0))
(> arg2 0))
(> arg1P 1))
)
)
(rule
(f1026_0_findR_NE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1026_0_findR_NE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and (and (> arg1 2) (> arg2 arg3)) (> arg1P 0))
(<= (+ arg3 2) arg1))
(= arg2 arg2P))
)
(rule
(f1026_0_findR_NE arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1026_0_findR_NE arg1P arg2P arg3P arg4P arg5P arg6P arg7P)
:guard
(and
(and
(and (and (> arg1 2) (< arg2 arg3)) (> arg1P 0))
(<= (+ arg3 2) arg1))
(= arg2 arg2P))
)
(rule
(__init arg1 arg2 arg3 arg4 arg5 arg6 arg7)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P arg6P arg7P))
