(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int))
(fun f142_0_fib_InvokeMethod (-> Int Int Int))
(fun f1_0_main_Load (-> Int Int Int))
(fun f31_0_fib_NE (-> Int Int Int))
(fun f81_0_fib_Return (-> Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2)
(f31_0_fib_NE arg1P arg2P)
:guard
(and (and (> arg1 0) (> arg2 (- 1))) (= arg2 arg1P)))

(rule
(f31_0_fib_NE arg1 arg2)
(f31_0_fib_NE arg1P arg2P)
:guard
(and (and (> arg1 1) (< (- arg1 1) arg1)) (= (- arg1 1) arg1P)))

(rule
(f31_0_fib_NE arg1 arg2)
(f142_0_fib_InvokeMethod arg1P arg2P)
:guard
(and (and (= 2 arg1) (= 2 arg1P)) (= 0 arg2P)))

(rule
(f31_0_fib_NE arg1 arg2)
(f142_0_fib_InvokeMethod arg1P arg2P)
:guard
(and
(and (and (> arg1 1) (< (- arg1 1) arg1)) (= arg1 arg1P))
(= (- arg1 2) arg2P))
)

(rule
(f81_0_fib_Return arg1 arg2)
(f142_0_fib_InvokeMethod arg1P arg2P)
:guard
(and (and (> arg1 0) (= arg1 arg1P)) (= (- arg1 2) arg2P)))

(rule
(f142_0_fib_InvokeMethod arg1 arg2)
(f31_0_fib_NE arg1P arg2P)
:guard
(and (and (> arg1 1) (< arg2 arg1)) (= arg2 arg1P)))

(rule (__init arg1 arg2) (f1_0_main_Load arg1P arg2P))
