(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int))
(fun f74_0_loop_LE (-> Int Int Int Int Int))
(fun |f74_0_loop_LE'| (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f74_0_loop_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and (and (and (<= arg1P arg1) (> arg2 (- 1))) (> arg1 0)) (> arg1P 0))
(= 0 arg2P))
(= arg2 arg3P))
(= arg2 arg4P))
)
(rule
(f74_0_loop_LE arg1 arg2 arg3 arg4)
(|f74_0_loop_LE'| arg1P arg2P arg3P arg4P)
:guard
(exists
((x7 Int))
(and
(and
(and
(and
(and
(and (and (and (> arg4 (- 1)) (> arg3 0)) (<= x7 arg1)) (> arg1 0))
(> x7 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
)
)
(rule
(|f74_0_loop_LE'| arg1 arg2 arg3 arg4)
(f74_0_loop_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x13 Int))
(and
(and
(and
(and
(and
(and
(and (and (and (> arg4 (- 1)) (> arg3 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(< (- (- arg4 arg2) (* 2 x13)) 2))
(>= (- (- arg4 arg2) (* 2 x13)) 0))
(= (+ arg2 x13) arg2P))
(= (- arg4 (+ arg2 x13)) arg3P))
(= arg4 arg4P))
)
)
(rule (__init arg1 arg2 arg3 arg4) (f1_0_main_Load arg1P arg2P arg3P arg4P))
