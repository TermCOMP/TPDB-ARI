(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int))
(fun f1_0_main_ConstantStackPush (-> Int Int Int Int Int Int))
(fun f319_0_rec2_LT (-> Int Int Int Int Int Int))
(fun f323_0_rec0_GT (-> Int Int Int Int Int Int))
(fun f376_0_rec1_GT (-> Int Int Int Int Int Int))
(fun f493_0_rec4_LT (-> Int Int Int Int Int Int))
(fun f500_0_main_GE (-> Int Int Int Int Int Int))
(fun f541_0_rec3_GT (-> Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_ConstantStackPush arg1 arg2 arg3 arg4 arg5)
(f500_0_main_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and (and (and (<= arg1P arg1) (> arg2 (- 1))) (> arg1 0)) (> arg1P 0))
(= 0 arg2P))
(= arg2 arg3P))
)

(rule
(f500_0_main_GE arg1 arg2 arg3 arg4 arg5)
(f500_0_main_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and (and (and (> arg3 arg2) (> arg3 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
)

(rule
(f500_0_main_GE arg1 arg2 arg3 arg4 arg5)
(f323_0_rec0_GT arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and (and (and (> arg3 arg2) (> arg3 0)) (> arg1 0)) (= 0 arg1P))
(= arg3 arg2P))
)

(rule
(f323_0_rec0_GT arg1 arg2 arg3 arg4 arg5)
(f323_0_rec0_GT arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and (and (>= arg2 arg1) (> arg1 (- 1))) (> arg2 0))
(= (+ arg1 1) arg1P))
(= arg2 arg2P))
)

(rule
(f323_0_rec0_GT arg1 arg2 arg3 arg4 arg5)
(f376_0_rec1_GT arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and (and (and (> arg2 0) (>= arg2 arg1)) (= arg1 arg1P)) (= 0 arg2P))
(= (* 2 arg1) arg3P))
)

(rule
(f376_0_rec1_GT arg1 arg2 arg3 arg4 arg5)
(f376_0_rec1_GT arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and (and (> arg1 (- 1)) (>= arg3 arg2)) (> arg2 (- 1)))
(= arg1 arg1P))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
)

(rule
(f376_0_rec1_GT arg1 arg2 arg3 arg4 arg5)
(f319_0_rec2_LT arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and (and (> arg1 (- 1)) (>= arg3 arg2)) (> arg2 (- 1)))
(= arg1 arg1P))
(= arg2 arg2P))
(= (+ arg1 arg2) arg3P))
)

(rule
(f319_0_rec2_LT arg1 arg2 arg3 arg4 arg5)
(f319_0_rec2_LT arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and (and (>= (* 3 arg2) 0) (> arg3 (- 1))) (>= (* 2 arg1) 0))
(>= (+ (* 2 arg1) (* 3 arg2)) 0))
(>= (* 4 arg3) 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= (- arg3 1) arg3P))
)

(rule
(f319_0_rec2_LT arg1 arg2 arg3 arg4 arg5)
(f541_0_rec3_GT arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (>= (* 3 arg2) 0) (> arg3 (- 1))) (>= (* 2 arg1) 0))
(>= (+ (* 2 arg1) (* 3 arg2)) 0))
(>= (* 4 arg3) 0))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= 0 arg4P))
(= (+ (+ (* 2 arg1) (* 3 arg2)) (* 4 arg3)) arg5P))
)

(rule
(f541_0_rec3_GT arg1 arg2 arg3 arg4 arg5)
(f541_0_rec3_GT arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (>= (* 100 arg2) 0) (>= arg5 arg4)) (>= (* 1000 arg1) 0))
(>= (* 10 arg3) 0))
(>= (+ (* 1000 arg1) (* 100 arg2)) 0))
(> arg3 (- 1)))
(>= (+ (+ (* 1000 arg1) (* 100 arg2)) (* 10 arg3)) 0))
(> arg4 (- 1)))
(= arg1 arg1P))
(= arg2 arg2P))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
(= arg5 arg5P))
)

(rule
(f541_0_rec3_GT arg1 arg2 arg3 arg4 arg5)
(f493_0_rec4_LT arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (>= (* 100 arg2) 0) (>= arg5 arg4)) (>= (* 1000 arg1) 0))
(>= (* 10 arg3) 0))
(>= (+ (* 1000 arg1) (* 100 arg2)) 0))
(> arg3 (- 1)))
(> arg4 (- 1)))
(>= (+ (+ (* 1000 arg1) (* 100 arg2)) (* 10 arg3)) 0))
(= (+ (+ (+ (* 1000 arg1) (* 100 arg2)) (* 10 arg3)) arg4) arg1P))
)

(rule
(f493_0_rec4_LT arg1 arg2 arg3 arg4 arg5)
(f493_0_rec4_LT arg1P arg2P arg3P arg4P arg5P)
:guard
(and (> arg1 (- 1)) (= (- arg1 1) arg1P)))

(rule
(__init arg1 arg2 arg3 arg4 arg5)
(f1_0_main_ConstantStackPush arg1P arg2P arg3P arg4P arg5P))

