(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int))
(fun f532_0_mk_LE (-> Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f532_0_mk_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and (and (and (> arg1 0) (= 0 arg2)) (= (- 1) arg1P)) (= 0 arg2P))
(= 0 arg3P))
(= 0 arg4P))
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f532_0_mk_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x2 Int))
(and
(and
(and
(and (and (and (> arg1 0) (> x2 (- 1))) (= 1 arg2)) (= (- 1) arg1P))
(= 0 arg2P))
(= 1 arg3P))
(= 1 arg4P))
)
)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4)
(f532_0_mk_LE arg1P arg2P arg3P arg4P)
:guard
(exists
((x6 Int) (x5 Int))
(and
(and
(and
(and
(and (and (and (> x6 (- 1)) (> arg2 1)) (> x5 (- 1))) (> arg1 0))
(= (- (* x5 x6) 1) arg1P))
(= (* x5 x6) arg2P))
(= arg2 arg3P))
(= 2 arg4P))
)
)
(rule
(f532_0_mk_LE arg1 arg2 arg3 arg4)
(f532_0_mk_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and (and (> arg2 0) (>= arg4 arg3)) (> arg3 (- 1)))
(= (- arg1 1) arg1P))
(= arg1 arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
)
(rule
(f532_0_mk_LE arg1 arg2 arg3 arg4)
(f532_0_mk_LE arg1P arg2P arg3P arg4P)
:guard
(and
(and
(and
(and
(and
(and (and (> arg2 0) (> arg3 (- 1))) (> arg4 (- 1)))
(< arg4 arg3))
(= (- arg1 1) arg1P))
(= arg1 arg2P))
(= arg3 arg3P))
(= (+ arg4 1) arg4P))
)
(rule (__init arg1 arg2 arg3 arg4) (f1_0_main_Load arg1P arg2P arg3P arg4P))
