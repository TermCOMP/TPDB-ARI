(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int))
(fun f192_0_main_NE (-> Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f192_0_main_NE arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and (and (> arg3P 0) (> arg2 (- 1))) (<= (- arg1P 1) arg1))
(<= (- arg2P 3) arg1))
(> arg1 0))
(> arg1P 1))
(> arg2P 3))
)

(rule
(f1_0_main_Load arg1 arg2 arg3)
(f192_0_main_NE arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and (and (<= (- arg1P 3) arg1) (> arg2 (- 1))) (<= (- arg2P 1) arg1))
(> arg1 0))
(> arg1P 3))
(> arg2P 1))
(= 0 arg3P))
)

(rule
(f192_0_main_NE arg1 arg2 arg3)
(f192_0_main_NE arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (>= arg1 arg1P) (> arg3 0)) (>= arg1 (- arg2P 3)))
(<= (- arg2P 3) arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 0))
(> arg2P 3))
(= arg3 arg3P))
)

(rule
(f192_0_main_NE arg1 arg2 arg3)
(f192_0_main_NE arg1P arg2P arg3P)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= (- arg1P 3) arg1) (<= (- arg1P 3) arg2)) (<= arg2P arg2))
(> arg1 0))
(> arg2 0))
(> arg1P 3))
(> arg2P 0))
(= 0 arg3))
(= 0 arg3P))
)

(rule (__init arg1 arg2 arg3) (f1_0_main_Load arg1P arg2P arg3P))
