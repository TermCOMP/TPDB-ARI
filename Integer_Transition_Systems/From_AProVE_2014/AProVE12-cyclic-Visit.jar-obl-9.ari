(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int))
(fun f168_0_visit_NULL (-> Int Int Int Int))
(fun f181_0_main_LE (-> Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3)
(f181_0_main_LE arg1P arg2P arg3P)
:guard
(and
(and
(and
(and (and (<= (- arg2P 1) arg1) (> arg2 (- 1))) (> arg1 0))
(> arg2P 1))
(= (- arg2 1) arg1P))
(= arg2 arg3P))
)

(rule
(f181_0_main_LE arg1 arg2 arg3)
(f181_0_main_LE arg1P arg2P arg3P)
:guard
(and
(and
(and
(and (and (<= (- arg2P 2) arg2) (> arg3 0)) (> arg2 0))
(> arg2P 2))
(= (- arg1 1) arg1P))
(= arg1 arg3P))
)

(rule
(f181_0_main_LE arg1 arg2 arg3)
(f168_0_visit_NULL arg1P arg2P arg3P)
:guard
(and (and (> arg2 0) (< arg3 1)) (> arg1P 0)))

(rule
(f181_0_main_LE arg1 arg2 arg3)
(f168_0_visit_NULL arg1P arg2P arg3P)
:guard
(and
(and (and (<= (- arg1P 1) arg2) (< arg3 1)) (> arg2 1))
(> arg1P 2))
)

(rule
(f168_0_visit_NULL arg1 arg2 arg3)
(f168_0_visit_NULL arg1P arg2P arg3P)
:guard
(and (> arg1 0) (> arg1P (- 1))))

(rule (__init arg1 arg2 arg3) (f1_0_main_Load arg1P arg2P arg3P))
