(format LCTRS)
(theory Ints)
(fun __init (-> Int Int Int Int Int Int))
(fun f1220_0_create_Return (-> Int Int Int Int Int Int))
(fun f1_0_main_Load (-> Int Int Int Int Int Int))
(fun f2072_0_create_GE (-> Int Int Int Int Int Int))
(fun f2311_0_getVariables_InvokeMethod (-> Int Int Int Int Int Int))
(fun f2992_0_collectVariables_NULL (-> Int Int Int Int Int Int))
(fun f804_0_create_GT (-> Int Int Int Int Int Int))
(entrypoint __init)
(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5)
(f2311_0_getVariables_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x7 Int))
(and
(and
(and (and (and (> x7 (- 1)) (> arg2 0)) (<= arg1P arg1)) (> arg1 0))
(> arg1P 0))
(> arg2P 3))
)
)

(rule
(f1220_0_create_Return arg1 arg2 arg3 arg4 arg5)
(f2311_0_getVariables_InvokeMethod arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (<= (+ arg1P 3) arg2)) (<= arg2P arg2))
(> arg1 0))
(> arg2 3))
(> arg1P 0))
(> arg2P 3))
(<= (+ arg5 5) arg2))
(<= (+ arg4 5) arg2))
(= arg3 arg3P))
(= arg4 arg4P))
(= arg5 arg5P))
)

(rule
(f1_0_main_Load arg1 arg2 arg3 arg4 arg5)
(f804_0_create_GT arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and (and (and (> arg1P (- 1)) (> arg2 0)) (> arg1 0)) (= arg2 arg2P))
(= 1 arg3P))
)

(rule
(f804_0_create_GT arg1 arg2 arg3 arg4 arg5)
(f2072_0_create_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and (and (and (> arg2 (- 1)) (> arg1 1)) (> arg3 0)) (< arg3 arg2))
(> arg3P (- 1)))
(= arg1 arg1P))
(= 0 arg2P))
(= arg2 arg4P))
(= (+ arg3 1) arg5P))
)

(rule
(f2072_0_create_GE arg1 arg2 arg3 arg4 arg5)
(f804_0_create_GT arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and (and (and (> arg3 arg2) (> arg1 1)) (> arg3 0)) (> arg5 1))
(< (- arg1 1) arg1))
(= (- arg1 1) arg1P))
(= arg4 arg2P))
(= arg5 arg3P))
)

(rule
(f2072_0_create_GE arg1 arg2 arg3 arg4 arg5)
(f2072_0_create_GE arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and (and (and (> arg3 arg2) (> arg1 1)) (> arg3 0)) (> arg5 1))
(< (- arg1 1) arg1))
(= arg1 arg1P))
(= (+ arg2 1) arg2P))
(= arg3 arg3P))
(= arg4 arg4P))
)

(rule
(f2311_0_getVariables_InvokeMethod arg1 arg2 arg3 arg4 arg5)
(f2992_0_collectVariables_NULL arg1P arg2P arg3P arg4P arg5P)
:guard
(exists
((x34 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (and (> x34 0) (> arg3 1)) (<= (- arg1P 1) arg1))
(<= (+ arg1P 2) arg2))
(<= (+ arg2P 3) arg2))
(> arg1 0))
(> arg2 3))
(> arg1P 1))
(> arg2P 0))
(<= (+ arg5 5) arg2))
(<= (+ arg4 5) arg2))
(= arg3 arg3P))
)
)

(rule
(f2992_0_collectVariables_NULL arg1 arg2 arg3 arg4 arg5)
(f2992_0_collectVariables_NULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and
(and
(and (and (<= arg1P arg1) (> arg3 1)) (<= (+ arg2P 3) arg2))
(> arg1 0))
(> arg2 2))
(> arg1P 0))
(> arg2P (- 1)))
(= arg3 arg3P))
)

(rule
(f2992_0_collectVariables_NULL arg1 arg2 arg3 arg4 arg5)
(f2992_0_collectVariables_NULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and (and (and (<= (+ arg2P 2) arg2) (> arg3 1)) (> arg1 0)) (> arg2 2))
(> arg1P 0))
(> arg2P (- 1)))
(= arg3 arg3P))
)

(rule
(f2992_0_collectVariables_NULL arg1 arg2 arg3 arg4 arg5)
(f2992_0_collectVariables_NULL arg1P arg2P arg3P arg4P arg5P)
:guard
(and
(and
(and
(and (and (<= (+ arg2P 2) arg2) (> arg1 0)) (> arg2 2))
(> arg1P 2))
(> arg2P (- 1)))
(= arg3 arg3P))
)

(rule
(__init arg1 arg2 arg3 arg4 arg5)
(f1_0_main_Load arg1P arg2P arg3P arg4P arg5P))

