(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int))
(fun l1 (-> Int Int Int Int))
(fun l2 (-> Int Int Int Int))
(fun l3 (-> Int Int Int Int))
(fun l4 (-> Int Int Int Int))
(entrypoint l4)
(rule
(l0 __const_10^0 x^0 y^0)
(l1 __const_10^post x^post y^post)
:guard
(and
(and
(and (<= (+ 1 __const_10^0) (+ 0 x^0)) (= __const_10^0 __const_10^post))
(= x^0 x^post))
(= y^0 y^post))
)
(rule
(l0 __const_10^0 x^0 y^0)
(l2 __const_10^post x^post y^post)
:guard
(and
(and
(and
(<= (+ 0 x^0) (+ 0 __const_10^0))
(= y^post (+ (+ 0 __const_10^0) (* -1 x^0))))
(= x^post (+ 1 x^0)))
(= __const_10^0 __const_10^post))
)
(rule
(l2 __const_10^0 x^0 y^0)
(l0 __const_10^post x^post y^post)
:guard
(and (and (= __const_10^0 __const_10^post) (= x^0 x^post)) (= y^0 y^post)))
(rule
(l3 __const_10^0 x^0 y^0)
(l2 __const_10^post x^post y^post)
:guard
(and (and (= x^post 1) (= __const_10^0 __const_10^post)) (= y^0 y^post)))
(rule
(l4 __const_10^0 x^0 y^0)
(l3 __const_10^post x^post y^post)
:guard
(and (and (= __const_10^0 __const_10^post) (= x^0 x^post)) (= y^0 y^post)))
