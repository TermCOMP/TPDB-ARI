(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int))
(fun l1 (-> Int Int Int Int))
(fun l10 (-> Int Int Int Int))
(fun l2 (-> Int Int Int Int))
(fun l3 (-> Int Int Int Int))
(fun l4 (-> Int Int Int Int))
(fun l5 (-> Int Int Int Int))
(fun l6 (-> Int Int Int Int))
(fun l7 (-> Int Int Int Int))
(fun l8 (-> Int Int Int Int))
(fun l9 (-> Int Int Int Int))
(entrypoint l10)
(rule
(l0 Result_4^0 k_6^0 x_5^0)
(l1 Result_4^post k_6^post x_5^post)
:guard
(and
(and (= Result_4^0 Result_4^post) (= k_6^0 k_6^post))
(= x_5^0 x_5^post))
)

(rule
(l1 Result_4^0 k_6^0 x_5^0)
(l2 Result_4^post k_6^post x_5^post)
:guard
(and
(and
(and
(and (<= (+ 0 (* -1 x_5^0)) 0) (<= (+ 0 x_5^0) 0))
(= Result_4^0 Result_4^post))
(= k_6^0 k_6^post))
(= x_5^0 x_5^post))
)

(rule
(l1 Result_4^0 k_6^0 x_5^0)
(l2 Result_4^post k_6^post x_5^post)
:guard
(exists
((x_5^1 Int))
(and
(and
(and
(and
(and
(and
(and (<= (+ 0 (* -1 x_5^0)) 0) (<= 0 (+ -1 x_5^0)))
(= x_5^1 x_5^1))
(= x_5^post (+ 1 x_5^1)))
(<= (+ 0 (* -1 x_5^post)) 0))
(<= (+ 0 x_5^post) 0))
(= Result_4^0 Result_4^post))
(= k_6^0 k_6^post))
)
)

(rule
(l1 Result_4^0 k_6^0 x_5^0)
(l2 Result_4^post k_6^post x_5^post)
:guard
(exists
((x_5^1 Int))
(and
(and
(and
(and
(and
(and (<= 0 (+ -1 (* -1 x_5^0))) (= x_5^1 x_5^1))
(= x_5^post (+ -1 x_5^1)))
(<= (+ 0 (* -1 x_5^post)) 0))
(<= (+ 0 x_5^post) 0))
(= Result_4^0 Result_4^post))
(= k_6^0 k_6^post))
)
)

(rule
(l1 Result_4^0 k_6^0 x_5^0)
(l3 Result_4^post k_6^post x_5^post)
:guard
(exists
((x_5^1 Int) (x_5^2 Int) (x_5^3 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= (+ 0 (* -1 x_5^0)) 0) (<= 0 (+ -1 x_5^0)))
(= x_5^1 x_5^1))
(= x_5^2 (+ 1 x_5^1)))
(<= (+ 0 (* -1 x_5^2)) 0))
(<= 0 (+ -1 x_5^2)))
(= x_5^3 x_5^3))
(= x_5^post (+ 1 x_5^3)))
(= Result_4^0 Result_4^post))
(= k_6^0 k_6^post))
)
)

(rule
(l3 Result_4^0 k_6^0 x_5^0)
(l1 Result_4^post k_6^post x_5^post)
:guard
(and
(and (= Result_4^0 Result_4^post) (= k_6^0 k_6^post))
(= x_5^0 x_5^post))
)

(rule
(l1 Result_4^0 k_6^0 x_5^0)
(l4 Result_4^post k_6^post x_5^post)
:guard
(exists
((x_5^1 Int) (x_5^2 Int) (x_5^3 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= (+ 0 (* -1 x_5^0)) 0) (<= 0 (+ -1 x_5^0)))
(= x_5^1 x_5^1))
(= x_5^2 (+ 1 x_5^1)))
(<= 0 (+ -1 (* -1 x_5^2))))
(<= (+ 0 k_6^0) 0))
(= x_5^3 x_5^3))
(= x_5^post (+ -1 x_5^3)))
(= Result_4^0 Result_4^post))
(= k_6^0 k_6^post))
)
)

(rule
(l4 Result_4^0 k_6^0 x_5^0)
(l1 Result_4^post k_6^post x_5^post)
:guard
(and
(and (= Result_4^0 Result_4^post) (= k_6^0 k_6^post))
(= x_5^0 x_5^post))
)

(rule
(l1 Result_4^0 k_6^0 x_5^0)
(l5 Result_4^post k_6^post x_5^post)
:guard
(exists
((x_5^1 Int) (x_5^2 Int) (x_5^3 Int) (x_5^4 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= (+ 0 (* -1 x_5^0)) 0) (<= 0 (+ -1 x_5^0)))
(= x_5^1 x_5^1))
(= x_5^2 (+ 1 x_5^1)))
(<= 0 (+ -1 (* -1 x_5^2))))
(<= 0 (+ -1 k_6^0)))
(= x_5^3 (+ 0 k_6^0)))
(= x_5^4 x_5^4))
(= x_5^post (+ -1 x_5^4)))
(= Result_4^0 Result_4^post))
(= k_6^0 k_6^post))
)
)

(rule
(l5 Result_4^0 k_6^0 x_5^0)
(l1 Result_4^post k_6^post x_5^post)
:guard
(and
(and (= Result_4^0 Result_4^post) (= k_6^0 k_6^post))
(= x_5^0 x_5^post))
)

(rule
(l1 Result_4^0 k_6^0 x_5^0)
(l6 Result_4^post k_6^post x_5^post)
:guard
(exists
((x_5^1 Int) (x_5^2 Int) (x_5^3 Int))
(and
(and
(and
(and
(and
(and
(and
(and (<= 0 (+ -1 (* -1 x_5^0))) (= x_5^1 x_5^1))
(= x_5^2 (+ -1 x_5^1)))
(<= (+ 0 (* -1 x_5^2)) 0))
(<= 0 (+ -1 x_5^2)))
(= x_5^3 x_5^3))
(= x_5^post (+ 1 x_5^3)))
(= Result_4^0 Result_4^post))
(= k_6^0 k_6^post))
)
)

(rule
(l6 Result_4^0 k_6^0 x_5^0)
(l1 Result_4^post k_6^post x_5^post)
:guard
(and
(and (= Result_4^0 Result_4^post) (= k_6^0 k_6^post))
(= x_5^0 x_5^post))
)

(rule
(l1 Result_4^0 k_6^0 x_5^0)
(l7 Result_4^post k_6^post x_5^post)
:guard
(exists
((x_5^1 Int) (x_5^2 Int) (x_5^3 Int))
(and
(and
(and
(and
(and
(and
(and
(and (<= 0 (+ -1 (* -1 x_5^0))) (= x_5^1 x_5^1))
(= x_5^2 (+ -1 x_5^1)))
(<= 0 (+ -1 (* -1 x_5^2))))
(<= (+ 0 k_6^0) 0))
(= x_5^3 x_5^3))
(= x_5^post (+ -1 x_5^3)))
(= Result_4^0 Result_4^post))
(= k_6^0 k_6^post))
)
)

(rule
(l7 Result_4^0 k_6^0 x_5^0)
(l1 Result_4^post k_6^post x_5^post)
:guard
(and
(and (= Result_4^0 Result_4^post) (= k_6^0 k_6^post))
(= x_5^0 x_5^post))
)

(rule
(l1 Result_4^0 k_6^0 x_5^0)
(l8 Result_4^post k_6^post x_5^post)
:guard
(exists
((x_5^1 Int) (x_5^2 Int) (x_5^3 Int) (x_5^4 Int))
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= 0 (+ -1 (* -1 x_5^0))) (= x_5^1 x_5^1))
(= x_5^2 (+ -1 x_5^1)))
(<= 0 (+ -1 (* -1 x_5^2))))
(<= 0 (+ -1 k_6^0)))
(= x_5^3 (+ 0 k_6^0)))
(= x_5^4 x_5^4))
(= x_5^post (+ -1 x_5^4)))
(= Result_4^0 Result_4^post))
(= k_6^0 k_6^post))
)
)

(rule
(l8 Result_4^0 k_6^0 x_5^0)
(l1 Result_4^post k_6^post x_5^post)
:guard
(and
(and (= Result_4^0 Result_4^post) (= k_6^0 k_6^post))
(= x_5^0 x_5^post))
)

(rule
(l2 Result_4^0 k_6^0 x_5^0)
(l9 Result_4^post k_6^post x_5^post)
:guard
(and
(and (= Result_4^post Result_4^post) (= k_6^0 k_6^post))
(= x_5^0 x_5^post))
)

(rule
(l10 Result_4^0 k_6^0 x_5^0)
(l0 Result_4^post k_6^post x_5^post)
:guard
(and
(and (= Result_4^0 Result_4^post) (= k_6^0 k_6^post))
(= x_5^0 x_5^post))
)

