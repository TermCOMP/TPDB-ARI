(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int))
(fun l1 (-> Int Int Int Int))
(fun l2 (-> Int Int Int Int))
(fun l3 (-> Int Int Int Int))
(fun l4 (-> Int Int Int Int))
(fun l5 (-> Int Int Int Int))
(fun l6 (-> Int Int Int Int))
(entrypoint l6)
(rule
(l0 i4^0 i7^0 tmp^0)
(l1 i4^post i7^post tmp^post)
:guard
(and
(and (and (<= 10 (+ 0 i4^0)) (= i7^post 0)) (= i4^0 i4^post))
(= tmp^0 tmp^post))
)
(rule
(l0 i4^0 i7^0 tmp^0)
(l2 i4^post i7^post tmp^post)
:guard
(and
(and (and (<= (+ 1 i4^0) 10) (= i4^post (+ 1 i4^0))) (= i7^0 i7^post))
(= tmp^0 tmp^post))
)
(rule
(l2 i4^0 i7^0 tmp^0)
(l0 i4^post i7^post tmp^post)
:guard
(and (and (= i4^0 i4^post) (= i7^0 i7^post)) (= tmp^0 tmp^post)))
(rule
(l1 i4^0 i7^0 tmp^0)
(l3 i4^post i7^post tmp^post)
:guard
(and (and (= i4^0 i4^post) (= i7^0 i7^post)) (= tmp^0 tmp^post)))
(rule
(l3 i4^0 i7^0 tmp^0)
(l4 i4^post i7^post tmp^post)
:guard
(and
(and (and (<= 10 (+ 0 i7^0)) (= i4^0 i4^post)) (= i7^0 i7^post))
(= tmp^0 tmp^post))
)
(rule
(l3 i4^0 i7^0 tmp^0)
(l1 i4^post i7^post tmp^post)
:guard
(and
(and (and (<= (+ 1 i7^0) 10) (= i7^post (+ 1 i7^0))) (= i4^0 i4^post))
(= tmp^0 tmp^post))
)
(rule
(l5 i4^0 i7^0 tmp^0)
(l2 i4^post i7^post tmp^post)
:guard
(and (and (= tmp^post tmp^post) (= i4^post 0)) (= i7^0 i7^post)))
(rule
(l6 i4^0 i7^0 tmp^0)
(l5 i4^post i7^post tmp^post)
:guard
(and (and (= i4^0 i4^post) (= i7^0 i7^post)) (= tmp^0 tmp^post)))
