(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int Int))
(fun l5 (-> Int Int Int Int Int Int))
(fun l6 (-> Int Int Int Int Int Int))
(fun l7 (-> Int Int Int Int Int Int))
(fun l8 (-> Int Int Int Int Int Int))
(fun l9 (-> Int Int Int Int Int Int))
(entrypoint l9)
(rule
(l0 i1^0 i2^0 i3^0 i4^0 n^0)
(l1 i1^post i2^post i3^post i4^post n^post)
:guard
(and
(and
(and
(and (and (<= 1 (+ 0 i4^0)) (= i4^post (+ -1 i4^0))) (= i1^0 i1^post))
(= i2^0 i2^post))
(= i3^0 i3^post))
(= n^0 n^post))
)
(rule
(l1 i1^0 i2^0 i3^0 i4^0 n^0)
(l0 i1^post i2^post i3^post i4^post n^post)
:guard
(and
(and
(and (and (= i1^0 i1^post) (= i2^0 i2^post)) (= i3^0 i3^post))
(= i4^0 i4^post))
(= n^0 n^post))
)
(rule
(l2 i1^0 i2^0 i3^0 i4^0 n^0)
(l0 i1^post i2^post i3^post i4^post n^post)
:guard
(and
(and
(and
(and
(and (<= (+ 0 n^0) (+ 0 i3^0)) (= i4^post (+ 0 i3^0)))
(= i1^0 i1^post))
(= i2^0 i2^post))
(= i3^0 i3^post))
(= n^0 n^post))
)
(rule
(l2 i1^0 i2^0 i3^0 i4^0 n^0)
(l3 i1^post i2^post i3^post i4^post n^post)
:guard
(and
(and
(and
(and
(and (<= (+ 1 i3^0) (+ 0 n^0)) (= i3^post (+ 1 i3^0)))
(= i1^0 i1^post))
(= i2^0 i2^post))
(= i4^0 i4^post))
(= n^0 n^post))
)
(rule
(l3 i1^0 i2^0 i3^0 i4^0 n^0)
(l2 i1^post i2^post i3^post i4^post n^post)
:guard
(and
(and
(and (and (= i1^0 i1^post) (= i2^0 i2^post)) (= i3^0 i3^post))
(= i4^0 i4^post))
(= n^0 n^post))
)
(rule
(l4 i1^0 i2^0 i3^0 i4^0 n^0)
(l2 i1^post i2^post i3^post i4^post n^post)
:guard
(and
(and
(and
(and (and (<= (+ 0 i2^0) 0) (= i3^post (+ 0 i2^0))) (= i1^0 i1^post))
(= i2^0 i2^post))
(= i4^0 i4^post))
(= n^0 n^post))
)
(rule
(l4 i1^0 i2^0 i3^0 i4^0 n^0)
(l5 i1^post i2^post i3^post i4^post n^post)
:guard
(and
(and
(and
(and (and (<= 1 (+ 0 i2^0)) (= i2^post (+ -1 i2^0))) (= i1^0 i1^post))
(= i3^0 i3^post))
(= i4^0 i4^post))
(= n^0 n^post))
)
(rule
(l5 i1^0 i2^0 i3^0 i4^0 n^0)
(l4 i1^post i2^post i3^post i4^post n^post)
:guard
(and
(and
(and (and (= i1^0 i1^post) (= i2^0 i2^post)) (= i3^0 i3^post))
(= i4^0 i4^post))
(= n^0 n^post))
)
(rule
(l6 i1^0 i2^0 i3^0 i4^0 n^0)
(l4 i1^post i2^post i3^post i4^post n^post)
:guard
(and
(and
(and
(and
(and (<= (+ 0 n^0) (+ 0 i1^0)) (= i2^post (+ 0 i1^0)))
(= i1^0 i1^post))
(= i3^0 i3^post))
(= i4^0 i4^post))
(= n^0 n^post))
)
(rule
(l6 i1^0 i2^0 i3^0 i4^0 n^0)
(l7 i1^post i2^post i3^post i4^post n^post)
:guard
(and
(and
(and
(and
(and (<= (+ 1 i1^0) (+ 0 n^0)) (= i1^post (+ 1 i1^0)))
(= i2^0 i2^post))
(= i3^0 i3^post))
(= i4^0 i4^post))
(= n^0 n^post))
)
(rule
(l7 i1^0 i2^0 i3^0 i4^0 n^0)
(l6 i1^post i2^post i3^post i4^post n^post)
:guard
(and
(and
(and (and (= i1^0 i1^post) (= i2^0 i2^post)) (= i3^0 i3^post))
(= i4^0 i4^post))
(= n^0 n^post))
)
(rule
(l8 i1^0 i2^0 i3^0 i4^0 n^0)
(l6 i1^post i2^post i3^post i4^post n^post)
:guard
(and
(and
(and (and (= i1^0 i1^post) (= i2^0 i2^post)) (= i3^0 i3^post))
(= i4^0 i4^post))
(= n^0 n^post))
)
(rule
(l9 i1^0 i2^0 i3^0 i4^0 n^0)
(l8 i1^post i2^post i3^post i4^post n^post)
:guard
(and
(and
(and (and (= i1^0 i1^post) (= i2^0 i2^post)) (= i3^0 i3^post))
(= i4^0 i4^post))
(= n^0 n^post))
)
