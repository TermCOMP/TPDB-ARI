(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int Int Int Int))
(fun l10 (-> Int Int Int Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int Int Int Int))
(fun l5 (-> Int Int Int Int Int Int Int Int))
(fun l6 (-> Int Int Int Int Int Int Int Int))
(fun l7 (-> Int Int Int Int Int Int Int Int))
(fun l8 (-> Int Int Int Int Int Int Int Int))
(fun l9 (-> Int Int Int Int Int Int Int Int))
(entrypoint l10)
(rule
(l0 N^0 choice^0 i^0 pos^0 seq^0 walker^0 z^0)
(l1 N^post choice^post i^post pos^post seq^post walker^post z^post)
:guard
(and
(and
(and
(and
(and (and (= N^0 N^post) (= choice^0 choice^post)) (= i^0 i^post))
(= pos^0 pos^post))
(= seq^0 seq^post))
(= walker^0 walker^post))
(= z^0 z^post))
)
(rule
(l2 N^0 choice^0 i^0 pos^0 seq^0 walker^0 z^0)
(l3 N^post choice^post i^post pos^post seq^post walker^post z^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ 0 seq^0) (+ 1 N^0)) (= N^0 N^post))
(= choice^0 choice^post))
(= i^0 i^post))
(= pos^0 pos^post))
(= seq^0 seq^post))
(= walker^0 walker^post))
(= z^0 z^post))
)
(rule
(l4 N^0 choice^0 i^0 pos^0 seq^0 walker^0 z^0)
(l2 N^post choice^post i^post pos^post seq^post walker^post z^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= 1 (+ 0 choice^0)) (= walker^post (+ 1 walker^0)))
(= N^0 N^post))
(= choice^0 choice^post))
(= i^0 i^post))
(= pos^0 pos^post))
(= seq^0 seq^post))
(= z^0 z^post))
)
(rule
(l4 N^0 choice^0 i^0 pos^0 seq^0 walker^0 z^0)
(l2 N^post choice^post i^post pos^post seq^post walker^post z^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ 0 choice^0) 0) (= walker^post (+ -1 walker^0)))
(= N^0 N^post))
(= choice^0 choice^post))
(= i^0 i^post))
(= pos^0 pos^post))
(= seq^0 seq^post))
(= z^0 z^post))
)
(rule
(l5 N^0 choice^0 i^0 pos^0 seq^0 walker^0 z^0)
(l3 N^post choice^post i^post pos^post seq^post walker^post z^post)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (and (= seq^post 1) (= i^post (+ 0 seq^post))) (= z^post z^post))
(<= 0 (+ 0 z^post)))
(= pos^post 0))
(= N^post N^post))
(<= (+ 0 N^post) 2))
(<= 2 (+ 0 N^post)))
(= walker^post 1))
(= choice^0 choice^post))
)
(rule
(l6 N^0 choice^0 i^0 pos^0 seq^0 walker^0 z^0)
(l4 N^post choice^post i^post pos^post seq^post walker^post z^post)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (<= (+ 0 i^0) 0) (= seq^post (+ 1 seq^0)))
(= i^post (+ 0 seq^post)))
(= z^post z^post))
(<= 0 (+ 0 z^post)))
(= N^0 N^post))
(= choice^0 choice^post))
(= pos^0 pos^post))
(= walker^0 walker^post))
)
(rule
(l6 N^0 choice^0 i^0 pos^0 seq^0 walker^0 z^0)
(l4 N^post choice^post i^post pos^post seq^post walker^post z^post)
:guard
(and
(and
(and
(and
(and
(and
(and (and (<= 1 (+ 0 i^0)) (<= (+ 0 choice^0) 0)) (= i^post (+ -1 i^0)))
(= N^0 N^post))
(= choice^0 choice^post))
(= pos^0 pos^post))
(= seq^0 seq^post))
(= walker^0 walker^post))
(= z^0 z^post))
)
(rule
(l7 N^0 choice^0 i^0 pos^0 seq^0 walker^0 z^0)
(l4 N^post choice^post i^post pos^post seq^post walker^post z^post)
:guard
(and
(and
(and
(and
(and
(and (and (<= 1 (+ 0 z^0)) (= z^post (+ -1 z^0))) (= N^0 N^post))
(= choice^0 choice^post))
(= i^0 i^post))
(= pos^0 pos^post))
(= seq^0 seq^post))
(= walker^0 walker^post))
)
(rule
(l7 N^0 choice^0 i^0 pos^0 seq^0 walker^0 z^0)
(l6 N^post choice^post i^post pos^post seq^post walker^post z^post)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ 0 z^0) 0) (= N^0 N^post)) (= choice^0 choice^post))
(= i^0 i^post))
(= pos^0 pos^post))
(= seq^0 seq^post))
(= walker^0 walker^post))
(= z^0 z^post))
)
(rule
(l8 N^0 choice^0 i^0 pos^0 seq^0 walker^0 z^0)
(l0 N^post choice^post i^post pos^post seq^post walker^post z^post)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ 1 walker^0) 1) (= N^0 N^post)) (= choice^0 choice^post))
(= i^0 i^post))
(= pos^0 pos^post))
(= seq^0 seq^post))
(= walker^0 walker^post))
(= z^0 z^post))
)
(rule
(l8 N^0 choice^0 i^0 pos^0 seq^0 walker^0 z^0)
(l7 N^post choice^post i^post pos^post seq^post walker^post z^post)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= 1 (+ 0 walker^0)) (= choice^post choice^post))
(<= 0 (+ 0 choice^post)))
(<= (+ 0 choice^post) 1))
(= N^0 N^post))
(= i^0 i^post))
(= pos^0 pos^post))
(= seq^0 seq^post))
(= walker^0 walker^post))
(= z^0 z^post))
)
(rule
(l9 N^0 choice^0 i^0 pos^0 seq^0 walker^0 z^0)
(l0 N^post choice^post i^post pos^post seq^post walker^post z^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ 1 N^0) (+ 0 walker^0)) (= N^0 N^post))
(= choice^0 choice^post))
(= i^0 i^post))
(= pos^0 pos^post))
(= seq^0 seq^post))
(= walker^0 walker^post))
(= z^0 z^post))
)
(rule
(l9 N^0 choice^0 i^0 pos^0 seq^0 walker^0 z^0)
(l8 N^post choice^post i^post pos^post seq^post walker^post z^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ 0 walker^0) (+ 0 N^0)) (= N^0 N^post))
(= choice^0 choice^post))
(= i^0 i^post))
(= pos^0 pos^post))
(= seq^0 seq^post))
(= walker^0 walker^post))
(= z^0 z^post))
)
(rule
(l3 N^0 choice^0 i^0 pos^0 seq^0 walker^0 z^0)
(l9 N^post choice^post i^post pos^post seq^post walker^post z^post)
:guard
(and
(and
(and
(and
(and (and (= N^0 N^post) (= choice^0 choice^post)) (= i^0 i^post))
(= pos^0 pos^post))
(= seq^0 seq^post))
(= walker^0 walker^post))
(= z^0 z^post))
)
(rule
(l10 N^0 choice^0 i^0 pos^0 seq^0 walker^0 z^0)
(l5 N^post choice^post i^post pos^post seq^post walker^post z^post)
:guard
(and
(and
(and
(and
(and (and (= N^0 N^post) (= choice^0 choice^post)) (= i^0 i^post))
(= pos^0 pos^post))
(= seq^0 seq^post))
(= walker^0 walker^post))
(= z^0 z^post))
)
