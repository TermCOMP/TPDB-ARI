(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int Int Int Int))
(fun l5 (-> Int Int Int Int Int Int Int Int))
(fun l6 (-> Int Int Int Int Int Int Int Int))
(entrypoint l6)
(rule
(l0
Result_4^0
__cil_tmp2_6^0
__cil_tmp6_12^0
maxRetries_9^0
retryCount_10^0
selected_11^0
x_5^0)
(l1
Result_4^post
__cil_tmp2_6^post
__cil_tmp6_12^post
maxRetries_9^post
retryCount_10^post
selected_11^post
x_5^post)
:guard
(exists
((Result_4^1 Int))
(and
(and
(and
(and
(and
(and
(and
(= __cil_tmp2_6^post (+ 0 x_5^0))
(= Result_4^1 (+ 0 __cil_tmp2_6^post)))
(= selected_11^post (+ 0 Result_4^1)))
(= Result_4^post Result_4^post))
(= __cil_tmp6_12^0 __cil_tmp6_12^post))
(= maxRetries_9^0 maxRetries_9^post))
(= retryCount_10^0 retryCount_10^post))
(= x_5^0 x_5^post))
)
)
(rule
(l2
Result_4^0
__cil_tmp2_6^0
__cil_tmp6_12^0
maxRetries_9^0
retryCount_10^0
selected_11^0
x_5^0)
(l1
Result_4^post
__cil_tmp2_6^post
__cil_tmp6_12^post
maxRetries_9^post
retryCount_10^post
selected_11^post
x_5^post)
:guard
(exists
((Result_4^1 Int))
(and
(and
(and
(and
(and
(and
(and
(= __cil_tmp2_6^post (+ 0 x_5^0))
(= Result_4^1 (+ 0 __cil_tmp2_6^post)))
(= selected_11^post (+ 0 Result_4^1)))
(= Result_4^post Result_4^post))
(= __cil_tmp6_12^0 __cil_tmp6_12^post))
(= maxRetries_9^0 maxRetries_9^post))
(= retryCount_10^0 retryCount_10^post))
(= x_5^0 x_5^post))
)
)
(rule
(l3
Result_4^0
__cil_tmp2_6^0
__cil_tmp6_12^0
maxRetries_9^0
retryCount_10^0
selected_11^0
x_5^0)
(l4
Result_4^post
__cil_tmp2_6^post
__cil_tmp6_12^post
maxRetries_9^post
retryCount_10^post
selected_11^post
x_5^post)
:guard
(and
(and
(and
(and
(and
(and
(= __cil_tmp6_12^post (+ 0 selected_11^0))
(= Result_4^post (+ 0 __cil_tmp6_12^post)))
(= __cil_tmp2_6^0 __cil_tmp2_6^post))
(= maxRetries_9^0 maxRetries_9^post))
(= retryCount_10^0 retryCount_10^post))
(= selected_11^0 selected_11^post))
(= x_5^0 x_5^post))
)
(rule
(l3
Result_4^0
__cil_tmp2_6^0
__cil_tmp6_12^0
maxRetries_9^0
retryCount_10^0
selected_11^0
x_5^0)
(l1
Result_4^post
__cil_tmp2_6^post
__cil_tmp6_12^post
maxRetries_9^post
retryCount_10^post
selected_11^post
x_5^post)
:guard
(exists
((Result_4^1 Int))
(and
(and
(and
(and
(and
(and
(and
(= __cil_tmp2_6^post (+ 0 x_5^0))
(= Result_4^1 (+ 0 __cil_tmp2_6^post)))
(= selected_11^post (+ 0 Result_4^1)))
(= Result_4^post Result_4^post))
(= __cil_tmp6_12^0 __cil_tmp6_12^post))
(= maxRetries_9^0 maxRetries_9^post))
(= retryCount_10^0 retryCount_10^post))
(= x_5^0 x_5^post))
)
)
(rule
(l1
Result_4^0
__cil_tmp2_6^0
__cil_tmp6_12^0
maxRetries_9^0
retryCount_10^0
selected_11^0
x_5^0)
(l3
Result_4^post
__cil_tmp2_6^post
__cil_tmp6_12^post
maxRetries_9^post
retryCount_10^post
selected_11^post
x_5^post)
:guard
(and
(and
(and
(and
(and
(and
(= retryCount_10^post (+ 1 retryCount_10^0))
(= Result_4^0 Result_4^post))
(= __cil_tmp2_6^0 __cil_tmp2_6^post))
(= __cil_tmp6_12^0 __cil_tmp6_12^post))
(= maxRetries_9^0 maxRetries_9^post))
(= selected_11^0 selected_11^post))
(= x_5^0 x_5^post))
)
(rule
(l5
Result_4^0
__cil_tmp2_6^0
__cil_tmp6_12^0
maxRetries_9^0
retryCount_10^0
selected_11^0
x_5^0)
(l3
Result_4^post
__cil_tmp2_6^post
__cil_tmp6_12^post
maxRetries_9^post
retryCount_10^post
selected_11^post
x_5^post)
:guard
(and
(and
(and
(and
(and
(and (= maxRetries_9^post 4) (= retryCount_10^post 0))
(= selected_11^post 0))
(= Result_4^0 Result_4^post))
(= __cil_tmp2_6^0 __cil_tmp2_6^post))
(= __cil_tmp6_12^0 __cil_tmp6_12^post))
(= x_5^0 x_5^post))
)
(rule
(l6
Result_4^0
__cil_tmp2_6^0
__cil_tmp6_12^0
maxRetries_9^0
retryCount_10^0
selected_11^0
x_5^0)
(l5
Result_4^post
__cil_tmp2_6^post
__cil_tmp6_12^post
maxRetries_9^post
retryCount_10^post
selected_11^post
x_5^post)
:guard
(and
(and
(and
(and
(and
(and (= Result_4^0 Result_4^post) (= __cil_tmp2_6^0 __cil_tmp2_6^post))
(= __cil_tmp6_12^0 __cil_tmp6_12^post))
(= maxRetries_9^0 maxRetries_9^post))
(= retryCount_10^0 retryCount_10^post))
(= selected_11^0 selected_11^post))
(= x_5^0 x_5^post))
)
