(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int))
(fun l1 (-> Int Int Int))
(fun l10 (-> Int Int Int))
(fun l11 (-> Int Int Int))
(fun l12 (-> Int Int Int))
(fun l13 (-> Int Int Int))
(fun l2 (-> Int Int Int))
(fun l3 (-> Int Int Int))
(fun l4 (-> Int Int Int))
(fun l5 (-> Int Int Int))
(fun l6 (-> Int Int Int))
(fun l7 (-> Int Int Int))
(fun l8 (-> Int Int Int))
(fun l9 (-> Int Int Int))
(entrypoint l13)
(rule
(l0 WItemsNum^0 tmp1^0)
(l1 WItemsNum^post tmp1^post)
:guard
(and
(and (<= 6 (+ 0 WItemsNum^0)) (= tmp1^post tmp1^post))
(= WItemsNum^0 WItemsNum^post))
)

(rule
(l0 WItemsNum^0 tmp1^0)
(l2 WItemsNum^post tmp1^post)
:guard
(and
(and (<= (+ 0 WItemsNum^0) 5) (= WItemsNum^0 WItemsNum^post))
(= tmp1^0 tmp1^post))
)

(rule
(l3 WItemsNum^0 tmp1^0)
(l4 WItemsNum^post tmp1^post)
:guard
(and (= WItemsNum^0 WItemsNum^post) (= tmp1^0 tmp1^post)))

(rule
(l4 WItemsNum^0 tmp1^0)
(l0 WItemsNum^post tmp1^post)
:guard
(and (= WItemsNum^0 WItemsNum^post) (= tmp1^0 tmp1^post)))

(rule
(l5 WItemsNum^0 tmp1^0)
(l6 WItemsNum^post tmp1^post)
:guard
(and (= WItemsNum^0 WItemsNum^post) (= tmp1^0 tmp1^post)))

(rule
(l7 WItemsNum^0 tmp1^0)
(l8 WItemsNum^post tmp1^post)
:guard
(and (= WItemsNum^0 WItemsNum^post) (= tmp1^0 tmp1^post)))

(rule
(l9 WItemsNum^0 tmp1^0)
(l10 WItemsNum^post tmp1^post)
:guard
(and (= WItemsNum^0 WItemsNum^post) (= tmp1^0 tmp1^post)))

(rule
(l10 WItemsNum^0 tmp1^0)
(l11 WItemsNum^post tmp1^post)
:guard
(and (= WItemsNum^0 WItemsNum^post) (= tmp1^0 tmp1^post)))

(rule
(l11 WItemsNum^0 tmp1^0)
(l10 WItemsNum^post tmp1^post)
:guard
(and (= WItemsNum^0 WItemsNum^post) (= tmp1^0 tmp1^post)))

(rule
(l6 WItemsNum^0 tmp1^0)
(l3 WItemsNum^post tmp1^post)
:guard
(and
(and (<= (+ 0 WItemsNum^0) 2) (= WItemsNum^0 WItemsNum^post))
(= tmp1^0 tmp1^post))
)

(rule
(l6 WItemsNum^0 tmp1^0)
(l5 WItemsNum^post tmp1^post)
:guard
(and
(and (<= 3 (+ 0 WItemsNum^0)) (= WItemsNum^post (+ -1 WItemsNum^0)))
(= tmp1^0 tmp1^post))
)

(rule
(l1 WItemsNum^0 tmp1^0)
(l5 WItemsNum^post tmp1^post)
:guard
(and
(and
(and (<= (+ 0 tmp1^0) 0) (<= 0 (+ 0 tmp1^0)))
(= WItemsNum^0 WItemsNum^post))
(= tmp1^0 tmp1^post))
)

(rule
(l1 WItemsNum^0 tmp1^0)
(l2 WItemsNum^post tmp1^post)
:guard
(and
(and (<= 1 (+ 0 tmp1^0)) (= WItemsNum^0 WItemsNum^post))
(= tmp1^0 tmp1^post))
)

(rule
(l1 WItemsNum^0 tmp1^0)
(l2 WItemsNum^post tmp1^post)
:guard
(and
(and (<= (+ 1 tmp1^0) 0) (= WItemsNum^0 WItemsNum^post))
(= tmp1^0 tmp1^post))
)

(rule
(l2 WItemsNum^0 tmp1^0)
(l4 WItemsNum^post tmp1^post)
:guard
(and
(and (<= 6 (+ 0 WItemsNum^0)) (= WItemsNum^post (+ 1 WItemsNum^0)))
(= tmp1^0 tmp1^post))
)

(rule
(l2 WItemsNum^0 tmp1^0)
(l4 WItemsNum^post tmp1^post)
:guard
(and
(and (<= (+ 0 WItemsNum^0) 5) (= WItemsNum^post (+ 1 WItemsNum^0)))
(= tmp1^0 tmp1^post))
)

(rule
(l12 WItemsNum^0 tmp1^0)
(l3 WItemsNum^post tmp1^post)
:guard
(exists
((WItemsNum^1 Int))
(and
(and (= WItemsNum^1 WItemsNum^1) (= WItemsNum^post WItemsNum^post))
(= tmp1^0 tmp1^post))
)
)

(rule
(l13 WItemsNum^0 tmp1^0)
(l12 WItemsNum^post tmp1^post)
:guard
(and (= WItemsNum^0 WItemsNum^post) (= tmp1^0 tmp1^post)))

