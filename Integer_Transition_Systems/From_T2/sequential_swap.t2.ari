(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int Int))
(entrypoint l4)
(rule
(l0 i^0 j^0 tmp1^0 tmp2^0 tmp3^0)
(l1 i^post j^post tmp1^post tmp2^post tmp3^post)
:guard
(and
(and
(and (and (= i^0 i^post) (= j^0 j^post)) (= tmp1^0 tmp1^post))
(= tmp2^0 tmp2^post))
(= tmp3^0 tmp3^post))
)
(rule
(l2 i^0 j^0 tmp1^0 tmp2^0 tmp3^0)
(l0 i^post j^post tmp1^post tmp2^post tmp3^post)
:guard
(and
(and
(and (and (= i^0 i^post) (= j^0 j^post)) (= tmp1^0 tmp1^post))
(= tmp2^0 tmp2^post))
(= tmp3^0 tmp3^post))
)
(rule
(l2 i^0 j^0 tmp1^0 tmp2^0 tmp3^0)
(l0 i^post j^post tmp1^post tmp2^post tmp3^post)
:guard
(and
(and
(and (and (= i^0 i^post) (= j^0 j^post)) (= tmp1^0 tmp1^post))
(= tmp2^0 tmp2^post))
(= tmp3^0 tmp3^post))
)
(rule
(l3 i^0 j^0 tmp1^0 tmp2^0 tmp3^0)
(l2 i^post j^post tmp1^post tmp2^post tmp3^post)
:guard
(and
(and
(and (and (= i^post 0) (= j^post 1)) (= tmp1^post tmp1^post))
(= tmp2^post tmp2^post))
(= tmp3^post tmp3^post))
)
(rule
(l4 i^0 j^0 tmp1^0 tmp2^0 tmp3^0)
(l3 i^post j^post tmp1^post tmp2^post tmp3^post)
:guard
(and
(and
(and (and (= i^0 i^post) (= j^0 j^post)) (= tmp1^0 tmp1^post))
(= tmp2^0 tmp2^post))
(= tmp3^0 tmp3^post))
)
