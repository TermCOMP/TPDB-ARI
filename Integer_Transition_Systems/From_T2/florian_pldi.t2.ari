(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int))
(fun l5 (-> Int Int Int Int Int))
(fun l6 (-> Int Int Int Int Int))
(fun l7 (-> Int Int Int Int Int))
(fun l8 (-> Int Int Int Int Int))
(fun l9 (-> Int Int Int Int Int))
(entrypoint l9)
(rule
(l0 guard^0 i^0 j^0 n^0)
(l1 guard^post i^post j^post n^post)
:guard
(and
(and
(and
(and (<= (+ 0 n^0) (+ 0 j^0)) (= i^post (+ 1 i^0)))
(= guard^0 guard^post))
(= j^0 j^post))
(= n^0 n^post))
)

(rule
(l0 guard^0 i^0 j^0 n^0)
(l2 guard^post i^post j^post n^post)
:guard
(and
(and
(and
(and (<= (+ 1 j^0) (+ 0 n^0)) (= guard^post guard^post))
(= i^0 i^post))
(= j^0 j^post))
(= n^0 n^post))
)

(rule
(l3 guard^0 i^0 j^0 n^0)
(l4 guard^post i^post j^post n^post)
:guard
(and
(and
(and
(and (<= (+ 0 n^0) (+ 0 i^0)) (= guard^0 guard^post))
(= i^0 i^post))
(= j^0 j^post))
(= n^0 n^post))
)

(rule
(l3 guard^0 i^0 j^0 n^0)
(l5 guard^post i^post j^post n^post)
:guard
(and
(and
(and
(and (<= (+ 1 i^0) (+ 0 n^0)) (= j^post (+ 1 i^0)))
(= guard^0 guard^post))
(= i^0 i^post))
(= n^0 n^post))
)

(rule
(l1 guard^0 i^0 j^0 n^0)
(l3 guard^post i^post j^post n^post)
:guard
(and
(and (and (= guard^0 guard^post) (= i^0 i^post)) (= j^0 j^post))
(= n^0 n^post))
)

(rule
(l5 guard^0 i^0 j^0 n^0)
(l0 guard^post i^post j^post n^post)
:guard
(and
(and (and (= guard^0 guard^post) (= i^0 i^post)) (= j^0 j^post))
(= n^0 n^post))
)

(rule
(l6 guard^0 i^0 j^0 n^0)
(l5 guard^post i^post j^post n^post)
:guard
(and
(and (and (= j^post (+ 1 j^0)) (= guard^0 guard^post)) (= i^0 i^post))
(= n^0 n^post))
)

(rule
(l7 guard^0 i^0 j^0 n^0)
(l6 guard^post i^post j^post n^post)
:guard
(and
(and
(and (= j^post (+ -1 j^0)) (= n^post (+ -1 n^0)))
(= guard^0 guard^post))
(= i^0 i^post))
)

(rule
(l2 guard^0 i^0 j^0 n^0)
(l6 guard^post i^post j^post n^post)
:guard
(and
(and
(and
(and
(and (<= (+ 0 guard^0) 0) (<= 0 (+ 0 guard^0)))
(= guard^0 guard^post))
(= i^0 i^post))
(= j^0 j^post))
(= n^0 n^post))
)

(rule
(l2 guard^0 i^0 j^0 n^0)
(l7 guard^post i^post j^post n^post)
:guard
(and
(and
(and (and (<= 1 (+ 0 guard^0)) (= guard^0 guard^post)) (= i^0 i^post))
(= j^0 j^post))
(= n^0 n^post))
)

(rule
(l2 guard^0 i^0 j^0 n^0)
(l7 guard^post i^post j^post n^post)
:guard
(and
(and
(and (and (<= (+ 1 guard^0) 0) (= guard^0 guard^post)) (= i^0 i^post))
(= j^0 j^post))
(= n^0 n^post))
)

(rule
(l8 guard^0 i^0 j^0 n^0)
(l1 guard^post i^post j^post n^post)
:guard
(and
(and (and (= i^post 0) (= guard^0 guard^post)) (= j^0 j^post))
(= n^0 n^post))
)

(rule
(l9 guard^0 i^0 j^0 n^0)
(l8 guard^post i^post j^post n^post)
:guard
(and
(and (and (= guard^0 guard^post) (= i^0 i^post)) (= j^0 j^post))
(= n^0 n^post))
)

