(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int))
(fun l1 (-> Int Int Int Int))
(fun l2 (-> Int Int Int Int))
(fun l3 (-> Int Int Int Int))
(fun l4 (-> Int Int Int Int))
(entrypoint l4)
(rule
(l0 __const_100^0 __disjvr_0^0 x^0)
(l2 __const_100^post __disjvr_0^post x^post)
:guard
(and
(and (= x^post (+ -1 x^0)) (= __const_100^0 __const_100^post))
(= __disjvr_0^0 __disjvr_0^post))
)

(rule
(l2 __const_100^0 __disjvr_0^0 x^0)
(l1 __const_100^post __disjvr_0^post x^post)
:guard
(and
(and
(and (= __disjvr_0^post __disjvr_0^0) (= __const_100^0 __const_100^post))
(= __disjvr_0^0 __disjvr_0^post))
(= x^0 x^post))
)

(rule
(l1 __const_100^0 __disjvr_0^0 x^0)
(l0 __const_100^post __disjvr_0^post x^post)
:guard
(and
(and (= __const_100^0 __const_100^post) (= __disjvr_0^0 __disjvr_0^post))
(= x^0 x^post))
)

(rule
(l3 __const_100^0 __disjvr_0^0 x^0)
(l0 __const_100^post __disjvr_0^post x^post)
:guard
(and
(and (= x^post (+ 0 __const_100^0)) (= __const_100^0 __const_100^post))
(= __disjvr_0^0 __disjvr_0^post))
)

(rule
(l4 __const_100^0 __disjvr_0^0 x^0)
(l3 __const_100^post __disjvr_0^post x^post)
:guard
(and
(and (= __const_100^0 __const_100^post) (= __disjvr_0^0 __disjvr_0^post))
(= x^0 x^post))
)

