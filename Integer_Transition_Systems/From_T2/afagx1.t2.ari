(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int))
(fun l1 (-> Int Int Int))
(fun l2 (-> Int Int Int))
(fun l3 (-> Int Int Int))
(fun l4 (-> Int Int Int))
(fun l5 (-> Int Int Int))
(fun l6 (-> Int Int Int))
(fun l7 (-> Int Int Int))
(fun l8 (-> Int Int Int))
(entrypoint l8)
(rule
(l0 tmp2^0 x^0)
(l1 tmp2^post x^post)
:guard
(and (= tmp2^0 tmp2^post) (= x^0 x^post)))

(rule
(l2 tmp2^0 x^0)
(l3 tmp2^post x^post)
:guard
(exists
((x^1 Int))
(and
(and
(and (and (<= (+ 0 tmp2^0) 0) (<= 0 (+ 0 tmp2^0))) (= x^1 0))
(= x^post 1))
(= tmp2^0 tmp2^post))
)
)

(rule
(l2 tmp2^0 x^0)
(l0 tmp2^post x^post)
:guard
(and (and (<= 1 (+ 0 tmp2^0)) (= tmp2^0 tmp2^post)) (= x^0 x^post)))

(rule
(l2 tmp2^0 x^0)
(l0 tmp2^post x^post)
:guard
(and (and (<= (+ 1 tmp2^0) 0) (= tmp2^0 tmp2^post)) (= x^0 x^post)))

(rule
(l1 tmp2^0 x^0)
(l2 tmp2^post x^post)
:guard
(and (= tmp2^post tmp2^post) (= x^0 x^post)))

(rule
(l3 tmp2^0 x^0)
(l4 tmp2^post x^post)
:guard
(and (= tmp2^0 tmp2^post) (= x^0 x^post)))

(rule
(l4 tmp2^0 x^0)
(l3 tmp2^post x^post)
:guard
(and (= tmp2^0 tmp2^post) (= x^0 x^post)))

(rule
(l5 tmp2^0 x^0)
(l6 tmp2^post x^post)
:guard
(and (= tmp2^0 tmp2^post) (= x^0 x^post)))

(rule
(l7 tmp2^0 x^0)
(l1 tmp2^post x^post)
:guard
(and (= x^post 1) (= tmp2^0 tmp2^post)))

(rule
(l8 tmp2^0 x^0)
(l7 tmp2^post x^post)
:guard
(and (= tmp2^0 tmp2^post) (= x^0 x^post)))

