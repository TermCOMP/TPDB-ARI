(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int))
(fun l1 (-> Int Int Int Int))
(fun l10 (-> Int Int Int Int))
(fun l11 (-> Int Int Int Int))
(fun l12 (-> Int Int Int Int))
(fun l13 (-> Int Int Int Int))
(fun l14 (-> Int Int Int Int))
(fun l15 (-> Int Int Int Int))
(fun l16 (-> Int Int Int Int))
(fun l17 (-> Int Int Int Int))
(fun l18 (-> Int Int Int Int))
(fun l2 (-> Int Int Int Int))
(fun l3 (-> Int Int Int Int))
(fun l4 (-> Int Int Int Int))
(fun l5 (-> Int Int Int Int))
(fun l6 (-> Int Int Int Int))
(fun l7 (-> Int Int Int Int))
(fun l8 (-> Int Int Int Int))
(fun l9 (-> Int Int Int Int))
(entrypoint l18)
(rule
(l0 Result_4^0 w_5^0 x_6^0)
(l2 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and
(and (<= (+ 2 (* -1 x_6^0)) 0) (<= 0 (+ 2 (* -1 w_5^0))))
(= x_6^post (+ 1 x_6^0)))
(= w_5^post (+ 1 w_5^0)))
(= Result_4^0 Result_4^post))
)

(rule
(l2 Result_4^0 w_5^0 x_6^0)
(l3 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (<= (+ 1 x_6^0) 2) (= Result_4^0 Result_4^post))
(= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l2 Result_4^0 w_5^0 x_6^0)
(l3 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (<= 3 (+ 0 x_6^0)) (= Result_4^0 Result_4^post))
(= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l3 Result_4^0 w_5^0 x_6^0)
(l1 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (<= (+ 1 w_5^0) 2) (= Result_4^0 Result_4^post))
(= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l3 Result_4^0 w_5^0 x_6^0)
(l1 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (<= 3 (+ 0 w_5^0)) (= Result_4^0 Result_4^post))
(= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l1 Result_4^0 w_5^0 x_6^0)
(l0 Result_4^post w_5^post x_6^post)
:guard
(and
(and (= Result_4^0 Result_4^post) (= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l0 Result_4^0 w_5^0 x_6^0)
(l5 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and
(and (<= (+ 2 (* -1 x_6^0)) 0) (<= 0 (+ 2 (* -1 w_5^0))))
(= x_6^post (+ 1 x_6^0)))
(= w_5^post (+ 1 w_5^0)))
(= Result_4^0 Result_4^post))
)

(rule
(l5 Result_4^0 w_5^0 x_6^0)
(l6 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (<= (+ 1 x_6^0) 2) (= Result_4^0 Result_4^post))
(= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l5 Result_4^0 w_5^0 x_6^0)
(l6 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (<= 3 (+ 0 x_6^0)) (= Result_4^0 Result_4^post))
(= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l6 Result_4^0 w_5^0 x_6^0)
(l4 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (and (<= (+ 0 w_5^0) 2) (<= 2 (+ 0 w_5^0))) (= w_5^post 1))
(= Result_4^0 Result_4^post))
(= x_6^0 x_6^post))
)

(rule
(l4 Result_4^0 w_5^0 x_6^0)
(l0 Result_4^post w_5^post x_6^post)
:guard
(and
(and (= Result_4^0 Result_4^post) (= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l0 Result_4^0 w_5^0 x_6^0)
(l8 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (<= 0 (+ 1 (* -1 x_6^0))) (= x_6^post (+ 1 x_6^0)))
(= w_5^post (+ 1 w_5^0)))
(= Result_4^0 Result_4^post))
)

(rule
(l8 Result_4^0 w_5^0 x_6^0)
(l9 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (<= (+ 1 x_6^0) 2) (= Result_4^0 Result_4^post))
(= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l8 Result_4^0 w_5^0 x_6^0)
(l9 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (<= 3 (+ 0 x_6^0)) (= Result_4^0 Result_4^post))
(= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l9 Result_4^0 w_5^0 x_6^0)
(l7 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (<= (+ 1 w_5^0) 2) (= Result_4^0 Result_4^post))
(= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l9 Result_4^0 w_5^0 x_6^0)
(l7 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (<= 3 (+ 0 w_5^0)) (= Result_4^0 Result_4^post))
(= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l7 Result_4^0 w_5^0 x_6^0)
(l0 Result_4^post w_5^post x_6^post)
:guard
(and
(and (= Result_4^0 Result_4^post) (= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l0 Result_4^0 w_5^0 x_6^0)
(l11 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (<= 0 (+ 1 (* -1 x_6^0))) (= x_6^post (+ 1 x_6^0)))
(= w_5^post (+ 1 w_5^0)))
(= Result_4^0 Result_4^post))
)

(rule
(l11 Result_4^0 w_5^0 x_6^0)
(l12 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (<= (+ 1 x_6^0) 2) (= Result_4^0 Result_4^post))
(= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l11 Result_4^0 w_5^0 x_6^0)
(l12 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (<= 3 (+ 0 x_6^0)) (= Result_4^0 Result_4^post))
(= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l12 Result_4^0 w_5^0 x_6^0)
(l10 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (and (<= (+ 0 w_5^0) 2) (<= 2 (+ 0 w_5^0))) (= w_5^post 1))
(= Result_4^0 Result_4^post))
(= x_6^0 x_6^post))
)

(rule
(l10 Result_4^0 w_5^0 x_6^0)
(l0 Result_4^post w_5^post x_6^post)
:guard
(and
(and (= Result_4^0 Result_4^post) (= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l0 Result_4^0 w_5^0 x_6^0)
(l14 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and
(and
(and (<= 0 (+ 1 (* -1 x_6^0))) (= x_6^post (+ 1 x_6^0)))
(= w_5^post (+ 1 w_5^0)))
(<= (+ 0 x_6^post) 2))
(<= 2 (+ 0 x_6^post)))
(= Result_4^0 Result_4^post))
)

(rule
(l14 Result_4^0 w_5^0 x_6^0)
(l13 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (<= (+ 1 w_5^0) 2) (= Result_4^0 Result_4^post))
(= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l14 Result_4^0 w_5^0 x_6^0)
(l13 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and (<= 3 (+ 0 w_5^0)) (= Result_4^0 Result_4^post))
(= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l13 Result_4^0 w_5^0 x_6^0)
(l0 Result_4^post w_5^post x_6^post)
:guard
(and
(and (= Result_4^0 Result_4^post) (= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l0 Result_4^0 w_5^0 x_6^0)
(l15 Result_4^post w_5^post x_6^post)
:guard
(exists
((w_5^1 Int))
(and
(and
(and
(and
(and
(and
(and
(and (<= 0 (+ 1 (* -1 x_6^0))) (= x_6^post (+ 1 x_6^0)))
(= w_5^1 (+ 1 w_5^0)))
(<= (+ 0 x_6^post) 2))
(<= 2 (+ 0 x_6^post)))
(<= (+ 0 w_5^1) 2))
(<= 2 (+ 0 w_5^1)))
(= w_5^post 1))
(= Result_4^0 Result_4^post))
)
)

(rule
(l15 Result_4^0 w_5^0 x_6^0)
(l0 Result_4^post w_5^post x_6^post)
:guard
(and
(and (= Result_4^0 Result_4^post) (= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l0 Result_4^0 w_5^0 x_6^0)
(l16 Result_4^post w_5^post x_6^post)
:guard
(and
(and
(and
(and (<= (+ 2 (* -1 x_6^0)) 0) (<= (+ 3 (* -1 w_5^0)) 0))
(= Result_4^post Result_4^post))
(= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l17 Result_4^0 w_5^0 x_6^0)
(l0 Result_4^post w_5^post x_6^post)
:guard
(and
(and (= Result_4^0 Result_4^post) (= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

(rule
(l18 Result_4^0 w_5^0 x_6^0)
(l17 Result_4^post w_5^post x_6^post)
:guard
(and
(and (= Result_4^0 Result_4^post) (= w_5^0 w_5^post))
(= x_6^0 x_6^post))
)

