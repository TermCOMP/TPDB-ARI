(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int))
(fun l1 (-> Int Int Int Int))
(fun l2 (-> Int Int Int Int))
(fun l3 (-> Int Int Int Int))
(fun l4 (-> Int Int Int Int))
(entrypoint l4)
(rule
(l0 pre_v^0 v^0 v_next^0)
(l1 pre_v^post v^post v_next^post)
:guard
(and
(and
(and (<= (+ 1 v^0) (+ 0 v_next^0)) (= pre_v^0 pre_v^post))
(= v^0 v^post))
(= v_next^0 v_next^post))
)

(rule
(l0 pre_v^0 v^0 v_next^0)
(l2 pre_v^post v^post v_next^post)
:guard
(and (and (= pre_v^0 pre_v^post) (= v^0 v^post)) (= v_next^0 v_next^post)))

(rule
(l2 pre_v^0 v^0 v_next^0)
(l0 pre_v^post v^post v_next^post)
:guard
(exists
((v^1 Int))
(and
(and
(and (= v_next^post v_next^post) (= pre_v^post (+ 0 v^0)))
(= v^1 (+ 0 v_next^post)))
(= v^post (+ 1 v^1)))
)
)

(rule
(l3 pre_v^0 v^0 v_next^0)
(l2 pre_v^post v^post v_next^post)
:guard
(and (and (= pre_v^0 pre_v^post) (= v^0 v^post)) (= v_next^0 v_next^post)))

(rule
(l4 pre_v^0 v^0 v_next^0)
(l3 pre_v^post v^post v_next^post)
:guard
(and (and (= pre_v^0 pre_v^post) (= v^0 v^post)) (= v_next^0 v_next^post)))

