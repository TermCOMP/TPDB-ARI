(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int Int))
(fun l5 (-> Int Int Int Int Int Int))
(fun l6 (-> Int Int Int Int Int Int))
(fun l7 (-> Int Int Int Int Int Int))
(fun l8 (-> Int Int Int Int Int Int))
(fun l9 (-> Int Int Int Int Int Int))
(entrypoint l9)
(rule
(l0 Result_4^0 __disjvr_0^0 __disjvr_1^0 tmp_6^0 x_5^0)
(l1 Result_4^post __disjvr_0^post __disjvr_1^post tmp_6^post x_5^post)
:guard
(and
(and
(and
(and (= Result_4^0 Result_4^post) (= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= tmp_6^0 tmp_6^post))
(= x_5^0 x_5^post))
)
(rule
(l1 Result_4^0 __disjvr_0^0 __disjvr_1^0 tmp_6^0 x_5^0)
(l2 Result_4^post __disjvr_0^post __disjvr_1^post tmp_6^post x_5^post)
:guard
(and
(and
(and
(and
(and
(and
(and (= tmp_6^post tmp_6^post) (<= (+ 0 tmp_6^post) 0))
(<= 0 (+ 0 tmp_6^post)))
(<= (+ 0 x_5^0) 0))
(= Result_4^post Result_4^post))
(= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= x_5^0 x_5^post))
)
(rule
(l1 Result_4^0 __disjvr_0^0 __disjvr_1^0 tmp_6^0 x_5^0)
(l3 Result_4^post __disjvr_0^post __disjvr_1^post tmp_6^post x_5^post)
:guard
(and
(and
(and
(and
(and
(and
(and (= tmp_6^post tmp_6^post) (<= (+ 0 tmp_6^post) 0))
(<= 0 (+ 0 tmp_6^post)))
(<= 0 (+ -1 x_5^0)))
(= Result_4^0 Result_4^post))
(= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= x_5^0 x_5^post))
)
(rule
(l3 Result_4^0 __disjvr_0^0 __disjvr_1^0 tmp_6^0 x_5^0)
(l1 Result_4^post __disjvr_0^post __disjvr_1^post tmp_6^post x_5^post)
:guard
(and
(and
(and
(and (= Result_4^0 Result_4^post) (= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= tmp_6^0 tmp_6^post))
(= x_5^0 x_5^post))
)
(rule
(l1 Result_4^0 __disjvr_0^0 __disjvr_1^0 tmp_6^0 x_5^0)
(l4 Result_4^post __disjvr_0^post __disjvr_1^post tmp_6^post x_5^post)
:guard
(and
(and
(and
(and (= tmp_6^post tmp_6^post) (= Result_4^0 Result_4^post))
(= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= x_5^0 x_5^post))
)
(rule
(l4 Result_4^0 __disjvr_0^0 __disjvr_1^0 tmp_6^0 x_5^0)
(l5 Result_4^post __disjvr_0^post __disjvr_1^post tmp_6^post x_5^post)
:guard
(and
(and
(and
(and
(and (= __disjvr_0^post __disjvr_0^0) (= Result_4^0 Result_4^post))
(= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= tmp_6^0 tmp_6^post))
(= x_5^0 x_5^post))
)
(rule
(l5 Result_4^0 __disjvr_0^0 __disjvr_1^0 tmp_6^0 x_5^0)
(l2 Result_4^post __disjvr_0^post __disjvr_1^post tmp_6^post x_5^post)
:guard
(and
(and
(and
(and
(and (= x_5^post (+ -1 x_5^0)) (<= (+ 0 x_5^post) 0))
(= Result_4^post Result_4^post))
(= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= tmp_6^0 tmp_6^post))
)
(rule
(l1 Result_4^0 __disjvr_0^0 __disjvr_1^0 tmp_6^0 x_5^0)
(l7 Result_4^post __disjvr_0^post __disjvr_1^post tmp_6^post x_5^post)
:guard
(and
(and
(and
(and (= tmp_6^post tmp_6^post) (= Result_4^0 Result_4^post))
(= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= x_5^0 x_5^post))
)
(rule
(l7 Result_4^0 __disjvr_0^0 __disjvr_1^0 tmp_6^0 x_5^0)
(l8 Result_4^post __disjvr_0^post __disjvr_1^post tmp_6^post x_5^post)
:guard
(and
(and
(and
(and
(and (= __disjvr_1^post __disjvr_1^0) (= Result_4^0 Result_4^post))
(= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= tmp_6^0 tmp_6^post))
(= x_5^0 x_5^post))
)
(rule
(l8 Result_4^0 __disjvr_0^0 __disjvr_1^0 tmp_6^0 x_5^0)
(l6 Result_4^post __disjvr_0^post __disjvr_1^post tmp_6^post x_5^post)
:guard
(and
(and
(and
(and
(and (= x_5^post (+ -1 x_5^0)) (<= 0 (+ -1 x_5^post)))
(= Result_4^0 Result_4^post))
(= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= tmp_6^0 tmp_6^post))
)
(rule
(l6 Result_4^0 __disjvr_0^0 __disjvr_1^0 tmp_6^0 x_5^0)
(l1 Result_4^post __disjvr_0^post __disjvr_1^post tmp_6^post x_5^post)
:guard
(and
(and
(and
(and (= Result_4^0 Result_4^post) (= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= tmp_6^0 tmp_6^post))
(= x_5^0 x_5^post))
)
(rule
(l9 Result_4^0 __disjvr_0^0 __disjvr_1^0 tmp_6^0 x_5^0)
(l0 Result_4^post __disjvr_0^post __disjvr_1^post tmp_6^post x_5^post)
:guard
(and
(and
(and
(and (= Result_4^0 Result_4^post) (= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= tmp_6^0 tmp_6^post))
(= x_5^0 x_5^post))
)
