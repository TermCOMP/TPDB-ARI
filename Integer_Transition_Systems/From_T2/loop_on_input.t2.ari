(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int))
(fun l1 (-> Int Int Int))
(fun l2 (-> Int Int Int))
(fun l3 (-> Int Int Int))
(fun l4 (-> Int Int Int))
(fun l5 (-> Int Int Int))
(entrypoint l5)
(rule
(l0 __const_5^0 x^0)
(l1 __const_5^post x^post)
:guard
(and (and (<= (+ 0 x^0) 0) (= x^post 1)) (= __const_5^0 __const_5^post)))

(rule
(l0 __const_5^0 x^0)
(l1 __const_5^post x^post)
:guard
(and
(and (<= 1 (+ 0 x^0)) (= x^post (+ 1 x^0)))
(= __const_5^0 __const_5^post))
)

(rule
(l2 __const_5^0 x^0)
(l3 __const_5^post x^post)
:guard
(and (and (<= 4 (+ 0 x^0)) (= __const_5^0 __const_5^post)) (= x^0 x^post)))

(rule
(l2 __const_5^0 x^0)
(l0 __const_5^post x^post)
:guard
(and (and (<= (+ 1 x^0) 4) (= __const_5^0 __const_5^post)) (= x^0 x^post)))

(rule
(l1 __const_5^0 x^0)
(l2 __const_5^post x^post)
:guard
(and (= __const_5^0 __const_5^post) (= x^0 x^post)))

(rule
(l4 __const_5^0 x^0)
(l1 __const_5^post x^post)
:guard
(exists
((x^1 Int))
(and
(and (= x^1 (+ 0 __const_5^0)) (= x^post x^post))
(= __const_5^0 __const_5^post))
)
)

(rule
(l5 __const_5^0 x^0)
(l4 __const_5^post x^post)
:guard
(and (= __const_5^0 __const_5^post) (= x^0 x^post)))

