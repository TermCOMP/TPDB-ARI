(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int Int Int))
(fun l10 (-> Int Int Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int Int Int))
(fun l5 (-> Int Int Int Int Int Int Int))
(fun l6 (-> Int Int Int Int Int Int Int))
(fun l7 (-> Int Int Int Int Int Int Int))
(fun l8 (-> Int Int Int Int Int Int Int))
(fun l9 (-> Int Int Int Int Int Int Int))
(entrypoint l10)
(rule
(l0 __const_100^0 i^0 j^0 k^0 tmp^0 tmp___0^0)
(l1 __const_100^post i^post j^post k^post tmp^post tmp___0^post)
:guard
(and
(and
(and
(and
(and
(and (<= (+ 0 k^0) (+ 0 __const_100^0)) (= tmp___0^post tmp___0^post))
(= i^post 0))
(= __const_100^0 __const_100^post))
(= j^0 j^post))
(= k^0 k^post))
(= tmp^0 tmp^post))
)

(rule
(l0 __const_100^0 i^0 j^0 k^0 tmp^0 tmp___0^0)
(l2 __const_100^post i^post j^post k^post tmp^post tmp___0^post)
:guard
(and
(and
(and
(and
(and
(and (<= (+ 1 __const_100^0) (+ 0 k^0)) (= __const_100^0 __const_100^post))
(= i^0 i^post))
(= j^0 j^post))
(= k^0 k^post))
(= tmp^0 tmp^post))
(= tmp___0^0 tmp___0^post))
)

(rule
(l3 __const_100^0 i^0 j^0 k^0 tmp^0 tmp___0^0)
(l0 __const_100^post i^post j^post k^post tmp^post tmp___0^post)
:guard
(and
(and
(and
(and
(and
(and (<= 1 (+ 0 k^0)) (= __const_100^0 __const_100^post))
(= i^0 i^post))
(= j^0 j^post))
(= k^0 k^post))
(= tmp^0 tmp^post))
(= tmp___0^0 tmp___0^post))
)

(rule
(l3 __const_100^0 i^0 j^0 k^0 tmp^0 tmp___0^0)
(l2 __const_100^post i^post j^post k^post tmp^post tmp___0^post)
:guard
(and
(and
(and
(and
(and
(and (<= (+ 0 k^0) 0) (= __const_100^0 __const_100^post))
(= i^0 i^post))
(= j^0 j^post))
(= k^0 k^post))
(= tmp^0 tmp^post))
(= tmp___0^0 tmp___0^post))
)

(rule
(l1 __const_100^0 i^0 j^0 k^0 tmp^0 tmp___0^0)
(l4 __const_100^post i^post j^post k^post tmp^post tmp___0^post)
:guard
(and
(and
(and
(and
(and (= __const_100^0 __const_100^post) (= i^0 i^post))
(= j^0 j^post))
(= k^0 k^post))
(= tmp^0 tmp^post))
(= tmp___0^0 tmp___0^post))
)

(rule
(l5 __const_100^0 i^0 j^0 k^0 tmp^0 tmp___0^0)
(l2 __const_100^post i^post j^post k^post tmp^post tmp___0^post)
:guard
(and
(and
(and
(and
(and
(and (<= (+ 0 i^0) (+ 0 j^0)) (= __const_100^0 __const_100^post))
(= i^0 i^post))
(= j^0 j^post))
(= k^0 k^post))
(= tmp^0 tmp^post))
(= tmp___0^0 tmp___0^post))
)

(rule
(l5 __const_100^0 i^0 j^0 k^0 tmp^0 tmp___0^0)
(l6 __const_100^post i^post j^post k^post tmp^post tmp___0^post)
:guard
(and
(and
(and
(and
(and
(and (<= (+ 1 j^0) (+ 0 i^0)) (= j^post (+ 1 j^0)))
(= __const_100^0 __const_100^post))
(= i^0 i^post))
(= k^0 k^post))
(= tmp^0 tmp^post))
(= tmp___0^0 tmp___0^post))
)

(rule
(l7 __const_100^0 i^0 j^0 k^0 tmp^0 tmp___0^0)
(l6 __const_100^post i^post j^post k^post tmp^post tmp___0^post)
:guard
(and
(and
(and
(and
(and (= i^post (+ -1 i^0)) (= j^post 0))
(= __const_100^0 __const_100^post))
(= k^0 k^post))
(= tmp^0 tmp^post))
(= tmp___0^0 tmp___0^post))
)

(rule
(l6 __const_100^0 i^0 j^0 k^0 tmp^0 tmp___0^0)
(l5 __const_100^post i^post j^post k^post tmp^post tmp___0^post)
:guard
(and
(and
(and
(and
(and (= __const_100^0 __const_100^post) (= i^0 i^post))
(= j^0 j^post))
(= k^0 k^post))
(= tmp^0 tmp^post))
(= tmp___0^0 tmp___0^post))
)

(rule
(l8 __const_100^0 i^0 j^0 k^0 tmp^0 tmp___0^0)
(l1 __const_100^post i^post j^post k^post tmp^post tmp___0^post)
:guard
(and
(and
(and
(and
(and (= i^post (+ 1 i^0)) (= __const_100^0 __const_100^post))
(= j^0 j^post))
(= k^0 k^post))
(= tmp^0 tmp^post))
(= tmp___0^0 tmp___0^post))
)

(rule
(l8 __const_100^0 i^0 j^0 k^0 tmp^0 tmp___0^0)
(l7 __const_100^post i^post j^post k^post tmp^post tmp___0^post)
:guard
(and
(and
(and
(and
(and (= __const_100^0 __const_100^post) (= i^0 i^post))
(= j^0 j^post))
(= k^0 k^post))
(= tmp^0 tmp^post))
(= tmp___0^0 tmp___0^post))
)

(rule
(l4 __const_100^0 i^0 j^0 k^0 tmp^0 tmp___0^0)
(l7 __const_100^post i^post j^post k^post tmp^post tmp___0^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ 0 i^0) (+ 0 k^0)) (<= (+ 0 k^0) (+ 0 i^0)))
(= __const_100^0 __const_100^post))
(= i^0 i^post))
(= j^0 j^post))
(= k^0 k^post))
(= tmp^0 tmp^post))
(= tmp___0^0 tmp___0^post))
)

(rule
(l4 __const_100^0 i^0 j^0 k^0 tmp^0 tmp___0^0)
(l8 __const_100^post i^post j^post k^post tmp^post tmp___0^post)
:guard
(and
(and
(and
(and
(and
(and (<= (+ 1 k^0) (+ 0 i^0)) (= __const_100^0 __const_100^post))
(= i^0 i^post))
(= j^0 j^post))
(= k^0 k^post))
(= tmp^0 tmp^post))
(= tmp___0^0 tmp___0^post))
)

(rule
(l4 __const_100^0 i^0 j^0 k^0 tmp^0 tmp___0^0)
(l8 __const_100^post i^post j^post k^post tmp^post tmp___0^post)
:guard
(and
(and
(and
(and
(and
(and (<= (+ 1 i^0) (+ 0 k^0)) (= __const_100^0 __const_100^post))
(= i^0 i^post))
(= j^0 j^post))
(= k^0 k^post))
(= tmp^0 tmp^post))
(= tmp___0^0 tmp___0^post))
)

(rule
(l9 __const_100^0 i^0 j^0 k^0 tmp^0 tmp___0^0)
(l3 __const_100^post i^post j^post k^post tmp^post tmp___0^post)
:guard
(and
(and
(and
(and
(and (= tmp^post tmp^post) (= k^post (+ 0 tmp^post)))
(= __const_100^0 __const_100^post))
(= i^0 i^post))
(= j^0 j^post))
(= tmp___0^0 tmp___0^post))
)

(rule
(l10 __const_100^0 i^0 j^0 k^0 tmp^0 tmp___0^0)
(l9 __const_100^post i^post j^post k^post tmp^post tmp___0^post)
:guard
(and
(and
(and
(and
(and (= __const_100^0 __const_100^post) (= i^0 i^post))
(= j^0 j^post))
(= k^0 k^post))
(= tmp^0 tmp^post))
(= tmp___0^0 tmp___0^post))
)

