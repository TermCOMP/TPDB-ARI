(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int Int Int Int))
(fun l5 (-> Int Int Int Int Int Int Int Int))
(fun l6 (-> Int Int Int Int Int Int Int Int))
(entrypoint l6)
(rule
(l0 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0)
(l2
delta^post
delta_new^post
deltaext^post
deltaext_new^post
deltext^post
wnt^post
wntext^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ 1 delta^0) (+ 0 delta_new^0)) (= delta^0 delta^post))
(= delta_new^0 delta_new^post))
(= deltaext^0 deltaext^post))
(= deltaext_new^0 deltaext_new^post))
(= deltext^0 deltext^post))
(= wnt^0 wnt^post))
(= wntext^0 wntext^post))
)
(rule
(l0 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0)
(l2
delta^post
delta_new^post
deltaext^post
deltaext_new^post
deltext^post
wnt^post
wntext^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ 1 delta_new^0) (+ 0 delta^0)) (= delta^0 delta^post))
(= delta_new^0 delta_new^post))
(= deltaext^0 deltaext^post))
(= deltaext_new^0 deltaext_new^post))
(= deltext^0 deltext^post))
(= wnt^0 wnt^post))
(= wntext^0 wntext^post))
)
(rule
(l2 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0)
(l1
delta^post
delta_new^post
deltaext^post
deltaext_new^post
deltext^post
wnt^post
wntext^post)
:guard
(and
(and
(and
(and
(and
(and
(= deltaext^post (+ 0 deltaext_new^0))
(= delta^post (+ 0 delta_new^0)))
(= delta_new^0 delta_new^post))
(= deltaext_new^0 deltaext_new^post))
(= deltext^0 deltext^post))
(= wnt^0 wnt^post))
(= wntext^0 wntext^post))
)
(rule
(l0 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0)
(l3
delta^post
delta_new^post
deltaext^post
deltaext_new^post
deltext^post
wnt^post
wntext^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ 1 deltaext^0) (+ 0 deltaext_new^0)) (= delta^0 delta^post))
(= delta_new^0 delta_new^post))
(= deltaext^0 deltaext^post))
(= deltaext_new^0 deltaext_new^post))
(= deltext^0 deltext^post))
(= wnt^0 wnt^post))
(= wntext^0 wntext^post))
)
(rule
(l0 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0)
(l3
delta^post
delta_new^post
deltaext^post
deltaext_new^post
deltext^post
wnt^post
wntext^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ 1 deltaext_new^0) (+ 0 deltaext^0)) (= delta^0 delta^post))
(= delta_new^0 delta_new^post))
(= deltaext^0 deltaext^post))
(= deltaext_new^0 deltaext_new^post))
(= deltext^0 deltext^post))
(= wnt^0 wnt^post))
(= wntext^0 wntext^post))
)
(rule
(l3 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0)
(l1
delta^post
delta_new^post
deltaext^post
deltaext_new^post
deltext^post
wnt^post
wntext^post)
:guard
(and
(and
(and
(and
(and
(and
(= deltaext^post (+ 0 deltaext_new^0))
(= delta^post (+ 0 delta_new^0)))
(= delta_new^0 delta_new^post))
(= deltaext_new^0 deltaext_new^post))
(= deltext^0 deltext^post))
(= wnt^0 wnt^post))
(= wntext^0 wntext^post))
)
(rule
(l4 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0)
(l0
delta^post
delta_new^post
deltaext^post
deltaext_new^post
deltext^post
wnt^post
wntext^post)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(<= (+ (+ 0 deltaext^0) wntext^0) (+ -1 (* 2 delta^0)))
(<= (+ -1 (* 2 delta^0)) (+ (+ 0 deltaext^0) wntext^0)))
(= delta_new^post (+ 0 delta^0)))
(= delta^0 delta^post))
(= deltaext^0 deltaext^post))
(= deltaext_new^0 deltaext_new^post))
(= deltext^0 deltext^post))
(= wnt^0 wnt^post))
(= wntext^0 wntext^post))
)
(rule
(l4 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0)
(l0
delta^post
delta_new^post
deltaext^post
deltaext_new^post
deltext^post
wnt^post
wntext^post)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(<= (+ (+ 0 deltaext^0) wntext^0) (+ 0 (* 2 delta^0)))
(<= (+ 0 (* 2 delta^0)) (+ (+ 0 deltaext^0) wntext^0)))
(= delta_new^post (+ 0 delta^0)))
(= delta^0 delta^post))
(= deltaext^0 deltaext^post))
(= deltaext_new^0 deltaext_new^post))
(= deltext^0 deltext^post))
(= wnt^0 wnt^post))
(= wntext^0 wntext^post))
)
(rule
(l4 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0)
(l0
delta^post
delta_new^post
deltaext^post
deltaext_new^post
deltext^post
wnt^post
wntext^post)
:guard
(and
(and
(and
(and
(and
(and
(and
(<= (+ (+ 1 deltaext^0) wntext^0) (+ -1 (* 2 delta^0)))
(= delta_new^post (+ -1 delta^0)))
(= delta^0 delta^post))
(= deltaext^0 deltaext^post))
(= deltaext_new^0 deltaext_new^post))
(= deltext^0 deltext^post))
(= wnt^0 wnt^post))
(= wntext^0 wntext^post))
)
(rule
(l4 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0)
(l0
delta^post
delta_new^post
deltaext^post
deltaext_new^post
deltext^post
wnt^post
wntext^post)
:guard
(and
(and
(and
(and
(and
(and
(and
(<= (+ 1 (* 2 delta^0)) (+ (+ 0 deltaext^0) wntext^0))
(= delta_new^post (+ 1 delta^0)))
(= delta^0 delta^post))
(= deltaext^0 deltaext^post))
(= deltaext_new^0 deltaext_new^post))
(= deltext^0 deltext^post))
(= wnt^0 wnt^post))
(= wntext^0 wntext^post))
)
(rule
(l1 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0)
(l4
delta^post
delta_new^post
deltaext^post
deltaext_new^post
deltext^post
wnt^post
wntext^post)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(<= (+ 2 wnt^0) (+ -1 (* 2 deltaext^0)))
(<= (+ -1 (* 2 deltaext^0)) (+ 2 wnt^0)))
(= deltaext_new^post (+ 0 deltaext^0)))
(= delta^0 delta^post))
(= delta_new^0 delta_new^post))
(= deltaext^0 deltaext^post))
(= deltext^0 deltext^post))
(= wnt^0 wnt^post))
(= wntext^0 wntext^post))
)
(rule
(l1 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0)
(l4
delta^post
delta_new^post
deltaext^post
deltaext_new^post
deltext^post
wnt^post
wntext^post)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(<= (+ 2 wnt^0) (+ 0 (* 2 deltaext^0)))
(<= (+ 0 (* 2 deltaext^0)) (+ 2 wnt^0)))
(= deltaext_new^post (+ 0 deltaext^0)))
(= delta^0 delta^post))
(= delta_new^0 delta_new^post))
(= deltaext^0 deltaext^post))
(= deltext^0 deltext^post))
(= wnt^0 wnt^post))
(= wntext^0 wntext^post))
)
(rule
(l1 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0)
(l4
delta^post
delta_new^post
deltaext^post
deltaext_new^post
deltext^post
wnt^post
wntext^post)
:guard
(and
(and
(and
(and
(and
(and
(and
(<= (+ 3 wnt^0) (+ -1 (* 2 deltaext^0)))
(= deltaext_new^post (+ -1 deltaext^0)))
(= delta^0 delta^post))
(= delta_new^0 delta_new^post))
(= deltaext^0 deltaext^post))
(= deltext^0 deltext^post))
(= wnt^0 wnt^post))
(= wntext^0 wntext^post))
)
(rule
(l1 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0)
(l4
delta^post
delta_new^post
deltaext^post
deltaext_new^post
deltext^post
wnt^post
wntext^post)
:guard
(and
(and
(and
(and
(and
(and
(and
(<= (+ 1 (* 2 deltaext^0)) (+ 2 wnt^0))
(= deltaext_new^post (+ 1 deltaext^0)))
(= delta^0 delta^post))
(= delta_new^0 delta_new^post))
(= deltaext^0 deltaext^post))
(= deltext^0 deltext^post))
(= wnt^0 wnt^post))
(= wntext^0 wntext^post))
)
(rule
(l5 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0)
(l1
delta^post
delta_new^post
deltaext^post
deltaext_new^post
deltext^post
wnt^post
wntext^post)
:guard
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and
(and (<= 0 (+ 0 wnt^0)) (<= (+ 0 wnt^0) 3))
(<= 0 (+ 0 deltaext^0)))
(<= (+ 0 deltext^0) 3))
(<= 0 (+ 0 wntext^0)))
(<= (+ 0 wntext^0) 3))
(<= 0 (+ 0 delta^0)))
(<= (+ 0 delta^0) 3))
(= delta^0 delta^post))
(= delta_new^0 delta_new^post))
(= deltaext^0 deltaext^post))
(= deltaext_new^0 deltaext_new^post))
(= deltext^0 deltext^post))
(= wnt^0 wnt^post))
(= wntext^0 wntext^post))
)
(rule
(l6 delta^0 delta_new^0 deltaext^0 deltaext_new^0 deltext^0 wnt^0 wntext^0)
(l5
delta^post
delta_new^post
deltaext^post
deltaext_new^post
deltext^post
wnt^post
wntext^post)
:guard
(and
(and
(and
(and
(and
(and (= delta^0 delta^post) (= delta_new^0 delta_new^post))
(= deltaext^0 deltaext^post))
(= deltaext_new^0 deltaext_new^post))
(= deltext^0 deltext^post))
(= wnt^0 wnt^post))
(= wntext^0 wntext^post))
)
