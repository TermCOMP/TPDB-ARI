(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int))
(fun l1 (-> Int Int Int))
(fun l2 (-> Int Int Int))
(fun l3 (-> Int Int Int))
(fun l4 (-> Int Int Int))
(fun l5 (-> Int Int Int))
(entrypoint l5)
(rule
(l0 op1^0 op2^0)
(l1 op1^post op2^post)
:guard
(and
(and
(and (and (<= (+ 0 op2^0) 0) (<= 0 (+ 0 op2^0))) (<= 0 (+ 0 op1^0)))
(= op1^0 op1^post))
(= op2^0 op2^post))
)
(rule
(l2 op1^0 op2^0)
(l3 op1^post op2^post)
:guard
(and
(and (<= 1 (+ 0 op2^0)) (= op1^post (+ 1 op1^0)))
(= op2^post (+ -1 op2^0)))
)
(rule
(l3 op1^0 op2^0)
(l2 op1^post op2^post)
:guard
(and (= op1^0 op1^post) (= op2^0 op2^post)))
(rule
(l2 op1^0 op2^0)
(l4 op1^post op2^post)
:guard
(and
(and (<= 1 (+ 0 op1^0)) (= op1^post (+ -1 op1^0)))
(= op2^post (+ 1 op2^0)))
)
(rule
(l4 op1^0 op2^0)
(l2 op1^post op2^post)
:guard
(and
(and (<= 1 (+ 0 op2^0)) (= op2^post (+ -1 op2^0)))
(= op1^0 op1^post))
)
(rule
(l4 op1^0 op2^0)
(l1 op1^post op2^post)
:guard
(and (= op1^0 op1^post) (= op2^0 op2^post)))
(rule
(l1 op1^0 op2^0)
(l4 op1^post op2^post)
:guard
(and
(and (<= 1 (+ 0 op1^0)) (= op1^post (+ -1 op1^0)))
(= op2^post (+ 1 op2^0)))
)
(rule
(l5 op1^0 op2^0)
(l0 op1^post op2^post)
:guard
(and (= op1^0 op1^post) (= op2^0 op2^post)))
