(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int Int Int))
(fun l5 (-> Int Int Int Int Int Int Int))
(fun l6 (-> Int Int Int Int Int Int Int))
(fun l7 (-> Int Int Int Int Int Int Int))
(fun l8 (-> Int Int Int Int Int Int Int))
(fun l9 (-> Int Int Int Int Int Int Int))
(entrypoint l9)
(rule
(l0 a4^0 a^0 answer^0 b5^0 b^0 ret_complex6^0)
(l1 a4^post a^post answer^post b5^post b^post ret_complex6^post)
:guard
(and
(and
(and
(and
(and
(and (<= 30 (+ 0 a4^0)) (= ret_complex6^post 1))
(= answer^post (+ 0 ret_complex6^post)))
(= a^0 a^post))
(= a4^0 a4^post))
(= b^0 b^post))
(= b5^0 b5^post))
)

(rule
(l0 a4^0 a^0 answer^0 b5^0 b^0 ret_complex6^0)
(l2 a4^post a^post answer^post b5^post b^post ret_complex6^post)
:guard
(and
(and
(and
(and
(and (and (<= (+ 1 a4^0) 30) (= a^0 a^post)) (= a4^0 a4^post))
(= answer^0 answer^post))
(= b^0 b^post))
(= b5^0 b5^post))
(= ret_complex6^0 ret_complex6^post))
)

(rule
(l3 a4^0 a^0 answer^0 b5^0 b^0 ret_complex6^0)
(l0 a4^post a^post answer^post b5^post b^post ret_complex6^post)
:guard
(and
(and
(and
(and (and (= a^0 a^post) (= a4^0 a4^post)) (= answer^0 answer^post))
(= b^0 b^post))
(= b5^0 b5^post))
(= ret_complex6^0 ret_complex6^post))
)

(rule
(l2 a4^0 a^0 answer^0 b5^0 b^0 ret_complex6^0)
(l4 a4^post a^post answer^post b5^post b^post ret_complex6^post)
:guard
(and
(and
(and
(and (and (= a^0 a^post) (= a4^0 a4^post)) (= answer^0 answer^post))
(= b^0 b^post))
(= b5^0 b5^post))
(= ret_complex6^0 ret_complex6^post))
)

(rule
(l5 a4^0 a^0 answer^0 b5^0 b^0 ret_complex6^0)
(l2 a4^post a^post answer^post b5^post b^post ret_complex6^post)
:guard
(and
(and
(and
(and
(and (and (<= 13 (+ 0 b5^0)) (= a4^post (+ 1 a4^0))) (= a^0 a^post))
(= answer^0 answer^post))
(= b^0 b^post))
(= b5^0 b5^post))
(= ret_complex6^0 ret_complex6^post))
)

(rule
(l5 a4^0 a^0 answer^0 b5^0 b^0 ret_complex6^0)
(l2 a4^post a^post answer^post b5^post b^post ret_complex6^post)
:guard
(and
(and
(and
(and
(and (and (<= (+ 0 b5^0) 12) (= a4^post (+ 10 a4^0))) (= a^0 a^post))
(= answer^0 answer^post))
(= b^0 b^post))
(= b5^0 b5^post))
(= ret_complex6^0 ret_complex6^post))
)

(rule
(l6 a4^0 a^0 answer^0 b5^0 b^0 ret_complex6^0)
(l2 a4^post a^post answer^post b5^post b^post ret_complex6^post)
:guard
(and
(and
(and
(and
(and (and (<= (+ 1 b5^0) 10) (= a4^post (+ 1 a4^0))) (= a^0 a^post))
(= answer^0 answer^post))
(= b^0 b^post))
(= b5^0 b5^post))
(= ret_complex6^0 ret_complex6^post))
)

(rule
(l6 a4^0 a^0 answer^0 b5^0 b^0 ret_complex6^0)
(l5 a4^post a^post answer^post b5^post b^post ret_complex6^post)
:guard
(and
(and
(and
(and
(and (and (<= 10 (+ 0 b5^0)) (= a^0 a^post)) (= a4^0 a4^post))
(= answer^0 answer^post))
(= b^0 b^post))
(= b5^0 b5^post))
(= ret_complex6^0 ret_complex6^post))
)

(rule
(l7 a4^0 a^0 answer^0 b5^0 b^0 ret_complex6^0)
(l6 a4^post a^post answer^post b5^post b^post ret_complex6^post)
:guard
(and
(and
(and
(and
(and (and (<= (+ 0 b5^0) 5) (= b5^post (+ 2 b5^0))) (= a^0 a^post))
(= a4^0 a4^post))
(= answer^0 answer^post))
(= b^0 b^post))
(= ret_complex6^0 ret_complex6^post))
)

(rule
(l7 a4^0 a^0 answer^0 b5^0 b^0 ret_complex6^0)
(l6 a4^post a^post answer^post b5^post b^post ret_complex6^post)
:guard
(and
(and
(and
(and
(and (and (<= 6 (+ 0 b5^0)) (= b5^post b5^post)) (= a^0 a^post))
(= a4^0 a4^post))
(= answer^0 answer^post))
(= b^0 b^post))
(= ret_complex6^0 ret_complex6^post))
)

(rule
(l4 a4^0 a^0 answer^0 b5^0 b^0 ret_complex6^0)
(l3 a4^post a^post answer^post b5^post b^post ret_complex6^post)
:guard
(and
(and
(and
(and
(and
(and (<= (+ 0 a4^0) (+ 0 b5^0)) (= a4^post (+ 2 a4^0)))
(= b5^post (+ -10 b5^0)))
(= a^0 a^post))
(= answer^0 answer^post))
(= b^0 b^post))
(= ret_complex6^0 ret_complex6^post))
)

(rule
(l4 a4^0 a^0 answer^0 b5^0 b^0 ret_complex6^0)
(l7 a4^post a^post answer^post b5^post b^post ret_complex6^post)
:guard
(and
(and
(and
(and
(and (and (<= (+ 1 b5^0) (+ 0 a4^0)) (= a^0 a^post)) (= a4^0 a4^post))
(= answer^0 answer^post))
(= b^0 b^post))
(= b5^0 b5^post))
(= ret_complex6^0 ret_complex6^post))
)

(rule
(l8 a4^0 a^0 answer^0 b5^0 b^0 ret_complex6^0)
(l3 a4^post a^post answer^post b5^post b^post ret_complex6^post)
:guard
(and
(and
(and
(and (and (= a^post 1) (= b^post 1)) (= answer^post 0))
(= a4^post (+ 0 a^post)))
(= b5^post (+ 0 b^post)))
(= ret_complex6^0 ret_complex6^post))
)

(rule
(l9 a4^0 a^0 answer^0 b5^0 b^0 ret_complex6^0)
(l8 a4^post a^post answer^post b5^post b^post ret_complex6^post)
:guard
(and
(and
(and
(and (and (= a^0 a^post) (= a4^0 a4^post)) (= answer^0 answer^post))
(= b^0 b^post))
(= b5^0 b5^post))
(= ret_complex6^0 ret_complex6^post))
)

