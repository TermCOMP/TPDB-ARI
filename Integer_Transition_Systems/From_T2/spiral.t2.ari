(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int))
(entrypoint l4)
(rule
(l0 __disjvr_0^0 __disjvr_1^0 x^0 y^0)
(l1 __disjvr_0^post __disjvr_1^post x^post y^post)
:guard
(and
(and
(and
(and
(and (<= (+ 0 (* -1 x^0)) (+ 0 y^0)) (<= (+ 1 x^0) (+ 0 y^0)))
(= x^post (+ 1 x^0)))
(= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= y^0 y^post))
)
(rule
(l0 __disjvr_0^0 __disjvr_1^0 x^0 y^0)
(l1 __disjvr_0^post __disjvr_1^post x^post y^post)
:guard
(and
(and
(and
(and
(and (<= (+ 0 x^0) (+ 0 y^0)) (<= (+ 1 x^0) (+ 0 (* -1 y^0))))
(= y^post (+ 1 y^0)))
(= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= x^0 x^post))
)
(rule
(l0 __disjvr_0^0 __disjvr_1^0 x^0 y^0)
(l1 __disjvr_0^post __disjvr_1^post x^post y^post)
:guard
(and
(and
(and
(and
(and (<= (+ 0 y^0) (+ 1 (* -1 x^0))) (<= (+ 1 y^0) (+ 0 x^0)))
(= x^post (+ -1 x^0)))
(= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= y^0 y^post))
)
(rule
(l0 __disjvr_0^0 __disjvr_1^0 x^0 y^0)
(l1 __disjvr_0^post __disjvr_1^post x^post y^post)
:guard
(and
(and
(and
(and
(and (<= (+ 0 y^0) (+ 0 x^0)) (<= (+ 2 (* -1 y^0)) (+ 0 x^0)))
(= y^post (+ -1 y^0)))
(= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= x^0 x^post))
)
(rule
(l1 __disjvr_0^0 __disjvr_1^0 x^0 y^0)
(l2 __disjvr_0^post __disjvr_1^post x^post y^post)
:guard
(and
(and
(and
(and (= __disjvr_0^post __disjvr_0^0) (= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= x^0 x^post))
(= y^0 y^post))
)
(rule
(l2 __disjvr_0^0 __disjvr_1^0 x^0 y^0)
(l0 __disjvr_0^post __disjvr_1^post x^post y^post)
:guard
(and
(and
(and
(and (= __disjvr_1^post __disjvr_1^0) (= __disjvr_0^0 __disjvr_0^post))
(= __disjvr_1^0 __disjvr_1^post))
(= x^0 x^post))
(= y^0 y^post))
)
(rule
(l3 __disjvr_0^0 __disjvr_1^0 x^0 y^0)
(l1 __disjvr_0^post __disjvr_1^post x^post y^post)
:guard
(and
(and
(and (= __disjvr_0^0 __disjvr_0^post) (= __disjvr_1^0 __disjvr_1^post))
(= x^0 x^post))
(= y^0 y^post))
)
(rule
(l4 __disjvr_0^0 __disjvr_1^0 x^0 y^0)
(l3 __disjvr_0^post __disjvr_1^post x^post y^post)
:guard
(and
(and
(and (= __disjvr_0^0 __disjvr_0^post) (= __disjvr_1^0 __disjvr_1^post))
(= x^0 x^post))
(= y^0 y^post))
)
