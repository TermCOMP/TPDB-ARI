(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int))
(fun l1 (-> Int Int Int Int))
(fun l2 (-> Int Int Int Int))
(fun l3 (-> Int Int Int Int))
(entrypoint l3)
(rule
(l0 id^0 m^0 x^0)
(l1 id^post m^post x^post)
:guard
(and
(and
(and
(and
(and (<= (+ 0 x^0) (+ 0 m^0)) (= x^post (+ 1 x^0)))
(<= (+ 0 x^post) (+ 1 m^0)))
(<= 0 (+ 0 x^post)))
(= id^0 id^post))
(= m^0 m^post))
)
(rule
(l0 id^0 m^0 x^0)
(l1 id^post m^post x^post)
:guard
(and
(and
(and
(and
(and (and (<= (+ 1 m^0) (+ 0 x^0)) (<= 1 (+ 0 x^0))) (= x^post 0))
(<= (+ 0 x^post) (+ 1 m^0)))
(<= 0 (+ 0 x^post)))
(= id^0 id^post))
(= m^0 m^post))
)
(rule
(l1 id^0 m^0 x^0)
(l0 id^post m^post x^post)
:guard
(and
(and (and (<= (+ 1 id^0) (+ 0 x^0)) (= id^0 id^post)) (= m^0 m^post))
(= x^0 x^post))
)
(rule
(l1 id^0 m^0 x^0)
(l0 id^post m^post x^post)
:guard
(and
(and (and (<= (+ 1 x^0) (+ 0 id^0)) (= id^0 id^post)) (= m^0 m^post))
(= x^0 x^post))
)
(rule
(l2 id^0 m^0 x^0)
(l1 id^post m^post x^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ 0 id^0) (+ 0 m^0)) (<= 1 (+ 0 id^0)))
(<= 1 (+ 0 m^0)))
(= x^post (+ 1 id^0)))
(<= (+ 0 x^post) (+ 1 m^0)))
(<= 0 (+ 0 x^post)))
(= id^0 id^post))
(= m^0 m^post))
)
(rule
(l3 id^0 m^0 x^0)
(l2 id^post m^post x^post)
:guard
(and (and (= id^0 id^post) (= m^0 m^post)) (= x^0 x^post)))
