(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int))
(fun l1 (-> Int Int Int Int))
(fun l10 (-> Int Int Int Int))
(fun l100 (-> Int Int Int Int))
(fun l101 (-> Int Int Int Int))
(fun l102 (-> Int Int Int Int))
(fun l103 (-> Int Int Int Int))
(fun l104 (-> Int Int Int Int))
(fun l105 (-> Int Int Int Int))
(fun l106 (-> Int Int Int Int))
(fun l107 (-> Int Int Int Int))
(fun l108 (-> Int Int Int Int))
(fun l109 (-> Int Int Int Int))
(fun l11 (-> Int Int Int Int))
(fun l110 (-> Int Int Int Int))
(fun l111 (-> Int Int Int Int))
(fun l112 (-> Int Int Int Int))
(fun l113 (-> Int Int Int Int))
(fun l114 (-> Int Int Int Int))
(fun l115 (-> Int Int Int Int))
(fun l116 (-> Int Int Int Int))
(fun l117 (-> Int Int Int Int))
(fun l118 (-> Int Int Int Int))
(fun l119 (-> Int Int Int Int))
(fun l12 (-> Int Int Int Int))
(fun l120 (-> Int Int Int Int))
(fun l121 (-> Int Int Int Int))
(fun l122 (-> Int Int Int Int))
(fun l123 (-> Int Int Int Int))
(fun l124 (-> Int Int Int Int))
(fun l125 (-> Int Int Int Int))
(fun l126 (-> Int Int Int Int))
(fun l127 (-> Int Int Int Int))
(fun l128 (-> Int Int Int Int))
(fun l129 (-> Int Int Int Int))
(fun l13 (-> Int Int Int Int))
(fun l130 (-> Int Int Int Int))
(fun l131 (-> Int Int Int Int))
(fun l132 (-> Int Int Int Int))
(fun l133 (-> Int Int Int Int))
(fun l134 (-> Int Int Int Int))
(fun l135 (-> Int Int Int Int))
(fun l136 (-> Int Int Int Int))
(fun l137 (-> Int Int Int Int))
(fun l138 (-> Int Int Int Int))
(fun l139 (-> Int Int Int Int))
(fun l14 (-> Int Int Int Int))
(fun l140 (-> Int Int Int Int))
(fun l141 (-> Int Int Int Int))
(fun l142 (-> Int Int Int Int))
(fun l143 (-> Int Int Int Int))
(fun l144 (-> Int Int Int Int))
(fun l145 (-> Int Int Int Int))
(fun l146 (-> Int Int Int Int))
(fun l147 (-> Int Int Int Int))
(fun l148 (-> Int Int Int Int))
(fun l149 (-> Int Int Int Int))
(fun l15 (-> Int Int Int Int))
(fun l150 (-> Int Int Int Int))
(fun l151 (-> Int Int Int Int))
(fun l152 (-> Int Int Int Int))
(fun l153 (-> Int Int Int Int))
(fun l154 (-> Int Int Int Int))
(fun l155 (-> Int Int Int Int))
(fun l156 (-> Int Int Int Int))
(fun l157 (-> Int Int Int Int))
(fun l158 (-> Int Int Int Int))
(fun l159 (-> Int Int Int Int))
(fun l16 (-> Int Int Int Int))
(fun l160 (-> Int Int Int Int))
(fun l161 (-> Int Int Int Int))
(fun l162 (-> Int Int Int Int))
(fun l163 (-> Int Int Int Int))
(fun l164 (-> Int Int Int Int))
(fun l165 (-> Int Int Int Int))
(fun l166 (-> Int Int Int Int))
(fun l167 (-> Int Int Int Int))
(fun l168 (-> Int Int Int Int))
(fun l169 (-> Int Int Int Int))
(fun l17 (-> Int Int Int Int))
(fun l170 (-> Int Int Int Int))
(fun l171 (-> Int Int Int Int))
(fun l172 (-> Int Int Int Int))
(fun l173 (-> Int Int Int Int))
(fun l174 (-> Int Int Int Int))
(fun l175 (-> Int Int Int Int))
(fun l176 (-> Int Int Int Int))
(fun l177 (-> Int Int Int Int))
(fun l178 (-> Int Int Int Int))
(fun l179 (-> Int Int Int Int))
(fun l18 (-> Int Int Int Int))
(fun l180 (-> Int Int Int Int))
(fun l181 (-> Int Int Int Int))
(fun l182 (-> Int Int Int Int))
(fun l183 (-> Int Int Int Int))
(fun l184 (-> Int Int Int Int))
(fun l185 (-> Int Int Int Int))
(fun l186 (-> Int Int Int Int))
(fun l187 (-> Int Int Int Int))
(fun l188 (-> Int Int Int Int))
(fun l189 (-> Int Int Int Int))
(fun l19 (-> Int Int Int Int))
(fun l190 (-> Int Int Int Int))
(fun l191 (-> Int Int Int Int))
(fun l192 (-> Int Int Int Int))
(fun l193 (-> Int Int Int Int))
(fun l194 (-> Int Int Int Int))
(fun l195 (-> Int Int Int Int))
(fun l196 (-> Int Int Int Int))
(fun l197 (-> Int Int Int Int))
(fun l198 (-> Int Int Int Int))
(fun l199 (-> Int Int Int Int))
(fun l2 (-> Int Int Int Int))
(fun l20 (-> Int Int Int Int))
(fun l200 (-> Int Int Int Int))
(fun l201 (-> Int Int Int Int))
(fun l202 (-> Int Int Int Int))
(fun l203 (-> Int Int Int Int))
(fun l204 (-> Int Int Int Int))
(fun l205 (-> Int Int Int Int))
(fun l206 (-> Int Int Int Int))
(fun l207 (-> Int Int Int Int))
(fun l208 (-> Int Int Int Int))
(fun l209 (-> Int Int Int Int))
(fun l21 (-> Int Int Int Int))
(fun l210 (-> Int Int Int Int))
(fun l211 (-> Int Int Int Int))
(fun l212 (-> Int Int Int Int))
(fun l213 (-> Int Int Int Int))
(fun l214 (-> Int Int Int Int))
(fun l215 (-> Int Int Int Int))
(fun l216 (-> Int Int Int Int))
(fun l217 (-> Int Int Int Int))
(fun l218 (-> Int Int Int Int))
(fun l219 (-> Int Int Int Int))
(fun l22 (-> Int Int Int Int))
(fun l220 (-> Int Int Int Int))
(fun l221 (-> Int Int Int Int))
(fun l222 (-> Int Int Int Int))
(fun l223 (-> Int Int Int Int))
(fun l224 (-> Int Int Int Int))
(fun l225 (-> Int Int Int Int))
(fun l226 (-> Int Int Int Int))
(fun l227 (-> Int Int Int Int))
(fun l228 (-> Int Int Int Int))
(fun l229 (-> Int Int Int Int))
(fun l23 (-> Int Int Int Int))
(fun l230 (-> Int Int Int Int))
(fun l231 (-> Int Int Int Int))
(fun l232 (-> Int Int Int Int))
(fun l233 (-> Int Int Int Int))
(fun l234 (-> Int Int Int Int))
(fun l235 (-> Int Int Int Int))
(fun l236 (-> Int Int Int Int))
(fun l237 (-> Int Int Int Int))
(fun l238 (-> Int Int Int Int))
(fun l239 (-> Int Int Int Int))
(fun l24 (-> Int Int Int Int))
(fun l240 (-> Int Int Int Int))
(fun l241 (-> Int Int Int Int))
(fun l242 (-> Int Int Int Int))
(fun l25 (-> Int Int Int Int))
(fun l26 (-> Int Int Int Int))
(fun l27 (-> Int Int Int Int))
(fun l28 (-> Int Int Int Int))
(fun l29 (-> Int Int Int Int))
(fun l3 (-> Int Int Int Int))
(fun l30 (-> Int Int Int Int))
(fun l31 (-> Int Int Int Int))
(fun l32 (-> Int Int Int Int))
(fun l33 (-> Int Int Int Int))
(fun l34 (-> Int Int Int Int))
(fun l35 (-> Int Int Int Int))
(fun l36 (-> Int Int Int Int))
(fun l37 (-> Int Int Int Int))
(fun l38 (-> Int Int Int Int))
(fun l39 (-> Int Int Int Int))
(fun l4 (-> Int Int Int Int))
(fun l40 (-> Int Int Int Int))
(fun l41 (-> Int Int Int Int))
(fun l42 (-> Int Int Int Int))
(fun l43 (-> Int Int Int Int))
(fun l44 (-> Int Int Int Int))
(fun l45 (-> Int Int Int Int))
(fun l46 (-> Int Int Int Int))
(fun l47 (-> Int Int Int Int))
(fun l48 (-> Int Int Int Int))
(fun l49 (-> Int Int Int Int))
(fun l5 (-> Int Int Int Int))
(fun l50 (-> Int Int Int Int))
(fun l51 (-> Int Int Int Int))
(fun l52 (-> Int Int Int Int))
(fun l53 (-> Int Int Int Int))
(fun l54 (-> Int Int Int Int))
(fun l55 (-> Int Int Int Int))
(fun l56 (-> Int Int Int Int))
(fun l57 (-> Int Int Int Int))
(fun l58 (-> Int Int Int Int))
(fun l59 (-> Int Int Int Int))
(fun l6 (-> Int Int Int Int))
(fun l60 (-> Int Int Int Int))
(fun l61 (-> Int Int Int Int))
(fun l62 (-> Int Int Int Int))
(fun l63 (-> Int Int Int Int))
(fun l64 (-> Int Int Int Int))
(fun l65 (-> Int Int Int Int))
(fun l66 (-> Int Int Int Int))
(fun l67 (-> Int Int Int Int))
(fun l68 (-> Int Int Int Int))
(fun l69 (-> Int Int Int Int))
(fun l7 (-> Int Int Int Int))
(fun l70 (-> Int Int Int Int))
(fun l71 (-> Int Int Int Int))
(fun l72 (-> Int Int Int Int))
(fun l73 (-> Int Int Int Int))
(fun l74 (-> Int Int Int Int))
(fun l75 (-> Int Int Int Int))
(fun l76 (-> Int Int Int Int))
(fun l77 (-> Int Int Int Int))
(fun l78 (-> Int Int Int Int))
(fun l79 (-> Int Int Int Int))
(fun l8 (-> Int Int Int Int))
(fun l80 (-> Int Int Int Int))
(fun l81 (-> Int Int Int Int))
(fun l82 (-> Int Int Int Int))
(fun l83 (-> Int Int Int Int))
(fun l84 (-> Int Int Int Int))
(fun l85 (-> Int Int Int Int))
(fun l86 (-> Int Int Int Int))
(fun l87 (-> Int Int Int Int))
(fun l88 (-> Int Int Int Int))
(fun l89 (-> Int Int Int Int))
(fun l9 (-> Int Int Int Int))
(fun l90 (-> Int Int Int Int))
(fun l91 (-> Int Int Int Int))
(fun l92 (-> Int Int Int Int))
(fun l93 (-> Int Int Int Int))
(fun l94 (-> Int Int Int Int))
(fun l95 (-> Int Int Int Int))
(fun l96 (-> Int Int Int Int))
(fun l97 (-> Int Int Int Int))
(fun l98 (-> Int Int Int Int))
(fun l99 (-> Int Int Int Int))
(entrypoint l242)
(rule
(l0 argc^0 i^0 s^0)
(l1 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l2 argc^0 i^0 s^0)
(l3 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l4 argc^0 i^0 s^0)
(l5 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l6 argc^0 i^0 s^0)
(l7 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l8 argc^0 i^0 s^0)
(l9 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l10 argc^0 i^0 s^0)
(l11 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l12 argc^0 i^0 s^0)
(l13 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -8) (= argc^0 argc^post)) (= i^0 i^post))
(= s^0 s^post))
)

(rule
(l12 argc^0 i^0 s^0)
(l14 argc^post i^post s^post)
:guard
(and
(and
(and (<= -8 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l15 argc^0 i^0 s^0)
(l14 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -8) (= i^post 16)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l15 argc^0 i^0 s^0)
(l16 argc^post i^post s^post)
:guard
(and
(and
(and (<= -7 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l17 argc^0 i^0 s^0)
(l18 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l19 argc^0 i^0 s^0)
(l16 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -8) (= i^post 16)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l19 argc^0 i^0 s^0)
(l20 argc^post i^post s^post)
:guard
(and
(and
(and (<= -8 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l21 argc^0 i^0 s^0)
(l20 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -8) (= i^post 16)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l21 argc^0 i^0 s^0)
(l22 argc^post i^post s^post)
:guard
(and
(and
(and (<= -7 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l23 argc^0 i^0 s^0)
(l22 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -7) (= i^post 16)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l23 argc^0 i^0 s^0)
(l24 argc^post i^post s^post)
:guard
(and
(and
(and (<= -7 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l25 argc^0 i^0 s^0)
(l26 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l27 argc^0 i^0 s^0)
(l28 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l29 argc^0 i^0 s^0)
(l24 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -7) (= i^post -2)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l29 argc^0 i^0 s^0)
(l30 argc^post i^post s^post)
:guard
(and
(and
(and (<= -6 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l31 argc^0 i^0 s^0)
(l32 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l28 argc^0 i^0 s^0)
(l30 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -7) (= i^post -2)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l28 argc^0 i^0 s^0)
(l27 argc^post i^post s^post)
:guard
(and
(and
(and (<= -7 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l33 argc^0 i^0 s^0)
(l27 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -7) (= i^post -2)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l33 argc^0 i^0 s^0)
(l34 argc^post i^post s^post)
:guard
(and
(and
(and (<= -6 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l35 argc^0 i^0 s^0)
(l36 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l37 argc^0 i^0 s^0)
(l34 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -5) (= i^post -2)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l37 argc^0 i^0 s^0)
(l38 argc^post i^post s^post)
:guard
(and
(and
(and (<= -5 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l39 argc^0 i^0 s^0)
(l40 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l41 argc^0 i^0 s^0)
(l38 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -5) (= i^post -1)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l41 argc^0 i^0 s^0)
(l42 argc^post i^post s^post)
:guard
(and
(and
(and (<= -4 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l43 argc^0 i^0 s^0)
(l42 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -5) (= i^post -1)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l43 argc^0 i^0 s^0)
(l44 argc^post i^post s^post)
:guard
(and
(and
(and (<= -5 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l45 argc^0 i^0 s^0)
(l44 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -5) (= i^post -1)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l45 argc^0 i^0 s^0)
(l46 argc^post i^post s^post)
:guard
(and
(and
(and (<= -4 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l47 argc^0 i^0 s^0)
(l48 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l49 argc^0 i^0 s^0)
(l46 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -3) (= i^post -1)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l49 argc^0 i^0 s^0)
(l50 argc^post i^post s^post)
:guard
(and
(and
(and (<= -3 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l51 argc^0 i^0 s^0)
(l50 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -3) (= i^post 0)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l51 argc^0 i^0 s^0)
(l52 argc^post i^post s^post)
:guard
(and
(and
(and (<= -2 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l53 argc^0 i^0 s^0)
(l54 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l55 argc^0 i^0 s^0)
(l52 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -3) (= i^post 0)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l55 argc^0 i^0 s^0)
(l56 argc^post i^post s^post)
:guard
(and
(and
(and (<= -3 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l57 argc^0 i^0 s^0)
(l56 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -3) (= i^post 0)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l57 argc^0 i^0 s^0)
(l58 argc^post i^post s^post)
:guard
(and
(and
(and (<= -2 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l59 argc^0 i^0 s^0)
(l60 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l61 argc^0 i^0 s^0)
(l58 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -2) (= i^post 0)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l61 argc^0 i^0 s^0)
(l62 argc^post i^post s^post)
:guard
(and
(and
(and (<= -2 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l63 argc^0 i^0 s^0)
(l64 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l65 argc^0 i^0 s^0)
(l62 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -2) (= i^post 9)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l65 argc^0 i^0 s^0)
(l66 argc^post i^post s^post)
:guard
(and
(and
(and (<= -1 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l67 argc^0 i^0 s^0)
(l66 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -2) (= i^post 9)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l67 argc^0 i^0 s^0)
(l68 argc^post i^post s^post)
:guard
(and
(and
(and (<= -2 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l69 argc^0 i^0 s^0)
(l68 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -2) (= i^post 9)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l69 argc^0 i^0 s^0)
(l70 argc^post i^post s^post)
:guard
(and
(and
(and (<= -1 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l71 argc^0 i^0 s^0)
(l72 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l30 argc^0 i^0 s^0)
(l29 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l73 argc^0 i^0 s^0)
(l70 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -1) (= i^post 9)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l73 argc^0 i^0 s^0)
(l74 argc^post i^post s^post)
:guard
(and
(and
(and (<= -1 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l75 argc^0 i^0 s^0)
(l74 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -1) (= i^post 8)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l75 argc^0 i^0 s^0)
(l76 argc^post i^post s^post)
:guard
(and
(and
(and (<= 0 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l77 argc^0 i^0 s^0)
(l78 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l79 argc^0 i^0 s^0)
(l76 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -1) (= i^post 8)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l79 argc^0 i^0 s^0)
(l80 argc^post i^post s^post)
:guard
(and
(and
(and (<= -1 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l81 argc^0 i^0 s^0)
(l82 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l83 argc^0 i^0 s^0)
(l80 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -1) (= i^post 8)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l83 argc^0 i^0 s^0)
(l84 argc^post i^post s^post)
:guard
(and
(and
(and (<= 0 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l85 argc^0 i^0 s^0)
(l84 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) 0) (= i^post 8)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l85 argc^0 i^0 s^0)
(l86 argc^post i^post s^post)
:guard
(and
(and
(and (<= 0 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l87 argc^0 i^0 s^0)
(l88 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l89 argc^0 i^0 s^0)
(l86 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) 0) (= i^post 7)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l89 argc^0 i^0 s^0)
(l90 argc^post i^post s^post)
:guard
(and
(and
(and (<= 1 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l91 argc^0 i^0 s^0)
(l90 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) 0) (= i^post 7)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l91 argc^0 i^0 s^0)
(l92 argc^post i^post s^post)
:guard
(and
(and
(and (<= 0 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l93 argc^0 i^0 s^0)
(l92 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) 0) (= i^post 7)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l93 argc^0 i^0 s^0)
(l94 argc^post i^post s^post)
:guard
(and
(and
(and (<= 1 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l95 argc^0 i^0 s^0)
(l96 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l97 argc^0 i^0 s^0)
(l94 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) 1) (= i^post 7)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l97 argc^0 i^0 s^0)
(l98 argc^post i^post s^post)
:guard
(and
(and
(and (<= 1 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l99 argc^0 i^0 s^0)
(l100 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l101 argc^0 i^0 s^0)
(l98 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) 1) (= i^post 6)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l101 argc^0 i^0 s^0)
(l102 argc^post i^post s^post)
:guard
(and
(and
(and (<= 2 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l103 argc^0 i^0 s^0)
(l102 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) 1) (= i^post 6)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l103 argc^0 i^0 s^0)
(l104 argc^post i^post s^post)
:guard
(and
(and
(and (<= 1 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l105 argc^0 i^0 s^0)
(l106 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l107 argc^0 i^0 s^0)
(l104 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) 1) (= i^post 6)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l107 argc^0 i^0 s^0)
(l108 argc^post i^post s^post)
:guard
(and
(and
(and (<= 2 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l109 argc^0 i^0 s^0)
(l110 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l111 argc^0 i^0 s^0)
(l108 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) 2) (= i^post 6)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l111 argc^0 i^0 s^0)
(l112 argc^post i^post s^post)
:guard
(and
(and
(and (<= 2 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l113 argc^0 i^0 s^0)
(l112 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) 2) (= i^post 5)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l113 argc^0 i^0 s^0)
(l114 argc^post i^post s^post)
:guard
(and
(and
(and (<= 3 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l115 argc^0 i^0 s^0)
(l114 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) 2) (= i^post 5)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l115 argc^0 i^0 s^0)
(l116 argc^post i^post s^post)
:guard
(and
(and
(and (<= 2 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l117 argc^0 i^0 s^0)
(l116 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) 2) (= i^post 5)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l117 argc^0 i^0 s^0)
(l118 argc^post i^post s^post)
:guard
(and
(and
(and (<= 3 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 (* -1 argc^0)) i^0)))
(= argc^0 argc^post))
)

(rule
(l119 argc^0 i^0 s^0)
(l120 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l24 argc^0 i^0 s^0)
(l23 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l121 argc^0 i^0 s^0)
(l118 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -8) (= i^post 5)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l121 argc^0 i^0 s^0)
(l122 argc^post i^post s^post)
:guard
(and
(and
(and (<= -8 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l123 argc^0 i^0 s^0)
(l124 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l125 argc^0 i^0 s^0)
(l122 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -8) (= i^post 16)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l125 argc^0 i^0 s^0)
(l126 argc^post i^post s^post)
:guard
(and
(and
(and (<= -7 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l127 argc^0 i^0 s^0)
(l126 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -8) (= i^post 16)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l127 argc^0 i^0 s^0)
(l128 argc^post i^post s^post)
:guard
(and
(and
(and (<= -8 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l129 argc^0 i^0 s^0)
(l130 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l131 argc^0 i^0 s^0)
(l128 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -8) (= i^post 16)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l131 argc^0 i^0 s^0)
(l132 argc^post i^post s^post)
:guard
(and
(and
(and (<= -7 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l133 argc^0 i^0 s^0)
(l134 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l135 argc^0 i^0 s^0)
(l132 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -7) (= i^post 16)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l135 argc^0 i^0 s^0)
(l136 argc^post i^post s^post)
:guard
(and
(and
(and (<= -7 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l137 argc^0 i^0 s^0)
(l136 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -7) (= i^post -2)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l137 argc^0 i^0 s^0)
(l138 argc^post i^post s^post)
:guard
(and
(and
(and (<= -6 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l139 argc^0 i^0 s^0)
(l138 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -7) (= i^post -2)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l139 argc^0 i^0 s^0)
(l140 argc^post i^post s^post)
:guard
(and
(and
(and (<= -7 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l141 argc^0 i^0 s^0)
(l142 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l143 argc^0 i^0 s^0)
(l140 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -7) (= i^post -2)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l143 argc^0 i^0 s^0)
(l144 argc^post i^post s^post)
:guard
(and
(and
(and (<= -6 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l145 argc^0 i^0 s^0)
(l144 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -5) (= i^post -2)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l145 argc^0 i^0 s^0)
(l146 argc^post i^post s^post)
:guard
(and
(and
(and (<= -5 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l147 argc^0 i^0 s^0)
(l148 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l149 argc^0 i^0 s^0)
(l146 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -5) (= i^post -1)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l149 argc^0 i^0 s^0)
(l150 argc^post i^post s^post)
:guard
(and
(and
(and (<= -4 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l151 argc^0 i^0 s^0)
(l152 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l153 argc^0 i^0 s^0)
(l150 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -5) (= i^post -1)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l153 argc^0 i^0 s^0)
(l154 argc^post i^post s^post)
:guard
(and
(and
(and (<= -5 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l155 argc^0 i^0 s^0)
(l154 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -5) (= i^post -1)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l155 argc^0 i^0 s^0)
(l156 argc^post i^post s^post)
:guard
(and
(and
(and (<= -4 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l157 argc^0 i^0 s^0)
(l158 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l158 argc^0 i^0 s^0)
(l156 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -3) (= i^post -1)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l158 argc^0 i^0 s^0)
(l157 argc^post i^post s^post)
:guard
(and
(and
(and (<= -3 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l152 argc^0 i^0 s^0)
(l157 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -3) (= i^post 0)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l152 argc^0 i^0 s^0)
(l151 argc^post i^post s^post)
:guard
(and
(and
(and (<= -2 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l148 argc^0 i^0 s^0)
(l151 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -3) (= i^post 0)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l148 argc^0 i^0 s^0)
(l147 argc^post i^post s^post)
:guard
(and
(and
(and (<= -3 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l156 argc^0 i^0 s^0)
(l155 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l142 argc^0 i^0 s^0)
(l147 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -3) (= i^post 0)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l142 argc^0 i^0 s^0)
(l141 argc^post i^post s^post)
:guard
(and
(and
(and (<= -2 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l154 argc^0 i^0 s^0)
(l153 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l134 argc^0 i^0 s^0)
(l141 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -2) (= i^post 0)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l134 argc^0 i^0 s^0)
(l133 argc^post i^post s^post)
:guard
(and
(and
(and (<= -2 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l130 argc^0 i^0 s^0)
(l133 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -2) (= i^post 9)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l130 argc^0 i^0 s^0)
(l129 argc^post i^post s^post)
:guard
(and
(and
(and (<= -1 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l150 argc^0 i^0 s^0)
(l149 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l124 argc^0 i^0 s^0)
(l129 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -2) (= i^post 9)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l124 argc^0 i^0 s^0)
(l123 argc^post i^post s^post)
:guard
(and
(and
(and (<= -2 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l120 argc^0 i^0 s^0)
(l123 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -2) (= i^post 9)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l120 argc^0 i^0 s^0)
(l119 argc^post i^post s^post)
:guard
(and
(and
(and (<= -1 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l146 argc^0 i^0 s^0)
(l145 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l110 argc^0 i^0 s^0)
(l119 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -1) (= i^post 9)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l110 argc^0 i^0 s^0)
(l109 argc^post i^post s^post)
:guard
(and
(and
(and (<= -1 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l106 argc^0 i^0 s^0)
(l109 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -1) (= i^post 8)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l106 argc^0 i^0 s^0)
(l105 argc^post i^post s^post)
:guard
(and
(and
(and (<= 0 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l100 argc^0 i^0 s^0)
(l105 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) -1) (= i^post 8)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l100 argc^0 i^0 s^0)
(l99 argc^post i^post s^post)
:guard
(and
(and
(and (<= -1 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l144 argc^0 i^0 s^0)
(l143 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l96 argc^0 i^0 s^0)
(l99 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) -1) (= i^post 8)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l96 argc^0 i^0 s^0)
(l95 argc^post i^post s^post)
:guard
(and
(and
(and (<= 0 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l140 argc^0 i^0 s^0)
(l139 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l88 argc^0 i^0 s^0)
(l95 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) 0) (= i^post 8)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l88 argc^0 i^0 s^0)
(l87 argc^post i^post s^post)
:guard
(and
(and
(and (<= 0 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l82 argc^0 i^0 s^0)
(l87 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) 0) (= i^post 7)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l82 argc^0 i^0 s^0)
(l81 argc^post i^post s^post)
:guard
(and
(and
(and (<= 1 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l138 argc^0 i^0 s^0)
(l137 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l78 argc^0 i^0 s^0)
(l81 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) 0) (= i^post 7)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l78 argc^0 i^0 s^0)
(l77 argc^post i^post s^post)
:guard
(and
(and
(and (<= 0 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l136 argc^0 i^0 s^0)
(l135 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l72 argc^0 i^0 s^0)
(l77 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) 0) (= i^post 7)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l72 argc^0 i^0 s^0)
(l71 argc^post i^post s^post)
:guard
(and
(and
(and (<= 1 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l64 argc^0 i^0 s^0)
(l71 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) 1) (= i^post 7)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l64 argc^0 i^0 s^0)
(l63 argc^post i^post s^post)
:guard
(and
(and
(and (<= 1 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l60 argc^0 i^0 s^0)
(l63 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) 1) (= i^post 6)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l60 argc^0 i^0 s^0)
(l59 argc^post i^post s^post)
:guard
(and
(and
(and (<= 2 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l132 argc^0 i^0 s^0)
(l131 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l22 argc^0 i^0 s^0)
(l21 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l54 argc^0 i^0 s^0)
(l59 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) 1) (= i^post 6)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l54 argc^0 i^0 s^0)
(l53 argc^post i^post s^post)
:guard
(and
(and
(and (<= 1 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l48 argc^0 i^0 s^0)
(l53 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) 1) (= i^post 6)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l48 argc^0 i^0 s^0)
(l47 argc^post i^post s^post)
:guard
(and
(and
(and (<= 2 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l128 argc^0 i^0 s^0)
(l127 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l40 argc^0 i^0 s^0)
(l47 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) 2) (= i^post 6)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l40 argc^0 i^0 s^0)
(l39 argc^post i^post s^post)
:guard
(and
(and
(and (<= 2 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l126 argc^0 i^0 s^0)
(l125 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l36 argc^0 i^0 s^0)
(l39 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) 2) (= i^post 5)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l36 argc^0 i^0 s^0)
(l35 argc^post i^post s^post)
:guard
(and
(and
(and (<= 3 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l32 argc^0 i^0 s^0)
(l35 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 1 i^0) 2) (= i^post 5)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l32 argc^0 i^0 s^0)
(l31 argc^post i^post s^post)
:guard
(and
(and
(and (<= 2 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l122 argc^0 i^0 s^0)
(l121 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l26 argc^0 i^0 s^0)
(l31 argc^post i^post s^post)
:guard
(and
(and (and (<= (+ 0 i^0) 2) (= i^post 5)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l26 argc^0 i^0 s^0)
(l25 argc^post i^post s^post)
:guard
(and
(and
(and (<= 3 (+ 0 i^0)) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ -1 i^0)))
(= argc^0 argc^post))
)

(rule
(l18 argc^0 i^0 s^0)
(l25 argc^post i^post s^post)
:guard
(and
(and (and (<= 5 (+ 0 i^0)) (= i^post 5)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l18 argc^0 i^0 s^0)
(l17 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) 4) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l11 argc^0 i^0 s^0)
(l17 argc^post i^post s^post)
:guard
(and
(and (and (<= 4 (+ 0 i^0)) (= i^post -6)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l11 argc^0 i^0 s^0)
(l10 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) 4) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l118 argc^0 i^0 s^0)
(l117 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l9 argc^0 i^0 s^0)
(l10 argc^post i^post s^post)
:guard
(and
(and (and (<= 5 (+ 0 i^0)) (= i^post -6)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l9 argc^0 i^0 s^0)
(l8 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) 4) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l7 argc^0 i^0 s^0)
(l8 argc^post i^post s^post)
:guard
(and
(and (and (<= 4 (+ 0 i^0)) (= i^post -6)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l7 argc^0 i^0 s^0)
(l6 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) 4) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l116 argc^0 i^0 s^0)
(l115 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l5 argc^0 i^0 s^0)
(l6 argc^post i^post s^post)
:guard
(and
(and (and (<= 1 (+ 0 i^0)) (= i^post -6)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l5 argc^0 i^0 s^0)
(l4 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) 0) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l114 argc^0 i^0 s^0)
(l113 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l3 argc^0 i^0 s^0)
(l4 argc^post i^post s^post)
:guard
(and
(and (and (<= 0 (+ 0 i^0)) (= i^post -5)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l3 argc^0 i^0 s^0)
(l2 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) 0) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l1 argc^0 i^0 s^0)
(l2 argc^post i^post s^post)
:guard
(and
(and (and (<= 1 (+ 0 i^0)) (= i^post -5)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l1 argc^0 i^0 s^0)
(l0 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) 0) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l112 argc^0 i^0 s^0)
(l111 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l159 argc^0 i^0 s^0)
(l0 argc^post i^post s^post)
:guard
(and
(and (and (<= 0 (+ 0 i^0)) (= i^post -5)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l159 argc^0 i^0 s^0)
(l160 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) 0) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l161 argc^0 i^0 s^0)
(l160 argc^post i^post s^post)
:guard
(and
(and (and (<= 0 (+ 0 i^0)) (= i^post -5)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l161 argc^0 i^0 s^0)
(l162 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) -1) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l163 argc^0 i^0 s^0)
(l162 argc^post i^post s^post)
:guard
(and
(and (and (<= -1 (+ 0 i^0)) (= i^post -4)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l163 argc^0 i^0 s^0)
(l164 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) -1) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l108 argc^0 i^0 s^0)
(l107 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l20 argc^0 i^0 s^0)
(l19 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l165 argc^0 i^0 s^0)
(l164 argc^post i^post s^post)
:guard
(and
(and (and (<= 0 (+ 0 i^0)) (= i^post -4)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l165 argc^0 i^0 s^0)
(l166 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) -1) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l104 argc^0 i^0 s^0)
(l103 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l167 argc^0 i^0 s^0)
(l166 argc^post i^post s^post)
:guard
(and
(and (and (<= -1 (+ 0 i^0)) (= i^post -4)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l167 argc^0 i^0 s^0)
(l168 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) -1) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l169 argc^0 i^0 s^0)
(l168 argc^post i^post s^post)
:guard
(and
(and (and (<= -1 (+ 0 i^0)) (= i^post -4)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l169 argc^0 i^0 s^0)
(l170 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) -2) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l102 argc^0 i^0 s^0)
(l101 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l171 argc^0 i^0 s^0)
(l170 argc^post i^post s^post)
:guard
(and
(and (and (<= -2 (+ 0 i^0)) (= i^post -3)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l171 argc^0 i^0 s^0)
(l172 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) -2) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l98 argc^0 i^0 s^0)
(l97 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l173 argc^0 i^0 s^0)
(l172 argc^post i^post s^post)
:guard
(and
(and (and (<= -1 (+ 0 i^0)) (= i^post -3)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l173 argc^0 i^0 s^0)
(l174 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) -2) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l175 argc^0 i^0 s^0)
(l174 argc^post i^post s^post)
:guard
(and
(and (and (<= -2 (+ 0 i^0)) (= i^post -3)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l175 argc^0 i^0 s^0)
(l176 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) -2) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l177 argc^0 i^0 s^0)
(l176 argc^post i^post s^post)
:guard
(and
(and (and (<= 3 (+ 0 i^0)) (= i^post -3)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l177 argc^0 i^0 s^0)
(l178 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) 2) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l94 argc^0 i^0 s^0)
(l93 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l179 argc^0 i^0 s^0)
(l178 argc^post i^post s^post)
:guard
(and
(and (and (<= 2 (+ 0 i^0)) (= i^post 1)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l179 argc^0 i^0 s^0)
(l180 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) 2) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l181 argc^0 i^0 s^0)
(l180 argc^post i^post s^post)
:guard
(and
(and (and (<= 3 (+ 0 i^0)) (= i^post 1)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l181 argc^0 i^0 s^0)
(l182 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) 2) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l92 argc^0 i^0 s^0)
(l91 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l183 argc^0 i^0 s^0)
(l182 argc^post i^post s^post)
:guard
(and
(and (and (<= 2 (+ 0 i^0)) (= i^post 1)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l183 argc^0 i^0 s^0)
(l184 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) 2) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l90 argc^0 i^0 s^0)
(l89 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l185 argc^0 i^0 s^0)
(l184 argc^post i^post s^post)
:guard
(and
(and (and (<= 4 (+ 0 i^0)) (= i^post 1)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l185 argc^0 i^0 s^0)
(l186 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) 3) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l187 argc^0 i^0 s^0)
(l186 argc^post i^post s^post)
:guard
(and
(and (and (<= 3 (+ 0 i^0)) (= i^post 0)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l187 argc^0 i^0 s^0)
(l188 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) 3) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l86 argc^0 i^0 s^0)
(l85 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l189 argc^0 i^0 s^0)
(l188 argc^post i^post s^post)
:guard
(and
(and (and (<= 4 (+ 0 i^0)) (= i^post 0)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l189 argc^0 i^0 s^0)
(l190 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) 3) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l191 argc^0 i^0 s^0)
(l190 argc^post i^post s^post)
:guard
(and
(and (and (<= 3 (+ 0 i^0)) (= i^post 0)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l191 argc^0 i^0 s^0)
(l192 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) 3) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ (+ 0 argc^0) i^0)))
(= argc^0 argc^post))
)

(rule
(l193 argc^0 i^0 s^0)
(l192 argc^post i^post s^post)
:guard
(and
(and (and (<= 5 (+ 0 i^0)) (= i^post 0)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l193 argc^0 i^0 s^0)
(l194 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) 4) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l84 argc^0 i^0 s^0)
(l83 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l16 argc^0 i^0 s^0)
(l15 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l195 argc^0 i^0 s^0)
(l194 argc^post i^post s^post)
:guard
(and
(and (and (<= 4 (+ 0 i^0)) (= i^post -6)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l195 argc^0 i^0 s^0)
(l196 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) 4) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l197 argc^0 i^0 s^0)
(l196 argc^post i^post s^post)
:guard
(and
(and (and (<= 5 (+ 0 i^0)) (= i^post -6)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l197 argc^0 i^0 s^0)
(l198 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) 4) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l80 argc^0 i^0 s^0)
(l79 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l199 argc^0 i^0 s^0)
(l198 argc^post i^post s^post)
:guard
(and
(and (and (<= 4 (+ 0 i^0)) (= i^post -6)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l199 argc^0 i^0 s^0)
(l200 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) 4) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l76 argc^0 i^0 s^0)
(l75 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l201 argc^0 i^0 s^0)
(l200 argc^post i^post s^post)
:guard
(and
(and (and (<= 1 (+ 0 i^0)) (= i^post -6)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l201 argc^0 i^0 s^0)
(l202 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) 0) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l203 argc^0 i^0 s^0)
(l202 argc^post i^post s^post)
:guard
(and
(and (and (<= 0 (+ 0 i^0)) (= i^post -5)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l203 argc^0 i^0 s^0)
(l204 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) 0) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l74 argc^0 i^0 s^0)
(l73 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l205 argc^0 i^0 s^0)
(l204 argc^post i^post s^post)
:guard
(and
(and (and (<= 1 (+ 0 i^0)) (= i^post -5)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l205 argc^0 i^0 s^0)
(l206 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) 0) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l207 argc^0 i^0 s^0)
(l206 argc^post i^post s^post)
:guard
(and
(and (and (<= 0 (+ 0 i^0)) (= i^post -5)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l207 argc^0 i^0 s^0)
(l208 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) 0) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l209 argc^0 i^0 s^0)
(l208 argc^post i^post s^post)
:guard
(and
(and (and (<= 0 (+ 0 i^0)) (= i^post -5)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l209 argc^0 i^0 s^0)
(l210 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) -1) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l70 argc^0 i^0 s^0)
(l69 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l211 argc^0 i^0 s^0)
(l210 argc^post i^post s^post)
:guard
(and
(and (and (<= -1 (+ 0 i^0)) (= i^post -4)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l211 argc^0 i^0 s^0)
(l212 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) -1) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l68 argc^0 i^0 s^0)
(l67 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l213 argc^0 i^0 s^0)
(l212 argc^post i^post s^post)
:guard
(and
(and (and (<= 0 (+ 0 i^0)) (= i^post -4)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l213 argc^0 i^0 s^0)
(l214 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) -1) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l215 argc^0 i^0 s^0)
(l214 argc^post i^post s^post)
:guard
(and
(and (and (<= -1 (+ 0 i^0)) (= i^post -4)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l215 argc^0 i^0 s^0)
(l216 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) -1) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l66 argc^0 i^0 s^0)
(l65 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l217 argc^0 i^0 s^0)
(l216 argc^post i^post s^post)
:guard
(and
(and (and (<= -1 (+ 0 i^0)) (= i^post -4)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l217 argc^0 i^0 s^0)
(l218 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) -2) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l62 argc^0 i^0 s^0)
(l61 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l219 argc^0 i^0 s^0)
(l218 argc^post i^post s^post)
:guard
(and
(and (and (<= -2 (+ 0 i^0)) (= i^post -3)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l219 argc^0 i^0 s^0)
(l220 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) -2) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l221 argc^0 i^0 s^0)
(l220 argc^post i^post s^post)
:guard
(and
(and (and (<= -1 (+ 0 i^0)) (= i^post -3)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l221 argc^0 i^0 s^0)
(l222 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) -2) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l223 argc^0 i^0 s^0)
(l222 argc^post i^post s^post)
:guard
(and
(and (and (<= -2 (+ 0 i^0)) (= i^post -3)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l223 argc^0 i^0 s^0)
(l224 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) -2) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l58 argc^0 i^0 s^0)
(l57 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l14 argc^0 i^0 s^0)
(l12 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l225 argc^0 i^0 s^0)
(l224 argc^post i^post s^post)
:guard
(and
(and (and (<= 3 (+ 0 i^0)) (= i^post -3)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l225 argc^0 i^0 s^0)
(l226 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) 2) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l227 argc^0 i^0 s^0)
(l226 argc^post i^post s^post)
:guard
(and
(and (and (<= 2 (+ 0 i^0)) (= i^post 1)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l227 argc^0 i^0 s^0)
(l228 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) 2) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l56 argc^0 i^0 s^0)
(l55 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l229 argc^0 i^0 s^0)
(l228 argc^post i^post s^post)
:guard
(and
(and (and (<= 3 (+ 0 i^0)) (= i^post 1)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l229 argc^0 i^0 s^0)
(l230 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) 2) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l231 argc^0 i^0 s^0)
(l230 argc^post i^post s^post)
:guard
(and
(and (and (<= 2 (+ 0 i^0)) (= i^post 1)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l231 argc^0 i^0 s^0)
(l232 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) 2) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l52 argc^0 i^0 s^0)
(l51 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l233 argc^0 i^0 s^0)
(l232 argc^post i^post s^post)
:guard
(and
(and (and (<= 4 (+ 0 i^0)) (= i^post 1)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l233 argc^0 i^0 s^0)
(l234 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) 3) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l50 argc^0 i^0 s^0)
(l49 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l235 argc^0 i^0 s^0)
(l234 argc^post i^post s^post)
:guard
(and
(and (and (<= 3 (+ 0 i^0)) (= i^post 0)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l235 argc^0 i^0 s^0)
(l236 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) 3) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l237 argc^0 i^0 s^0)
(l236 argc^post i^post s^post)
:guard
(and
(and (and (<= 4 (+ 0 i^0)) (= i^post 0)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l237 argc^0 i^0 s^0)
(l238 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 0 i^0) 3) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l239 argc^0 i^0 s^0)
(l238 argc^post i^post s^post)
:guard
(and
(and (and (<= 3 (+ 0 i^0)) (= i^post 0)) (= argc^0 argc^post))
(= s^0 s^post))
)

(rule
(l239 argc^0 i^0 s^0)
(l240 argc^post i^post s^post)
:guard
(and
(and
(and (<= (+ 1 i^0) 3) (= s^post (+ (+ 0 i^0) s^0)))
(= i^post (+ 1 i^0)))
(= argc^0 argc^post))
)

(rule
(l240 argc^0 i^0 s^0)
(l239 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l46 argc^0 i^0 s^0)
(l45 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l238 argc^0 i^0 s^0)
(l237 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l236 argc^0 i^0 s^0)
(l235 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l234 argc^0 i^0 s^0)
(l233 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l232 argc^0 i^0 s^0)
(l231 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l230 argc^0 i^0 s^0)
(l229 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l228 argc^0 i^0 s^0)
(l227 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l226 argc^0 i^0 s^0)
(l225 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l224 argc^0 i^0 s^0)
(l223 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l44 argc^0 i^0 s^0)
(l43 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l222 argc^0 i^0 s^0)
(l221 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l220 argc^0 i^0 s^0)
(l219 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l218 argc^0 i^0 s^0)
(l217 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l216 argc^0 i^0 s^0)
(l215 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l214 argc^0 i^0 s^0)
(l213 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l212 argc^0 i^0 s^0)
(l211 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l210 argc^0 i^0 s^0)
(l209 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l208 argc^0 i^0 s^0)
(l207 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l42 argc^0 i^0 s^0)
(l41 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l206 argc^0 i^0 s^0)
(l205 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l204 argc^0 i^0 s^0)
(l203 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l202 argc^0 i^0 s^0)
(l201 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l200 argc^0 i^0 s^0)
(l199 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l198 argc^0 i^0 s^0)
(l197 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l196 argc^0 i^0 s^0)
(l195 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l194 argc^0 i^0 s^0)
(l193 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l192 argc^0 i^0 s^0)
(l191 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l38 argc^0 i^0 s^0)
(l37 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l190 argc^0 i^0 s^0)
(l189 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l188 argc^0 i^0 s^0)
(l187 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l186 argc^0 i^0 s^0)
(l185 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l184 argc^0 i^0 s^0)
(l183 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l182 argc^0 i^0 s^0)
(l181 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l180 argc^0 i^0 s^0)
(l179 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l178 argc^0 i^0 s^0)
(l177 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l176 argc^0 i^0 s^0)
(l175 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l174 argc^0 i^0 s^0)
(l173 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l172 argc^0 i^0 s^0)
(l171 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l170 argc^0 i^0 s^0)
(l169 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l168 argc^0 i^0 s^0)
(l167 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l166 argc^0 i^0 s^0)
(l165 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l164 argc^0 i^0 s^0)
(l163 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l162 argc^0 i^0 s^0)
(l161 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l160 argc^0 i^0 s^0)
(l159 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l34 argc^0 i^0 s^0)
(l33 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

(rule
(l241 argc^0 i^0 s^0)
(l240 argc^post i^post s^post)
:guard
(and (and (= s^post 0) (= argc^post 2)) (= i^post 0)))

(rule
(l242 argc^0 i^0 s^0)
(l241 argc^post i^post s^post)
:guard
(and (and (= argc^0 argc^post) (= i^0 i^post)) (= s^0 s^post)))

