(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int Int Int))
(fun l5 (-> Int Int Int Int Int Int Int))
(fun l6 (-> Int Int Int Int Int Int Int))
(fun l7 (-> Int Int Int Int Int Int Int))
(entrypoint l7)
(rule
(l0 a^0 b^0 c^0 d^0 e^0 sum^0)
(l1 a^post b^post c^post d^post e^post sum^post)
:guard
(and
(and
(and
(and
(and (and (= a^post a^post) (= b^post b^post)) (= c^post c^post))
(= d^post d^post))
(= e^post e^post))
(<= 1 (+ (+ (+ (+ (+ 0 a^post) b^post) c^post) d^post) e^post)))
(= sum^post (+ (+ (+ (+ (+ 0 a^post) b^post) c^post) d^post) e^post)))
)
(rule
(l1 a^0 b^0 c^0 d^0 e^0 sum^0)
(l2 a^post b^post c^post d^post e^post sum^post)
:guard
(and
(and
(and
(and
(and
(and (<= (+ 1 e^0) 0) (= e^post (+ 0 (* -1 e^0))))
(= d^post (+ (+ 0 d^0) (* -1 e^post))))
(= a^post (+ (+ 0 a^0) (* -1 e^post))))
(= b^0 b^post))
(= c^0 c^post))
(= sum^0 sum^post))
)
(rule
(l2 a^0 b^0 c^0 d^0 e^0 sum^0)
(l1 a^post b^post c^post d^post e^post sum^post)
:guard
(and
(and
(and
(and (and (= a^0 a^post) (= b^0 b^post)) (= c^0 c^post))
(= d^0 d^post))
(= e^0 e^post))
(= sum^0 sum^post))
)
(rule
(l1 a^0 b^0 c^0 d^0 e^0 sum^0)
(l3 a^post b^post c^post d^post e^post sum^post)
:guard
(and
(and
(and
(and
(and
(and (<= (+ 1 d^0) 0) (= d^post (+ 0 (* -1 d^0))))
(= c^post (+ (+ 0 c^0) (* -1 d^post))))
(= e^post (+ (+ 0 (* -1 d^post)) e^0)))
(= a^0 a^post))
(= b^0 b^post))
(= sum^0 sum^post))
)
(rule
(l3 a^0 b^0 c^0 d^0 e^0 sum^0)
(l1 a^post b^post c^post d^post e^post sum^post)
:guard
(and
(and
(and
(and (and (= a^0 a^post) (= b^0 b^post)) (= c^0 c^post))
(= d^0 d^post))
(= e^0 e^post))
(= sum^0 sum^post))
)
(rule
(l1 a^0 b^0 c^0 d^0 e^0 sum^0)
(l4 a^post b^post c^post d^post e^post sum^post)
:guard
(and
(and
(and
(and
(and
(and (<= (+ 1 c^0) 0) (= c^post (+ 0 (* -1 c^0))))
(= b^post (+ (+ 0 b^0) (* -1 c^post))))
(= d^post (+ (+ 0 (* -1 c^post)) d^0)))
(= a^0 a^post))
(= e^0 e^post))
(= sum^0 sum^post))
)
(rule
(l4 a^0 b^0 c^0 d^0 e^0 sum^0)
(l1 a^post b^post c^post d^post e^post sum^post)
:guard
(and
(and
(and
(and (and (= a^0 a^post) (= b^0 b^post)) (= c^0 c^post))
(= d^0 d^post))
(= e^0 e^post))
(= sum^0 sum^post))
)
(rule
(l1 a^0 b^0 c^0 d^0 e^0 sum^0)
(l5 a^post b^post c^post d^post e^post sum^post)
:guard
(and
(and
(and
(and
(and
(and (<= (+ 1 b^0) 0) (= b^post (+ 0 (* -1 b^0))))
(= a^post (+ (+ 0 a^0) (* -1 b^post))))
(= c^post (+ (+ 0 (* -1 b^post)) c^0)))
(= d^0 d^post))
(= e^0 e^post))
(= sum^0 sum^post))
)
(rule
(l5 a^0 b^0 c^0 d^0 e^0 sum^0)
(l1 a^post b^post c^post d^post e^post sum^post)
:guard
(and
(and
(and
(and (and (= a^0 a^post) (= b^0 b^post)) (= c^0 c^post))
(= d^0 d^post))
(= e^0 e^post))
(= sum^0 sum^post))
)
(rule
(l1 a^0 b^0 c^0 d^0 e^0 sum^0)
(l6 a^post b^post c^post d^post e^post sum^post)
:guard
(and
(and
(and
(and
(and
(and (<= (+ 1 a^0) 0) (= a^post (+ 0 (* -1 a^0))))
(= b^post (+ (+ 0 (* -1 a^post)) b^0)))
(= e^post (+ (+ 0 (* -1 a^post)) e^0)))
(= c^0 c^post))
(= d^0 d^post))
(= sum^0 sum^post))
)
(rule
(l6 a^0 b^0 c^0 d^0 e^0 sum^0)
(l1 a^post b^post c^post d^post e^post sum^post)
:guard
(and
(and
(and
(and (and (= a^0 a^post) (= b^0 b^post)) (= c^0 c^post))
(= d^0 d^post))
(= e^0 e^post))
(= sum^0 sum^post))
)
(rule
(l7 a^0 b^0 c^0 d^0 e^0 sum^0)
(l0 a^post b^post c^post d^post e^post sum^post)
:guard
(and
(and
(and
(and (and (= a^0 a^post) (= b^0 b^post)) (= c^0 c^post))
(= d^0 d^post))
(= e^0 e^post))
(= sum^0 sum^post))
)
