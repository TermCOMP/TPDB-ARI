(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int Int))
(entrypoint l4)
(rule
(l0 ___patmp1^0 ___patmp2^0 k_208^0 k_243^0 len_263^0)
(l1 ___patmp1^post ___patmp2^post k_208^post k_243^post len_263^post)
:guard
(and
(and
(and
(and
(and
(and (<= 0 (+ 0 k_208^0)) (= ___patmp1^post 1))
(= ___patmp2^post (+ 0 k_208^0)))
(= len_263^post (+ 0 ___patmp1^post)))
(= k_243^post (+ 0 ___patmp2^post)))
(<= 0 (+ -1 k_243^post)))
(= k_208^0 k_208^post))
)

(rule
(l2 ___patmp1^0 ___patmp2^0 k_208^0 k_243^0 len_263^0)
(l3 ___patmp1^post ___patmp2^post k_208^post k_243^post len_263^post)
:guard
(and
(and
(and
(and (= ___patmp1^0 ___patmp1^post) (= ___patmp2^0 ___patmp2^post))
(= k_208^0 k_208^post))
(= k_243^0 k_243^post))
(= len_263^0 len_263^post))
)

(rule
(l4 ___patmp1^0 ___patmp2^0 k_208^0 k_243^0 len_263^0)
(l0 ___patmp1^post ___patmp2^post k_208^post k_243^post len_263^post)
:guard
(and
(and
(and
(and (= ___patmp1^0 ___patmp1^post) (= ___patmp2^0 ___patmp2^post))
(= k_208^0 k_208^post))
(= k_243^0 k_243^post))
(= len_263^0 len_263^post))
)

