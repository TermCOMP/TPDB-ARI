(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int))
(entrypoint l4)
(rule
(l0 a^0 x^0 y^0 z^0)
(l1 a^post x^post y^post z^post)
:guard
(and
(and
(and (and (<= 1 (+ 0 x^0)) (= x^post (+ -1 x^0))) (= a^0 a^post))
(= y^0 y^post))
(= z^0 z^post))
)
(rule
(l1 a^0 x^0 y^0 z^0)
(l0 a^post x^post y^post z^post)
:guard
(and
(and (and (= a^0 a^post) (= x^0 x^post)) (= y^0 y^post))
(= z^0 z^post))
)
(rule
(l0 a^0 x^0 y^0 z^0)
(l2 a^post x^post y^post z^post)
:guard
(and
(and
(and
(and (<= 1 (+ 0 x^0)) (= x^post (+ (+ 0 x^0) y^0)))
(= y^post (+ (+ 0 y^0) z^0)))
(= z^post (+ (+ 0 a^0) z^0)))
(= a^post (+ -1 a^0)))
)
(rule
(l2 a^0 x^0 y^0 z^0)
(l0 a^post x^post y^post z^post)
:guard
(and
(and (and (= a^0 a^post) (= x^0 x^post)) (= y^0 y^post))
(= z^0 z^post))
)
(rule
(l3 a^0 x^0 y^0 z^0)
(l0 a^post x^post y^post z^post)
:guard
(and
(and (and (= a^0 a^post) (= x^0 x^post)) (= y^0 y^post))
(= z^0 z^post))
)
(rule
(l4 a^0 x^0 y^0 z^0)
(l3 a^post x^post y^post z^post)
:guard
(and
(and (and (= a^0 a^post) (= x^0 x^post)) (= y^0 y^post))
(= z^0 z^post))
)
