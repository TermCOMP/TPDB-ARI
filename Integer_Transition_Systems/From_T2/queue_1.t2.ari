(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int))
(fun l1 (-> Int Int Int Int))
(fun l10 (-> Int Int Int Int))
(fun l11 (-> Int Int Int Int))
(fun l12 (-> Int Int Int Int))
(fun l13 (-> Int Int Int Int))
(fun l14 (-> Int Int Int Int))
(fun l15 (-> Int Int Int Int))
(fun l16 (-> Int Int Int Int))
(fun l17 (-> Int Int Int Int))
(fun l18 (-> Int Int Int Int))
(fun l2 (-> Int Int Int Int))
(fun l3 (-> Int Int Int Int))
(fun l4 (-> Int Int Int Int))
(fun l5 (-> Int Int Int Int))
(fun l6 (-> Int Int Int Int))
(fun l7 (-> Int Int Int Int))
(fun l8 (-> Int Int Int Int))
(fun l9 (-> Int Int Int Int))
(entrypoint l18)
(rule
(l0 i2^0 i^0 r^0)
(l1 i2^post i^post r^post)
:guard
(and
(and (and (<= 1 (+ 0 i^0)) (= i^post 0)) (= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l0 i2^0 i^0 r^0)
(l2 i2^post i^post r^post)
:guard
(and
(and (and (<= (+ 1 i^0) 1) (= i2^post (+ 0 i^0))) (= i^0 i^post))
(= r^0 r^post))
)
(rule
(l3 i2^0 i^0 r^0)
(l1 i2^post i^post r^post)
:guard
(and (and (= i^post (+ 1 i^0)) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l4 i2^0 i^0 r^0)
(l5 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l5 i2^0 i^0 r^0)
(l3 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l6 i2^0 i^0 r^0)
(l0 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l7 i2^0 i^0 r^0)
(l4 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l7 i2^0 i^0 r^0)
(l4 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l7 i2^0 i^0 r^0)
(l5 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l8 i2^0 i^0 r^0)
(l7 i2^post i^post r^post)
:guard
(and (and (= r^post r^post) (= i^0 i^post)) (= i2^0 i2^post)))
(rule
(l9 i2^0 i^0 r^0)
(l8 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l9 i2^0 i^0 r^0)
(l3 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l9 i2^0 i^0 r^0)
(l8 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l10 i2^0 i^0 r^0)
(l11 i2^post i^post r^post)
:guard
(and
(and (and (<= 1 (+ 0 i^0)) (= i^0 i^post)) (= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l10 i2^0 i^0 r^0)
(l9 i2^post i^post r^post)
:guard
(and
(and (and (<= (+ 1 i^0) 1) (= i^0 i^post)) (= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l12 i2^0 i^0 r^0)
(l6 i2^post i^post r^post)
:guard
(and (and (= i^post (+ 1 i^0)) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l1 i2^0 i^0 r^0)
(l10 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l13 i2^0 i^0 r^0)
(l14 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l14 i2^0 i^0 r^0)
(l12 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l15 i2^0 i^0 r^0)
(l13 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l15 i2^0 i^0 r^0)
(l13 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l15 i2^0 i^0 r^0)
(l14 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l16 i2^0 i^0 r^0)
(l15 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l2 i2^0 i^0 r^0)
(l16 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l2 i2^0 i^0 r^0)
(l12 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l2 i2^0 i^0 r^0)
(l16 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
(rule
(l17 i2^0 i^0 r^0)
(l6 i2^post i^post r^post)
:guard
(exists
((i^1 Int))
(and (and (and (= i^1 0) (= i^post 0)) (= i2^0 i2^post)) (= r^0 r^post)))
)
(rule
(l18 i2^0 i^0 r^0)
(l17 i2^post i^post r^post)
:guard
(and (and (= i^0 i^post) (= i2^0 i2^post)) (= r^0 r^post)))
