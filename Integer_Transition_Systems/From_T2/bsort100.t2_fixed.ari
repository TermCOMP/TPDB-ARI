(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int Int Int Int))
(fun l10 (-> Int Int Int Int Int Int Int Int))
(fun l11 (-> Int Int Int Int Int Int Int Int))
(fun l12 (-> Int Int Int Int Int Int Int Int))
(fun l13 (-> Int Int Int Int Int Int Int Int))
(fun l14 (-> Int Int Int Int Int Int Int Int))
(fun l15 (-> Int Int Int Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int Int Int Int))
(fun l5 (-> Int Int Int Int Int Int Int Int))
(fun l6 (-> Int Int Int Int Int Int Int Int))
(fun l7 (-> Int Int Int Int Int Int Int Int))
(fun l8 (-> Int Int Int Int Int Int Int Int))
(fun l9 (-> Int Int Int Int Int Int Int Int))
(entrypoint l15)
(rule
(l0 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l1
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and (and (<= 101 (+ 0 Index2^0)) (= Sorted5^post 0)) (= i8^post 1))
(= Index2^0 Index2^post))
(= Index7^0 Index7^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
)

(rule
(l0 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l2
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ 0 Index2^0) 100) (= Index2^post (+ 1 Index2^0)))
(= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l2 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l0
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and (= Index2^0 Index2^post) (= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l3 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l4
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and (= Index2^0 Index2^post) (= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l5 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l3
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and (= Index2^0 Index2^post) (= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l6 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l7
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and (= Index2^0 Index2^post) (= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l7 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l1
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and
(and
(and (<= (+ 0 Sorted5^0) 0) (<= 0 (+ 0 Sorted5^0)))
(= i8^post (+ 1 i8^0)))
(= Index2^0 Index2^post))
(= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
)

(rule
(l7 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l5
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= 1 (+ 0 Sorted5^0)) (= Index2^0 Index2^post))
(= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l7 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l5
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ 1 Sorted5^0) 0) (= Index2^0 Index2^post))
(= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l8 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l9
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and (= Index7^post (+ 1 Index7^0)) (= Index2^0 Index2^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l1 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l10
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and (= Index2^0 Index2^post) (= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l11 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l8
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and (= Temp6^post Temp6^post) (= Sorted5^post 0))
(= Index2^0 Index2^post))
(= Index7^0 Index7^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l11 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l8
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and (= Index2^0 Index2^post) (= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l12 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l11
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ 0 Index7^0) (+ 100 (* -1 i8^0))) (= Index2^0 Index2^post))
(= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l12 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l6
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ 101 (* -1 i8^0)) (+ 0 Index7^0)) (= Index2^0 Index2^post))
(= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l13 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l6
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= 100 (+ 0 Index7^0)) (= Index2^0 Index2^post))
(= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l13 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l12
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= (+ 0 Index7^0) 99) (= Index2^0 Index2^post))
(= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l9 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l13
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and (= Index2^0 Index2^post) (= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l10 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l3
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and
(and (<= 100 (+ 0 i8^0)) (= Index2^0 Index2^post))
(= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l10 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l9
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and (and (<= (+ 0 i8^0) 99) (= Sorted5^post 1)) (= Index7^post 1))
(= Index2^0 Index2^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

(rule
(l14 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l2
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and (= factor^post -1) (= fact3^post (+ 0 factor^post)))
(= Index2^post 1))
(= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= i8^0 i8^post))
)

(rule
(l15 Index2^0 Index7^0 Sorted5^0 Temp6^0 fact3^0 factor^0 i8^0)
(l14
Index2^post
Index7^post
Sorted5^post
Temp6^post
fact3^post
factor^post
i8^post)
:guard
(and
(and
(and
(and
(and
(and (= Index2^0 Index2^post) (= Index7^0 Index7^post))
(= Sorted5^0 Sorted5^post))
(= Temp6^0 Temp6^post))
(= fact3^0 fact3^post))
(= factor^0 factor^post))
(= i8^0 i8^post))
)

