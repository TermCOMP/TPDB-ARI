(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int Int Int))
(fun l5 (-> Int Int Int Int Int Int Int))
(fun l6 (-> Int Int Int Int Int Int Int))
(entrypoint l6)
(rule
(l0 retp^0 retpp^0 rho^0 rhop^0 x^0 xp^0)
(l1 retp^post retpp^post rho^post rhop^post x^post xp^post)
:guard
(and
(and
(and
(and
(and
(and (<= 1 (+ 0 rhop^0)) (= xp^post (+ 1 xp^0)))
(= retp^0 retp^post))
(= retpp^0 retpp^post))
(= rho^0 rho^post))
(= rhop^0 rhop^post))
(= x^0 x^post))
)
(rule
(l0 retp^0 retpp^0 rho^0 rhop^0 x^0 xp^0)
(l1 retp^post retpp^post rho^post rhop^post x^post xp^post)
:guard
(and
(and
(and
(and
(and
(and (<= (+ 0 rhop^0) 0) (= xp^post (+ -1 xp^0)))
(= retp^0 retp^post))
(= retpp^0 retpp^post))
(= rho^0 rho^post))
(= rhop^0 rhop^post))
(= x^0 x^post))
)
(rule
(l2 retp^0 retpp^0 rho^0 rhop^0 x^0 xp^0)
(l3 retp^post retpp^post rho^post rhop^post x^post xp^post)
:guard
(and
(and
(and
(and
(and (and (<= (+ 0 retpp^0) 0) (= retp^post 0)) (= retpp^0 retpp^post))
(= rho^0 rho^post))
(= rhop^0 rhop^post))
(= x^0 x^post))
(= xp^0 xp^post))
)
(rule
(l2 retp^0 retpp^0 rho^0 rhop^0 x^0 xp^0)
(l3 retp^post retpp^post rho^post rhop^post x^post xp^post)
:guard
(and
(and
(and
(and (and (= retp^post 1) (= retpp^0 retpp^post)) (= rho^0 rho^post))
(= rhop^0 rhop^post))
(= x^0 x^post))
(= xp^0 xp^post))
)
(rule
(l2 retp^0 retpp^0 rho^0 rhop^0 x^0 xp^0)
(l0 retp^post retpp^post rho^post rhop^post x^post xp^post)
:guard
(and
(and
(and
(and
(and
(and (= rhop^post rhop^post) (<= 1 (+ 0 rhop^post)))
(= retp^0 retp^post))
(= retpp^0 retpp^post))
(= rho^0 rho^post))
(= x^0 x^post))
(= xp^0 xp^post))
)
(rule
(l1 retp^0 retpp^0 rho^0 rhop^0 x^0 xp^0)
(l2 retp^post retpp^post rho^post rhop^post x^post xp^post)
:guard
(and
(and
(and
(and
(and (and (<= (+ 0 xp^0) 1) (= retpp^post 0)) (= retp^0 retp^post))
(= rho^0 rho^post))
(= rhop^0 rhop^post))
(= x^0 x^post))
(= xp^0 xp^post))
)
(rule
(l1 retp^0 retpp^0 rho^0 rhop^0 x^0 xp^0)
(l2 retp^post retpp^post rho^post rhop^post x^post xp^post)
:guard
(and
(and
(and
(and
(and (and (<= 2 (+ 0 xp^0)) (= retpp^post 1)) (= retp^0 retp^post))
(= rho^0 rho^post))
(= rhop^0 rhop^post))
(= x^0 x^post))
(= xp^0 xp^post))
)
(rule
(l4 retp^0 retpp^0 rho^0 rhop^0 x^0 xp^0)
(l1 retp^post retpp^post rho^post rhop^post x^post xp^post)
:guard
(and
(and
(and
(and
(and (= x^post 2) (= xp^post (+ 0 x^post)))
(= rhop^post (+ 0 rho^0)))
(= retp^0 retp^post))
(= retpp^0 retpp^post))
(= rho^0 rho^post))
)
(rule
(l3 retp^0 retpp^0 rho^0 rhop^0 x^0 xp^0)
(l5 retp^post retpp^post rho^post rhop^post x^post xp^post)
:guard
(and
(and
(and
(and
(and
(and (<= (+ 0 retp^0) 0) (= retp^0 retp^post))
(= retpp^0 retpp^post))
(= rho^0 rho^post))
(= rhop^0 rhop^post))
(= x^0 x^post))
(= xp^0 xp^post))
)
(rule
(l6 retp^0 retpp^0 rho^0 rhop^0 x^0 xp^0)
(l4 retp^post retpp^post rho^post rhop^post x^post xp^post)
:guard
(and
(and
(and
(and (and (= retp^0 retp^post) (= retpp^0 retpp^post)) (= rho^0 rho^post))
(= rhop^0 rhop^post))
(= x^0 x^post))
(= xp^0 xp^post))
)
