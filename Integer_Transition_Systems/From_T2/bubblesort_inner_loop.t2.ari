(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int))
(fun l5 (-> Int Int Int Int Int))
(fun l6 (-> Int Int Int Int Int))
(fun l7 (-> Int Int Int Int Int))
(fun l8 (-> Int Int Int Int Int))
(entrypoint l8)
(rule
(l0 j^0 tmp3^0 x1^0 y2^0)
(l1 j^post tmp3^post x1^post y2^post)
:guard
(and
(and
(and (= x1^post (+ 0 j^0)) (= y2^post (+ 1 j^0)))
(= tmp3^post tmp3^post))
(= j^0 j^post))
)

(rule
(l0 j^0 tmp3^0 x1^0 y2^0)
(l1 j^post tmp3^post x1^post y2^post)
:guard
(and
(and (and (= j^0 j^post) (= tmp3^0 tmp3^post)) (= x1^0 x1^post))
(= y2^0 y2^post))
)

(rule
(l2 j^0 tmp3^0 x1^0 y2^0)
(l3 j^post tmp3^post x1^post y2^post)
:guard
(and
(and
(and (and (<= 4 (+ 0 j^0)) (= j^0 j^post)) (= tmp3^0 tmp3^post))
(= x1^0 x1^post))
(= y2^0 y2^post))
)

(rule
(l2 j^0 tmp3^0 x1^0 y2^0)
(l0 j^post tmp3^post x1^post y2^post)
:guard
(and
(and
(and (and (<= (+ 1 j^0) 4) (= j^0 j^post)) (= tmp3^0 tmp3^post))
(= x1^0 x1^post))
(= y2^0 y2^post))
)

(rule
(l4 j^0 tmp3^0 x1^0 y2^0)
(l5 j^post tmp3^post x1^post y2^post)
:guard
(and
(and (and (= j^0 j^post) (= tmp3^0 tmp3^post)) (= x1^0 x1^post))
(= y2^0 y2^post))
)

(rule
(l6 j^0 tmp3^0 x1^0 y2^0)
(l2 j^post tmp3^post x1^post y2^post)
:guard
(and
(and (and (= j^0 j^post) (= tmp3^0 tmp3^post)) (= x1^0 x1^post))
(= y2^0 y2^post))
)

(rule
(l3 j^0 tmp3^0 x1^0 y2^0)
(l4 j^post tmp3^post x1^post y2^post)
:guard
(and
(and (and (= j^0 j^post) (= tmp3^0 tmp3^post)) (= x1^0 x1^post))
(= y2^0 y2^post))
)

(rule
(l3 j^0 tmp3^0 x1^0 y2^0)
(l4 j^post tmp3^post x1^post y2^post)
:guard
(and
(and (and (= j^0 j^post) (= tmp3^0 tmp3^post)) (= x1^0 x1^post))
(= y2^0 y2^post))
)

(rule
(l1 j^0 tmp3^0 x1^0 y2^0)
(l6 j^post tmp3^post x1^post y2^post)
:guard
(and
(and (and (= j^post (+ 1 j^0)) (= tmp3^0 tmp3^post)) (= x1^0 x1^post))
(= y2^0 y2^post))
)

(rule
(l7 j^0 tmp3^0 x1^0 y2^0)
(l6 j^post tmp3^post x1^post y2^post)
:guard
(and
(and (and (= j^post 0) (= tmp3^0 tmp3^post)) (= x1^0 x1^post))
(= y2^0 y2^post))
)

(rule
(l8 j^0 tmp3^0 x1^0 y2^0)
(l7 j^post tmp3^post x1^post y2^post)
:guard
(and
(and (and (= j^0 j^post) (= tmp3^0 tmp3^post)) (= x1^0 x1^post))
(= y2^0 y2^post))
)

