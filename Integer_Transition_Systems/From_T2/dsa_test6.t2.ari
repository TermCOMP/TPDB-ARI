(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int))
(fun l1 (-> Int Int Int Int))
(fun l2 (-> Int Int Int Int))
(fun l3 (-> Int Int Int Int))
(fun l4 (-> Int Int Int Int))
(entrypoint l4)
(rule
(l0 __const_10^0 i4^0 tmp^0)
(l1 __const_10^post i4^post tmp^post)
:guard
(and
(and
(and (<= (+ 0 __const_10^0) (+ 0 i4^0)) (= __const_10^0 __const_10^post))
(= i4^0 i4^post))
(= tmp^0 tmp^post))
)

(rule
(l0 __const_10^0 i4^0 tmp^0)
(l2 __const_10^post i4^post tmp^post)
:guard
(and
(and
(and (<= (+ 1 i4^0) (+ 0 __const_10^0)) (= i4^post (+ 1 i4^0)))
(= __const_10^0 __const_10^post))
(= tmp^0 tmp^post))
)

(rule
(l2 __const_10^0 i4^0 tmp^0)
(l0 __const_10^post i4^post tmp^post)
:guard
(and
(and (= __const_10^0 __const_10^post) (= i4^0 i4^post))
(= tmp^0 tmp^post))
)

(rule
(l3 __const_10^0 i4^0 tmp^0)
(l2 __const_10^post i4^post tmp^post)
:guard
(and
(and (= tmp^post tmp^post) (= i4^post 0))
(= __const_10^0 __const_10^post))
)

(rule
(l4 __const_10^0 i4^0 tmp^0)
(l3 __const_10^post i4^post tmp^post)
:guard
(and
(and (= __const_10^0 __const_10^post) (= i4^0 i4^post))
(= tmp^0 tmp^post))
)

