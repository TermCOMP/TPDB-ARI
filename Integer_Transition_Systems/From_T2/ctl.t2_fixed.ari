(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int))
(fun l10 (-> Int Int Int Int Int))
(fun l11 (-> Int Int Int Int Int))
(fun l12 (-> Int Int Int Int Int))
(fun l13 (-> Int Int Int Int Int))
(fun l14 (-> Int Int Int Int Int))
(fun l15 (-> Int Int Int Int Int))
(fun l16 (-> Int Int Int Int Int))
(fun l17 (-> Int Int Int Int Int))
(fun l18 (-> Int Int Int Int Int))
(fun l19 (-> Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int))
(fun l20 (-> Int Int Int Int Int))
(fun l21 (-> Int Int Int Int Int))
(fun l22 (-> Int Int Int Int Int))
(fun l23 (-> Int Int Int Int Int))
(fun l24 (-> Int Int Int Int Int))
(fun l25 (-> Int Int Int Int Int))
(fun l26 (-> Int Int Int Int Int))
(fun l27 (-> Int Int Int Int Int))
(fun l28 (-> Int Int Int Int Int))
(fun l29 (-> Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int))
(fun l30 (-> Int Int Int Int Int))
(fun l31 (-> Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int))
(fun l5 (-> Int Int Int Int Int))
(fun l6 (-> Int Int Int Int Int))
(fun l7 (-> Int Int Int Int Int))
(fun l8 (-> Int Int Int Int Int))
(fun l9 (-> Int Int Int Int Int))
(entrypoint l31)
(rule
(l0 r0^0 r^0 x1^0 x^0)
(l1 r0^post r^post x1^post x^post)
:guard
(and
(and
(and
(and (and (<= (+ 0 r0^0) 0) (<= 0 (+ 0 r0^0))) (= r^0 r^post))
(= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l2 r0^0 r^0 x1^0 x^0)
(l3 r0^post r^post x1^post x^post)
:guard
(and
(and
(and
(and (and (<= (+ 0 r^0) 1) (<= 1 (+ 0 r^0))) (= r^0 r^post))
(= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l4 r0^0 r^0 x1^0 x^0)
(l3 r0^post r^post x1^post x^post)
:guard
(and
(and
(and
(and (and (<= (+ 0 r^0) 1) (<= 1 (+ 0 r^0))) (= r^0 r^post))
(= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l5 r0^0 r^0 x1^0 x^0)
(l3 r0^post r^post x1^post x^post)
:guard
(and
(and
(and
(and (and (<= (+ 0 r^0) 1) (<= 1 (+ 0 r^0))) (= r^0 r^post))
(= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l6 r0^0 r^0 x1^0 x^0)
(l7 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= x1^post (+ 0 x^0)) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
)
(rule
(l6 r0^0 r^0 x1^0 x^0)
(l8 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^0 r^post) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l8 r0^0 r^0 x1^0 x^0)
(l6 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^0 r^post) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l6 r0^0 r^0 x1^0 x^0)
(l3 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^0 r^post) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l7 r0^0 r^0 x1^0 x^0)
(l9 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= (+ 1 x1^0) 2) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l7 r0^0 r^0 x1^0 x^0)
(l9 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= 3 (+ 0 x1^0)) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l9 r0^0 r^0 x1^0 x^0)
(l2 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 0) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l7 r0^0 r^0 x1^0 x^0)
(l2 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 1) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l7 r0^0 r^0 x1^0 x^0)
(l10 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^0 r^post) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l10 r0^0 r^0 x1^0 x^0)
(l7 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^0 r^post) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l11 r0^0 r^0 x1^0 x^0)
(l12 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= (+ 1 x1^0) 2) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l11 r0^0 r^0 x1^0 x^0)
(l12 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= 3 (+ 0 x1^0)) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l12 r0^0 r^0 x1^0 x^0)
(l4 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 0) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l11 r0^0 r^0 x1^0 x^0)
(l4 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 1) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l11 r0^0 r^0 x1^0 x^0)
(l13 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^0 r^post) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l13 r0^0 r^0 x1^0 x^0)
(l11 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^0 r^post) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l14 r0^0 r^0 x1^0 x^0)
(l15 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= (+ 1 x1^0) 2) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l14 r0^0 r^0 x1^0 x^0)
(l15 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= 3 (+ 0 x1^0)) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l15 r0^0 r^0 x1^0 x^0)
(l5 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 0) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l14 r0^0 r^0 x1^0 x^0)
(l5 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 1) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l14 r0^0 r^0 x1^0 x^0)
(l16 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^0 r^post) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l16 r0^0 r^0 x1^0 x^0)
(l14 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^0 r^post) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l17 r0^0 r^0 x1^0 x^0)
(l18 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= (+ 1 x1^0) 2) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l17 r0^0 r^0 x1^0 x^0)
(l18 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= 3 (+ 0 x1^0)) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l18 r0^0 r^0 x1^0 x^0)
(l2 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 0) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l17 r0^0 r^0 x1^0 x^0)
(l2 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 1) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l17 r0^0 r^0 x1^0 x^0)
(l7 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= x^post 2) (= r^0 r^post)) (= r0^0 r0^post))
(= x1^0 x1^post))
)
(rule
(l19 r0^0 r^0 x1^0 x^0)
(l20 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= (+ 1 x1^0) 2) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l19 r0^0 r^0 x1^0 x^0)
(l20 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= 3 (+ 0 x1^0)) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l20 r0^0 r^0 x1^0 x^0)
(l4 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 0) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l19 r0^0 r^0 x1^0 x^0)
(l4 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 1) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l19 r0^0 r^0 x1^0 x^0)
(l11 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= x^post 2) (= r^0 r^post)) (= r0^0 r0^post))
(= x1^0 x1^post))
)
(rule
(l21 r0^0 r^0 x1^0 x^0)
(l22 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= (+ 1 x1^0) 2) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l21 r0^0 r^0 x1^0 x^0)
(l22 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= 3 (+ 0 x1^0)) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l22 r0^0 r^0 x1^0 x^0)
(l5 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 0) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l21 r0^0 r^0 x1^0 x^0)
(l5 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 1) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l21 r0^0 r^0 x1^0 x^0)
(l14 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= x^post 2) (= r^0 r^post)) (= r0^0 r0^post))
(= x1^0 x1^post))
)
(rule
(l23 r0^0 r^0 x1^0 x^0)
(l24 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= (+ 1 x1^0) 2) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l23 r0^0 r^0 x1^0 x^0)
(l24 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= 3 (+ 0 x1^0)) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l24 r0^0 r^0 x1^0 x^0)
(l2 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 0) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l23 r0^0 r^0 x1^0 x^0)
(l2 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 1) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l23 r0^0 r^0 x1^0 x^0)
(l17 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= x^post 1) (= r^0 r^post)) (= r0^0 r0^post))
(= x1^0 x1^post))
)
(rule
(l25 r0^0 r^0 x1^0 x^0)
(l26 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= (+ 1 x1^0) 2) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l25 r0^0 r^0 x1^0 x^0)
(l26 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= 3 (+ 0 x1^0)) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l26 r0^0 r^0 x1^0 x^0)
(l4 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 0) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l25 r0^0 r^0 x1^0 x^0)
(l4 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 1) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l25 r0^0 r^0 x1^0 x^0)
(l19 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= x^post 1) (= r^0 r^post)) (= r0^0 r0^post))
(= x1^0 x1^post))
)
(rule
(l27 r0^0 r^0 x1^0 x^0)
(l28 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= (+ 1 x1^0) 2) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l27 r0^0 r^0 x1^0 x^0)
(l28 r0^post r^post x1^post x^post)
:guard
(and
(and
(and (and (<= 3 (+ 0 x1^0)) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l28 r0^0 r^0 x1^0 x^0)
(l5 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 0) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l27 r0^0 r^0 x1^0 x^0)
(l5 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^post 1) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l27 r0^0 r^0 x1^0 x^0)
(l21 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= x^post 1) (= r^0 r^post)) (= r0^0 r0^post))
(= x1^0 x1^post))
)
(rule
(l29 r0^0 r^0 x1^0 x^0)
(l19 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= x1^post (+ 0 x^0)) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
)
(rule
(l29 r0^0 r^0 x1^0 x^0)
(l6 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= x^post 2) (= r^0 r^post)) (= r0^0 r0^post))
(= x1^0 x1^post))
)
(rule
(l29 r0^0 r^0 x1^0 x^0)
(l3 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^0 r^post) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l30 r0^0 r^0 x1^0 x^0)
(l27 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= x1^post (+ 0 x^0)) (= r^0 r^post)) (= r0^0 r0^post))
(= x^0 x^post))
)
(rule
(l30 r0^0 r^0 x1^0 x^0)
(l29 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= x^post 1) (= r^0 r^post)) (= r0^0 r0^post))
(= x1^0 x1^post))
)
(rule
(l30 r0^0 r^0 x1^0 x^0)
(l3 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^0 r^post) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
(rule
(l31 r0^0 r^0 x1^0 x^0)
(l30 r0^post r^post x1^post x^post)
:guard
(and
(and (and (= r^0 r^post) (= r0^0 r0^post)) (= x^0 x^post))
(= x1^0 x1^post))
)
