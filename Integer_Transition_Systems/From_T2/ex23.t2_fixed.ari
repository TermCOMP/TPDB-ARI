(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int))
(fun l1 (-> Int Int Int Int))
(fun l2 (-> Int Int Int Int))
(fun l3 (-> Int Int Int Int))
(fun l4 (-> Int Int Int Int))
(fun l5 (-> Int Int Int Int))
(entrypoint l5)
(rule
(l0 counter^0 y^0 z^0)
(l1 counter^post y^post z^post)
:guard
(and
(and
(and (<= 36 (+ 0 counter^0)) (= counter^0 counter^post))
(= y^0 y^post))
(= z^0 z^post))
)

(rule
(l0 counter^0 y^0 z^0)
(l2 counter^post y^post z^post)
:guard
(and
(and
(and (<= (+ 1 counter^0) 36) (= z^post (+ 1 z^0)))
(= counter^post (+ 1 counter^0)))
(= y^0 y^post))
)

(rule
(l3 counter^0 y^0 z^0)
(l2 counter^post y^post z^post)
:guard
(and
(and
(and (<= (+ 0 y^0) 127) (= z^post z^post))
(= counter^0 counter^post))
(= y^0 y^post))
)

(rule
(l3 counter^0 y^0 z^0)
(l1 counter^post y^post z^post)
:guard
(and
(and (and (<= 128 (+ 0 y^0)) (= counter^0 counter^post)) (= y^0 y^post))
(= z^0 z^post))
)

(rule
(l2 counter^0 y^0 z^0)
(l0 counter^post y^post z^post)
:guard
(and (and (= counter^0 counter^post) (= y^0 y^post)) (= z^0 z^post)))

(rule
(l4 counter^0 y^0 z^0)
(l3 counter^post y^post z^post)
:guard
(and (and (= counter^post 0) (= y^0 y^post)) (= z^0 z^post)))

(rule
(l5 counter^0 y^0 z^0)
(l4 counter^post y^post z^post)
:guard
(and (and (= counter^0 counter^post) (= y^0 y^post)) (= z^0 z^post)))

