(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int Int))
(fun l1 (-> Int Int Int Int Int))
(fun l10 (-> Int Int Int Int Int))
(fun l11 (-> Int Int Int Int Int))
(fun l12 (-> Int Int Int Int Int))
(fun l13 (-> Int Int Int Int Int))
(fun l14 (-> Int Int Int Int Int))
(fun l15 (-> Int Int Int Int Int))
(fun l16 (-> Int Int Int Int Int))
(fun l17 (-> Int Int Int Int Int))
(fun l18 (-> Int Int Int Int Int))
(fun l2 (-> Int Int Int Int Int))
(fun l3 (-> Int Int Int Int Int))
(fun l4 (-> Int Int Int Int Int))
(fun l5 (-> Int Int Int Int Int))
(fun l6 (-> Int Int Int Int Int))
(fun l7 (-> Int Int Int Int Int))
(fun l8 (-> Int Int Int Int Int))
(fun l9 (-> Int Int Int Int Int))
(entrypoint l18)
(rule
(l0 __const_1000^0 i2^0 i^0 r^0)
(l1 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and
(and (<= (+ 0 __const_1000^0) (+ 0 i^0)) (= i^post 0))
(= __const_1000^0 __const_1000^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l0 __const_1000^0 i2^0 i^0 r^0)
(l2 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and
(and (<= (+ 1 i^0) (+ 0 __const_1000^0)) (= i2^post (+ 0 i^0)))
(= __const_1000^0 __const_1000^post))
(= i^0 i^post))
(= r^0 r^post))
)
(rule
(l3 __const_1000^0 i2^0 i^0 r^0)
(l1 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= i^post (+ 1 i^0)) (= __const_1000^0 __const_1000^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l4 __const_1000^0 i2^0 i^0 r^0)
(l5 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l5 __const_1000^0 i2^0 i^0 r^0)
(l3 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l6 __const_1000^0 i2^0 i^0 r^0)
(l0 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l7 __const_1000^0 i2^0 i^0 r^0)
(l4 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l7 __const_1000^0 i2^0 i^0 r^0)
(l4 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l7 __const_1000^0 i2^0 i^0 r^0)
(l5 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l8 __const_1000^0 i2^0 i^0 r^0)
(l7 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= r^post r^post) (= __const_1000^0 __const_1000^post))
(= i^0 i^post))
(= i2^0 i2^post))
)
(rule
(l9 __const_1000^0 i2^0 i^0 r^0)
(l8 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l9 __const_1000^0 i2^0 i^0 r^0)
(l3 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l9 __const_1000^0 i2^0 i^0 r^0)
(l8 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l10 __const_1000^0 i2^0 i^0 r^0)
(l11 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and
(and
(<= (+ 0 __const_1000^0) (+ 0 i^0))
(= __const_1000^0 __const_1000^post))
(= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l10 __const_1000^0 i2^0 i^0 r^0)
(l9 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and
(and
(<= (+ 1 i^0) (+ 0 __const_1000^0))
(= __const_1000^0 __const_1000^post))
(= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l12 __const_1000^0 i2^0 i^0 r^0)
(l6 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= i^post (+ 1 i^0)) (= __const_1000^0 __const_1000^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l1 __const_1000^0 i2^0 i^0 r^0)
(l10 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l13 __const_1000^0 i2^0 i^0 r^0)
(l14 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l14 __const_1000^0 i2^0 i^0 r^0)
(l12 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l15 __const_1000^0 i2^0 i^0 r^0)
(l13 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l15 __const_1000^0 i2^0 i^0 r^0)
(l13 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l15 __const_1000^0 i2^0 i^0 r^0)
(l14 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l16 __const_1000^0 i2^0 i^0 r^0)
(l15 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l2 __const_1000^0 i2^0 i^0 r^0)
(l16 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l2 __const_1000^0 i2^0 i^0 r^0)
(l12 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l2 __const_1000^0 i2^0 i^0 r^0)
(l16 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
(rule
(l17 __const_1000^0 i2^0 i^0 r^0)
(l6 __const_1000^post i2^post i^post r^post)
:guard
(exists
((i^1 Int))
(and
(and
(and (and (= i^1 0) (= i^post 0)) (= __const_1000^0 __const_1000^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
)
(rule
(l18 __const_1000^0 i2^0 i^0 r^0)
(l17 __const_1000^post i2^post i^post r^post)
:guard
(and
(and
(and (= __const_1000^0 __const_1000^post) (= i^0 i^post))
(= i2^0 i2^post))
(= r^0 r^post))
)
