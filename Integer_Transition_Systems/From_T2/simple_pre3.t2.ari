(format LCTRS)
(theory Ints)
(fun l0 (-> Int Int Int Int))
(fun l1 (-> Int Int Int Int))
(fun l2 (-> Int Int Int Int))
(fun l3 (-> Int Int Int Int))
(fun l4 (-> Int Int Int Int))
(fun l5 (-> Int Int Int Int))
(fun l6 (-> Int Int Int Int))
(entrypoint l6)
(rule
(l0 a^0 ret_returnOne3^0 tmp^0)
(l1 a^post ret_returnOne3^post tmp^post)
:guard
(and
(and
(and (<= 3 (+ 0 a^0)) (= a^0 a^post))
(= ret_returnOne3^0 ret_returnOne3^post))
(= tmp^0 tmp^post))
)
(rule
(l0 a^0 ret_returnOne3^0 tmp^0)
(l1 a^post ret_returnOne3^post tmp^post)
:guard
(and
(and
(and (<= (+ 1 a^0) 2) (= a^0 a^post))
(= ret_returnOne3^0 ret_returnOne3^post))
(= tmp^0 tmp^post))
)
(rule
(l0 a^0 ret_returnOne3^0 tmp^0)
(l2 a^post ret_returnOne3^post tmp^post)
:guard
(and
(and
(and (and (<= (+ 0 a^0) 2) (<= 2 (+ 0 a^0))) (= tmp^post 1))
(= a^0 a^post))
(= ret_returnOne3^0 ret_returnOne3^post))
)
(rule
(l2 a^0 ret_returnOne3^0 tmp^0)
(l3 a^post ret_returnOne3^post tmp^post)
:guard
(and
(and (= a^0 a^post) (= ret_returnOne3^0 ret_returnOne3^post))
(= tmp^0 tmp^post))
)
(rule
(l4 a^0 ret_returnOne3^0 tmp^0)
(l0 a^post ret_returnOne3^post tmp^post)
:guard
(and
(and
(and (<= 2 (+ 0 a^0)) (= a^0 a^post))
(= ret_returnOne3^0 ret_returnOne3^post))
(= tmp^0 tmp^post))
)
(rule
(l4 a^0 ret_returnOne3^0 tmp^0)
(l0 a^post ret_returnOne3^post tmp^post)
:guard
(and
(and
(and (<= (+ 1 a^0) 1) (= a^0 a^post))
(= ret_returnOne3^0 ret_returnOne3^post))
(= tmp^0 tmp^post))
)
(rule
(l4 a^0 ret_returnOne3^0 tmp^0)
(l2 a^post ret_returnOne3^post tmp^post)
:guard
(and
(and
(and (and (<= (+ 0 a^0) 1) (<= 1 (+ 0 a^0))) (= tmp^post 1))
(= a^0 a^post))
(= ret_returnOne3^0 ret_returnOne3^post))
)
(rule
(l1 a^0 ret_returnOne3^0 tmp^0)
(l2 a^post ret_returnOne3^post tmp^post)
:guard
(and
(and (= tmp^post 0) (= a^0 a^post))
(= ret_returnOne3^0 ret_returnOne3^post))
)
(rule
(l5 a^0 ret_returnOne3^0 tmp^0)
(l4 a^post ret_returnOne3^post tmp^post)
:guard
(exists
((a^1 Int))
(and
(and
(and (= a^1 -1) (= ret_returnOne3^post 1))
(= a^post (+ 0 ret_returnOne3^post)))
(= tmp^0 tmp^post))
)
)
(rule
(l6 a^0 ret_returnOne3^0 tmp^0)
(l5 a^post ret_returnOne3^post tmp^post)
:guard
(and
(and (= a^0 a^post) (= ret_returnOne3^0 ret_returnOne3^post))
(= tmp^0 tmp^post))
)
