; @origtpdbfilename ./TRS/CimeAC/sequent_modulo.trs
; @xtcfilename "./TRS_Equational/Mixed_AC/sequent_modulo.xml"
(format ETRS)
(fun substt 2)
(fun ef 1)
(fun substf 2)
(fun Pe 1)
(fun neg 1)
(fun and 2)
(fun or 2)
(fun imp 2)
(fun forall 1)
(fun . 2)
(fun |1| 0)
(fun ron 2)
(fun shift 0)
(fun exists 1)
(fun id 0)
(fun virg 2 :theory AC)
(fun emptyfset 0)
(fun * 2 :theory AC)
(fun emptysset 0)
(fun sequent 2)
(fun convf 1)
(fun convs 1)
(rule (substt (ef x) y) (ef (substt x y)))
(rule (substf (Pe x) y) (Pe (substt x y)))
(rule (substf (neg f) s) (neg (substf f s)))
(rule (substf (and f g) s) (and (substf f s) (substf g s)))
(rule (substf (or f g) s) (or (substf f s) (substf g s)))
(rule (substf (imp f g) s) (imp (substf f s) (substf g s)))
(rule (substf (forall f) s) (forall (substf f (. |1| (ron s shift)))))
(rule (substf (exists f) s) (exists (substf f (. |1| (ron s shift)))))
(rule (substt x id) x)
(rule (substf f id) f)
(rule (substt (substt x s) t) (substt x (ron s t)))
(rule (substf (substf f s) t) (substf f (ron s t)))
(rule (substt |1| (. x s)) x)
(rule (ron id s) s)
(rule (ron shift (. x s)) s)
(rule (ron (ron s t) u) (ron s (ron t u)))
(rule (ron (. x s) t) (. (substt x t) (ron s t)))
(rule (ron s id) s)
(rule (. |1| shift) id)
(rule (. (substt |1| s) (ron shift s)) s)
(rule (virg emptyfset a) a)
(rule (virg a a) a)
(rule (* emptysset a) a)
(rule (* a a) a)
(rule (neg (neg f)) f)
(rule (and f f) f)
(rule (or f f) f)
(rule (imp f g) (or (neg f) g))
(rule (exists f) (neg (forall (neg f))))
(rule (sequent (virg (convf (neg f)) a) b) (sequent a (virg (convf f) b)))
(rule (sequent (convf (neg f)) b) (sequent emptyfset (virg (convf f) b)))
(rule (sequent a (virg (convf (neg f)) b)) (sequent (virg (convf f) a) b))
(rule (sequent a (convf (neg f))) (sequent (virg (convf f) a) emptyfset))
(rule (sequent (virg (convf (and f g)) a) b) (sequent (virg (convf g) (virg (convf f) a)) b))
(rule (sequent (convf (and f g)) b) (sequent (virg (convf f) (convf g)) b))
(rule (sequent a (virg (convf (or f g)) b)) (sequent a (virg (virg (convf f) (convf g)) b)))
(rule (sequent a (convf (or f g))) (sequent a (virg (convf f) (convf g))))
(rule (convs (sequent a (virg (convf (and f g)) b))) (* (convs (sequent a (virg (convf f) b))) (convs (sequent a (virg (convf g) b)))))
(rule (convs (sequent a (convf (and f g)))) (* (convs (sequent a (convf f))) (convs (sequent a (convf g)))))
(rule (convs (sequent (virg (convf (or f g)) a) b)) (* (convs (sequent (virg (convf f) a) b)) (convs (sequent (virg (convf g) a) b))))
(rule (convs (sequent (convf (or f g)) b)) (* (convs (sequent (convf f) b)) (convs (sequent (convf g) b))))
(rule (convs (sequent (virg (convf f) a) (virg (convf f) b))) emptysset)
(rule (convs (sequent (virg (convf f) a) (convf f))) emptysset)
(rule (convs (sequent (convf f) (virg (convf f) b))) emptysset)
(rule (convs (sequent (convf f) (convf f))) emptysset)
(rule (* (convs (sequent (virg f a) (virg g b))) (convs (sequent a b))) (convs (sequent a b)))
(rule (* (convs (sequent (virg f a) b)) (convs (sequent a b))) (convs (sequent a b)))
(rule (* (convs (sequent a (virg f b))) (convs (sequent a b))) (convs (sequent a b)))
(rule (* (convs (sequent (virg f a) b)) (convs (sequent a emptyfset))) (convs (sequent a emptyfset)))
(rule (* (convs (sequent emptyfset b)) (convs (sequent a (virg f b)))) (convs (sequent emptyfset b)))
(rule (* (convs (sequent emptyfset b)) (convs (sequent a b))) (convs (sequent emptyfset b)))
(rule (* (convs (sequent a emptyfset)) (convs (sequent a b))) (convs (sequent a emptyfset)))
(rule (* (convs (sequent emptyfset emptyfset)) (convs (sequent a b))) (convs (sequent emptyfset emptyfset)))
