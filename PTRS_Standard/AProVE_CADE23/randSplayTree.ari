(format PTRS)
(fun search 3)
(fun node 3)
(fun pair 2)
(fun ifFound 2)
(fun true 0)
(fun splay 3)
(fun nil 0)
(fun notFound 0)
(fun searchAndSplay 2)
(fun noparent 0)
(fun splayInner 3)
(fun z 0)
(fun leaf 0)
(fun or 2)
(fun search 2)
(fun false 0)
(prule (search p x (node x A B)) (((pair p x) :prob 1 )))
(prule (ifFound (pair x y) tree) (((pair true (splay x y tree)) :prob 1 ) ((pair true tree) :prob 1 )))
(prule (search p x nil) ((notFound :prob 1 )))
(prule (searchAndSplay x tree) (((ifFound (search noparent x nil) tree) :prob 1 )))
(prule (splay x y (node x (node y A B) C)) (((node y A (node x B C)) :prob 1 )))
(prule (splay x y (node x A (node y B C))) (((node y (node y A B) C) :prob 1 )))
(prule (splayInner x y (node z A (node x B (node y C D)))) (((node y (node x (node z A B) C) D) :prob 1 )))
(prule (splay x y leaf) ((leaf :prob 1 )))
(prule (splayInner x y (node z A (node x (node y B C) D))) (((node y (node z A B) (node x C D)) :prob 1 )))
(prule (search p x (node y A B)) (((or (search x A) (search x B)) :prob 1 )))
(prule (splayInner x y leaf) ((leaf :prob 1 )))
(prule (or notFound x) ((x :prob 1 )))
(prule (or x notFound) ((x :prob 1 )))
(prule (splay noparent y tree) ((tree :prob 1 )))
(prule (splay x y A) (((splayInner x y A) :prob 1 )))
(prule (splayInner x y (node z A B)) (((node z (splayInner x y A) (splayInner x y B)) :prob 1 )))
(prule (ifFound notFound tree) (((pair false tree) :prob 1 )))
(prule (splayInner x y (node z (node x (node y A B) C) D)) (((node y A (node x B (node z C D))) :prob 1 )))
