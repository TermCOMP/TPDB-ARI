(format PTRS)

(fun addNum 2)
(fun cons 2)
(fun nil 0)
(fun s 1)
(fun createL 1)
(fun len 1)
(fun init 0)
(fun eq 2)
(fun |0| 0)
(fun true 0)
(fun s 1)
(fun false 0)
(fun le 2)
(fun app 2)
(fun nil 0)
(fun cons 2)
(fun min 1)
(fun if_min 2)
(fun rm 2)
(fun if_rm 3)
(fun minsort 2)
(fun if_minsort 3)

(prule (eq |0| |0|) ((true)))
(prule (eq |0| (s x)) ((false)))
(prule (eq (s x) |0|) ((false)))
(prule (eq (s x) (s y)) (((eq x y))))

(prule (le |0| y) ((true)))
(prule (le (s x) |0|) ((false)))
(prule (le (s x) (s y)) (((le x y))))

(prule (app nil y) ((y)))
(prule (app (cons n x) y) (((cons n (app x y)))))

(prule (min (cons n nil)) ((n)))
(prule (min (cons n (cons m x))) (((if_min (le n m) (cons n (cons m x))))))

(prule (if_min true (cons n (cons m x))) (((min (cons n x)))))
(prule (if_min false (cons n (cons m x))) (((min (cons m x)))))

(prule (rm n nil) ((nil)))
(prule (rm n (cons m x)) (((if_rm (eq n m) n (cons m x)))))

(prule (if_rm true n (cons m x)) (((rm n x))))
(prule (if_rm false n (cons m x)) (((cons m (rm n x)))))

(prule (minsort nil nil) ((nil)))
(prule (minsort (cons n x) y) (((if_minsort (eq n (min (cons n x))) (cons n x) y))))

(prule (if_minsort true (cons n x) y) (((cons n (minsort (app (rm n x) y) nil)))))
(prule (if_minsort false (cons n x) y) (((minsort x (cons n y)))))

(prule (addNum x xs) (((cons x xs) :prob 1 ) ((addNum (s x) xs) :prob 1 )))
(prule (createL xs) (((addNum |0| xs) :prob 1 ) ((createL (addNum |0| xs)) :prob 1 )))

(prule init (((minsort (createL nil) nil) :prob 1)))
