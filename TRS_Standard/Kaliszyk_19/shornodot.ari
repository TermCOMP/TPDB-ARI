; @origtpdbfilename shornodot.trs
; @xtcfilename "./TRS_Standard/Kaliszyk_19/shornodot.xml"
(format TRS)
(fun i 2)
(fun realu_div 0)
(fun realu_abs 0)
(fun realu_add 0)
(fun realu_mul 0)
(fun realu_sub 0)
(fun d_ 0)
(fun NUMERAL 0)
(fun BIT1 0)
(fun u_0 0)
(fun BIT0 0)
(fun realu_ofu_num 0)
(fun measure 0)
(fun hull 0)
(fun convex 0)
(fun INSERT 0)
(fun EMPTY 0)
(fun det 0)
(fun s_b_ 0)
(fun a_ 0)
(fun realu_pow 0)
(fun b_s_ 0)
(fun realu_neg 0)
(fun orthogonalu_matrix 0)
(fun vector 0)
(fun CONS 0)
(fun NIL 0)
(fun cross 0)
(fun COND 0)
(fun realu_lt 0)
(fun openu_interval 0)
(fun c_ 0)
(fun closedu_interval 0)
(fun volu_rect 0)
(fun realu_le 0)
(fun rotationu_matrix 0)
(fun infnorm 0)
(fun deltau_x 0)
(fun Im 0)
(fun Re 0)
(fun complex 0)
(fun sqrt 0)
(fun vectoru_norm 0)
(fun csqrt 0)
(fun distance 0)
(fun differentiable 0)
(fun at 0)
(fun jacobian 0)
(fun complexu_differentiable 0)
(fun dot 0)
(fun orthonormal 0)
(fun collinear 0)
(fun cos 0)
(fun angle 0)
(fun scale 0)
(fun sin 0)
(fun rotate2d 0)
(fun vectoru_sub 0)
(fun complexu_inv 0)
(fun w_ 0)
(fun vec 0)
(fun vectoru_angle 0)
(fun p_ 0)
(fun binom 0)
(fun intu_ofu_num 0)
(fun intu_lt 0)
(fun intu_le 0)
(fun intu_mul 0)
(fun azim 0)
(fun volu_frusttu_wedge 0)
(fun vectoru_add 0)
(fun INTER 0)
(fun affine 0)
(fun ball 0)
(fun r_ 0)
(fun realu_inv 0)
(fun openu_segment 0)
(fun cball 0)
(fun closedu_segment 0)
(fun complexu_mul 0)
(fun Cx 0)
(fun csin 0)
(fun complexu_div 0)
(fun ccos 0)
(fun DIFF 0)
(fun UNION 0)
(fun interior 0)
(fun ii 0)
(fun clog 0)
(fun catn 0)
(fun pi 0)
(fun acs 0)
(fun frac 0)
(fun floor 0)
(fun IN 0)
(fun l_a_ 0)
(fun l_ 0)
(fun EXP 0)
(fun volu_conicu_capu_wedge 0)
(fun realu_sgn 0)
(fun intu_neg 0)
(fun intu_sgn 0)
(fun affu_gt 0)
(fun vectoru_neg 0)
(fun volu_ballu_wedge 0)
(fun drop 0)
(fun a_a_g_ 0)
(fun connectedu_component 0)
(fun complexu_pow 0)
(fun cacs 0)
(fun casn 0)
(fun matrix 0)
(fun EVEN 0)
(fun SUBSET 0)
(fun inside 0)
(fun FACT 0)
(fun m_ 0)
(fun asn 0)
(fun bernstein 0)
(fun affineu_dependent 0)
(fun frontier 0)
(fun matrixu_mul 0)
(fun transp 0)
(fun mat 0)
(fun faceu_of 0)
(fun affu_dim 0)
(fun intu_sub 0)
(fun facetu_of 0)
(fun SUC 0)
(fun product 0)
(fun o_o_ 0)
(fun vsum 0)
(fun nsum 0)
(fun sum 0)
(fun cexp 0)
(fun coplanar 0)
(fun exp 0)
(fun rowvector 0)
(fun columnvector 0)
(fun matrixu_vectoru_mul 0)
(fun netord 0)
(fun atreal 0)
(fun arcV 0)
(fun atn 0)
(fun t_ 0)
(fun NUMPAIR 0)
(fun intu_add 0)
(fun intu_pow 0)
(fun r_r_ 0)
(fun cofactor 0)
(fun integer 0)
(fun between 0)
(fun intu_abs 0)
(fun realu_gt 0)
(fun realu_ge 0)
(fun cpow 0)
(fun pastecart 0)
(fun closedu_realu_interval 0)
(fun closedu_realu_segment 0)
(fun DIV 0)
(fun unwinding 0)
(fun hasu_integral 0)
(fun o 0)
(fun lift 0)
(fun hasu_realu_integral 0)
(fun realu_max 0)
(fun realu_min 0)
(fun neutral 0)
(fun support 0)
(fun F 0)
(fun HD 0)
(fun ALL2 0)
(fun TL 0)
(fun continuous 0)
(fun within 0)
(fun real0 0)
(fun IMAGE 0)
(fun realu_continuous 0)
(fun NUMSUM 0)
(fun hasu_vectoru_derivative 0)
(fun hasu_realu_derivative 0)
(fun m_m_g_ 0)
(fun content 0)
(fun DISJOINT 0)
(fun hrealu_add 0)
(fun hrealu_mul 0)
(fun trealu_mul 0)
(fun FINITE 0)
(fun iterate 0)
(fun cnj 0)
(fun CARD 0)
(fun independent 0)
(fun span 0)
(fun Arg 0)
(fun dropout 0)
(fun basis 0)
(fun LENGTH 0)
(fun EL 0)
(fun APPEND 0)
(fun continuousu_on 0)
(fun path 0)
(fun pathu_image 0)
(fun dim 0)
(fun pathfinish 0)
(fun pathstart 0)
(fun homotopicu_loops 0)
(fun sign 0)
(fun swap 0)
(fun rows 0)
(fun dimindex 0)
(fun UNIV 0)
(fun hasu_complexu_derivative 0)
(fun rpow 0)
(fun dihV 0)
(fun evenperm 0)
(fun naddu_eq 0)
(fun naddu_ofu_num 0)
(fun mku_nadd 0)
(fun naddu_rinv 0)
(fun naddu_inv 0)
(fun openu_realu_segment 0)
(fun openu_realu_interval 0)
(fun m_m_m_g_ 0)
(fun homotopicu_with 0)
(fun DELETE 0)
(fun limitu_pointu_of 0)
(fun rotoinversionu_matrix 0)
(fun FILTER 0)
(fun edgeu_of 0)
(fun orthogonal 0)
(fun closure 0)
(fun indicator 0)
(fun relativeu_interior 0)
(fun topspace 0)
(fun closedu_in 0)
(fun openu_in 0)
(fun fstcart 0)
(fun sndcart 0)
(fun mku_finiteu_sum 0)
(fun matrixu_sub 0)
(fun matrixu_add 0)
(fun conv0 0)
(fun volu_conv 0)
(fun CONSTR 0)
(fun RSC 0)
(fun dist 0)
(fun dependent 0)
(fun conic 0)
(fun convexu_cone 0)
(fun tan 0)
(fun trivialu_limit 0)
(fun FST 0)
(fun SND 0)
(fun ASSOC 0)
(fun ODD 0)
(fun divisionu_of 0)
(fun midpoint 0)
(fun ITLIST2 0)
(fun MOD 0)
(fun MAP2 0)
(fun from 0)
(fun equiintegrableu_on 0)
(fun integrableu_on 0)
(fun linepath 0)
(fun pathu_component 0)
(fun realu_ofu_int 0)
(fun simpleu_path 0)
(fun arc 0)
(fun absolutelyu_integrableu_on 0)
(fun absolutelyu_realu_integrableu_on 0)
(fun realu_integrableu_on 0)
(fun subpath 0)
(fun reversepath 0)
(fun CHOICE 0)
(fun REST 0)
(fun vectoru_variation 0)
(fun realu_variation 0)
(fun realu_continuousu_on 0)
(fun uniformlyu_continuousu_on 0)
(fun realu_uniformlyu_continuousu_on 0)
(fun hasu_boundedu_variationu_on 0)
(fun hasu_boundedu_realu_variationu_on 0)
(fun measurableu_on 0)
(fun realu_measurableu_on 0)
(fun I 0)
(fun BUTLAST 0)
(fun ZIP 0)
(fun INJP 0)
(fun INJN 0)
(fun INJA 0)
(fun INJF 0)
(fun ZCONSTR 0)
(fun integral 0)
(fun INJ 0)
(fun SURJ 0)
(fun BIJ 0)
(fun realu_integral 0)
(fun less 0)
(fun kle 0)
(fun PRE 0)
(fun ALL 0)
(fun PAIRWISE 0)
(fun intu_ge 0)
(fun intu_gt 0)
(fun l_a_u_c 0)
(fun l_u_c 0)
(fun a_u_c 0)
(fun PSUBSET 0)
(fun normball 0)
(fun ellipsoid 0)
(fun LAST 0)
(fun setdist 0)
(fun finiteu_index 0)
(fun frustum 0)
(fun frustt 0)
(fun rconeu_gt 0)
(fun conicu_cap 0)
(fun SC 0)
(fun a_a_ 0)
(fun intu_mod 0)
(fun numu_mod 0)
(fun simplex 0)
(fun invertible 0)
(fun affu_ge 0)
(fun negligible 0)
(fun MEM 0)
(fun mku_hreal 0)
(fun naddu_add 0)
(fun naddu_mul 0)
(fun hrealu_le 0)
(fun naddu_le 0)
(fun matrixu_neg 0)
(fun subtopology 0)
(fun euclidean 0)
(fun numu_ofu_int 0)
(fun intu_gcd 0)
(fun numu_gcd 0)
(fun realu_measure 0)
(fun CROSS 0)
(fun homotopicu_paths 0)
(fun complexu_derivative 0)
(fun HASu_SIZE 0)
(fun realu_measurable 0)
(fun hasu_realu_measure 0)
(fun MAP 0)
(fun realu_derivative 0)
(fun realu_differentiable 0)
(fun measurable 0)
(fun hasu_measure 0)
(fun convexu_on 0)
(fun realu_convexu_on 0)
(fun SDIFF 0)
(fun realu_negligible 0)
(fun trealu_le 0)
(fun trealu_eq 0)
(fun closed 0)
(fun open 0)
(fun FCONS 0)
(fun mku_real 0)
(fun trealu_add 0)
(fun ITER 0)
(fun PASSOC 0)
(fun ITLIST 0)
(fun intu_max 0)
(fun intu_min 0)
(fun cone0 0)
(fun solidu_triangle 0)
(fun analyticu_on 0)
(fun RC 0)
(fun p_p_ 0)
(fun permutation 0)
(fun sums 0)
(fun realu_sums 0)
(fun linear 0)
(fun orthogonalu_transformation 0)
(fun outside 0)
(fun EX 0)
(fun INR 0)
(fun p_u_c 0)
(fun INL 0)
(fun hrealu_ofu_num 0)
(fun inf 0)
(fun sup 0)
(fun intu_ofu_real 0)
(fun intu_coprime 0)
(fun numu_coprime 0)
(fun epigraph 0)
(fun shiftpath 0)
(fun COUNTABLE 0)
(fun MAX 0)
(fun MIN 0)
(fun hasu_derivative 0)
(fun frechetu_derivative 0)
(fun affsign 0)
(fun sgnu_ge 0)
(fun cone 0)
(fun netlimit 0)
(fun vectoru_derivative 0)
(fun sgnu_gt 0)
(fun realu_infsum 0)
(fun realu_summable 0)
(fun infsum 0)
(fun summable 0)
(fun higheru_complexu_derivative 0)
(fun rank 0)
(fun REVERSE 0)
(fun UNIONS 0)
(fun INTERS 0)
(fun RELPOW 0)
(fun root 0)
(fun trealu_ofu_num 0)
(fun lifted 0)
(fun SOME 0)
(fun slice 0)
(fun reduced 0)
(fun oneu_REP 0)
(fun oneu_ABS 0)
(fun pairwise 0)
(fun T 0)
(fun topology0 0)
(fun istopology 0)
(fun destu_cart 0)
(fun mku_cart 0)
(fun DECIMAL 0)
(fun atu_infinity 0)
(fun trace 0)
(fun realu_bounded 0)
(fun setu_ofu_list 0)
(fun bounded 0)
(fun intu_divides 0)
(fun numu_divides 0)
(fun inverse 0)
(fun permutes 0)
(fun g_ 0)
(fun g_a_ 0)
(fun INDu_SUC 0)
(fun ctan 0)
(fun REPu_prod 0)
(fun ABSu_prod 0)
(fun mku_pair 0)
(fun u_destu_rec 0)
(fun extremeu_pointu_of 0)
(fun homeomorphic 0)
(fun destu_nadd 0)
(fun isu_nadd 0)
(fun REPLICATE 0)
(fun log 0)
(fun realu_closed 0)
(fun realu_compact 0)
(fun compact 0)
(fun polyhedron 0)
(fun polytope 0)
(fun SETSPEC 0)
(fun UNCURRY 0)
(fun lebesgueu_measurable 0)
(fun TC 0)
(fun RSTC 0)
(fun NULL 0)
(fun mku_num 0)
(fun destu_num 0)
(fun diameter 0)
(fun realu_lebesgueu_measurable 0)
(fun subspace 0)
(fun vectoru_matrixu_mul 0)
(fun rect 0)
(fun atu_neginfinity 0)
(fun atu_posinfinity 0)
(fun trealu_neg 0)
(fun sequentially 0)
(fun euclideanreal 0)
(fun hrealu_inv 0)
(fun NONE 0)
(fun higheru_realu_derivative 0)
(fun realu_open 0)
(fun isu_interval 0)
(fun isu_realinterval 0)
(fun connected 0)
(fun INV 0)
(fun OUTR 0)
(fun exposedu_faceu_of 0)
(fun pad2d3d 0)
(fun STC 0)
(fun INFINITE 0)
(fun RTC 0)
(fun columns 0)
(fun g_a_u_c 0)
(fun OUTL 0)
(fun LET 0)
(fun destu_finiteu_image 0)
(fun mku_net 0)
(fun destu_finiteu_sum 0)
(fun rational 0)
(fun components 0)
(fun rconesgn 0)
(fun rconeu_eq 0)
(fun rconeu_ge 0)
(fun u_mku_rec 0)
(fun ZBOT 0)
(fun BOTTOM 0)
(fun cproduct 0)
(fun INDu_0 0)
(fun GSPEC 0)
(fun sgnu_lt 0)
(fun affu_lt 0)
(fun sgnu_le 0)
(fun affu_le 0)
(fun LETu_END 0)
(rule (i (i realu_div (i realu_abs (i (i realu_add (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i (i realu_sub (i (i d_ c) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_sub (i (i d_ d) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0)))))))) (i (i realu_add (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i realu_sub (i (i d_ c) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_sub (i (i d_ d) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))))) (i (i realu_sub (i (i realu_sub (i (i realu_sub (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_mul (i (i realu_sub (i (i d_ c) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_sub (i (i d_ d) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i (i realu_sub (i (i d_ c) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_sub (i (i d_ d) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i realu_sub (i (i d_ c) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_sub (i (i d_ d) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0))))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_mul (i (i realu_sub (i (i d_ c) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_sub (i (i d_ d) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))))))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 (i BIT1 u_0)))))) (i measure (i (i hull convex) (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) (i (i INSERT d) EMPTY)))))))
(rule (i (i realu_add (i (i realu_mul (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i realu_add (i (i realu_mul (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0)))))) (i (i realu_sub (i (i realu_sub (i (i realu_sub (i (i realu_mul (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i realu_mul (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_mul (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i NUMERAL (i BIT1 (i BIT1 u_0)))))))) (i (i realu_mul (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i realu_mul (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0)))))))) (i det A))
(rule (i (i s_b_ (i (i a_ (i (i realu_add (i (i realu_pow (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i b_s_ (i (i s_b_ (i (i a_ (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i a_ (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_neg (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0))))))) (i (i s_b_ (i (i a_ (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i realu_neg (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i a_ (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0))))))) (i orthogonalu_matrix A))
(rule (i (i s_b_ (i (i a_ (i (i realu_add (i (i realu_pow (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i a_ (i (i realu_add (i (i realu_pow (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_ (i (i realu_add (i (i realu_mul (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i realu_ofu_num (i NUMERAL u_0))))) (i orthogonalu_matrix A))
(rule (i vector (i (i CONS (i (i realu_sub (i (i realu_mul (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_mul (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i CONS (i (i realu_sub (i (i realu_mul (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i (i d_ a) (i NUMERAL (i BIT1 u_0)))) (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i CONS (i (i realu_sub (i (i realu_mul (i (i d_ a) (i NUMERAL (i BIT1 u_0)))) (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT1 u_0)))))) NIL)))) (i (i cross a) b))
(rule (i (i (i COND (i (i s_b_ (i (i realu_lt (i (i d_ a) (i NUMERAL (i BIT1 u_0)))) (i (i d_ b) (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i realu_lt (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_lt (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0)))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0)))))))) (i realu_ofu_num (i NUMERAL u_0))) (i measure (i openu_interval (i (i c_ a) b))))
(rule (i (i (i COND (i (i s_b_ (i (i realu_lt (i (i d_ a) (i NUMERAL (i BIT1 u_0)))) (i (i d_ b) (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i realu_lt (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_lt (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0)))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0)))))))) (i realu_ofu_num (i NUMERAL u_0))) (i measure (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))))
(rule (i (i (i COND (i (i s_b_ (i (i realu_lt (i (i d_ a) (i NUMERAL (i BIT1 u_0)))) (i (i d_ b) (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i realu_lt (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_lt (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0)))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))))) (i realu_ofu_num (i NUMERAL u_0))) (i (i volu_rect a) b))
(rule (i (i (i COND (i (i s_b_ (i (i realu_le (i (i d_ a) (i NUMERAL (i BIT1 u_0)))) (i (i d_ b) (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i realu_le (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_le (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0)))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0)))))))) (i realu_ofu_num (i NUMERAL u_0))) (i measure (i openu_interval (i (i c_ a) b))))
(rule (i (i (i COND (i (i s_b_ (i (i realu_le (i (i d_ a) (i NUMERAL (i BIT1 u_0)))) (i (i d_ b) (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i realu_le (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_le (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0)))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0)))))))) (i realu_ofu_num (i NUMERAL u_0))) (i measure (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))))
(rule (i (i s_b_ (i (i a_ (i (i realu_add (i (i realu_pow (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i a_ (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i a_ (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_neg (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0))))))) (i rotationu_matrix A))
(rule (i (i s_b_ (i (i realu_le (i realu_abs (i (i d_ x) (i NUMERAL (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i realu_le (i realu_abs (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i b_s_ (i (i a_ (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i (i b_s_ (i (i a_ (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i b_s_ (i (i a_ (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i (i a_ (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))))))) (i (i a_ (i infnorm x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i realu_add (i (i realu_mul x1) (i (i realu_mul x4) (i (i realu_add (i realu_neg x1)) (i (i realu_add x2) (i (i realu_add (i (i realu_sub x3) x4)) (i (i realu_add x5) x6))))))) (i (i realu_add (i (i realu_mul x2) (i (i realu_mul x5) (i (i realu_add (i (i realu_sub x1) x2)) (i (i realu_add x3) (i (i realu_add (i (i realu_sub x4) x5)) x6)))))) (i (i realu_sub (i (i realu_sub (i (i realu_sub (i (i realu_sub (i (i realu_mul x3) (i (i realu_mul x6) (i (i realu_add x1) (i (i realu_add (i (i realu_sub x2) x3)) (i (i realu_add x4) (i (i realu_sub x5) x6))))))) (i (i realu_mul x2) (i (i realu_mul x3) x4)))) (i (i realu_mul x1) (i (i realu_mul x3) x5)))) (i (i realu_mul x1) (i (i realu_mul x2) x6)))) (i (i realu_mul x4) (i (i realu_mul x5) x6))))) (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6))
(rule (i (i (i COND (i (i a_ (i Im z)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i (i COND (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Re z))) (i complex (i (i c_ (i sqrt (i Re z))) (i realu_ofu_num (i NUMERAL u_0))))) (i complex (i (i c_ (i realu_ofu_num (i NUMERAL u_0))) (i sqrt (i realu_neg (i Re z))))))) (i complex (i (i c_ (i sqrt (i (i realu_div (i (i realu_add (i vectoru_norm z)) (i Re z))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i (i realu_div (i Im z)) (i realu_abs (i Im z)))) (i sqrt (i (i realu_div (i (i realu_sub (i vectoru_norm z)) (i Re z))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))))) (i csqrt z))
(rule (i (i realu_div (i sqrt (i (i (i (i (i (i deltau_x (i (i realu_pow (i distance (i (i c_ x1) x2))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ x1) x3))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ x1) x4))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ x3) x4))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ x2) x4))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ x2) x3))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))) (i measure (i (i hull convex) (i (i INSERT x1) (i (i INSERT x2) (i (i INSERT x3) (i (i INSERT x4) EMPTY)))))))
(rule (i (i s_b_ (i (i differentiable f) (i at z))) (i (i s_b_ (i (i a_ (i (i d_ (i (i d_ (i (i jacobian f) (i at z))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i d_ (i (i jacobian f) (i at z))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i a_ (i (i d_ (i (i d_ (i (i jacobian f) (i at z))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_neg (i (i d_ (i (i d_ (i (i jacobian f) (i at z))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0))))))) (i (i complexu_differentiable f) (i at z)))
(rule (i (i s_b_ (i (i a_ (i (i dot e1) e1)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i a_ (i (i dot e2) e2)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i a_ (i (i dot e3) e3)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i a_ (i (i dot e1) e2)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i s_b_ (i (i a_ (i (i dot e1) e3)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i s_b_ (i (i a_ (i (i dot e2) e3)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i dot (i (i cross e1) e2)) e3)))))))) (i (i (i orthonormal e1) e2) e3))
(rule (i (i realu_add (i (i realu_mul (i det (i vector (i (i CONS y1) (i (i CONS x2) (i (i CONS x3) NIL)))))) (i det (i vector (i (i CONS x1) (i (i CONS y2) (i (i CONS y3) NIL))))))) (i (i realu_add (i (i realu_mul (i det (i vector (i (i CONS y2) (i (i CONS x2) (i (i CONS x3) NIL)))))) (i det (i vector (i (i CONS y1) (i (i CONS x1) (i (i CONS y3) NIL))))))) (i (i realu_mul (i det (i vector (i (i CONS y3) (i (i CONS x2) (i (i CONS x3) NIL)))))) (i det (i vector (i (i CONS y1) (i (i CONS y2) (i (i CONS x1) NIL)))))))) (i (i realu_mul (i det (i vector (i (i CONS x1) (i (i CONS x2) (i (i CONS x3) NIL)))))) (i det (i vector (i (i CONS y1) (i (i CONS y2) (i (i CONS y3) NIL)))))))
(rule (i (i realu_div (i realu_abs (i (i realu_sub (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_sub (i (i d_ c) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_sub (i (i d_ c) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0)))))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i measure (i (i hull convex) (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY))))))
(rule (i (i (i COND (i (i s_b_ (i (i realu_lt (i (i d_ a) (i NUMERAL (i BIT1 u_0)))) (i (i d_ b) (i NUMERAL (i BIT1 u_0))))) (i (i realu_lt (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i realu_ofu_num (i NUMERAL u_0))) (i measure (i openu_interval (i (i c_ a) b))))
(rule (i (i (i COND (i (i s_b_ (i (i realu_lt (i (i d_ a) (i NUMERAL (i BIT1 u_0)))) (i (i d_ b) (i NUMERAL (i BIT1 u_0))))) (i (i realu_lt (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i realu_ofu_num (i NUMERAL u_0))) (i measure (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))))
(rule (i (i (i COND (i (i s_b_ (i (i realu_le (i (i d_ a) (i NUMERAL (i BIT1 u_0)))) (i (i d_ b) (i NUMERAL (i BIT1 u_0))))) (i (i realu_le (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i realu_ofu_num (i NUMERAL u_0))) (i measure (i openu_interval (i (i c_ a) b))))
(rule (i (i (i COND (i (i s_b_ (i (i realu_le (i (i d_ a) (i NUMERAL (i BIT1 u_0)))) (i (i d_ b) (i NUMERAL (i BIT1 u_0))))) (i (i realu_le (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i realu_ofu_num (i NUMERAL u_0))) (i measure (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))))
(rule (i (i a_ (i (i realu_mul (i (i realu_sub (i (i d_ z) (i NUMERAL (i BIT1 u_0)))) (i (i d_ x) (i NUMERAL (i BIT1 u_0))))) (i (i realu_sub (i (i d_ y) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i (i realu_sub (i (i d_ y) (i NUMERAL (i BIT1 u_0)))) (i (i d_ x) (i NUMERAL (i BIT1 u_0))))) (i (i realu_sub (i (i d_ z) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i collinear (i (i INSERT x) (i (i INSERT y) (i (i INSERT z) EMPTY)))))
(rule (i (i realu_sub (i (i realu_mul (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ (i (i d_ A) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0))))) (i det A))
(rule (i (i realu_sub (i (i realu_add (i (i realu_pow (i distance (i (i c_ A) B))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ A) C))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i distance (i (i c_ A) B))) (i (i realu_mul (i distance (i (i c_ A) C))) (i cos (i angle (i (i c_ B) (i (i c_ A) C)))))))) (i (i realu_pow (i distance (i (i c_ B) C))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i vector (i (i CONS (i (i realu_mul (i (i d_ t) (i NUMERAL (i BIT1 u_0)))) (i (i d_ u) (i NUMERAL (i BIT1 u_0))))) (i (i CONS (i (i realu_mul (i (i d_ t) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ u) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i CONS (i (i realu_mul (i (i d_ t) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ u) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) NIL)))) (i (i scale t) u))
(rule (i vector (i (i CONS (i (i realu_sub (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i cos t))) (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i sin t)))) (i (i CONS (i (i realu_add (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i sin t))) (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i cos t)))) NIL))) (i (i rotate2d t) x))
(rule (i (i (i COND (i (i b_s_ (i (i a_ a) b)) (i (i a_ c) b))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i sqrt (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_pow (i (i realu_div (i (i dot (i (i vectoru_sub a) b)) (i (i vectoru_sub c) b))) (i (i realu_mul (i vectoru_norm (i (i vectoru_sub a) b))) (i vectoru_norm (i (i vectoru_sub c) b))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i sin (i angle (i (i c_ a) (i (i c_ b) c)))))
(rule (i complex (i (i c_ (i (i realu_div (i Re z)) (i (i realu_add (i (i realu_pow (i Re z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i Im z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_div (i realu_neg (i Im z))) (i (i realu_add (i (i realu_pow (i Re z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i Im z)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i complexu_inv z))
(rule (i (i realu_add (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i (i d_ y) (i NUMERAL (i BIT1 u_0))))) (i (i realu_add (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ y) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ y) (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i dot x) y))
(rule (i (i s_b_ (i w_ (i (i a_ A) B))) (i (i s_b_ (i w_ (i (i a_ C) B))) (i (i b_s_ (i (i a_ (i distance (i (i c_ A) B))) (i (i realu_add (i distance (i (i c_ A) C))) (i distance (i (i c_ C) B))))) (i (i a_ (i distance (i (i c_ B) C))) (i (i realu_add (i distance (i (i c_ A) C))) (i distance (i (i c_ A) B))))))) (i (i a_ (i angle (i (i c_ A) (i (i c_ B) C)))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i (i COND (i (i b_s_ (i (i a_ a) b)) (i (i a_ c) b))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_pow (i (i realu_div (i (i dot (i (i vectoru_sub a) b)) (i (i vectoru_sub c) b))) (i (i realu_mul (i vectoru_norm (i (i vectoru_sub a) b))) (i vectoru_norm (i (i vectoru_sub c) b))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_pow (i sin (i angle (i (i c_ a) (i (i c_ b) c))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i (i COND (i (i b_s_ (i (i a_ x) (i vec (i NUMERAL u_0)))) (i (i a_ y) (i vec (i NUMERAL u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i sqrt (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_pow (i (i realu_div (i (i dot x) y)) (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i sin (i (i vectoru_angle x) y)))
(rule (i (i (i COND (i (i a_ k) (i (i p_ n) (i NUMERAL (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul (i (i realu_div (i (i realu_add (i realu_ofu_num n)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_add (i realu_ofu_num n)) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num k))))) (i realu_ofu_num (i binom (i (i c_ n) k))))) (i realu_ofu_num (i binom (i (i c_ (i (i p_ n) (i NUMERAL (i BIT1 u_0)))) k))))
(rule (i (i (i COND (i (i b_s_ (i (i a_ x) (i vec (i NUMERAL u_0)))) (i (i a_ y) (i vec (i NUMERAL u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_pow (i (i realu_div (i (i dot x) y)) (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y)))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_pow (i sin (i (i vectoru_angle x) y))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i b_s_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0)))) (i (i b_s_ (i (i a_ y) (i realu_ofu_num (i NUMERAL u_0)))) (i (i b_s_ (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) x)) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) y))) (i (i s_b_ (i (i realu_lt x) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_lt y) (i realu_ofu_num (i NUMERAL u_0))))))) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_mul x) y)))
(rule (i (i b_s_ (i (i a_ x) (i intu_ofu_num (i NUMERAL u_0)))) (i (i b_s_ (i (i a_ y) (i intu_ofu_num (i NUMERAL u_0)))) (i (i b_s_ (i (i s_b_ (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) x)) (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) y))) (i (i s_b_ (i (i intu_lt x) (i intu_ofu_num (i NUMERAL u_0)))) (i (i intu_lt y) (i intu_ofu_num (i NUMERAL u_0))))))) (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_mul x) y)))
(rule (i (i realu_mul (i (i (i (i azim v0) v1) v2) v3)) (i (i realu_mul (i (i realu_pow h) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i realu_div (i (i realu_sub (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul a) a))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 (i BIT1 u_0)))))))) (i (i (i (i (i (i volu_frusttu_wedge v0) v1) v2) v3) h) a))
(rule (i (i realu_div (i (i realu_sub (i (i realu_add (i (i realu_pow (i vectoru_norm x)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i vectoru_norm y)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_pow (i vectoru_norm (i (i vectoru_sub x) y))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i dot x) y))
(rule (i (i realu_div (i (i realu_sub (i (i realu_sub (i (i realu_pow (i vectoru_norm (i (i vectoru_add x) y))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i vectoru_norm x)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_pow (i vectoru_norm y)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i dot x) y))
(rule (i (i realu_add (i (i realu_mul (i det (i vector (i (i CONS y1) (i (i CONS x2) NIL))))) (i det (i vector (i (i CONS x1) (i (i CONS y2) NIL)))))) (i (i realu_mul (i det (i vector (i (i CONS y2) (i (i CONS x2) NIL))))) (i det (i vector (i (i CONS y1) (i (i CONS x1) NIL)))))) (i (i realu_mul (i det (i vector (i (i CONS x1) (i (i CONS x2) NIL))))) (i det (i vector (i (i CONS y1) (i (i CONS y2) NIL))))))
(rule (i (i INTER (i (i hull affine) (i (i INSERT a) (i (i INSERT b) EMPTY)))) (i ball (i (i c_ (i (i r_ (i realu_inv (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i vectoru_add a) b))) (i (i realu_div (i vectoru_norm (i (i vectoru_sub b) a))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i openu_segment (i (i c_ a) b)))
(rule (i (i INTER (i (i hull affine) (i (i INSERT a) (i (i INSERT b) EMPTY)))) (i cball (i (i c_ (i (i r_ (i realu_inv (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i vectoru_add a) b))) (i (i realu_div (i vectoru_norm (i (i vectoru_sub b) a))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL)))
(rule (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i csin (i (i complexu_div (i (i vectoru_sub w) z)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i ccos (i (i complexu_div (i (i vectoru_add w) z)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i (i vectoru_sub (i csin w)) (i csin z)))
(rule (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i csin (i (i complexu_div (i (i vectoru_add w) z)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i ccos (i (i complexu_div (i (i vectoru_sub w) z)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i (i vectoru_add (i csin w)) (i csin z)))
(rule (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i csin (i (i complexu_div (i (i vectoru_add w) z)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i csin (i (i complexu_div (i (i vectoru_sub z) w)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i (i vectoru_sub (i ccos w)) (i ccos z)))
(rule (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i ccos (i (i complexu_div (i (i vectoru_add w) z)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i ccos (i (i complexu_div (i (i vectoru_sub w) z)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i (i vectoru_add (i ccos w)) (i ccos z)))
(rule (i (i DIFF (i (i hull convex) (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY))))) (i (i UNION (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i (i UNION (i closedu_segment (i (i CONS (i (i c_ b) c)) NIL))) (i closedu_segment (i (i CONS (i (i c_ c) a)) NIL))))) (i interior (i (i hull convex) (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY))))))
(rule (i (i complexu_mul (i (i complexu_div ii) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i clog (i (i complexu_div (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))) (i (i vectoru_add (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))))) (i catn z))
(rule (i (i (i COND (i (i b_s_ (i (i a_ x) (i vec (i NUMERAL u_0)))) (i (i a_ y) (i vec (i NUMERAL u_0))))) (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i acs (i (i realu_div (i (i dot x) y)) (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y))))) (i (i vectoru_angle x) y))
(rule (i (i b_s_ (i (i a_ (i angle (i (i c_ A) (i (i c_ B) C)))) (i angle (i (i c_ Ai_) (i (i c_ Bi_) Ci_))))) (i (i a_ (i angle (i (i c_ A) (i (i c_ B) C)))) (i (i realu_sub pi) (i angle (i (i c_ Ai_) (i (i c_ Bi_) Ci_)))))) (i (i a_ (i sin (i angle (i (i c_ A) (i (i c_ B) C))))) (i sin (i angle (i (i c_ Ai_) (i (i c_ Bi_) Ci_))))))
(rule (i (i (i COND (i (i b_s_ (i (i a_ a) b)) (i (i a_ c) b))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_div (i (i dot (i (i vectoru_sub a) b)) (i (i vectoru_sub c) b))) (i (i realu_mul (i vectoru_norm (i (i vectoru_sub a) b))) (i vectoru_norm (i (i vectoru_sub c) b))))) (i cos (i angle (i (i c_ a) (i (i c_ b) c)))))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i sin (i (i realu_div (i (i realu_add x) y)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i cos (i (i realu_div (i (i realu_sub x) y)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_add (i sin x)) (i sin y)))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i sin (i (i realu_div (i (i realu_sub x) y)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i cos (i (i realu_div (i (i realu_add x) y)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_sub (i sin x)) (i sin y)))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i cos (i (i realu_div (i (i realu_add x) y)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i cos (i (i realu_div (i (i realu_sub x) y)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_add (i cos x)) (i cos y)))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i sin (i (i realu_div (i (i realu_add x) y)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i sin (i (i realu_div (i (i realu_sub y) x)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_sub (i cos x)) (i cos y)))
(rule (i (i s_b_ (i w_ (i (i a_ x) (i vec (i NUMERAL u_0))))) (i (i s_b_ (i w_ (i (i a_ y) (i vec (i NUMERAL u_0))))) (i (i a_ (i (i vectoru_add (i (i r_ (i vectoru_norm x)) y)) (i (i r_ (i vectoru_norm y)) x))) (i vec (i NUMERAL u_0))))) (i (i a_ (i (i vectoru_angle x) y)) pi))
(rule (i (i (i COND (i (i a_ a) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i (i COND (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) a)) (i (i vectoru_angle x) y)) (i (i realu_sub pi) (i (i vectoru_angle x) y)))) (i (i vectoru_angle (i (i r_ a) x)) y))
(rule (i (i (i COND (i (i a_ a) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i (i COND (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) a)) (i (i vectoru_angle x) y)) (i (i realu_sub pi) (i (i vectoru_angle x) y)))) (i (i vectoru_angle x) (i (i r_ a) y)))
(rule (i (i (i COND (i (i realu_lt (i (i realu_add (i frac x)) (i frac y))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_add (i frac x)) (i frac y))) (i (i realu_sub (i (i realu_add (i frac x)) (i frac y))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i frac (i (i realu_add x) y)))
(rule (i (i (i COND (i (i realu_lt (i (i realu_add (i frac x)) (i frac y))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_add (i floor x)) (i floor y))) (i (i realu_add (i (i realu_add (i floor x)) (i floor y))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i floor (i (i realu_add x) y)))
(rule (i (i s_b_ (i (i a_ (i Im x)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i b_s_ (i (i s_b_ (i (i realu_le a) (i Re x))) (i (i realu_le (i Re x)) b))) (i (i s_b_ (i (i realu_le b) (i Re x))) (i (i realu_le (i Re x)) a)))) (i (i IN x) (i closedu_segment (i (i CONS (i (i c_ (i Cx a)) (i Cx b))) NIL))))
(rule (i (i b_s_ (i (i s_b_ (i (i l_a_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) x)) (i (i l_ m) n))) (i (i s_b_ (i (i a_ x) (i NUMERAL u_0))) (i (i s_b_ (i w_ (i (i a_ m) (i NUMERAL u_0)))) (i (i a_ n) (i NUMERAL u_0))))) (i (i l_ (i (i EXP x) m)) (i (i EXP x) n)))
(rule (i (i realu_add (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i (i d_ y) (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ y) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i dot x) y))
(rule (i (i b_s_ (i (i s_b_ (i (i a_ (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) EMPTY)) (i (i a_ (i closedu_interval (i (i CONS (i (i c_ c) d)) NIL))) EMPTY))) (i (i s_b_ (i (i a_ a) c)) (i (i a_ b) d))) (i (i a_ (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i closedu_interval (i (i CONS (i (i c_ c) d)) NIL))))
(rule (i (i realu_mul (i (i (i (i azim v0) v1) v2) v3)) (i (i realu_mul (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) c)) (i (i realu_div (i (i realu_pow r) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i (i (i (i (i volu_conicu_capu_wedge v0) v1) v2) v3) r) c))
(rule (i (i s_b_ (i w_ (i (i a_ A) B))) (i (i s_b_ (i w_ (i (i a_ C) B))) (i (i a_ (i distance (i (i c_ A) C))) (i realu_abs (i (i realu_sub (i distance (i (i c_ A) B))) (i distance (i (i c_ C) B))))))) (i (i a_ (i angle (i (i c_ A) (i (i c_ B) C)))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i (i COND (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i (i COND (i (i realu_lt x) (i realu_ofu_num (i NUMERAL u_0)))) (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL u_0)))) (i realu_sgn x))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Re (i (i complexu_div (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))) (i (i vectoru_add (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))))) (i (i realu_lt (i vectoru_norm z)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i (i COND (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) x)) (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i (i COND (i (i intu_lt x) (i intu_ofu_num (i NUMERAL u_0)))) (i intu_neg (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i intu_ofu_num (i NUMERAL u_0)))) (i intu_sgn x))
(rule (i complex (i (i c_ (i (i realu_sub (i (i realu_mul (i Re w)) (i Re z))) (i (i realu_mul (i Im w)) (i Im z)))) (i (i realu_add (i (i realu_mul (i Re w)) (i Im z))) (i (i realu_mul (i Im w)) (i Re z))))) (i (i complexu_mul w) z))
(rule (i (i s_b_ (i w_ (i (i a_ x) (i vec (i NUMERAL u_0))))) (i (i s_b_ (i w_ (i (i a_ y) (i vec (i NUMERAL u_0))))) (i (i a_ (i vectoru_norm (i (i vectoru_sub x) y))) (i (i realu_add (i vectoru_norm x)) (i vectoru_norm y))))) (i (i a_ (i (i vectoru_angle x) y)) pi))
(rule (i (i (i COND (i (i b_s_ (i (i a_ x) (i vec (i NUMERAL u_0)))) (i (i a_ y) (i vec (i NUMERAL u_0))))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_div (i (i dot x) y)) (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y)))) (i cos (i (i vectoru_angle x) y)))
(rule (i (i s_b_ (i w_ (i (i a_ x) (i vec (i NUMERAL u_0))))) (i (i s_b_ (i w_ (i (i a_ y) (i vec (i NUMERAL u_0))))) (i (i a_ (i vectoru_norm (i (i vectoru_add x) y))) (i (i realu_add (i vectoru_norm x)) (i vectoru_norm y))))) (i (i a_ (i (i vectoru_angle x) y)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i Im (i (i complexu_div (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))) (i (i vectoru_add (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ (i Re z)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i measure (i (i INTER (i ball (i (i c_ (i vec (i NUMERAL u_0))) r))) (i (i affu_gt (i (i INSERT (i vec (i NUMERAL u_0))) EMPTY)) (i (i INSERT (i vectoru_neg v1)) (i (i INSERT (i vectoru_neg v2)) (i (i INSERT (i vectoru_neg v3)) EMPTY)))))) (i measure (i (i INTER (i ball (i (i c_ (i vec (i NUMERAL u_0))) r))) (i (i affu_gt (i (i INSERT (i vec (i NUMERAL u_0))) EMPTY)) (i (i INSERT v1) (i (i INSERT v2) (i (i INSERT v3) EMPTY)))))))
(rule (i (i realu_mul (i (i (i (i azim v0) v1) v2) v3)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div (i (i realu_pow r) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i (i (i (i volu_ballu_wedge v0) v1) v2) v3) r))
(rule (i (i s_b_ (i w_ (i (i a_ A) B))) (i (i s_b_ (i w_ (i (i a_ C) B))) (i (i a_ (i distance (i (i c_ A) C))) (i (i realu_add (i distance (i (i c_ A) B))) (i distance (i (i c_ B) C)))))) (i (i a_ (i angle (i (i c_ A) (i (i c_ B) C)))) pi))
(rule (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_pow (i cos x)) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i cos x))) (i cos (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))) x)))
(rule (i (i b_s_ (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) x)) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) y))) (i (i s_b_ (i (i realu_lt x) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_lt y) (i realu_ofu_num (i NUMERAL u_0))))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_mul x) y)))
(rule (i (i s_b_ (i w_ (i (i a_ x) (i vec (i NUMERAL u_0))))) (i (i s_b_ (i w_ (i (i a_ y) (i vec (i NUMERAL u_0))))) (i (i a_ (i (i r_ (i vectoru_norm x)) y)) (i (i r_ (i vectoru_norm y)) x)))) (i (i a_ (i (i vectoru_angle x) y)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i b_s_ (i (i s_b_ (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) x)) (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) y))) (i (i s_b_ (i (i intu_lt x) (i intu_ofu_num (i NUMERAL u_0)))) (i (i intu_lt y) (i intu_ofu_num (i NUMERAL u_0))))) (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_mul x) y)))
(rule (i (i vectoru_sub (i (i r_ (i det (i vector (i (i CONS w) (i (i CONS x) (i (i CONS z) NIL)))))) y)) (i (i r_ (i det (i vector (i (i CONS w) (i (i CONS x) (i (i CONS y) NIL)))))) z)) (i (i cross (i (i cross w) x)) (i (i cross y) z)))
(rule (i (i b_s_ (i (i s_b_ (i (i realu_lt (i drop b)) (i drop a))) (i (i realu_lt (i drop d)) (i drop c)))) (i (i s_b_ (i (i a_ (i drop a)) (i drop c))) (i (i a_ (i drop b)) (i drop d)))) (i (i a_ (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i closedu_interval (i (i CONS (i (i c_ c) d)) NIL))))
(rule (i (i s_b_ (i (i IN x) (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL)))) (i (i s_b_ (i w_ (i (i a_ x) a))) (i (i s_b_ (i w_ (i (i a_ x) b))) (i w_ (i (i a_ a) b))))) (i (i IN x) (i openu_segment (i (i c_ a) b))))
(rule (i (i (i COND (i (i a_ x) (i NUMERAL u_0))) (i (i a_a_g_ (i (i a_ m) (i NUMERAL u_0))) (i (i a_ n) (i NUMERAL u_0)))) (i (i b_s_ (i (i a_ x) (i NUMERAL (i BIT1 u_0)))) (i (i l_a_ m) n))) (i (i l_a_ (i (i EXP x) m)) (i (i EXP x) n)))
(rule (i (i (i COND (i (i a_ x) (i NUMERAL u_0))) (i (i a_ (i (i a_ m) (i NUMERAL u_0))) (i (i a_ n) (i NUMERAL u_0)))) (i (i b_s_ (i (i a_ x) (i NUMERAL (i BIT1 u_0)))) (i (i a_ m) n))) (i (i a_ (i (i EXP x) m)) (i (i EXP x) n)))
(rule (i (i b_s_ (i (i s_b_ (i w_ (i (i IN x) s0))) (i w_ (i (i IN y) s0)))) (i (i s_b_ (i (i IN x) s0)) (i (i s_b_ (i (i IN y) s0)) (i (i (i connectedu_component s0) x) y)))) (i (i a_ (i (i connectedu_component s0) x)) (i (i connectedu_component s0) y)))
(rule (i (i complexu_mul (i vectoru_neg ii)) (i clog (i (i vectoru_add z) (i (i complexu_mul ii) (i csqrt (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_pow z) (i NUMERAL (i BIT0 (i BIT1 u_0)))))))))) (i cacs z))
(rule (i (i complexu_mul (i vectoru_neg ii)) (i clog (i (i vectoru_add (i (i complexu_mul ii) z)) (i csqrt (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_pow z) (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i casn z))
(rule (i vector (i (i CONS (i vector (i (i CONS (i cos t)) (i (i CONS (i realu_neg (i sin t))) NIL)))) (i (i CONS (i vector (i (i CONS (i sin t)) (i (i CONS (i cos t)) NIL)))) NIL))) (i matrix (i rotate2d t)))
(rule (i (i realu_mul (i (i realu_div (i (i realu_add (i realu_ofu_num p)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_add (i realu_ofu_num k)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i realu_ofu_num (i binom (i (i c_ p) k)))) (i realu_ofu_num (i binom (i (i c_ (i (i p_ p) (i NUMERAL (i BIT1 u_0)))) (i (i p_ k) (i NUMERAL (i BIT1 u_0)))))))
(rule (i (i b_s_ (i (i s_b_ (i (i a_ (i realu_abs x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_a_g_ (i (i realu_lt x) (i realu_ofu_num (i NUMERAL u_0)))) (i EVEN n)))) (i (i a_ n) (i NUMERAL u_0))) (i (i a_ (i (i realu_pow x) n)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i b_s_ (i (i a_ a) b)) (i (i s_b_ (i (i IN a) (i closedu_segment (i (i CONS (i (i c_ c) d)) NIL)))) (i (i IN b) (i closedu_segment (i (i CONS (i (i c_ c) d)) NIL))))) (i (i SUBSET (i openu_segment (i (i c_ a) b))) (i openu_segment (i (i c_ c) d))))
(rule (i (i b_s_ (i (i a_ a) b)) (i (i s_b_ (i (i IN a) (i closedu_segment (i (i CONS (i (i c_ c) d)) NIL)))) (i (i IN b) (i closedu_segment (i (i CONS (i (i c_ c) d)) NIL))))) (i (i SUBSET (i openu_segment (i (i c_ a) b))) (i closedu_segment (i (i CONS (i (i c_ c) d)) NIL))))
(rule (i (i b_s_ (i (i s_b_ (i (i a_ (i openu_interval (i (i c_ a) b))) EMPTY)) (i (i a_ (i openu_interval (i (i c_ c) d))) EMPTY))) (i (i s_b_ (i (i a_ a) c)) (i (i a_ b) d))) (i (i a_ (i openu_interval (i (i c_ a) b))) (i openu_interval (i (i c_ c) d))))
(rule (i inside (i (i UNION (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i (i UNION (i closedu_segment (i (i CONS (i (i c_ b) c)) NIL))) (i closedu_segment (i (i CONS (i (i c_ c) a)) NIL))))) (i interior (i (i hull convex) (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY))))))
(rule (i (i (i COND (i (i l_a_ k) n)) (i (i realu_div (i realu_ofu_num (i FACT n))) (i (i realu_mul (i realu_ofu_num (i FACT (i (i m_ n) k)))) (i realu_ofu_num (i FACT k))))) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i binom (i (i c_ n) k))))
(rule (i (i (i COND (i (i realu_le (i (i vectoru_angle x) y)) (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i vectoru_angle x) y)) (i (i realu_sub pi) (i (i vectoru_angle x) y))) (i asn (i sin (i (i vectoru_angle x) y))))
(rule (i (i b_s_ (i (i a_ (i (i r_ (i vectoru_norm x)) y)) (i (i r_ (i vectoru_norm y)) x))) (i (i a_ (i (i r_ (i vectoru_norm x)) y)) (i (i r_ (i realu_neg (i vectoru_norm y))) x))) (i (i a_ (i realu_abs (i (i dot x) y))) (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y))))
(rule (i (i realu_mul (i realu_ofu_num (i binom (i (i c_ n) k)))) (i (i realu_mul (i (i realu_pow x) k)) (i (i realu_pow (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) x)) (i (i m_ n) k)))) (i (i (i bernstein n) k) x))
(rule (i (i b_s_ (i (i a_ a) b)) (i (i b_s_ (i (i a_ a) c)) (i (i b_s_ (i (i a_ b) c)) (i affineu_dependent (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY))))))) (i collinear (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY)))))
(rule (i (i UNION (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i (i UNION (i closedu_segment (i (i CONS (i (i c_ b) c)) NIL))) (i closedu_segment (i (i CONS (i (i c_ c) a)) NIL)))) (i frontier (i (i hull convex) (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY))))))
(rule (i Im (i clog (i (i vectoru_add z) (i (i complexu_mul ii) (i csqrt (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_pow z) (i NUMERAL (i BIT0 (i BIT1 u_0)))))))))) (i Re (i cacs z)))
(rule (i Im (i clog (i (i vectoru_add (i (i complexu_mul ii) z)) (i csqrt (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_pow z) (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i Re (i casn z)))
(rule (i (i s_b_ (i (i a_ (i (i matrixu_mul (i transp Q)) Q)) (i mat (i NUMERAL (i BIT1 u_0))))) (i (i a_ (i (i matrixu_mul Q) (i transp Q))) (i mat (i NUMERAL (i BIT1 u_0))))) (i orthogonalu_matrix Q))
(rule (i (i s_b_ (i (i faceu_of f) s0)) (i (i s_b_ (i w_ (i (i a_ f) EMPTY))) (i (i a_ (i affu_dim f)) (i (i intu_sub (i affu_dim s0)) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))))) (i (i facetu_of f) s0))
(rule (i (i (i COND (i (i a_ (i openu_interval (i (i c_ a) b))) EMPTY)) EMPTY) (i (i DIFF (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i openu_interval (i (i c_ a) b)))) (i frontier (i openu_interval (i (i c_ a) b))))
(rule (i (i realu_mul (i (i realu_div (i (i realu_sub (i realu_ofu_num n)) (i realu_ofu_num k))) (i (i realu_add (i realu_ofu_num k)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i realu_ofu_num (i binom (i (i c_ n) k)))) (i realu_ofu_num (i binom (i (i c_ n) (i (i p_ k) (i NUMERAL (i BIT1 u_0)))))))
(rule (i (i (i COND (i (i l_a_ m) (i SUC n))) (i (i realu_mul (i (i product (i (i o_o_ m) n)) f)) (i f (i SUC n)))) (i (i product (i (i o_o_ m) n)) f)) (i (i product (i (i o_o_ m) (i SUC n))) f))
(rule (i (i (i COND (i (i l_a_ m) (i SUC n))) (i (i vectoru_add (i (i vsum (i (i o_o_ m) n)) f)) (i f (i SUC n)))) (i (i vsum (i (i o_o_ m) n)) f)) (i (i vsum (i (i o_o_ m) (i SUC n))) f))
(rule (i (i (i COND (i (i l_a_ m) (i SUC n))) (i (i p_ (i (i nsum (i (i o_o_ m) n)) f)) (i f (i SUC n)))) (i (i nsum (i (i o_o_ m) n)) f)) (i (i nsum (i (i o_o_ m) (i SUC n))) f))
(rule (i (i (i COND (i (i l_a_ m) (i SUC n))) (i (i realu_add (i (i sum (i (i o_o_ m) n)) f)) (i f (i SUC n)))) (i (i sum (i (i o_o_ m) n)) f)) (i (i sum (i (i o_o_ m) (i SUC n))) f))
(rule (i (i a_ (i (i realu_add (i (i realu_pow (i Re z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i Im z)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ z) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i complexu_div (i (i vectoru_sub (i cexp (i (i complexu_mul ii) z))) (i cexp (i (i complexu_mul (i vectoru_neg ii)) z)))) (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) ii)) (i csin z))
(rule (i (i a_ (i (i realu_pow (i distance (i (i c_ w) x))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ y) z))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i a_ (i distance (i (i c_ w) x))) (i distance (i (i c_ y) z))))
(rule (i (i b_s_ (i (i s_b_ (i (i a_ a) b)) (i (i a_ c) d))) (i (i a_ (i (i INSERT a) (i (i INSERT b) EMPTY))) (i (i INSERT c) (i (i INSERT d) EMPTY)))) (i (i a_ (i openu_segment (i (i c_ a) b))) (i openu_segment (i (i c_ c) d))))
(rule (i (i a_ (i det (i vector (i (i CONS (i (i vectoru_sub v1) v0)) (i (i CONS (i (i vectoru_sub v2) v0)) (i (i CONS (i (i vectoru_sub v3) v0)) NIL)))))) (i realu_ofu_num (i NUMERAL u_0))) (i coplanar (i (i INSERT v0) (i (i INSERT v1) (i (i INSERT v2) (i (i INSERT v3) EMPTY))))))
(rule (i (i b_s_ (i (i a_ (i angle (i (i c_ A) (i (i c_ B) C)))) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ (i angle (i (i c_ A) (i (i c_ B) C)))) pi)) (i (i a_ (i sin (i angle (i (i c_ A) (i (i c_ B) C))))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i cos x)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i cos (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x)))
(rule (i (i realu_mul (i (i realu_div (i (i realu_add (i exp (i Im z))) (i exp (i realu_neg (i Im z))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i cos (i Re z))) (i Re (i ccos z)))
(rule (i (i realu_mul (i (i realu_div (i (i realu_sub (i exp (i Im z))) (i exp (i realu_neg (i Im z))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i cos (i Re z))) (i Im (i csin z)))
(rule (i (i realu_mul (i (i realu_div (i (i realu_add (i exp (i Im z))) (i exp (i realu_neg (i Im z))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i sin (i Re z))) (i Re (i csin z)))
(rule (i (i realu_mul (i (i realu_div (i (i realu_sub (i exp (i realu_neg (i Im z)))) (i exp (i Im z)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i sin (i Re z))) (i Im (i ccos z)))
(rule (i (i realu_add (i (i realu_pow (i vectoru_norm (i (i cross x) y))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i dot x) y)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i (i COND (i (i realu_le (i drop a)) (i drop b))) (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i closedu_interval (i (i CONS (i (i c_ b) a)) NIL))) (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL)))
(rule (i (i d_ (i (i d_ (i (i matrixu_mul (i rowvector x)) (i (i matrixu_mul (i (i matrixu_mul (i transp A)) B)) (i columnvector y)))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0))) (i (i dot (i (i matrixu_vectoru_mul A) x)) (i (i matrixu_vectoru_mul B) y)))
(rule (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i distance (i (i c_ x) a)))) (i (i realu_le (i distance (i (i c_ x) a))) (i distance (i (i c_ y) a)))) (i (i (i netord (i at a)) x) y))
(rule (i (i b_s_ (i w_ (i (i IN a) s0))) (i (i b_s_ (i w_ (i (i IN b) s0))) (i w_ (i (i a_ (i (i connectedu_component s0) a)) (i (i connectedu_component s0) b))))) (i (i a_ (i (i INTER (i (i connectedu_component s0) a)) (i (i connectedu_component s0) b))) EMPTY))
(rule (i (i s_b_ (i (i IN x) (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL)))) (i (i s_b_ (i w_ (i (i a_ x) a))) (i w_ (i (i a_ x) b)))) (i (i IN x) (i openu_segment (i (i c_ a) b))))
(rule (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i realu_abs (i (i realu_sub x) a)))) (i (i realu_le (i realu_abs (i (i realu_sub x) a))) (i realu_abs (i (i realu_sub y) a)))) (i (i (i netord (i atreal a)) x) y))
(rule (i acs (i (i realu_div (i (i dot (i (i vectoru_sub v) u)) (i (i vectoru_sub w) u))) (i (i realu_mul (i vectoru_norm (i (i vectoru_sub v) u))) (i vectoru_norm (i (i vectoru_sub w) u))))) (i (i (i arcV u) v) w))
(rule (i (i complexu_div (i (i vectoru_add (i cexp (i (i complexu_mul ii) z))) (i cexp (i (i complexu_mul (i vectoru_neg ii)) z)))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i ccos z))
(rule (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i sqrt (i (i realu_add (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i cos (i atn x)))
(rule (i (i t_ (i (i EXP (i NUMERAL (i BIT0 (i BIT1 u_0)))) x)) (i (i p_ (i (i t_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) y)) (i NUMERAL (i BIT1 u_0)))) (i (i NUMPAIR x) y))
(rule (i (i a_ (i (i intu_add (i (i intu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i intu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i intu_ofu_num (i NUMERAL u_0))) (i (i s_b_ (i (i a_ x) (i intu_ofu_num (i NUMERAL u_0)))) (i (i a_ y) (i intu_ofu_num (i NUMERAL u_0)))))
(rule (i (i s_b_ (i w_ (i (i a_ (i det A)) (i realu_ofu_num (i NUMERAL u_0))))) (i (i a_ Ai_) (i (i r_r_ (i realu_inv (i det A))) (i transp (i cofactor A))))) (i (i a_ (i (i matrixu_mul Ai_) A)) (i mat (i NUMERAL (i BIT1 u_0)))))
(rule (i (i a_ (i (i realu_add (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL u_0))) (i (i s_b_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ y) (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i s_b_ (i w_ (i (i a_ (i det A)) (i realu_ofu_num (i NUMERAL u_0))))) (i (i a_ Ai_) (i (i r_r_ (i realu_inv (i det A))) (i transp (i cofactor A))))) (i (i a_ (i (i matrixu_mul A) Ai_)) (i mat (i NUMERAL (i BIT1 u_0)))))
(rule (i (i s_b_ (i integer (i (i realu_sub x) a))) (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) a)) (i (i realu_lt a) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i (i a_ (i frac x)) a))
(rule (i (i s_b_ (i (i IN a) (i closedu_segment (i (i CONS (i (i c_ c) d)) NIL)))) (i (i IN b) (i closedu_segment (i (i CONS (i (i c_ c) d)) NIL)))) (i (i SUBSET (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i closedu_segment (i (i CONS (i (i c_ c) d)) NIL))))
(rule (i (i b_s_ (i (i a_ a) b)) (i (i SUBSET (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i closedu_segment (i (i CONS (i (i c_ c) d)) NIL)))) (i (i SUBSET (i openu_segment (i (i c_ a) b))) (i openu_segment (i (i c_ c) d))))
(rule (i (i b_s_ (i (i a_ (i (i vectoru_angle x) y)) (i (i vectoru_angle w) z))) (i (i a_ (i (i vectoru_angle x) y)) (i (i realu_sub pi) (i (i vectoru_angle w) z)))) (i (i a_ (i sin (i (i vectoru_angle x) y))) (i sin (i (i vectoru_angle w) z))))
(rule (i (i realu_mul (i distance (i (i c_ A) C))) (i (i realu_mul (i distance (i (i c_ B) C))) (i cos (i angle (i (i c_ A) (i (i c_ C) B)))))) (i (i dot (i (i vectoru_sub A) C)) (i (i vectoru_sub B) C)))
(rule (i (i b_s_ (i (i between a) (i (i c_ b) c))) (i (i b_s_ (i (i between b) (i (i c_ c) a))) (i (i between c) (i (i c_ a) b)))) (i collinear (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY)))))
(rule (i (i vectoru_add (i (i cross x) (i (i cross y) z))) (i (i vectoru_add (i (i cross y) (i (i cross z) x))) (i (i cross z) (i (i cross x) y)))) (i vec (i NUMERAL u_0)))
(rule (i (i a_ (i (i dot (i (i vectoru_sub x) a)) (i (i vectoru_sub b) x))) (i (i realu_mul (i vectoru_norm (i (i vectoru_sub x) a))) (i vectoru_norm (i (i vectoru_sub b) x)))) (i (i between x) (i (i c_ a) b)))
(rule (i (i a_ (i (i r_ (i vectoru_norm (i (i vectoru_sub x) a))) (i (i vectoru_sub b) x))) (i (i r_ (i vectoru_norm (i (i vectoru_sub b) x))) (i (i vectoru_sub x) a))) (i (i between x) (i (i c_ a) b)))
(rule (i (i a_ (i (i r_ (i vectoru_norm (i (i vectoru_sub x) y))) (i (i vectoru_sub y) z))) (i (i r_ (i vectoru_norm (i (i vectoru_sub y) z))) (i (i vectoru_sub x) y))) (i (i a_ (i distance (i (i c_ x) z))) (i (i realu_add (i distance (i (i c_ x) y))) (i distance (i (i c_ y) z)))))
(rule (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) d)) (i (i s_b_ (i (i realu_lt (i (i realu_sub x) d)) y)) (i (i realu_lt y) (i (i realu_add x) d)))) (i (i realu_lt (i realu_abs (i (i realu_sub y) x))) d))
(rule (i (i s_b_ (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) d)) (i (i s_b_ (i (i intu_lt (i (i intu_sub x) d)) y)) (i (i intu_lt y) (i (i intu_add x) d)))) (i (i intu_lt (i intu_abs (i (i intu_sub y) x))) d))
(rule (i (i vectoru_add (i t (i NUMERAL (i BIT1 u_0)))) (i (i vectoru_add (i t (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i t (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i vsum (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) t))
(rule (i (i complexu_mul (i Cx (i exp (i Re z)))) (i (i vectoru_add (i Cx (i cos (i Im z)))) (i (i complexu_mul ii) (i Cx (i sin (i Im z)))))) (i cexp z))
(rule (i (i b_s_ (i (i realu_lt a) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_gt (i (i dot x) x)) (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_gt (i vectoru_norm x)) a))
(rule (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) a)) (i (i realu_lt (i (i dot x) x)) (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_lt (i vectoru_norm x)) a))
(rule (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) a)) (i (i realu_lt (i (i dot x) x)) (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_lt (i vectoru_norm x)) a))
(rule (i (i b_s_ (i (i realu_le a) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_ge (i (i dot x) x)) (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_ge (i vectoru_norm x)) a))
(rule (i (i realu_mul (i t (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul (i t (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i t (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i product (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) t))
(rule (i (i realu_add (i t (i NUMERAL (i BIT1 u_0)))) (i (i realu_add (i t (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i t (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i sum (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) t))
(rule (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) a)) (i (i realu_le (i (i dot x) x)) (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_le (i vectoru_norm x)) a))
(rule (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) a)) (i (i a_ (i (i dot x) x)) (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i a_ (i vectoru_norm x)) a))
(rule (i (i complexu_div (i (i vectoru_sub (i ccos (i (i vectoru_sub w) z))) (i ccos (i (i vectoru_add w) z)))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i csin w)) (i csin z)))
(rule (i (i complexu_div (i (i vectoru_add (i ccos (i (i vectoru_sub w) z))) (i ccos (i (i vectoru_add w) z)))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i ccos w)) (i ccos z)))
(rule (i (i (i COND (i (i a_ w) (i Cx (i realu_ofu_num (i NUMERAL u_0))))) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i cexp (i (i complexu_mul z) (i clog w)))) (i (i cpow w) z))
(rule (i (i complexu_div (i (i vectoru_add (i csin (i (i vectoru_add w) z))) (i csin (i (i vectoru_sub w) z)))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i csin w)) (i ccos z)))
(rule (i sqrt (i (i realu_add (i (i realu_pow (i vectoru_norm x)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i vectoru_norm y)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i vectoru_norm (i (i pastecart x) y)))
(rule (i (i a_ (i (i realu_pow (i (i dot x) y)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i (i dot x) x)) (i (i dot y) y))) (i collinear (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT x) (i (i INSERT y) EMPTY)))))
(rule (i (i complexu_div (i (i vectoru_sub (i csin (i (i vectoru_add w) z))) (i csin (i (i vectoru_sub w) z)))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i ccos w)) (i csin z)))
(rule (i (i (i COND (i (i realu_le a) b)) (i closedu_realu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i closedu_realu_interval (i (i CONS (i (i c_ b) a)) NIL))) (i closedu_realu_segment (i (i CONS (i (i c_ a) b)) NIL)))
(rule (i (i t_ (i (i m_ (i (i p_ n) (i NUMERAL (i BIT1 u_0)))) k)) (i binom (i (i c_ (i (i p_ n) (i NUMERAL (i BIT1 u_0)))) k))) (i (i t_ (i (i p_ n) (i NUMERAL (i BIT1 u_0)))) (i binom (i (i c_ n) k))))
(rule (i (i (i COND (i (i l_a_ k) n)) (i (i DIV (i FACT n)) (i (i t_ (i FACT (i (i m_ n) k))) (i FACT k)))) (i NUMERAL u_0)) (i binom (i (i c_ n) k)))
(rule (i sqrt (i (i realu_add (i (i realu_pow (i Re z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i Im z)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i vectoru_norm z))
(rule (i (i complexu_div (i (i vectoru_sub z) (i clog (i cexp z)))) (i (i complexu_mul (i Cx (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) ii)) (i unwinding z))
(rule (i (i (i hasu_integral (i (i o lift) (i (i o f) drop))) (i lift y)) (i closedu_interval (i (i CONS (i (i c_ (i lift a)) (i lift b))) NIL))) (i (i (i hasu_realu_integral f) y) (i closedu_realu_interval (i (i CONS (i (i c_ a) b)) NIL))))
(rule (i closedu_interval (i (i CONS (i (i c_ (i lift (i (i realu_max (i drop a)) (i drop c)))) (i lift (i (i realu_min (i drop b)) (i drop d))))) NIL)) (i (i INTER (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i closedu_interval (i (i CONS (i (i c_ c) d)) NIL))))
(rule (i (i b_s_ (i (i a_ x) a)) (i (i b_s_ (i (i a_ x) b)) (i (i a_ (i angle (i (i c_ a) (i (i c_ x) b)))) pi))) (i (i between x) (i (i c_ a) b)))
(rule (i (i (i COND (i (i a_ (i f x)) (i neutral op))) (i (i (i support op) f) s0)) (i (i INSERT x) (i (i (i support op) f) s0))) (i (i (i support op) f) (i (i INSERT x) s0)))
(rule (i vector (i (i CONS (i (i realu_mul r) (i cos (i (i realu_add t) s0)))) (i (i CONS (i (i realu_mul r) (i sin (i (i realu_add t) s0)))) NIL))) (i (i rotate2d t) (i vector (i (i CONS (i (i realu_mul r) (i cos s0))) (i (i CONS (i (i realu_mul r) (i sin s0))) NIL)))))
(rule (i (i (i COND (i EVEN n)) (i (i b_s_ (i (i a_ n) (i NUMERAL u_0))) (i (i a_ (i realu_abs x)) (i realu_abs y)))) (i (i a_ x) y)) (i (i a_ (i (i realu_pow x) n)) (i (i realu_pow y) n)))
(rule (i (i realu_add (i (i realu_div e) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_div e) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) e)
(rule (i (i realu_sub (i (i realu_pow (i cos x)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i sin x)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i cos (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x)))
(rule (i (i vectoru_sub (i (i complexu_pow (i ccos z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i complexu_pow (i csin z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i ccos (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) z)))
(rule (i (i vectoru_add (i (i complexu_pow (i csin z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i complexu_pow (i ccos z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i (i COND (i (i a_ l2) NIL)) F) (i (i s_b_ (i (i P h1) (i HD l2))) (i (i (i ALL2 P) t1) (i TL l2)))) (i (i (i ALL2 P) (i (i CONS h1) t1)) l2))
(rule (i (i realu_add (i (i realu_pow (i Re z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i Im z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i vectoru_norm z)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i realu_sub (i (i realu_pow (i Re z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i Im z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i Re (i (i complexu_pow z) (i NUMERAL (i BIT0 (i BIT1 u_0))))))
(rule (i (i continuous (i (i o Cx) (i (i o f) Re))) (i (i within (i at (i Cx x))) (i (i INTER real0) (i (i IMAGE Cx) s0)))) (i (i realu_continuous f) (i (i within (i atreal x)) s0)))
(rule (i (i realu_div (i (i realu_sub (i cos (i (i realu_sub x) y))) (i cos (i (i realu_add x) y)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i sin x)) (i sin y)))
(rule (i (i s_b_ (i (i a_ (i (i dot x) y)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ (i (i cross x) y)) (i vec (i NUMERAL u_0)))) (i (i b_s_ (i (i a_ x) (i vec (i NUMERAL u_0)))) (i (i a_ y) (i vec (i NUMERAL u_0)))))
(rule (i (i realu_div (i (i realu_add (i cos (i (i realu_sub x) y))) (i cos (i (i realu_add x) y)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i cos x)) (i cos y)))
(rule (i (i s_b_ (i (i a_ (i intu_abs x)) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_ (i intu_abs y)) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_ (i intu_abs (i (i intu_mul x) y))) (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i realu_div (i (i realu_add (i sin (i (i realu_add x) y))) (i sin (i (i realu_sub x) y)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i sin x)) (i cos y)))
(rule (i (i (i COND (i (i IN a) (i (i hull affine) s0))) (i affu_dim s0)) (i (i intu_add (i affu_dim s0)) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i affu_dim (i (i INSERT a) s0)))
(rule (i (i vectoru_add (i ccos (i (i complexu_mul (i Cx (i realu_ofu_num n))) z))) (i (i complexu_mul ii) (i csin (i (i complexu_mul (i Cx (i realu_ofu_num n))) z)))) (i (i complexu_pow (i (i vectoru_add (i ccos z)) (i (i complexu_mul ii) (i csin z)))) n))
(rule (i (i realu_div (i (i realu_sub (i sin (i (i realu_add x) y))) (i sin (i (i realu_sub x) y)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i cos x)) (i sin y)))
(rule (i (i s_b_ (i (i a_ (i (i dot x) x)) (i (i dot x) y))) (i (i a_ (i (i dot y) y)) (i (i dot x) x))) (i (i a_ x) y))
(rule (i (i (i COND b) (i SUC (i (i t_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) x))) (i (i t_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) x)) (i (i NUMSUM b) x))
(rule (i (i s_b_ (i integer a)) (i (i s_b_ (i (i realu_le a) x)) (i (i realu_lt x) (i (i realu_add a) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))))) (i (i a_ (i floor x)) a))
(rule (i (i realu_add (i (i realu_pow (i sin x)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i cos x)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i (i hasu_vectoru_derivative (i (i o lift) (i (i o f) drop))) (i lift fi_)) (i (i within (i at (i lift x))) (i (i IMAGE lift) s0))) (i (i (i hasu_realu_derivative f) fi_) (i (i within (i atreal x)) s0)))
(rule (i (i s_b_ (i (i (i m_m_g_ f) l) (i (i within (i at x)) s0))) (i (i (i m_m_g_ f) l) (i (i within (i at x)) t))) (i (i (i m_m_g_ f) l) (i (i within (i at x)) (i (i UNION s0) t))))
(rule (i (i a_ (i cos (i angle (i (i c_ a) (i (i c_ b) c))))) (i cos (i angle (i (i c_ ai_) (i (i c_ bi_) ci_))))) (i (i a_ (i angle (i (i c_ a) (i (i c_ b) c)))) (i angle (i (i c_ ai_) (i (i c_ bi_) ci_)))))
(rule (i (i realu_mul (i content (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL)))) (i content (i closedu_interval (i (i CONS (i (i c_ c) d)) NIL)))) (i content (i closedu_interval (i (i CONS (i (i c_ (i (i pastecart a) c)) (i (i pastecart b) d))) NIL))))
(rule (i (i s_b_ (i (i a_ (i openu_interval (i (i c_ a) b))) EMPTY)) (i (i a_ (i closedu_interval (i (i CONS (i (i c_ c) d)) NIL))) EMPTY)) (i (i a_ (i openu_interval (i (i c_ a) b))) (i closedu_interval (i (i CONS (i (i c_ c) d)) NIL))))
(rule (i (i s_b_ (i (i a_ (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) EMPTY)) (i (i a_ (i openu_interval (i (i c_ c) d))) EMPTY)) (i (i a_ (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i openu_interval (i (i c_ c) d))))
(rule (i (i b_s_ (i (i l_ n) p)) (i (i b_s_ (i (i l_ q) m)) (i (i b_s_ (i (i l_ n) m)) (i (i l_ q) p)))) (i (i DISJOINT (i (i o_o_ m) n)) (i (i o_o_ p) q)))
(rule (i (i realu_sub (i (i realu_mul (i (i dot w) y)) (i (i dot x) z))) (i (i realu_mul (i (i dot w) z)) (i (i dot x) y))) (i (i dot (i (i cross w) x)) (i (i cross y) z)))
(rule (i (i c_ (i (i hrealu_add (i (i hrealu_mul x1) x2)) (i (i hrealu_mul y1) y2))) (i (i hrealu_add (i (i hrealu_mul x1) y2)) (i (i hrealu_mul y1) x2))) (i (i trealu_mul (i (i c_ x1) y1)) (i (i c_ x2) y2)))
(rule (i (i s_b_ (i w_ (i (i a_ x) a))) (i (i s_b_ (i w_ (i (i a_ x) b))) (i (i between x) (i (i c_ a) b)))) (i (i a_ (i angle (i (i c_ a) (i (i c_ x) b)))) pi))
(rule (i (i (i COND (i FINITE (i (i (i support op) f) s0))) (i (i (i iterate op) (i (i (i support op) f) s0)) f)) (i neutral op)) (i (i (i iterate op) s0) f))
(rule (i (i s_b_ (i (i IN a) s0)) (i (i s_b_ (i (i IN b) s0)) (i (i a_ (i (i connectedu_component s0) a)) (i (i connectedu_component s0) b)))) (i w_ (i (i a_ (i (i INTER (i (i connectedu_component s0) a)) (i (i connectedu_component s0) b))) EMPTY)))
(rule (i (i complexu_mul (i vectoru_neg ii)) (i (i complexu_div (i (i vectoru_sub z) (i cnj z))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i Cx (i Im z)))
(rule (i (i realu_div x) (i sqrt (i (i realu_add (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i sin (i atn x)))
(rule (i (i s_b_ (i FINITE s0)) (i (i a_ (i affu_dim s0)) (i (i intu_sub (i intu_ofu_num (i CARD s0))) (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i w_ (i affineu_dependent s0)))
(rule (i (i (i COND (i (i a_ n) (i NUMERAL u_0))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i complexu_pow (i Cx (i realu_ofu_num (i NUMERAL u_0)))) n))
(rule (i (i (i m_m_g_ (i (i o f) Re)) a) (i (i within (i at (i Cx x))) (i (i INTER real0) (i (i IMAGE Cx) s0)))) (i (i (i m_m_g_ f) a) (i (i within (i atreal x)) s0)))
(rule (i (i (i COND (i (i a_ z) (i Cx (i realu_ofu_num (i NUMERAL u_0))))) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i complexu_pow z) n)) (i (i cpow z) (i Cx (i realu_ofu_num n))))
(rule (i (i (i COND (i (i IN a) s0)) (i independent s0)) (i (i s_b_ (i independent s0)) (i w_ (i (i IN a) (i span s0))))) (i independent (i (i INSERT a) s0)))
(rule (i (i (i COND (i (i realu_lt (i drop a)) (i drop b))) (i (i realu_sub (i drop b)) (i drop a))) (i realu_ofu_num (i NUMERAL u_0))) (i measure (i openu_interval (i (i c_ a) b))))
(rule (i (i (i COND (i (i realu_lt (i drop a)) (i drop b))) (i (i realu_sub (i drop b)) (i drop a))) (i realu_ofu_num (i NUMERAL u_0))) (i measure (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))))
(rule (i (i (i COND (i (i realu_le (i drop a)) (i drop b))) (i (i realu_sub (i drop b)) (i drop a))) (i realu_ofu_num (i NUMERAL u_0))) (i measure (i openu_interval (i (i c_ a) b))))
(rule (i (i (i COND (i (i realu_le (i drop a)) (i drop b))) (i (i realu_sub (i drop b)) (i drop a))) (i realu_ofu_num (i NUMERAL u_0))) (i measure (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))))
(rule (i (i (i COND (i (i realu_le (i drop a)) (i drop b))) (i openu_interval (i (i c_ a) b))) (i openu_interval (i (i c_ b) a))) (i openu_segment (i (i c_ a) b)))
(rule (i Arg (i (i complexu_div (i (i dropout (i NUMERAL (i BIT1 (i BIT1 u_0)))) y)) (i (i dropout (i NUMERAL (i BIT1 (i BIT1 u_0)))) x))) (i (i (i (i azim (i vec (i NUMERAL u_0))) (i basis (i NUMERAL (i BIT1 (i BIT1 u_0))))) x) y))
(rule (i (i (i COND (i (i l_a_ m) (i SUC n))) (i (i INSERT (i SUC n)) (i (i o_o_ m) n))) (i (i o_o_ m) n)) (i (i o_o_ m) (i SUC n)))
(rule (i collinear (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT (i basis (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i INSERT x) EMPTY)))) (i (i a_ (i (i dropout (i NUMERAL (i BIT1 (i BIT1 u_0)))) x)) (i vec (i NUMERAL u_0))))
(rule (i (i realu_max (i realu_abs (i (i d_ x) (i NUMERAL (i BIT1 u_0))))) (i realu_abs (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i infnorm x))
(rule (i (i (i COND (i (i l_ k) (i LENGTH l))) (i (i EL k) l)) (i (i EL (i (i m_ k) (i LENGTH l))) m)) (i (i EL k) (i (i APPEND l) m)))
(rule (i (i a_ (i distance (i (i c_ a) b))) (i (i realu_add (i distance (i (i c_ a) x))) (i distance (i (i c_ x) b)))) (i (i between x) (i (i c_ a) b)))
(rule (i collinear (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT (i (i vectoru_sub x) y)) (i (i INSERT (i (i vectoru_sub z) y)) EMPTY)))) (i collinear (i (i INSERT x) (i (i INSERT y) (i (i INSERT z) EMPTY)))))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div e) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) e)
(rule (i (i d_ (i vector (i (i CONS x) (i (i CONS y) (i (i CONS z) NIL))))) (i NUMERAL (i BIT1 (i BIT1 u_0)))) z)
(rule (i (i continuousu_on g) (i closedu_interval (i (i CONS (i (i c_ (i vec (i NUMERAL u_0))) (i vec (i NUMERAL (i BIT1 u_0))))) NIL))) (i path g))
(rule (i (i IMAGE g) (i closedu_interval (i (i CONS (i (i c_ (i vec (i NUMERAL u_0))) (i vec (i NUMERAL (i BIT1 u_0))))) NIL))) (i pathu_image g))
(rule (i (i intu_le (i (i intu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i intu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i intu_le (i intu_abs x)) (i intu_abs y)))
(rule (i (i (i COND (i (i IN x) (i span s0))) (i dim s0)) (i (i p_ (i dim s0)) (i NUMERAL (i BIT1 u_0)))) (i dim (i (i INSERT x) s0)))
(rule (i (i realu_le (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_le (i realu_abs x)) (i realu_abs y)))
(rule (i (i complexu_div (i (i complexu_mul a) (i cnj b))) (i (i complexu_pow (i Cx (i vectoru_norm b))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i complexu_div a) b))
(rule (i (i s_b_ (i path p)) (i (i s_b_ (i (i SUBSET (i pathu_image p)) s0)) (i (i a_ (i pathfinish p)) (i pathstart p)))) (i (i (i homotopicu_loops s0) p) p))
(rule (i (i intu_lt (i (i intu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i intu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i intu_lt (i intu_abs x)) (i intu_abs y)))
(rule (i (i realu_lt (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_lt (i realu_abs x)) (i realu_abs y)))
(rule (i (i b_s_ (i (i a_ x) (i Cx (i realu_ofu_num (i NUMERAL u_0))))) (i (i a_ y) (i Cx (i realu_ofu_num (i NUMERAL u_0))))) (i (i a_ (i (i complexu_mul x) y)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i (i COND (i (i a_ a) b)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i sign (i swap (i (i c_ a) b))))
(rule (i (i a_ (i (i intu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i intu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i a_ (i intu_abs x)) (i intu_abs y)))
(rule (i (i a_ (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i a_ (i realu_abs x)) (i realu_abs y)))
(rule (i (i d_ (i (i d_ (i (i matrixu_mul (i rowvector x)) (i columnvector y))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0))) (i (i dot x) y))
(rule (i (i s_b_ (i (i a_ (i (i matrixu_vectoru_mul A) x)) (i vec (i NUMERAL u_0)))) (i (i IN x) (i span (i rows A)))) (i (i a_ x) (i vec (i NUMERAL u_0))))
(rule (i (i (i COND (i (i l_a_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i dimindex UNIV))) EMPTY) (i openu_segment (i (i c_ a) b))) (i interior (i openu_segment (i (i c_ a) b))))
(rule (i (i (i COND (i (i l_a_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i dimindex UNIV))) EMPTY) (i openu_segment (i (i c_ a) b))) (i interior (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))))
(rule (i (i dot b) (i (i vectoru_sub x) (i (i r_ (i (i realu_div (i (i dot b) x)) (i (i dot b) b))) b))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i b_s_ (i (i a_ (i (i vectoru_angle x) y)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ (i (i vectoru_angle x) y)) pi)) (i (i a_ (i sin (i (i vectoru_angle x) y))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i (i hasu_complexu_derivative (i (i o Cx) (i (i o f) Re))) (i Cx fi_)) (i (i within (i at (i Cx a))) real0)) (i (i (i hasu_realu_derivative f) fi_) (i atreal a)))
(rule (i (i d_ (i vector (i (i CONS x) (i (i CONS y) (i (i CONS z) NIL))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))) y)
(rule (i (i (i COND (i (i a_ y) (i realu_ofu_num (i NUMERAL u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i rpow (i realu_ofu_num (i NUMERAL u_0))) y))
(rule (i (i continuous (i (i o lift) (i (i o f) drop))) (i (i within (i at (i lift x))) (i (i IMAGE lift) s0))) (i (i realu_continuous f) (i (i within (i atreal x)) s0)))
(rule (i (i s_b_ (i (i IN a) (i openu_segment (i (i c_ c) d)))) (i (i IN b) (i openu_segment (i (i c_ c) d)))) (i (i SUBSET (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i openu_segment (i (i c_ c) d))))
(rule (i (i a_ (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i closedu_segment (i (i CONS (i (i c_ c) d)) NIL))) (i (i a_ (i (i INSERT a) (i (i INSERT b) EMPTY))) (i (i INSERT c) (i (i INSERT d) EMPTY))))
(rule (i (i (i (i dihV (i (i vectoru_add a) w0)) (i (i vectoru_add a) w1)) (i (i vectoru_add a) w2)) (i (i vectoru_add a) w3)) (i (i (i (i dihV w0) w1) w2) w3))
(rule (i (i (i (i azim (i (i vectoru_add a) v)) (i (i vectoru_add a) w)) (i (i vectoru_add a) w1)) (i (i vectoru_add a) w2)) (i (i (i (i azim v) w) w1) w2))
(rule (i (i (i COND (i (i a_ n) (i NUMERAL u_0))) h) (i (i EL (i (i m_ n) (i NUMERAL (i BIT1 u_0)))) t)) (i (i EL n) (i (i CONS h) t)))
(rule (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x)) (i (i realu_lt x) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_ (i frac x)) x))
(rule (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x)) (i (i realu_lt x) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_ (i floor x)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i (i COND (i evenperm p)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i sign p))
(rule (i (i (i COND (i (i a_ m) (i NUMERAL u_0))) (i f (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i product (i (i o_o_ m) (i NUMERAL u_0))) f))
(rule (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i csin z)) (i ccos z))) (i csin (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) z)))
(rule (i (i (i COND (i (i naddu_eq x) (i naddu_ofu_num (i NUMERAL u_0)))) (i naddu_ofu_num (i NUMERAL u_0))) (i mku_nadd (i naddu_rinv x))) (i naddu_inv x))
(rule (i (i realu_div (i sqrt (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i cos (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 (i BIT1 u_0))))))))
(rule (i complex (i (i c_ (i (i realu_add (i Re w)) (i Re z))) (i (i realu_add (i Im w)) (i Im z)))) (i (i vectoru_add w) z))
(rule (i (i d_ (i vector (i (i CONS x) (i (i CONS y) (i (i CONS z) NIL))))) (i NUMERAL (i BIT1 u_0))) x)
(rule (i w_ (i (i a_ (i content (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL)))) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i content (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL)))))
(rule (i (i (i COND (i (i a_ a) b)) EMPTY) (i (i hull affine) (i (i INSERT a) (i (i INSERT b) EMPTY)))) (i (i hull affine) (i openu_segment (i (i c_ a) b))))
(rule (i realu_abs (i (i realu_sub (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i (i d_ y) (i NUMERAL (i BIT1 u_0))))) (i distance (i (i c_ x) y)))
(rule (i (i s_b_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0)))) (i w_ (i (i a_ y) (i realu_ofu_num (i NUMERAL u_0))))) (i (i a_ (i (i rpow x) y)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i s_b_ (i (i a_ x) (i Cx (i realu_ofu_num (i NUMERAL u_0))))) (i w_ (i (i a_ n) (i NUMERAL u_0)))) (i (i a_ (i (i complexu_pow x) n)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i DIFF (i closedu_realu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i (i INSERT a) (i (i INSERT b) EMPTY))) (i openu_realu_segment (i (i c_ a) b)))
(rule (i (i DIFF (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i (i INSERT a) (i (i INSERT b) EMPTY))) (i openu_segment (i (i c_ a) b)))
(rule (i (i DIFF (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i INSERT a) (i (i INSERT b) EMPTY))) (i openu_interval (i (i c_ a) b)))
(rule (i (i DIFF (i closedu_realu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i INSERT a) (i (i INSERT b) EMPTY))) (i openu_realu_interval (i (i c_ a) b)))
(rule (i (i t_ (i BIT1 m)) (i (i t_ (i (i EXP (i BIT1 m)) n)) (i (i EXP (i BIT1 m)) n))) (i (i EXP (i BIT1 m)) (i BIT1 n)))
(rule (i (i t_ (i BIT0 m)) (i (i t_ (i (i EXP (i BIT0 m)) n)) (i (i EXP (i BIT0 m)) n))) (i (i EXP (i BIT0 m)) (i BIT1 n)))
(rule (i (i (i COND (i (i realu_le a) b)) (i openu_realu_interval (i (i c_ a) b))) (i openu_realu_interval (i (i c_ b) a))) (i openu_realu_segment (i (i c_ a) b)))
(rule (i closedu_interval (i (i CONS (i (i c_ (i (i vectoru_sub x) (i lift e))) (i (i vectoru_add x) (i lift e)))) NIL)) (i cball (i (i c_ x) e)))
(rule (i (i t_ (i FACT n)) (i (i t_ (i FACT k)) (i binom (i (i c_ (i (i p_ n) k)) k)))) (i FACT (i (i p_ n) k)))
(rule (i content (i closedu_interval (i (i CONS (i (i c_ (i vec (i NUMERAL u_0))) (i vec (i NUMERAL (i BIT1 u_0))))) NIL))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i (i COND (i (i a_ n) (i NUMERAL u_0))) (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_pow (i intu_ofu_num (i NUMERAL u_0))) n))
(rule (i (i (i COND (i (i a_ n) (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_pow (i realu_ofu_num (i NUMERAL u_0))) n))
(rule (i (i (i m_m_m_g_ (i (i o f) drop)) a) (i (i within (i at (i lift x))) (i (i IMAGE lift) s0))) (i (i (i m_m_m_g_ f) a) (i (i within (i atreal x)) s0)))
(rule (i (i (i m_m_g_ (i (i o f) drop)) a) (i (i within (i at (i lift x))) (i (i IMAGE lift) s0))) (i (i (i m_m_g_ f) a) (i (i within (i atreal x)) s0)))
(rule (i (i s_b_ (i (i continuousu_on f) X)) (i (i s_b_ (i (i SUBSET (i (i IMAGE f) X)) Y)) (i P f))) (i (i (i (i homotopicu_with P) (i (i c_ X) Y)) f) f))
(rule (i angle (i (i c_ (i (i vectoru_add a) b)) (i (i c_ (i (i vectoru_add a) c)) (i (i vectoru_add a) d)))) (i angle (i (i c_ b) (i (i c_ c) d))))
(rule (i (i (i COND (i (i IN x) t)) (i (i DIFF s0) t)) (i (i INSERT x) (i (i DIFF s0) t))) (i (i DIFF (i (i INSERT x) s0)) t))
(rule (i (i (i COND (i (i IN x) t)) (i (i UNION s0) t)) (i (i INSERT x) (i (i UNION s0) t))) (i (i UNION (i (i INSERT x) s0)) t))
(rule (i (i (i COND (i (i IN x) t)) (i (i INSERT x) (i (i INTER s0) t))) (i (i INTER s0) t)) (i (i INTER (i (i INSERT x) s0)) t))
(rule (i (i (i COND (i (i a_ x) y)) (i (i DELETE s0) y)) (i (i INSERT x) (i (i DELETE s0) y))) (i (i DELETE (i (i INSERT x) s0)) y))
(rule (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) e)) (i (i IN y) (i cball (i (i c_ x) e)))) (i (i limitu_pointu_of y) (i ball (i (i c_ x) e))))
(rule (i (i complexu_div (i (i vectoru_add z) (i cnj z))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i Cx (i Re z)))
(rule (i (i s_b_ (i orthogonalu_matrix Q)) (i (i a_ (i det Q)) (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i rotoinversionu_matrix Q))
(rule (i (i complexu_div (i cnj z)) (i (i complexu_pow (i Cx (i vectoru_norm z))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i complexu_inv z))
(rule (i (i realu_lt (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_lt (i realu_abs x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i realu_le (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_le (i realu_abs x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i (i hasu_vectoru_derivative (i (i o lift) (i (i o f) drop))) (i lift fi_)) (i at (i lift x))) (i (i (i hasu_realu_derivative f) fi_) (i atreal x)))
(rule (i (i (i COND (i P h)) (i (i CONS h) (i (i FILTER P) t))) (i (i FILTER P) t)) (i (i FILTER P) (i (i CONS h) t)))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i sin x)) (i cos x))) (i sin (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x)))
(rule (i (i b_s_ (i (i a_ (i Arg z)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ (i Arg z)) pi)) (i real0 z))
(rule (i (i p_ (i BIT1 m)) (i (i p_ (i BIT0 n)) (i BIT0 (i BIT0 (i (i t_ m) n))))) (i (i t_ (i BIT1 m)) (i BIT1 n)))
(rule (i (i (i COND (i (i a_ a) b)) (i intu_ofu_num (i NUMERAL u_0))) (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i affu_dim (i (i INSERT a) (i (i INSERT b) EMPTY))))
(rule (i (i b_s_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ y) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ (i (i realu_mul x) y)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i b_s_ (i (i a_ x) (i intu_ofu_num (i NUMERAL u_0)))) (i (i a_ y) (i intu_ofu_num (i NUMERAL u_0)))) (i (i a_ (i (i intu_mul x) y)) (i intu_ofu_num (i NUMERAL u_0))))
(rule (i (i b_s_ (i (i a_ a) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ x) (i vec (i NUMERAL u_0)))) (i (i a_ (i (i r_ a) x)) (i vec (i NUMERAL u_0))))
(rule (i (i s_b_ (i (i a_ x) (i intu_ofu_num (i NUMERAL u_0)))) (i w_ (i (i a_ n) (i NUMERAL u_0)))) (i (i a_ (i (i intu_pow x) n)) (i intu_ofu_num (i NUMERAL u_0))))
(rule (i (i s_b_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0)))) (i w_ (i (i a_ n) (i NUMERAL u_0)))) (i (i a_ (i (i realu_pow x) n)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i s_b_ (i (i a_ m) (i NUMERAL (i BIT1 u_0)))) (i (i a_ n) (i NUMERAL (i BIT1 u_0)))) (i (i a_ (i (i t_ m) n)) (i NUMERAL (i BIT1 u_0))))
(rule (i (i s_b_ (i (i faceu_of e) s0)) (i (i a_ (i affu_dim e)) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i edgeu_of e) s0))
(rule (i (i a_ (i (i vectoru_angle x) y)) (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i orthogonal x) y))
(rule (i (i (i COND (i (i a_ a) b)) EMPTY) (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i closure (i openu_segment (i (i c_ a) b))))
(rule (i (i (i COND (i (i IN x) s0)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL u_0))) (i drop (i (i indicator s0) x)))
(rule (i (i vectoru_add (i (i complexu_mul (i csin w)) (i ccos z))) (i (i complexu_mul (i ccos w)) (i csin z))) (i csin (i (i vectoru_add w) z)))
(rule (i (i DIFF (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i openu_interval (i (i c_ a) b))) (i frontier (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))))
(rule (i (i realu_add (i (i realu_mul (i sin x)) (i cos y))) (i (i realu_mul (i cos x)) (i sin y))) (i sin (i (i realu_add x) y)))
(rule (i (i (i COND (i (i a_ a) b)) (i (i INSERT a) EMPTY)) (i openu_segment (i (i c_ a) b))) (i relativeu_interior (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))))
(rule (i (i vectoru_sub (i (i complexu_mul (i ccos w)) (i ccos z))) (i (i complexu_mul (i csin w)) (i csin z))) (i ccos (i (i vectoru_add w) z)))
(rule (i (i s_b_ (i (i SUBSET s0) (i topspace top))) (i (i closedu_in top) (i (i DIFF (i topspace top)) s0))) (i (i openu_in top) s0))
(rule (i (i realu_add (i (i realu_mul (i cos w)) (i cos z))) (i (i realu_mul (i sin w)) (i sin z))) (i cos (i (i realu_sub w) z)))
(rule (i (i s_b_ (i (i a_ (i Re w)) (i Re z))) (i (i a_ (i Im w)) (i Im z))) (i (i a_ w) z))
(rule (i (i vectoru_sub (i (i complexu_mul (i csin w)) (i ccos z))) (i (i complexu_mul (i ccos w)) (i csin z))) (i csin (i (i vectoru_sub w) z)))
(rule (i (i s_b_ (i (i SUBSET s0) (i topspace top))) (i (i openu_in top) (i (i DIFF (i topspace top)) s0))) (i (i closedu_in top) s0))
(rule (i (i realu_sub (i (i realu_mul (i sin w)) (i cos z))) (i (i realu_mul (i cos w)) (i sin z))) (i sin (i (i realu_sub w) z)))
(rule (i (i s_b_ (i (i a_ (i fstcart x)) (i fstcart y))) (i (i a_ (i sndcart x)) (i sndcart y))) (i (i a_ x) y))
(rule (i (i vectoru_add (i (i complexu_mul (i ccos w)) (i ccos z))) (i (i complexu_mul (i csin w)) (i csin z))) (i ccos (i (i vectoru_sub w) z)))
(rule (i (i realu_sub (i (i realu_mul (i cos x)) (i cos y))) (i (i realu_mul (i sin x)) (i sin y))) (i cos (i (i realu_add x) y)))
(rule (i (i a_ (i content (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_le (i drop b)) (i drop a)))
(rule (i (i a_ (i content (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ (i interior (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL)))) EMPTY))
(rule (i (i cross (i basis (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i basis (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i basis (i NUMERAL (i BIT1 u_0))))
(rule (i (i complexu_mul (i vectoru_neg ii)) (i Cx (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i clog (i vectoru_neg ii)))
(rule (i closedu_interval (i (i CONS (i (i c_ (i vec (i NUMERAL (i BIT1 u_0)))) (i vec (i NUMERAL u_0)))) NIL)) EMPTY)
(rule (i closedu_realu_interval (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL u_0)))) NIL)) EMPTY)
(rule (i (i continuous (i (i o Cx) (i (i o f) Re))) (i (i within (i at (i Cx x))) real0)) (i (i realu_continuous f) (i atreal x)))
(rule (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i (i d_ y) (i NUMERAL (i BIT1 u_0)))) (i (i dot x) y))
(rule (i (i cross (i basis (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i basis (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i vectoru_neg (i basis (i NUMERAL (i BIT1 u_0)))))
(rule (i (i d_ (i vector (i (i CONS x) (i (i CONS y) NIL)))) (i NUMERAL (i BIT0 (i BIT1 u_0)))) y)
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_div e) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) e))
(rule (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Arg z))) (i (i realu_lt (i Arg z)) pi)) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Im z)))
(rule (i (i IMAGE mku_finiteu_sum) (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i (i p_ (i dimindex UNIV)) (i dimindex UNIV)))) UNIV)
(rule (i (i (i COND (i (i a_ x) (i vec (i NUMERAL u_0)))) (i NUMERAL u_0)) (i NUMERAL (i BIT1 u_0))) (i dim (i (i INSERT x) EMPTY)))
(rule (i (i (i COND (i (i a_ m) (i NUMERAL u_0))) (i f (i NUMERAL u_0))) (i vec (i NUMERAL u_0))) (i (i vsum (i (i o_o_ m) (i NUMERAL u_0))) f))
(rule (i (i (i COND (i (i a_ m) (i NUMERAL u_0))) (i f (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) (i (i sum (i (i o_o_ m) (i NUMERAL u_0))) f))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i Re z)) (i Im z))) (i Im (i (i complexu_pow z) (i NUMERAL (i BIT0 (i BIT1 u_0))))))
(rule (i (i realu_sub (i (i d_ (i (i d_ A) i0)) j)) (i (i d_ (i (i d_ B) i0)) j)) (i (i d_ (i (i d_ (i (i matrixu_sub A) B)) i0)) j))
(rule (i (i b_s_ (i (i l_ n) m)) (i (i s_b_ (i (i l_a_ p) m)) (i (i l_a_ n) q))) (i (i SUBSET (i (i o_o_ m) n)) (i (i o_o_ p) q)))
(rule (i (i realu_add (i (i d_ (i (i d_ A) i0)) j)) (i (i d_ (i (i d_ B) i0)) j)) (i (i d_ (i (i d_ (i (i matrixu_add A) B)) i0)) j))
(rule (i measure (i conv0 (i (i INSERT v0) (i (i INSERT v1) (i (i INSERT v2) (i (i INSERT v3) EMPTY)))))) (i (i (i (i volu_conv v0) v1) v2) v3))
(rule (i (i s_b_ (i (i a_ c1) c2)) (i (i s_b_ (i (i a_ i1) i2)) (i (i a_ r1) r2))) (i (i a_ (i (i (i CONSTR c1) i1) r1)) (i (i (i CONSTR c2) i2) r2)))
(rule (i (i b_s_ (i (i a_ x) y)) (i (i b_s_ (i (i R x) y)) (i (i R y) x))) (i (i (i RSC R) x) y))
(rule (i (i a_ (i (i IN x) (i (i DELETE s0) xi_))) (i (i IN xi_) (i (i DELETE s0) x))) (i (i a_ (i (i IN x) s0)) (i (i IN xi_) s0)))
(rule (i (i (i COND (i (i a_ k) i0)) j) (i (i (i COND (i (i a_ k) j)) i0) k)) (i (i swap (i (i c_ i0) j)) k))
(rule (i (i vectoru_sub (i (i r_ (i (i dot x) z)) y)) (i (i r_ (i (i dot x) y)) z)) (i (i cross x) (i (i cross y) z)))
(rule (i (i s_b_ (i (i l_a_ m) (i (i p_ n) p))) (i (i l_a_ n) (i (i p_ m) p))) (i (i l_a_ (i dist (i (i c_ m) n))) p))
(rule (i (i (i hasu_integral (i (i o lift) (i (i o f) drop))) (i lift y)) (i (i IMAGE lift) s0)) (i (i (i hasu_realu_integral f) y) s0))
(rule (i (i between (i (i vectoru_add a) x)) (i (i c_ (i (i vectoru_add a) y)) (i (i vectoru_add a) z))) (i (i between x) (i (i c_ y) z)))
(rule (i (i IN (i vectoru_neg x)) (i closedu_interval (i (i CONS (i (i c_ (i vectoru_neg b)) (i vectoru_neg a))) NIL))) (i (i IN x) (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))))
(rule (i (i s_b_ (i orthogonalu_matrix Q)) (i (i a_ (i det Q)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i rotationu_matrix Q))
(rule (i (i (i COND (i (i a_ m) (i NUMERAL u_0))) (i (i INSERT (i NUMERAL u_0)) EMPTY)) EMPTY) (i (i o_o_ m) (i NUMERAL u_0)))
(rule (i (i b_s_ (i affineu_dependent s0)) (i (i IN (i vec (i NUMERAL u_0))) (i (i hull affine) s0))) (i dependent s0))
(rule (i (i s_b_ (i w_ (i (i a_ s0) EMPTY))) (i (i s_b_ (i convex s0)) (i conic s0))) (i convexu_cone s0))
(rule (i (i s_b_ (i (i a_a_g_ c) (i P x))) (i (i a_a_g_ (i w_ c)) (i P y))) (i P (i (i (i COND c) x) y)))
(rule (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i sin (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 (i BIT1 u_0))))))))
(rule (i (i cross (i basis (i NUMERAL (i BIT1 u_0)))) (i basis (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i vectoru_neg (i basis (i NUMERAL (i BIT0 (i BIT1 u_0))))))
(rule (i (i cross (i basis (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i basis (i NUMERAL (i BIT1 u_0)))) (i vectoru_neg (i basis (i NUMERAL (i BIT1 (i BIT1 u_0))))))
(rule (i cos (i (i realu_sub (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) x)) (i sin x))
(rule (i sin (i (i realu_sub (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) x)) (i cos x))
(rule (i tan (i (i realu_sub (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) x)) (i realu_inv (i tan x)))
(rule (i trivialu_limit (i (i within (i at (i Cx x))) (i (i INTER real0) (i (i IMAGE Cx) s0)))) (i trivialu_limit (i (i within (i atreal x)) s0)))
(rule (i measure (i cball (i (i c_ (i vec (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) pi)
(rule (i (i (i COND (i (i a_ (i FST h)) a)) (i SND h)) (i (i ASSOC a) t)) (i (i ASSOC a) (i (i CONS h) t)))
(rule (i (i d_ (i vector (i (i CONS x) (i (i CONS y) NIL)))) (i NUMERAL (i BIT1 u_0))) x)
(rule (i (i complexu_mul (i Cx (i exp r))) (i complex (i (i c_ (i cos t)) (i sin t)))) (i cexp (i complex (i (i c_ r) t))))
(rule (i (i realu_mul (i vectoru_norm x)) (i (i realu_mul (i vectoru_norm y)) (i cos (i (i vectoru_angle x) y)))) (i (i dot x) y))
(rule (i (i s_b_ (i (i l_ n) m)) (i w_ (i (i a_ (i ODD m)) (i ODD n)))) (i ODD (i (i m_ m) n)))
(rule (i collinear (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT x) (i (i INSERT y) EMPTY)))) (i (i a_ (i (i cross x) y)) (i vec (i NUMERAL u_0))))
(rule (i (i s_b_ (i (i a_ m) (i NUMERAL u_0))) (i w_ (i (i a_ n) (i NUMERAL u_0)))) (i (i a_ (i (i EXP m) n)) (i NUMERAL u_0)))
(rule (i (i realu_mul (i vectoru_norm x)) (i (i realu_mul (i vectoru_norm y)) (i sin (i (i vectoru_angle x) y)))) (i vectoru_norm (i (i cross x) y)))
(rule (i openu_interval (i (i c_ (i (i vectoru_sub x) (i lift e))) (i (i vectoru_add x) (i lift e)))) (i ball (i (i c_ x) e)))
(rule (i (i UNION (i openu_segment (i (i c_ a) b))) (i (i INSERT a) (i (i INSERT b) EMPTY))) (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL)))
(rule (i (i IMAGE lift) (i closedu_realu_segment (i (i CONS (i (i c_ (i drop a)) (i drop b))) NIL))) (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL)))
(rule (i (i b_s_ (i w_ (i (i a_ x) (i NUMERAL u_0)))) (i (i a_ n) (i NUMERAL u_0))) (i (i l_ (i NUMERAL u_0)) (i (i EXP x) n)))
(rule (i (i b_s_ (i (i a_ x) (i NUMERAL (i BIT1 u_0)))) (i (i a_ n) (i NUMERAL u_0))) (i (i a_ (i (i EXP x) n)) (i NUMERAL (i BIT1 u_0))))
(rule (i (i IMAGE drop) (i closedu_segment (i (i CONS (i (i c_ (i lift a)) (i lift b))) NIL))) (i closedu_realu_segment (i (i CONS (i (i c_ a) b)) NIL)))
(rule (i (i (i COND (i EVEN n)) (i (i complexu_pow x) n)) (i vectoru_neg (i (i complexu_pow x) n))) (i (i complexu_pow (i vectoru_neg x)) n))
(rule (i (i p_ (i binom (i (i c_ n) (i SUC k)))) (i binom (i (i c_ n) k))) (i binom (i (i c_ (i SUC n)) (i SUC k))))
(rule (i (i (i COND (i EVEN n)) (i (i intu_pow x) n)) (i intu_neg (i (i intu_pow x) n))) (i (i intu_pow (i intu_neg x)) n))
(rule (i (i (i COND (i EVEN n)) (i (i realu_pow x) n)) (i realu_neg (i (i realu_pow x) n))) (i (i realu_pow (i realu_neg x)) n))
(rule (i (i a_ s0) (i (i INSERT (i closedu_interval (i (i CONS (i (i c_ a) a)) NIL))) EMPTY)) (i (i divisionu_of s0) (i closedu_interval (i (i CONS (i (i c_ a) a)) NIL))))
(rule (i (i vectoru_add x) (i (i complexu_mul (i Cx (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) y)) (i (i vectoru_sub x) y))
(rule (i (i a_ (i vectoru_norm (i (i vectoru_add x) y))) (i (i realu_add (i vectoru_norm x)) (i vectoru_norm y))) (i (i a_ (i (i r_ (i vectoru_norm x)) y)) (i (i r_ (i vectoru_norm y)) x)))
(rule (i (i r_ (i realu_inv (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i vectoru_add a) b)) (i midpoint (i (i c_ a) b)))
(rule (i (i complexu_mul (i (i complexu_pow (i vectoru_neg (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) n)) z) (i (i rotate2d (i (i realu_mul (i realu_ofu_num n)) pi)) z))
(rule (i (i complexu_mul ii) (i Cx (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i clog ii))
(rule (i (i (i m_m_g_ (i (i o f) Re)) a) (i (i within (i at (i Cx x))) real0)) (i (i (i m_m_g_ f) a) (i atreal x)))
(rule (i (i (i COND (i (i a_ n) (i NUMERAL u_0))) (i NUMERAL (i BIT1 u_0))) (i NUMERAL u_0)) (i (i EXP (i NUMERAL u_0)) n))
(rule (i (i (i COND (i (i a_ m) (i NUMERAL u_0))) (i f (i NUMERAL u_0))) (i NUMERAL u_0)) (i (i nsum (i (i o_o_ m) (i NUMERAL u_0))) f))
(rule (i (i dropout (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i basis (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i basis (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i cross (i basis (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i basis (i NUMERAL (i BIT1 u_0)))) (i basis (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i cross (i basis (i NUMERAL (i BIT1 u_0)))) (i basis (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i basis (i NUMERAL (i BIT1 (i BIT1 u_0)))))
(rule (i (i (i f h1) (i HD l2)) (i (i (i (i ITLIST2 f) t1) (i TL l2)) b)) (i (i (i (i ITLIST2 f) (i (i CONS h1) t1)) l2) b))
(rule (i (i IMAGE drop) (i closedu_interval (i (i CONS (i (i c_ (i lift a)) (i lift b))) NIL))) (i closedu_realu_interval (i (i CONS (i (i c_ a) b)) NIL)))
(rule (i (i IMAGE lift) (i closedu_realu_interval (i (i CONS (i (i c_ (i drop a)) (i drop b))) NIL))) (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL)))
(rule (i (i dropout (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i basis (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i vec (i NUMERAL u_0)))
(rule (i sin (i (i realu_add x) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) (i sin x))
(rule (i cos (i (i realu_add x) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) (i cos x))
(rule (i (i a_ (i (i MOD n) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0))) (i ODD n))
(rule (i (i CONS (i (i f h1) (i HD l))) (i (i (i MAP2 f) t1) (i TL l))) (i (i (i MAP2 f) (i (i CONS h1) t1)) l))
(rule (i (i s_b_ (i (i IN x) s0)) (i w_ (i (i a_ (i f x)) (i neutral op)))) (i (i IN x) (i (i (i support op) f) s0)))
(rule (i (i (i arcV (i (i vectoru_add a) b)) (i (i vectoru_add a) c)) (i (i vectoru_add a) d)) (i (i (i arcV b) c) d))
(rule (i (i (i COND (i (i l_ m) k)) (i (i o_o_ k) n)) (i (i o_o_ m) n)) (i (i INTER (i from k)) (i (i o_o_ m) n)))
(rule (i (i matrixu_vectoru_mul (i transp A)) (i (i cross (i (i matrixu_vectoru_mul A) x)) (i (i matrixu_vectoru_mul A) y))) (i (i r_ (i det A)) (i (i cross x) y)))
(rule (i (i equiintegrableu_on (i (i INSERT f) EMPTY)) (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i integrableu_on f) (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))))
(rule (i (i (i homotopicu_loops s0) (i linepath (i (i c_ a) a))) (i linepath (i (i c_ b) b))) (i (i (i pathu_component s0) a) b))
(rule (i (i (i (i dihV (i vec (i NUMERAL u_0))) (i vectoru_neg v1)) (i vectoru_neg v2)) (i vectoru_neg v3)) (i (i (i (i dihV (i vec (i NUMERAL u_0))) v1) v2) v3))
(rule (i (i a_ (i realu_sgn x)) (i realu_ofu_int (i intu_neg (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i (i realu_lt x) (i realu_ofu_int (i intu_ofu_num (i NUMERAL u_0)))))
(rule (i w_ (i (i IN i0) (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i dimindex UNIV)))) (i (i a_ (i basis i0)) (i vec (i NUMERAL u_0))))
(rule (i (i a_ (i (i matrixu_mul A) (i transp A))) (i mat (i NUMERAL (i BIT1 u_0)))) (i orthogonalu_matrix A))
(rule (i (i s_b_ (i real0 z)) (i (i realu_lt (i Re z)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ (i Arg z)) pi))
(rule (i (i s_b_ (i simpleu_path g)) (i w_ (i (i a_ (i pathfinish g)) (i pathstart g)))) (i arc g))
(rule (i (i vectoru_add (i Cx (i Re z))) (i (i complexu_mul ii) (i Cx (i Im z)))) z)
(rule (i (i continuous (i (i o lift) (i (i o f) drop))) (i at (i lift x))) (i (i realu_continuous f) (i atreal x)))
(rule (i (i s_b_ (i real0 z)) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Re z))) (i (i a_ (i Arg z)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i INSERT (i vec (i NUMERAL u_0))) (i (i hull conic) (i (i hull convex) s0))) (i (i hull convexu_cone) s0))
(rule (i (i DIFF (i (i DIFF UNIV) (i interior s0))) (i interior (i (i DIFF UNIV) s0))) (i frontier s0))
(rule (i (i (i COND (i (i l_a_ n) m)) (i BIT1 (i (i m_ m) n))) u_0) (i (i m_ (i BIT1 m)) (i BIT0 n)))
(rule (i complex (i (i c_ (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) ii)
(rule (i (i (i COND (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x)) x) (i realu_neg x)) (i realu_abs x))
(rule (i (i absolutelyu_integrableu_on (i (i o lift) (i (i o f) drop))) (i (i IMAGE lift) s0)) (i (i absolutelyu_realu_integrableu_on f) s0))
(rule (i (i integrableu_on (i (i o lift) (i (i o f) drop))) (i (i IMAGE lift) s0)) (i (i realu_integrableu_on f) s0))
(rule (i (i (i subpath (i vec (i NUMERAL (i BIT1 u_0)))) (i vec (i NUMERAL u_0))) g) (i reversepath g))
(rule (i (i rotate2d (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) z) (i (i complexu_mul ii) z))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Re (i (i complexu_mul a) (i cnj b)))) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Re (i (i complexu_div a) b))))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Im (i (i complexu_mul a) (i cnj b)))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Im (i (i complexu_div a) b))))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Im (i (i complexu_mul a) (i cnj b)))) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Im (i (i complexu_div a) b))))
(rule (i (i s_b_ (i (i IN x) s0)) (i w_ (i (i a_ x) (i CHOICE s0)))) (i (i IN x) (i REST s0)))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Re (i (i complexu_mul a) (i cnj b)))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Re (i (i complexu_div a) b))))
(rule (i (i vectoru_variation (i (i IMAGE lift) s0)) (i (i o lift) (i (i o f) drop))) (i (i realu_variation s0) f))
(rule (i (i s_b_ (i (i a_ m) (i NUMERAL u_0))) (i (i a_ n) (i NUMERAL u_0))) (i (i a_ (i (i p_ m) n)) (i NUMERAL u_0)))
(rule (i (i realu_le (i Im (i (i complexu_mul a) (i cnj b)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_le (i Im (i (i complexu_div a) b))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_lt (i Re (i (i complexu_mul a) (i cnj b)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_lt (i Re (i (i complexu_div a) b))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i Re (i (i complexu_mul a) (i cnj b)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ (i Re (i (i complexu_div a) b))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i b_s_ (i (i a_ m) (i NUMERAL u_0))) (i (i a_ n) (i NUMERAL u_0))) (i (i a_ (i (i t_ m) n)) (i NUMERAL u_0)))
(rule (i (i realu_le (i Re (i (i complexu_mul a) (i cnj b)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_le (i Re (i (i complexu_div a) b))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_lt (i Im (i (i complexu_mul a) (i cnj b)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_lt (i Im (i (i complexu_div a) b))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i Im (i (i complexu_mul a) (i cnj b)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ (i Im (i (i complexu_div a) b))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i b_s_ (i (i l_a_ m) n)) (i (i a_ (i EVEN m)) (i EVEN n))) (i EVEN (i (i m_ m) n)))
(rule (i (i s_b_ (i (i SUBSET s0) (i span t))) (i (i SUBSET t) (i span s0))) (i (i a_ (i span s0)) (i span t)))
(rule (i (i t_ (i (i EXP (i BIT1 m)) n)) (i (i EXP (i BIT1 m)) n)) (i (i EXP (i BIT1 m)) (i BIT0 n)))
(rule (i (i t_ (i (i EXP (i BIT0 m)) n)) (i (i EXP (i BIT0 m)) n)) (i (i EXP (i BIT0 m)) (i BIT0 n)))
(rule (i (i continuousu_on (i (i o lift) (i (i o f) drop))) (i (i IMAGE lift) s0)) (i (i realu_continuousu_on f) s0))
(rule (i (i uniformlyu_continuousu_on (i (i o lift) (i (i o f) drop))) (i (i IMAGE lift) s0)) (i (i realu_uniformlyu_continuousu_on f) s0))
(rule (i w_ (i (i a_ (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) EMPTY)) (i (i realu_le (i drop a)) (i drop b)))
(rule (i (i hasu_boundedu_variationu_on (i (i o lift) (i (i o f) drop))) (i (i IMAGE lift) s0)) (i (i hasu_boundedu_realu_variationu_on f) s0))
(rule (i (i measurableu_on (i (i o Cx) (i (i o f) drop))) (i (i IMAGE lift) s0)) (i (i realu_measurableu_on f) s0))
(rule (i (i s_b_ (i (i l_ (i NUMERAL u_0)) m)) (i (i l_ (i NUMERAL u_0)) n)) (i (i l_ (i NUMERAL u_0)) (i (i t_ m) n)))
(rule (i (i IN (i midpoint (i (i c_ a) b))) (i openu_segment (i (i c_ a) b))) (i w_ (i (i a_ a) b)))
(rule (i (i realu_add x) (i (i realu_mul (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) y)) (i (i realu_sub x) y))
(rule (i (i measurableu_on (i (i o lift) (i (i o f) drop))) (i (i IMAGE lift) s0)) (i (i realu_measurableu_on f) s0))
(rule (i (i IN v) (i cball (i (i c_ (i Cx (i realu_ofu_num (i NUMERAL u_0)))) r))) (i (i realu_le (i vectoru_norm v)) r))
(rule (i w_ (i (i a_ (i closedu_realu_interval (i (i CONS (i (i c_ a) b)) NIL))) EMPTY)) (i (i realu_le a) b))
(rule (i (i IN v) (i ball (i (i c_ (i Cx (i realu_ofu_num (i NUMERAL u_0)))) r))) (i (i realu_lt (i vectoru_norm v)) r))
(rule (i (i vsum (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i NUMERAL (i BIT1 u_0)))) f) (i f (i NUMERAL (i BIT1 u_0))))
(rule (i tan (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i dropout (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i basis (i NUMERAL (i BIT1 u_0)))) (i basis (i NUMERAL (i BIT1 u_0))))
(rule (i (i product (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i NUMERAL (i BIT1 u_0)))) f) (i f (i NUMERAL (i BIT1 u_0))))
(rule (i (i sum (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i NUMERAL (i BIT1 u_0)))) f) (i f (i NUMERAL (i BIT1 u_0))))
(rule (i (i (i COND (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) x)) x) (i intu_neg x)) (i intu_abs x))
(rule (i vectoru_neg (i Cx (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i casn (i vectoru_neg (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))))
(rule (i (i a_ (i (i MOD n) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL u_0)) (i EVEN n))
(rule (i (i a_ (i (i matrixu_mul (i transp Q)) Q)) (i mat (i NUMERAL (i BIT1 u_0)))) (i orthogonalu_matrix Q))
(rule (i (i rotate2d (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi)) z) z)
(rule (i (i (i subpath (i vec (i NUMERAL u_0))) (i vec (i NUMERAL (i BIT1 u_0)))) g) g)
(rule (i closedu_interval (i (i CONS (i (i c_ (i vectoru_neg (i lift e))) (i lift e))) NIL)) (i cball (i (i c_ (i vec (i NUMERAL u_0))) e)))
(rule (i (i o (i swap (i (i c_ a) b))) (i swap (i (i c_ a) b))) I)
(rule (i (i a_ (i (i realu_pow (i sqrt x)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) x) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i d_ (i (i d_ A) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0))) (i det A))
(rule (i (i (i COND (i (i a_ t) NIL)) NIL) (i (i CONS h) (i BUTLAST t))) (i BUTLAST (i (i CONS h) t)))
(rule (i (i CONS (i (i c_ h1) (i HD l2))) (i (i ZIP t1) (i TL l2))) (i (i ZIP (i (i CONS h1) t1)) l2))
(rule (i coplanar (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT (i vectoru_neg x)) s0))) (i coplanar (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT x) s0))))
(rule (i (i (i hasu_realu_integral f) y) (i closedu_realu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i (i hasu_realu_integral f) y) (i openu_realu_interval (i (i c_ a) b))))
(rule (i (i (i (i dihV (i vectoru_neg v0)) (i vectoru_neg v1)) (i vectoru_neg v2)) (i vectoru_neg v3)) (i (i (i (i dihV v0) v1) v2) v3))
(rule (i (i a_ (i cos (i (i vectoru_angle u) v))) (i cos (i (i vectoru_angle x) y))) (i (i a_ (i (i vectoru_angle u) v)) (i (i vectoru_angle x) y)))
(rule (i (i (i hasu_integral f) y) (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i (i hasu_integral f) y) (i openu_interval (i (i c_ a) b))))
(rule (i (i INJP (i INJN (i SUC c))) (i (i INJP (i INJA i0)) (i INJF r))) (i (i (i ZCONSTR c) i0) r))
(rule (i (i a_ (i (i hull P) (i (i INSERT a) s0))) (i (i hull P) s0)) (i (i IN a) (i (i hull P) s0)))
(rule (i (i DIFF (i (i (i support op) f) s0)) (i (i (i support op) f) t)) (i (i (i support op) f) (i (i DIFF s0) t)))
(rule (i (i INTER (i (i (i support op) f) s0)) (i (i (i support op) f) t)) (i (i (i support op) f) (i (i INTER s0) t)))
(rule (i (i UNION (i (i (i support op) f) s0)) (i (i (i support op) f) t)) (i (i (i support op) f) (i (i UNION s0) t)))
(rule (i (i UNION (i ball (i (i c_ a) r))) (i ball (i (i c_ a) s0))) (i ball (i (i c_ a) (i (i realu_max r) s0))))
(rule (i (i INTER (i ball (i (i c_ a) r))) (i ball (i (i c_ a) s0))) (i ball (i (i c_ a) (i (i realu_min r) s0))))
(rule (i (i s_b_ (i (i integrableu_on f) s0)) (i (i a_ (i (i integral s0) f)) i0)) (i (i (i hasu_integral f) i0) s0))
(rule (i (i s_b_ (i (i (i INJ f) s0) t)) (i (i (i SURJ f) s0) t)) (i (i (i BIJ f) s0) t))
(rule (i (i hull P) (i (i UNION (i (i hull P) s0)) (i (i hull P) t))) (i (i hull P) (i (i UNION s0) t)))
(rule (i (i IN x) (i (i hull convex) (i (i INSERT a) (i (i INSERT b) EMPTY)))) (i (i between x) (i (i c_ a) b)))
(rule (i det (i vector (i (i CONS x) (i (i CONS y) (i (i CONS z) NIL))))) (i (i dot x) (i (i cross y) z)))
(rule (i (i s_b_ (i (i realu_integrableu_on f) s0)) (i (i a_ (i (i realu_integral s0) f)) i0)) (i (i (i hasu_realu_integral f) i0) s0))
(rule (i (i s_b_ (i (i a_ x) (i vec n))) (i (i a_ y) (i vec n))) (i (i a_ (i (i pastecart x) y)) (i vec n)))
(rule (i (i s_b_ (i l (i (i c_ x) y))) (i w_ (i (i a_ x) y))) (i (i less l) (i (i c_ x) y)))
(rule (i (i IN (i vectoru_neg x)) (i openu_interval (i (i c_ (i vectoru_neg b)) (i vectoru_neg a)))) (i (i IN x) (i openu_interval (i (i c_ a) b))))
(rule (i (i s_b_ (i (i (i kle n) x) y)) (i (i (i kle n) y) x)) (i (i a_ x) y))
(rule (i (i a_ (i complexu_inv x)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_ x) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))))
(rule (i (i a_ (i realu_sgn x)) (i realu_ofu_int (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_gt x) (i realu_ofu_int (i intu_ofu_num (i NUMERAL u_0)))))
(rule (i (i a_ (i (i dot x) x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i a_ (i vectoru_norm x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i (i m_m_g_ (i (i o f) drop)) a) (i at (i lift x))) (i (i (i m_m_g_ f) a) (i atreal x)))
(rule (i (i (i m_m_m_g_ (i (i o f) drop)) a) (i at (i lift x))) (i (i (i m_m_m_g_ f) a) (i atreal x)))
(rule (i (i a_ (i affu_dim s0)) (i intu_neg (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_ s0) EMPTY))
(rule (i (i IMAGE drop) (i openu_interval (i (i c_ (i lift a)) (i lift b)))) (i openu_realu_interval (i (i c_ a) b)))
(rule (i (i (i COND (i (i a_ n) u_0)) u_0) (i BIT1 (i PRE n))) (i PRE (i BIT0 n)))
(rule (i complex (i (i c_ (i realu_neg (i Re z))) (i realu_neg (i Im z)))) (i vectoru_neg z))
(rule (i (i IMAGE lift) (i openu_realu_interval (i (i c_ (i drop a)) (i drop b)))) (i openu_interval (i (i c_ a) b)))
(rule (i (i s_b_ (i (i ALL (i r h)) t)) (i (i PAIRWISE r) t)) (i (i PAIRWISE r) (i (i CONS h) t)))
(rule (i (i complexu_mul (i Cx (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) x) (i vectoru_neg x))
(rule (i (i complexu_mul (i vectoru_neg (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) x) (i vectoru_neg x))
(rule (i (i d_ (i vector (i (i CONS x) NIL))) (i NUMERAL (i BIT1 u_0))) x)
(rule (i (i p_ (i BIT0 n)) (i BIT0 (i BIT0 (i (i t_ m) n)))) (i (i t_ (i BIT1 m)) (i BIT0 n)))
(rule (i (i p_ (i BIT0 m)) (i BIT0 (i BIT0 (i (i t_ m) n)))) (i (i t_ (i BIT0 m)) (i BIT1 n)))
(rule (i (i a_ (i (i rotate2d t) z)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ z) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i IMAGE lift) (i openu_realu_segment (i (i c_ (i drop a)) (i drop b)))) (i openu_segment (i (i c_ a) b)))
(rule (i (i intu_ge x) (i (i intu_add y) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i intu_gt x) y))
(rule (i (i s_b_ (i EVEN m)) (i w_ (i (i a_ n) (i NUMERAL u_0)))) (i EVEN (i (i EXP m) n)))
(rule (i (i IMAGE drop) (i openu_segment (i (i c_ (i lift a)) (i lift b)))) (i openu_realu_segment (i (i c_ a) b)))
(rule (i (i a_ (i (i cpow w) z)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ w) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i hull affine) (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i (i hull affine) (i (i INSERT a) (i (i INSERT b) EMPTY))))
(rule (i (i a_ (i cball (i (i c_ x) e))) (i (i INSERT x) EMPTY)) (i (i a_ e) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i distance (i (i c_ x) y))) (i w_ (i (i a_ x) y)))
(rule (i (i s_b_ (i (i intu_le x) y)) (i w_ (i (i a_ x) y))) (i (i intu_lt x) y))
(rule (i (i s_b_ (i (i l_a_u_c s0) t)) (i w_ (i (i l_a_u_c t) s0))) (i (i l_u_c s0) t))
(rule (i (i s_b_ (i (i l_a_u_c s0) t)) (i w_ (i (i a_u_c s0) t))) (i (i l_u_c s0) t))
(rule (i (i s_b_ (i (i l_a_ m) n)) (i w_ (i (i a_ m) n))) (i (i l_ m) n))
(rule (i (i s_b_ (i (i realu_le x) y)) (i w_ (i (i a_ x) y))) (i (i realu_lt x) y))
(rule (i (i s_b_ (i (i SUBSET s0) t)) (i w_ (i (i a_ s0) t))) (i (i PSUBSET s0) t))
(rule (i (i integral (i closedu_interval (i (i CONS (i (i c_ a) a)) NIL))) f) (i vec (i NUMERAL u_0)))
(rule (i (i realu_integral (i closedu_realu_interval (i (i CONS (i (i c_ a) a)) NIL))) f) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i s_b_ (i (i realu_le (i realu_neg k)) x)) (i (i realu_le x) k)) (i (i realu_le (i realu_abs x)) k))
(rule (i (i b_s_ (i (i a_ m) (i SUC n))) (i (i l_a_ m) n)) (i (i l_a_ m) (i SUC n)))
(rule (i (i a_ (i (i vectoru_add x) y)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ y) (i vectoru_neg x)))
(rule (i (i (i m_m_g_ f) (i f x)) (i (i within (i at x)) s0)) (i (i continuous f) (i (i within (i at x)) s0)))
(rule (i (i (i COND (i (i a_ l) NIL)) (i HD m)) (i HD l)) (i HD (i (i APPEND l) m)))
(rule (i (i b_s_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0)))) (i real0 z)) (i real0 (i (i complexu_mul (i Cx x)) z)))
(rule (i (i IMAGE (i scale t)) (i (i normball (i vec (i NUMERAL u_0))) r)) (i (i ellipsoid t) r))
(rule (i (i (i COND (i (i a_ q) NIL)) (i LAST p)) (i LAST q)) (i LAST (i (i APPEND p) q)))
(rule (i (i a_ (i (i vectoru_add x) y)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ x) (i vectoru_neg y)))
(rule (i setdist (i (i c_ (i (i INSERT x) EMPTY)) (i (i INSERT y) EMPTY))) (i distance (i (i c_ x) y)))
(rule (i (i realu_mul (i exp (i (i realu_add x) y))) (i exp (i realu_neg x))) (i exp y))
(rule (i (i IN x) (i ball (i (i c_ (i vec (i NUMERAL u_0))) e))) (i (i realu_lt (i vectoru_norm x)) e))
(rule (i (i s_b_ (i (i intu_le (i intu_neg k)) x)) (i (i intu_le x) k)) (i (i intu_le (i intu_abs x)) k))
(rule (i (i s_b_ (i (i intu_lt (i intu_neg k)) x)) (i (i intu_lt x) k)) (i (i intu_lt (i intu_abs x)) k))
(rule (i (i IN x) (i cball (i (i c_ (i vec (i NUMERAL u_0))) e))) (i (i realu_le (i vectoru_norm x)) e))
(rule (i (i s_b_ (i (i realu_lt (i realu_neg k)) x)) (i (i realu_lt x) k)) (i (i realu_lt (i realu_abs x)) k))
(rule (i (i intu_le (i (i intu_add x) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) y) (i (i intu_lt x) y))
(rule (i (i a_ (i closedu_realu_interval (i (i CONS (i (i c_ a) b)) NIL))) EMPTY) (i (i realu_lt b) a))
(rule (i sin (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i a_ (i distance (i (i c_ x) y))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) y))
(rule (i (i realu_le (i distance (i (i c_ x) y))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) y))
(rule (i (i complexu_mul (i cexp (i (i vectoru_add w) z))) (i cexp (i vectoru_neg z))) (i cexp w))
(rule (i (i a_ (i (i vectoru_sub x) y)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ x) y))
(rule (i Cx (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i casn (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))))
(rule (i Cx (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i cacs (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i atn (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i realu_neg (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i asn (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))))
(rule (i (i IMAGE finiteu_index) (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i dimindex UNIV))) UNIV)
(rule (i (i (i COND b) (i (i d_ x) i0)) (i (i d_ y) i0)) (i (i d_ (i (i (i COND b) x) y)) i0))
(rule (i cos (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i a_ (i sin (i (i realu_mul n) pi))) (i realu_ofu_num (i NUMERAL u_0))) (i integer n))
(rule (i (i a_ (i realu_sgn x)) (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_lt x) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i trivialu_limit (i (i within (i at (i lift x))) (i (i IMAGE lift) s0))) (i trivialu_limit (i (i within (i atreal x)) s0)))
(rule (i angle (i (i c_ x) (i (i c_ (i vec (i NUMERAL u_0))) y))) (i (i vectoru_angle x) y))
(rule (i (i s_b_ (i (i (i netord n) x) y)) (i (i IN x) s0)) (i (i (i netord (i (i within n) s0)) x) y))
(rule (i (i (i (i (i frustum v0) v1) (i realu_ofu_num (i NUMERAL u_0))) h) a) (i (i (i (i frustt v0) v1) h) a))
(rule (i (i INTER (i (i normball v0) r)) (i (i (i rconeu_gt v0) v1) a)) (i (i (i (i conicu_cap v0) v1) r) a))
(rule (i (i (i m_m_m_g_ f) (i f x)) (i (i within (i at x)) s0)) (i (i realu_continuous f) (i (i within (i at x)) s0)))
(rule (i distance (i (i c_ (i (i pastecart x) y)) (i (i pastecart x) yi_))) (i distance (i (i c_ y) yi_)))
(rule (i distance (i (i c_ (i (i pastecart x) y)) (i (i pastecart xi_) y))) (i distance (i (i c_ x) xi_)))
(rule (i distance (i (i c_ (i (i r_ c) x)) (i (i r_ c) y))) (i (i realu_mul (i realu_abs c)) (i distance (i (i c_ x) y))))
(rule (i dist (i (i c_ (i (i p_ m) n)) (i (i p_ m) p))) (i dist (i (i c_ n) p)))
(rule (i (i integrableu_on f) (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i integrableu_on f) (i openu_interval (i (i c_ a) b))))
(rule (i (i s_b_ (i (i IN x) s0)) (i w_ (i (i a_ x) y))) (i (i IN x) (i (i DELETE s0) y)))
(rule (i (i s_b_ (i (i IN x) s0)) (i w_ (i (i IN x) t))) (i (i IN x) (i (i DIFF s0) t)))
(rule (i (i IMAGE f) (i (i (i support op) (i (i o g) f)) s0)) (i (i (i support op) g) (i (i IMAGE f) s0)))
(rule (i (i realu_integrableu_on f) (i closedu_realu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i realu_integrableu_on f) (i openu_realu_interval (i (i c_ a) b))))
(rule (i dist (i (i c_ (i (i p_ m) p)) (i (i p_ n) p))) (i dist (i (i c_ m) n)))
(rule (i (i IMAGE g) (i closedu_segment (i (i CONS (i (i c_ u) v)) NIL))) (i pathu_image (i (i (i subpath u) v) g)))
(rule (i (i (i m_m_m_g_ f) (i f x)) (i (i within (i atreal x)) s0)) (i (i realu_continuous f) (i (i within (i atreal x)) s0)))
(rule (i dist (i (i c_ (i (i t_ m) n)) (i (i t_ m) p))) (i (i t_ m) (i dist (i (i c_ n) p))))
(rule (i (i s_b_ (i w_ (i (i IN x) s0))) (i (i SUBSET s0) t)) (i (i SUBSET s0) (i (i DELETE t) x)))
(rule (i (i b_s_ (i (i R a0) a1)) (i (i (i SC R) a1) a0)) (i (i (i SC R) a0) a1))
(rule (i (i (i a_a_ (i intu_ofu_num x)) (i intu_ofu_num y)) (i intu_mod (i intu_ofu_num n))) (i (i (i a_a_ x) y) (i numu_mod n)))
(rule (i dist (i (i c_ (i (i t_ m) p)) (i (i t_ n) p))) (i (i t_ (i dist (i (i c_ m) n))) p))
(rule (i (i (i m_m_g_ f) (i f x)) (i (i within (i atreal x)) s0)) (i (i continuous f) (i (i within (i atreal x)) s0)))
(rule (i (i IN x) (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i (i between x) (i (i c_ a) b)))
(rule (i (i s_b_ (i (i DISJOINT s0) t)) (i w_ (i (i IN x) t))) (i (i DISJOINT (i (i INSERT x) s0)) t))
(rule (i (i s_b_ (i (i b_s_ (i w_ b)) t1)) (i (i b_s_ b) t2)) (i (i (i COND b) t1) t2))
(rule (i (i integral (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) f) (i (i integral (i openu_interval (i (i c_ a) b))) f))
(rule (i (i realu_integral (i closedu_realu_interval (i (i CONS (i (i c_ a) b)) NIL))) f) (i (i realu_integral (i openu_realu_interval (i (i c_ a) b))) f))
(rule (i w_ (i (i a_ z) (i Cx (i realu_ofu_num (i NUMERAL u_0))))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i vectoru_norm z)))
(rule (i (i a_ n) (i intu_neg (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i simplex n) EMPTY))
(rule (i (i complexu_pow (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) n) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i cpow (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) z) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i w_ (i (i a_ (i Arg z)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Arg z)))
(rule (i (i a_ (i complexu_inv x)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ x) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i intu_pow (i intu_abs x)) (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i (i intu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i intu_le (i affu_dim s0)) (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i collinear s0))
(rule (i (i a_ (i cnj z)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ z) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i realu_pow (i realu_abs x)) (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i w_ (i (i a_ (i det A)) (i realu_ofu_num (i NUMERAL u_0)))) (i invertible A))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i dot x) x)) (i w_ (i (i a_ x) (i vec (i NUMERAL u_0)))))
(rule (i (i a_ (i vectoru_neg x)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ x) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i a_ (i realu_inv x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i a_ x) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i a_ (i csqrt z)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ z) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_mul x) x)) (i w_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i complex (i (i c_ (i Re z)) (i realu_neg (i Im z)))) (i cnj z))
(rule (i (i simplex (i intu_neg (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) s0) (i (i a_ s0) EMPTY))
(rule (i (i affu_ge (i (i INSERT x) EMPTY)) (i (i INSERT x) EMPTY)) (i (i INSERT x) EMPTY))
(rule (i (i (i hasu_integral (i indicator s0)) (i vec (i NUMERAL u_0))) UNIV) (i negligible s0))
(rule (i (i hull convexu_cone) (i (i UNION s0) (i (i IMAGE vectoru_neg) s0))) (i span s0))
(rule (i (i realu_mul (i exp (i Re z))) (i cos (i Im z))) (i Re (i cexp z)))
(rule (i (i vectoru_add (i ccos z)) (i (i complexu_mul ii) (i csin z))) (i cexp (i (i complexu_mul ii) z)))
(rule (i (i INTER (i closure s0)) (i closure (i (i DIFF UNIV) s0))) (i frontier s0))
(rule (i (i realu_mul (i exp (i Re z))) (i sin (i Im z))) (i Im (i cexp z)))
(rule (i (i realu_pow (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) n) (i cos (i (i realu_mul (i realu_ofu_num n)) pi)))
(rule (i (i b_s_ (i (i a_ x) h)) (i (i MEM x) t)) (i (i MEM x) (i (i CONS h) t)))
(rule (i openu_interval (i (i c_ (i vectoru_neg (i lift e))) (i lift e))) (i ball (i (i c_ (i vec (i NUMERAL u_0))) e)))
(rule (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i acs (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i asn (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i hrealu_add (i mku_hreal (i naddu_eq x))) (i mku_hreal (i naddu_eq y))) (i mku_hreal (i naddu_eq (i (i naddu_add x) y))))
(rule (i (i hrealu_mul (i mku_hreal (i naddu_eq x))) (i mku_hreal (i naddu_eq y))) (i mku_hreal (i naddu_eq (i (i naddu_mul x) y))))
(rule (i (i hrealu_le (i mku_hreal (i naddu_eq x))) (i mku_hreal (i naddu_eq y))) (i (i naddu_le x) y))
(rule (i (i intu_mul (i intu_neg (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) x) (i intu_neg x))
(rule (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_add x) x)) (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i (i COND (i (i a_ t) NIL)) h) (i LAST t)) (i LAST (i (i CONS h) t)))
(rule (i (i vectoru_sub (i (i r_ a) x)) (i (i r_ b) x)) (i (i r_ (i (i realu_sub a) b)) x))
(rule (i (i vectoru_add (i (i r_ c) x)) (i (i r_ c) y)) (i (i r_ c) (i (i vectoru_add x) y)))
(rule (i (i vectoru_sub (i (i r_ c) x)) (i (i r_ c) y)) (i (i r_ c) (i (i vectoru_sub x) y)))
(rule (i (i vectoru_add (i (i r_ a) x)) (i (i r_ b) x)) (i (i r_ (i (i realu_add a) b)) x))
(rule (i (i realu_add (i realu_ofu_num n)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i SUC n)))
(rule (i (i intu_add (i intu_ofu_num n)) (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i intu_ofu_num (i SUC n)))
(rule (i (i t_ (i (i EXP u_0) n)) (i (i EXP u_0) n)) (i (i EXP u_0) (i BIT0 n)))
(rule (i (i r_ (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) x) (i vectoru_neg x))
(rule (i (i r_r_ (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) A) (i matrixu_neg A))
(rule (i (i openu_in (i (i subtopology euclidean) (i (i hull affine) s0))) s0) (i (i a_ (i relativeu_interior s0)) s0))
(rule (i (i EL (i (i p_ n) (i NUMERAL (i BIT1 u_0)))) l) (i (i EL n) (i TL l)))
(rule (i numu_ofu_int (i intu_gcd (i (i c_ (i intu_ofu_num a)) (i intu_ofu_num b)))) (i numu_gcd (i (i c_ a) b)))
(rule (i (i realu_max (i (i realu_sub b) a)) (i realu_ofu_num (i NUMERAL u_0))) (i realu_measure (i openu_realu_interval (i (i c_ a) b))))
(rule (i (i a_ (i (i dot x) y)) (i realu_ofu_num (i NUMERAL u_0))) (i (i orthogonal x) y))
(rule (i (i hull convex) (i (i INSERT a) (i (i INSERT b) EMPTY))) (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL)))
(rule (i (i intu_le (i (i intu_add x) y)) (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_le x) (i intu_neg y)))
(rule (i (i realu_lt (i (i realu_add x) y)) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_lt x) (i realu_neg y)))
(rule (i (i b_s_ (i ODD m)) (i (i a_ n) (i NUMERAL u_0))) (i ODD (i (i EXP m) n)))
(rule (i (i realu_le (i (i realu_add x) y)) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_le x) (i realu_neg y)))
(rule (i content (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i measure (i openu_interval (i (i c_ a) b))))
(rule (i (i vectoru_add (i Cx x)) (i (i complexu_mul ii) (i Cx y))) (i complex (i (i c_ x) y)))
(rule (i closure (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL)))
(rule (i (i a_ (i (i hull convex) s0)) (i (i INSERT a) EMPTY)) (i (i a_ s0) (i (i INSERT a) EMPTY)))
(rule (i (i s_b_ (i (i a_ l) NIL)) (i (i a_ m) NIL)) (i (i a_ (i (i APPEND l) m)) NIL))
(rule (i (i s_b_ (i (i a_ s0) EMPTY)) (i (i a_ t) EMPTY)) (i (i a_ (i (i UNION s0) t)) EMPTY))
(rule (i (i a_ (i (i hull affine) s0)) (i (i INSERT a) EMPTY)) (i (i a_ s0) (i (i INSERT a) EMPTY)))
(rule (i (i b_s_ (i (i a_ s0) EMPTY)) (i (i a_ t) EMPTY)) (i (i a_ (i (i CROSS s0) t)) EMPTY))
(rule (i (i a_ (i (i realu_add x) y)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ y) (i realu_neg x)))
(rule (i (i b_s_ (i (i intu_lt x) y)) (i (i a_ x) y)) (i (i intu_le x) y))
(rule (i (i b_s_ (i (i a_ m) n)) (i (i l_ m) n)) (i (i l_ m) (i SUC n)))
(rule (i (i s_b_ (i path p)) (i (i SUBSET (i pathu_image p)) s0)) (i (i (i homotopicu_paths s0) p) p))
(rule (i (i (i hasu_complexu_derivative f) (i (i complexu_derivative f) x)) (i at x)) (i (i complexu_differentiable f) (i at x)))
(rule (i (i b_s_ (i (i l_u_c s0) t)) (i (i a_u_c s0) t)) (i (i l_a_u_c s0) t))
(rule (i (i s_b_ (i FINITE s0)) (i (i a_ (i CARD s0)) n)) (i (i HASu_SIZE s0) n))
(rule (i (i b_s_ (i (i l_ m) n)) (i (i a_ m) n)) (i (i l_a_ m) n))
(rule (i (i b_s_ (i (i realu_lt x) y)) (i (i a_ x) y)) (i (i realu_le x) y))
(rule (i (i s_b_ (i realu_measurable s0)) (i (i a_ (i realu_measure s0)) m)) (i (i hasu_realu_measure s0) m))
(rule (i (i MEM (i (i c_ x) (i (i ASSOC x) l))) l) (i (i MEM x) (i (i MAP FST) l)))
(rule (i (i (i hasu_realu_derivative f) (i (i realu_derivative f) x)) (i atreal x)) (i (i realu_differentiable f) (i atreal x)))
(rule (i (i b_s_ (i (i realu_lt x) y)) (i (i realu_lt y) x)) (i w_ (i (i a_ x) y)))
(rule (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_add x) y)) (i (i intu_le (i intu_neg x)) y))
(rule (i (i b_s_ (i (i intu_lt x) y)) (i (i intu_lt y) x)) (i w_ (i (i a_ x) y)))
(rule (i (i a_ (i (i realu_add x) y)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i realu_neg y)))
(rule (i (i a_ (i (i intu_add x) y)) (i intu_ofu_num (i NUMERAL u_0))) (i (i a_ y) (i intu_neg x)))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_add x) y)) (i (i realu_lt (i realu_neg x)) y))
(rule (i w_ (i (i a_ (i openu_interval (i (i c_ a) b))) EMPTY)) (i (i realu_lt (i drop a)) (i drop b)))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_add x) y)) (i (i realu_le (i realu_neg x)) y))
(rule (i (i s_b_ (i measurable s0)) (i (i a_ (i measure s0)) m)) (i (i hasu_measure s0) m))
(rule (i FINITE (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i realu_le (i drop b)) (i drop a)))
(rule (i (i convexu_on (i (i o f) drop)) (i (i IMAGE lift) s0)) (i (i realu_convexu_on f) s0))
(rule (i (i a_ (i (i intu_add x) y)) (i intu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i intu_neg y)))
(rule (i interior (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i openu_interval (i (i c_ a) b)))
(rule (i (i UNION (i (i DIFF X) Y)) (i (i DIFF Y) X)) (i (i SDIFF X) Y))
(rule (i (i a_ (i (i dot x) x)) (i (i dot y) y)) (i (i a_ (i vectoru_norm x)) (i vectoru_norm y)))
(rule (i (i realu_le (i (i dot x) x)) (i (i dot y) y)) (i (i realu_le (i vectoru_norm x)) (i vectoru_norm y)))
(rule (i (i realu_lt (i (i dot x) x)) (i (i dot y) y)) (i (i realu_lt (i vectoru_norm x)) (i vectoru_norm y)))
(rule (i negligible (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i a_ (i openu_interval (i (i c_ a) b))) EMPTY))
(rule (i realu_negligible (i closedu_realu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i a_ (i openu_realu_interval (i (i c_ a) b))) EMPTY))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_sub x) y)) (i (i realu_le y) x))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_sub x) y)) (i (i realu_lt y) x))
(rule (i (i a_ (i (i intu_sub x) y)) (i intu_ofu_num (i NUMERAL u_0))) (i (i a_ x) y))
(rule (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_sub x) y)) (i (i intu_le y) x))
(rule (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_sub x) y)) (i (i intu_lt y) x))
(rule (i (i s_b_ (i (i hrealu_le x) y)) (i (i hrealu_le y) x)) (i (i a_ x) y))
(rule (i (i s_b_ (i (i naddu_le x) y)) (i (i naddu_le y) x)) (i (i naddu_eq x) y))
(rule (i (i a_ (i (i realu_sub x) y)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) y))
(rule (i w_ (i (i a_ (i openu_realu_interval (i (i c_ a) b))) EMPTY)) (i (i realu_lt a) b))
(rule (i (i INTER (i from k)) (i (i o_o_ (i NUMERAL u_0)) n)) (i (i o_o_ k) n))
(rule (i tan (i (i realu_add x) (i (i realu_mul (i realu_ofu_num n)) pi))) (i tan x))
(rule (i (i a_ (i binom (i (i c_ n) k))) (i NUMERAL u_0)) (i (i l_ n) k))
(rule (i (i s_b_ (i (i realu_le x) y)) (i (i realu_le y) x)) (i (i a_ x) y))
(rule (i (i s_b_ (i (i intu_le x) y)) (i (i intu_le y) x)) (i (i a_ x) y))
(rule (i (i s_b_ (i (i l_a_ m) n)) (i (i l_a_ n) m)) (i (i a_ m) n))
(rule (i (i m_ (i (i p_ n) (i NUMERAL (i BIT1 u_0)))) m) (i CARD (i (i o_o_ m) n)))
(rule (i (i s_b_ (i (i SUBSET s0) t)) (i (i SUBSET t) s0)) (i (i a_ s0) t))
(rule (i (i s_b_ (i (i trealu_le x) y)) (i (i trealu_le y) x)) (i (i trealu_eq x) y))
(rule (i FINITE (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i (i a_ a) b))
(rule (i (i s_b_ (i (i l_a_u_c s0) t)) (i (i l_a_u_c t) s0)) (i (i a_u_c s0) t))
(rule (i (i complexu_mul (i cexp (i (i complexu_mul ii) (i Cx t)))) z) (i (i rotate2d t) z))
(rule (i (i a_ (i (i vectoru_sub x) y)) (i vec (i NUMERAL u_0))) (i (i a_ x) y))
(rule (i (i SUBSET s0) (i (i INSERT (i vec (i NUMERAL u_0))) EMPTY)) (i (i a_ (i dim s0)) (i NUMERAL u_0)))
(rule (i (i b_s_ (i (i a_ s0) EMPTY)) (i (i a_ s0) UNIV)) (i (i s_b_ (i closed s0)) (i open s0)))
(rule (i (i b_s_ (i (i a_ s0) EMPTY)) (i (i a_ s0) UNIV)) (i (i a_ (i frontier s0)) EMPTY))
(rule (i (i FCONS (i f (i NUMERAL u_0))) (i (i o f) SUC)) f)
(rule (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) x) x)
(rule (i (i complexu_pow (i csqrt z)) (i NUMERAL (i BIT0 (i BIT1 u_0)))) z)
(rule (i (i complexu_mul x) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) x)
(rule (i (i complexu_div z) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) z)
(rule (i clog (i vectoru_neg (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i (i complexu_mul ii) (i Cx pi)))
(rule (i (i b_s_ (i (i R x) y)) (i (i R y) x)) (i (i (i SC R) x) y))
(rule (i cacs (i vectoru_neg (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i Cx pi))
(rule (i sqrt (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_abs x))
(rule (i (i realu_mul (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) x) (i realu_neg x))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_add x) x)) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i realu_lt (i Im (i complexu_inv z))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Im z)))
(rule (i (i realu_le (i Im (i complexu_inv z))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Im z)))
(rule (i (i a_ (i (i dot x) x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i vec (i NUMERAL u_0))))
(rule (i (i a_ (i (i dot x) x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ (i vectoru_norm x)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Im (i complexu_inv z))) (i (i realu_le (i Im z)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i Im (i complexu_inv z))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ (i Im z)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i Arg (i complexu_inv z))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ (i Arg z)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i vectoru_norm (i complex (i (i c_ (i cos t)) (i sin t)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Im (i complexu_inv z))) (i (i realu_lt (i Im z)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i realu_sgn x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_gt x) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i exp x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_add (i mku_real (i trealu_eq x1))) (i mku_real (i trealu_eq y1))) (i mku_real (i trealu_eq (i (i trealu_add x1) y1))))
(rule (i (i realu_mul (i mku_real (i trealu_eq x1))) (i mku_real (i trealu_eq y1))) (i mku_real (i trealu_eq (i (i trealu_mul x1) y1))))
(rule (i (i realu_le (i mku_real (i trealu_eq x1))) (i mku_real (i trealu_eq y1))) (i (i trealu_le x1) y1))
(rule (i (i (i ITER n) f) (i (i (i ITER m) f) x)) (i (i (i ITER (i (i p_ n) m)) f) x))
(rule (i (i PASSOC f) (i (i c_ x) (i (i c_ y) z))) (i f (i (i c_ (i (i c_ x) y)) z)))
(rule (i (i (i ITLIST f) l1) (i (i (i ITLIST f) l2) a)) (i (i (i ITLIST f) (i (i APPEND l1) l2)) a))
(rule (i (i DISJOINT (i (i pathu_component s0) a)) (i (i pathu_component s0) b)) (i w_ (i (i IN a) (i (i pathu_component s0) b))))
(rule (i (i complexu_mul (i (i complexu_pow x) n)) (i (i complexu_pow y) n)) (i (i complexu_pow (i (i complexu_mul x) y)) n))
(rule (i (i vectoru_sub (i (i matrixu_vectoru_mul A) x)) (i (i matrixu_vectoru_mul B) x)) (i (i matrixu_vectoru_mul (i (i matrixu_sub A) B)) x))
(rule (i (i vectoru_sub (i (i dropout k) x)) (i (i dropout k) y)) (i (i dropout k) (i (i vectoru_sub x) y)))
(rule (i (i vectoru_add (i (i complexu_mul x) y)) (i (i complexu_mul x) z)) (i (i complexu_mul x) (i (i vectoru_add y) z)))
(rule (i (i intu_mul (i (i intu_pow x) m)) (i (i intu_pow x) n)) (i (i intu_pow x) (i (i p_ m) n)))
(rule (i (i realu_sub (i (i dot x) y)) (i (i dot x) z)) (i (i dot x) (i (i vectoru_sub y) z)))
(rule (i (i realu_add (i (i realu_mul x) y)) (i (i realu_mul x) z)) (i (i realu_mul x) (i (i realu_add y) z)))
(rule (i (i hrealu_add (i (i hrealu_mul m) p)) (i (i hrealu_mul n) p)) (i (i hrealu_mul (i (i hrealu_add m) n)) p))
(rule (i (i s_b_ (i (i realu_le x) z)) (i (i realu_le y) z)) (i (i realu_le (i (i realu_max x) y)) z))
(rule (i (i s_b_ (i (i realu_lt x) z)) (i (i realu_lt y) z)) (i (i realu_lt (i (i realu_max x) y)) z))
(rule (i (i s_b_ (i (i IN x) t)) (i (i SUBSET s0) t)) (i (i SUBSET (i (i INSERT x) s0)) t))
(rule (i (i realu_mul (i (i rpow x) z)) (i (i rpow y) z)) (i (i rpow (i (i realu_mul x) y)) z))
(rule (i (i APPEND (i (i FILTER P) l1)) (i (i FILTER P) l2)) (i (i FILTER P) (i (i APPEND l1) l2)))
(rule (i (i realu_sub (i (i d_ x) i0)) (i (i d_ y) i0)) (i (i d_ (i (i vectoru_sub x) y)) i0))
(rule (i (i vectoru_add (i (i matrixu_vectoru_mul A) x)) (i (i matrixu_vectoru_mul A) y)) (i (i matrixu_vectoru_mul A) (i (i vectoru_add x) y)))
(rule (i (i complexu_div (i (i cpow w) z1)) (i (i cpow w) z2)) (i (i cpow w) (i (i vectoru_sub z1) z2)))
(rule (i (i matrixu_add (i (i matrixu_mul A) B)) (i (i matrixu_mul A) C)) (i (i matrixu_mul A) (i (i matrixu_add B) C)))
(rule (i (i s_b_ (i (i intu_le x) z)) (i (i intu_le y) z)) (i (i intu_le (i (i intu_max x) y)) z))
(rule (i (i s_b_ (i (i intu_lt x) z)) (i (i intu_lt y) z)) (i (i intu_lt (i (i intu_max x) y)) z))
(rule (i (i b_s_ (i (i a_ x) y)) (i (i IN x) s0)) (i (i IN x) (i (i INSERT y) s0)))
(rule (i (i b_s_ (i (i realu_lt z) x)) (i (i realu_lt z) y)) (i (i realu_lt z) (i (i realu_max x) y)))
(rule (i (i realu_sub (i (i realu_mul x) y)) (i (i realu_mul x) z)) (i (i realu_mul x) (i (i realu_sub y) z)))
(rule (i (i s_b_ (i (i realu_lt z) x)) (i (i realu_lt z) y)) (i (i realu_lt z) (i (i realu_min x) y)))
(rule (i (i b_s_ (i (i s_b_ p) r)) (i (i s_b_ q) r)) (i (i s_b_ (i (i b_s_ p) q)) r))
(rule (i (i realu_add (i (i realu_mul x) z)) (i (i realu_mul y) z)) (i (i realu_mul (i (i realu_add x) y)) z))
(rule (i (i s_b_ (i (i ALL P) l1)) (i (i ALL P) l2)) (i (i ALL P) (i (i APPEND l1) l2)))
(rule (i (i realu_add (i (i dot x) z)) (i (i dot y) z)) (i (i dot (i (i vectoru_add x) y)) z))
(rule (i (i b_s_ (i (i intu_lt z) x)) (i (i intu_lt z) y)) (i (i intu_lt z) (i (i intu_max x) y)))
(rule (i (i vectoru_add (i (i matrixu_vectoru_mul A) x)) (i (i matrixu_vectoru_mul B) x)) (i (i matrixu_vectoru_mul (i (i matrixu_add A) B)) x))
(rule (i (i s_b_ (i (i intu_lt z) x)) (i (i intu_lt z) y)) (i (i intu_lt z) (i (i intu_min x) y)))
(rule (i (i matrixu_sub (i (i matrixu_mul A) B)) (i (i matrixu_mul A) C)) (i (i matrixu_mul A) (i (i matrixu_sub B) C)))
(rule (i (i b_s_ (i (i IN x) s0)) (i (i IN x) t)) (i (i IN x) (i (i UNION s0) t)))
(rule (i (i vectoru_angle (i (i vectoru_sub a) b)) (i (i vectoru_sub c) b)) (i angle (i (i c_ a) (i (i c_ b) c))))
(rule (i (i matrixu_add (i (i matrixu_mul A) C)) (i (i matrixu_mul B) C)) (i (i matrixu_mul (i (i matrixu_add A) B)) C))
(rule (i (i vectoru_add (i (i dropout k) x)) (i (i dropout k) y)) (i (i dropout k) (i (i vectoru_add x) y)))
(rule (i (i s_b_ (i (i IN x) s0)) (i (i IN x) t)) (i (i IN x) (i (i INTER s0) t)))
(rule (i (i t_ (i (i EXP m) n)) (i (i EXP m) p)) (i (i EXP m) (i (i p_ n) p)))
(rule (i (i realu_add (i (i dot x) y)) (i (i dot x) z)) (i (i dot x) (i (i vectoru_add y) z)))
(rule (i (i realu_mul (i (i realu_pow x) m)) (i (i realu_pow x) n)) (i (i realu_pow x) (i (i p_ m) n)))
(rule (i (i intu_add (i (i intu_mul x) y)) (i (i intu_mul x) z)) (i (i intu_mul x) (i (i intu_add y) z)))
(rule (i (i INTER (i (i normball v0) r)) (i (i cone0 v0) S)) (i (i (i solidu_triangle v0) S) r))
(rule (i (i s_b_ (i (i analyticu_on f) s0)) (i (i analyticu_on f) t)) (i (i analyticu_on f) (i (i UNION s0) t)))
(rule (i (i realu_sub (i (i realu_mul x) z)) (i (i realu_mul y) z)) (i (i realu_mul (i (i realu_sub x) y)) z))
(rule (i (i matrixu_add (i (i r_r_ c) A)) (i (i r_r_ c) B)) (i (i r_r_ c) (i (i matrixu_add A) B)))
(rule (i (i complexu_mul (i (i cpow w) z1)) (i (i cpow w) z2)) (i (i cpow w) (i (i vectoru_add z1) z2)))
(rule (i (i b_s_ (i (i realu_le x) z)) (i (i realu_le y) z)) (i (i realu_le (i (i realu_min x) y)) z))
(rule (i (i b_s_ (i (i realu_lt x) z)) (i (i realu_lt y) z)) (i (i realu_lt (i (i realu_min x) y)) z))
(rule (i (i realu_div (i (i realu_pow x) n)) (i (i realu_pow y) n)) (i (i realu_pow (i (i realu_div x) y)) n))
(rule (i (i matrixu_sub (i (i matrixu_mul A) C)) (i (i matrixu_mul B) C)) (i (i matrixu_mul (i (i matrixu_sub A) B)) C))
(rule (i (i intu_mul (i (i intu_pow x) n)) (i (i intu_pow y) n)) (i (i intu_pow (i (i intu_mul x) y)) n))
(rule (i (i complexu_mul (i (i complexu_pow x) m)) (i (i complexu_pow x) n)) (i (i complexu_pow x) (i (i p_ m) n)))
(rule (i (i intu_sub (i (i intu_mul x) y)) (i (i intu_mul x) z)) (i (i intu_mul x) (i (i intu_sub y) z)))
(rule (i (i b_s_ (i (i intu_le x) z)) (i (i intu_le y) z)) (i (i intu_le (i (i intu_min x) y)) z))
(rule (i (i b_s_ (i (i intu_lt x) z)) (i (i intu_lt y) z)) (i (i intu_lt (i (i intu_min x) y)) z))
(rule (i (i MAP f) (i (i FILTER (i (i o P) f)) l)) (i (i FILTER P) (i (i MAP f) l)))
(rule (i (i intu_add (i (i intu_mul x) z)) (i (i intu_mul y) z)) (i (i intu_mul (i (i intu_add x) y)) z))
(rule (i (i matrixu_sub (i (i r_r_ c) A)) (i (i r_r_ c) B)) (i (i r_r_ c) (i (i matrixu_sub A) B)))
(rule (i (i UNION (i (i IMAGE f) s0)) (i (i IMAGE f) t)) (i (i IMAGE f) (i (i UNION s0) t)))
(rule (i (i matrixu_add (i (i r_r_ b) A)) (i (i r_r_ c) A)) (i (i r_r_ (i (i realu_add b) c)) A))
(rule (i (i m_ (i (i t_ m) n)) (i (i t_ m) p)) (i (i t_ m) (i (i m_ n) p)))
(rule (i (i DISJOINT (i (i connectedu_component s0) a)) (i (i connectedu_component s0) b)) (i w_ (i (i IN a) (i (i connectedu_component s0) b))))
(rule (i (i vectoru_add (i (i cross x) z)) (i (i cross y) z)) (i (i cross (i (i vectoru_add x) y)) z))
(rule (i (i complexu_div (i (i complexu_pow x) n)) (i (i complexu_pow y) n)) (i (i complexu_pow (i (i complexu_div x) y)) n))
(rule (i (i s_b_ (i (i l_a_ m) p)) (i (i l_a_ p) n)) (i (i IN p) (i (i o_o_ m) n)))
(rule (i (i b_s_ (i (i s_b_ p) q)) (i (i s_b_ p) r)) (i (i s_b_ p) (i (i b_s_ q) r)))
(rule (i (i vectoru_sub (i (i complexu_mul x) y)) (i (i complexu_mul x) z)) (i (i complexu_mul x) (i (i vectoru_sub y) z)))
(rule (i (i t_ (i (i EXP m) p)) (i (i EXP n) p)) (i (i EXP (i (i t_ m) n)) p))
(rule (i (i hull P) (i (i UNION (i (i hull P) s0)) t)) (i (i hull P) (i (i UNION s0) t)))
(rule (i (i intu_sub (i (i intu_mul x) z)) (i (i intu_mul y) z)) (i (i intu_mul (i (i intu_sub x) y)) z))
(rule (i (i vectoru_add (i (i complexu_mul x) z)) (i (i complexu_mul y) z)) (i (i complexu_mul (i (i vectoru_add x) y)) z))
(rule (i (i b_s_ (i (i realu_le z) x)) (i (i realu_le z) y)) (i (i realu_le z) (i (i realu_max x) y)))
(rule (i (i UNION (i (i INTER s0) t)) (i (i INTER s0) u)) (i (i INTER s0) (i (i UNION t) u)))
(rule (i (i s_b_ (i (i realu_le z) x)) (i (i realu_le z) y)) (i (i realu_le z) (i (i realu_min x) y)))
(rule (i (i vectoru_add (i (i cross x) y)) (i (i cross x) z)) (i (i cross x) (i (i vectoru_add y) z)))
(rule (i (i matrixu_sub (i (i r_r_ b) A)) (i (i r_r_ c) A)) (i (i r_r_ (i (i realu_sub b) c)) A))
(rule (i (i p_ (i (i t_ m) p)) (i (i t_ n) p)) (i (i t_ (i (i p_ m) n)) p))
(rule (i (i hull P) (i (i UNION s0) (i (i hull P) t))) (i (i hull P) (i (i UNION s0) t)))
(rule (i (i (i intu_mod (i intu_ofu_num n)) (i intu_ofu_num x)) (i intu_ofu_num y)) (i (i (i numu_mod n) x) y))
(rule (i (i b_s_ (i (i R x) y)) (i (i a_ x) y)) (i (i (i RC R) x) y))
(rule (i (i INTER (i (i UNION s0) t)) (i (i UNION s0) u)) (i (i UNION s0) (i (i INTER t) u)))
(rule (i (i vectoru_sub (i (i matrixu_vectoru_mul A) x)) (i (i matrixu_vectoru_mul A) y)) (i (i matrixu_vectoru_mul A) (i (i vectoru_sub x) y)))
(rule (i (i b_s_ (i (i intu_le z) x)) (i (i intu_le z) y)) (i (i intu_le z) (i (i intu_max x) y)))
(rule (i (i s_b_ (i (i SUBSET s0) t)) (i (i SUBSET s0) u)) (i (i SUBSET s0) (i (i INTER t) u)))
(rule (i (i realu_mul (i (i realu_pow x) n)) (i (i realu_pow y) n)) (i (i realu_pow (i (i realu_mul x) y)) n))
(rule (i (i s_b_ (i (i intu_le z) x)) (i (i intu_le z) y)) (i (i intu_le z) (i (i intu_min x) y)))
(rule (i (i s_b_ (i (i SUBSET s0) u)) (i (i SUBSET t) u)) (i (i SUBSET (i (i UNION s0) t)) u))
(rule (i (i m_ (i (i t_ m) p)) (i (i t_ n) p)) (i (i t_ (i (i m_ m) n)) p))
(rule (i (i hrealu_add (i (i hrealu_mul x) y)) (i (i hrealu_mul x) z)) (i (i hrealu_mul x) (i (i hrealu_add y) z)))
(rule (i (i vectoru_sub (i (i rotate2d t) w)) (i (i rotate2d t) z)) (i (i rotate2d t) (i (i vectoru_sub w) z)))
(rule (i (i APPEND (i (i MAP f) l1)) (i (i MAP f) l2)) (i (i MAP f) (i (i APPEND l1) l2)))
(rule (i (i vectoru_sub (i (i complexu_mul x) z)) (i (i complexu_mul y) z)) (i (i complexu_mul (i (i vectoru_sub x) y)) z))
(rule (i (i b_s_ (i (i limitu_pointu_of x) s0)) (i (i limitu_pointu_of x) t)) (i (i limitu_pointu_of x) (i (i UNION s0) t)))
(rule (i (i pastecart (i (i r_ c) x1)) (i (i r_ c) y1)) (i (i r_ c) (i (i pastecart x1) y1)))
(rule (i (i realu_add (i (i d_ x) i0)) (i (i d_ y) i0)) (i (i d_ (i (i vectoru_add x) y)) i0))
(rule (i (i b_s_ (i (i MEM x) l1)) (i (i MEM x) l2)) (i (i MEM x) (i (i APPEND l1) l2)))
(rule (i (i b_s_ (i (i R a0) a1)) (i (i a_ a1) a0)) (i (i (i RC R) a0) a1))
(rule (i (i p_p_ (i (i o f) p)) (i (i o f) q)) (i (i o f) (i (i p_p_ p) q)))
(rule (i (i realu_sub (i (i dot x) z)) (i (i dot y) z)) (i (i dot (i (i vectoru_sub x) y)) z))
(rule (i (i s_b_ (i (i DISJOINT s0) u)) (i (i DISJOINT t) u)) (i (i DISJOINT (i (i UNION s0) t)) u))
(rule (i (i p_ (i (i t_ m) n)) (i (i t_ m) p)) (i (i t_ m) (i (i p_ n) p)))
(rule (i (i a_ (i (i intu_add x) y)) (i (i intu_add x) z)) (i (i a_ y) z))
(rule (i (i realu_lt (i (i realu_add x) y)) (i (i realu_add x) z)) (i (i realu_lt y) z))
(rule (i (i intu_le (i (i intu_add x) z)) (i (i intu_add y) z)) (i (i intu_le x) y))
(rule (i (i a_ (i (i vectoru_add x) y)) (i (i vectoru_add x) z)) (i (i a_ y) z))
(rule (i (i realu_lt (i (i realu_add x) z)) (i (i realu_add y) z)) (i (i realu_lt x) y))
(rule (i (i l_a_ (i (i p_ m) n)) (i (i p_ m) p)) (i (i l_a_ n) p))
(rule (i (i a_ (i (i realu_add x) y)) (i (i realu_add x) z)) (i (i a_ y) z))
(rule (i (i a_ (i (i p_ m) n)) (i (i p_ m) p)) (i (i a_ n) p))
(rule (i (i realu_le (i (i realu_add x) y)) (i (i realu_add x) z)) (i (i realu_le y) z))
(rule (i (i (i support op) f) (i (i (i support op) f) s0)) (i (i (i support op) f) s0))
(rule (i (i hrealu_le (i (i hrealu_add m) n)) (i (i hrealu_add m) p)) (i (i hrealu_le n) p))
(rule (i (i m_ (i (i p_ m) p)) (i (i p_ n) p)) (i (i m_ m) n))
(rule (i (i realu_le (i (i realu_add x) z)) (i (i realu_add y) z)) (i (i realu_le x) y))
(rule (i (i (i iterate op) (i (i (i support op) f) s0)) f) (i (i (i iterate op) s0) f))
(rule (i (i a_ (i (i hrealu_add m) n)) (i (i hrealu_add m) p)) (i (i a_ n) p))
(rule (i (i l_a_ (i (i p_ m) p)) (i (i p_ n) p)) (i (i l_a_ m) n))
(rule (i (i intu_add (i (i intu_sub a) b)) (i (i intu_sub b) c)) (i (i intu_sub a) c))
(rule (i permutation (i (i o p) (i swap (i (i c_ a) b)))) (i permutation p))
(rule (i permutation (i (i o (i swap (i (i c_ a) b))) p)) (i permutation p))
(rule (i (i a_ (i (i p_ m) p)) (i (i p_ n) p)) (i (i a_ m) n))
(rule (i (i (i sums (i (i o Cx) f)) (i Cx l)) s0) (i (i (i realu_sums f) l) s0))
(rule (i (i hrealu_le (i (i hrealu_add m) p)) (i (i hrealu_add n) p)) (i (i hrealu_le m) n))
(rule (i (i a_ (i (i rotate2d t) x)) (i (i rotate2d t) y)) (i (i a_ x) y))
(rule (i (i realu_add (i (i realu_sub a) b)) (i (i realu_sub b) c)) (i (i realu_sub a) c))
(rule (i (i vectoru_add (i (i vectoru_sub a) b)) (i (i vectoru_sub b) c)) (i (i vectoru_sub a) c))
(rule (i (i m_ (i (i p_ m) n)) (i (i p_ m) p)) (i (i m_ n) p))
(rule (i (i naddu_le (i (i naddu_add x) y)) (i (i naddu_add x) z)) (i (i naddu_le y) z))
(rule (i (i l_ (i (i p_ m) p)) (i (i p_ n) p)) (i (i l_ m) n))
(rule (i (i a_ (i (i hrealu_add m) p)) (i (i hrealu_add n) p)) (i (i a_ m) n))
(rule (i (i intu_lt (i (i intu_add x) y)) (i (i intu_add x) z)) (i (i intu_lt y) z))
(rule (i (i naddu_le (i (i naddu_add x) z)) (i (i naddu_add y) z)) (i (i naddu_le x) y))
(rule (i (i a_ (i (i intu_add x) z)) (i (i intu_add y) z)) (i (i a_ x) y))
(rule (i (i MOD (i (i p_ (i (i t_ m) n)) p)) n) (i (i MOD p) n))
(rule (i (i a_ (i (i vectoru_add x) z)) (i (i vectoru_add y) z)) (i (i a_ x) y))
(rule (i (i intu_lt (i (i intu_add x) z)) (i (i intu_add y) z)) (i (i intu_lt x) y))
(rule (i (i a_ (i (i realu_add x) z)) (i (i realu_add y) z)) (i (i a_ x) y))
(rule (i (i intu_le (i (i intu_add x) y)) (i (i intu_add x) z)) (i (i intu_le y) z))
(rule (i (i l_ (i (i p_ m) n)) (i (i p_ m) p)) (i (i l_ n) p))
(rule (i (i r_ x) (i vec (i NUMERAL (i BIT1 u_0)))) (i lift x))
(rule (i complex (i (i c_ a) (i realu_ofu_num (i NUMERAL u_0)))) (i Cx a))
(rule (i realu_abs (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i vectoru_norm x))
(rule (i (i d_ z) (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i Im z))
(rule (i (i a_ (i affu_dim s0)) (i intu_ofu_num (i dimindex UNIV))) (i (i a_ (i (i hull affine) s0)) UNIV))
(rule (i closedu_segment (i (i CONS (i (i c_ a) a)) NIL)) (i (i INSERT a) EMPTY))
(rule (i cball (i (i c_ x) (i realu_ofu_num (i NUMERAL u_0)))) (i (i INSERT x) EMPTY))
(rule (i (i DIFF UNIV) (i closure (i (i DIFF UNIV) s0))) (i interior s0))
(rule (i (i s_b_ (i linear f)) (i orthogonalu_matrix (i matrix f))) (i orthogonalu_transformation f))
(rule (i (i DIFF UNIV) (i (i UNION s0) (i outside s0))) (i inside s0))
(rule (i (i DIFF UNIV) (i (i UNION s0) (i inside s0))) (i outside s0))
(rule (i (i DIFF UNIV) (i interior (i (i DIFF UNIV) s0))) (i closure s0))
(rule (i (i (i ALL2 P) NIL) (i (i CONS h2) t2)) F)
(rule (i (i (i ALL2 P) (i (i CONS h1) t1)) NIL) F)
(rule (i (i b_s_ (i P h)) (i (i EX P) t)) (i (i EX P) (i (i CONS h) t)))
(rule (i SUC (i (i p_ (i NUMERAL n)) (i NUMERAL n))) (i NUMERAL (i BIT1 n)))
(rule (i (i s_b_ (i P h)) (i (i ALL P) t)) (i (i ALL P) (i (i CONS h) t)))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i frac x)) (i w_ (i integer x)))
(rule (i acs (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) pi)
(rule (i (i intu_le (i intu_neg x)) (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i intu_lt (i intu_neg x)) (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) x))
(rule (i LAST (i (i CONS h) (i (i CONS k) t))) (i LAST (i (i CONS k) t)))
(rule (i (i INSERT (i f x)) (i (i IMAGE f) s0)) (i (i IMAGE f) (i (i INSERT x) s0)))
(rule (i (i m_m_m_g_ (i (i o drop) s0)) (i drop l)) (i (i m_m_g_ s0) l))
(rule (i span (i (i INSERT (i vec (i NUMERAL u_0))) s0)) (i span s0))
(rule (i (i IN (i INR y)) (i (i p_u_c s0) t)) (i (i IN y) t))
(rule (i (i IN (i INL x)) (i (i p_u_c s0) t)) (i (i IN x) s0))
(rule (i dim (i (i INSERT (i vec (i NUMERAL u_0))) s0)) (i dim s0))
(rule (i (i a_ (i (i INTER (i frontier s0)) s0)) EMPTY) (i open s0))
(rule (i vectoru_norm (i (i pastecart (i vec (i NUMERAL u_0))) y)) (i vectoru_norm y))
(rule (i vectoru_norm (i (i pastecart x) (i vec (i NUMERAL u_0)))) (i vectoru_norm x))
(rule (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL u_0)))) x) (i vectoru_neg x))
(rule (i span (i (i DELETE s0) (i vec (i NUMERAL u_0)))) (i span s0))
(rule (i (i hrealu_mul (i hrealu_ofu_num (i NUMERAL (i BIT1 u_0)))) x) x)
(rule (i realu_sgn (i Im (i (i complexu_mul w) (i cnj z)))) (i realu_sgn (i Im (i (i complexu_div w) z))))
(rule (i vector (i (i CONS x) (i (i CONS y) NIL))) (i complex (i (i c_ x) y)))
(rule (i (i a_ (i cball (i (i c_ x) e))) EMPTY) (i (i realu_lt e) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i ball (i (i c_ x) e))) EMPTY) (i (i realu_le e) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i inf (i (i INSERT x) (i (i INSERT y) EMPTY))) (i (i realu_min x) y))
(rule (i sup (i (i INSERT x) (i (i INSERT y) EMPTY))) (i (i realu_max x) y))
(rule (i intu_ofu_real (i (i realu_sub (i realu_ofu_int x)) (i realu_ofu_int y))) (i (i intu_sub x) y))
(rule (i realu_neg (i (i realu_min (i realu_neg x)) (i realu_neg y))) (i (i realu_max x) y))
(rule (i intu_neg (i (i intu_max (i intu_neg x)) (i intu_neg y))) (i (i intu_min x) y))
(rule (i intu_ofu_real (i (i realu_add (i realu_ofu_int x)) (i realu_ofu_int y))) (i (i intu_add x) y))
(rule (i intu_coprime (i (i c_ (i intu_ofu_num a)) (i intu_ofu_num b))) (i numu_coprime (i (i c_ a) b)))
(rule (i w_ (i (i a_ (i ODD m)) (i ODD n))) (i ODD (i (i p_ m) n)))
(rule (i linepath (i (i c_ (i g a)) (i g a))) (i (i (i subpath a) a) g))
(rule (i realu_neg (i (i realu_max (i realu_neg x)) (i realu_neg y))) (i (i realu_min x) y))
(rule (i intu_ofu_real (i (i realu_max (i realu_ofu_int x)) (i realu_ofu_int y))) (i (i intu_max x) y))
(rule (i intu_gcd (i (i c_ (i intu_ofu_num a)) (i intu_ofu_num b))) (i intu_ofu_num (i numu_gcd (i (i c_ a) b))))
(rule (i intu_ofu_real (i (i realu_min (i realu_ofu_int x)) (i realu_ofu_int y))) (i (i intu_min x) y))
(rule (i intu_ofu_real (i (i realu_mul (i realu_ofu_int x)) (i realu_ofu_int y))) (i (i intu_mul x) y))
(rule (i intu_neg (i (i intu_min (i intu_neg x)) (i intu_neg y))) (i (i intu_max x) y))
(rule (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL)) (i pathu_image (i linepath (i (i c_ a) b))))
(rule (i (i (i m_m_m_g_ f) (i f x)) (i atreal x)) (i (i realu_continuous f) (i atreal x)))
(rule (i (i (i m_m_m_g_ f) (i f x)) (i at x)) (i (i realu_continuous f) (i at x)))
(rule (i (i (i m_m_g_ f) (i f x)) (i atreal x)) (i (i continuous f) (i atreal x)))
(rule (i (i (i m_m_g_ f) (i f x)) (i at x)) (i (i continuous f) (i at x)))
(rule (i distance (i (i c_ (i lift x)) (i lift y))) (i realu_abs (i (i realu_sub x) y)))
(rule (i (i s_b_ (i (i convexu_on f) s0)) (i convex s0)) (i convex (i (i epigraph s0) f)))
(rule (i (i shiftpath t) (i linepath (i (i c_ a) a))) (i linepath (i (i c_ a) a)))
(rule (i (i a_ (i openu_interval (i (i c_ a) b))) EMPTY) (i negligible (i openu_interval (i (i c_ a) b))))
(rule (i (i a_ (i openu_realu_interval (i (i c_ a) b))) EMPTY) (i realu_negligible (i openu_realu_interval (i (i c_ a) b))))
(rule (i (i a_ (i openu_interval (i (i c_ a) b))) EMPTY) (i COUNTABLE (i openu_interval (i (i c_ a) b))))
(rule (i (i (i COND (i (i realu_le m) n)) n) m) (i (i realu_max m) n))
(rule (i (i (i COND (i (i realu_le m) n)) m) n) (i (i realu_min m) n))
(rule (i (i a_ (i (i m_ m) n)) (i NUMERAL u_0)) (i (i l_a_ m) n))
(rule (i (i (i COND (i (i intu_le x) y)) y) x) (i (i intu_max x) y))
(rule (i (i (i COND (i (i intu_le x) y)) x) y) (i (i intu_min x) y))
(rule (i (i IN m) (i (i o_o_ (i NUMERAL u_0)) n)) (i (i l_a_ m) n))
(rule (i cexp (i (i complexu_mul (i Cx (i realu_ofu_num n))) x)) (i (i complexu_pow (i cexp x)) n))
(rule (i (i (i COND (i (i l_a_ m) n)) n) m) (i (i MAX m) n))
(rule (i (i (i COND (i (i l_a_ m) n)) m) n) (i (i MIN m) n))
(rule (i (i a_ (i openu_realu_interval (i (i c_ a) b))) EMPTY) (i (i realu_le b) a))
(rule (i cacs (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i clog (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i vectoru_neg x)) (i vec (i NUMERAL u_0))) (i (i a_ x) (i vec (i NUMERAL u_0))))
(rule (i (i nsum (i (i (i support p_) f) s0)) f) (i (i nsum s0) f))
(rule (i (i (i hasu_derivative f) (i (i frechetu_derivative f) net0)) net0) (i (i differentiable f) net0))
(rule (i (i (i affsign sgnu_ge) (i (i INSERT v) EMPTY)) S) (i (i cone v) S))
(rule (i (i (i hasu_integral f) (i (i integral s0) f)) s0) (i (i integrableu_on f) s0))
(rule (i (i (i m_m_m_g_ f) (i f (i netlimit net0))) net0) (i (i realu_continuous f) net0))
(rule (i (i (i hasu_vectoru_derivative f) (i (i vectoru_derivative f) net0)) net0) (i (i differentiable f) net0))
(rule (i (i (i affsign sgnu_gt) (i (i INSERT v) EMPTY)) S) (i (i cone0 v) S))
(rule (i (i (i realu_sums f) (i (i realu_infsum s0) f)) s0) (i (i realu_summable s0) f))
(rule (i (i a_ (i openu_segment (i (i c_ a) b))) EMPTY) (i (i a_ a) b))
(rule (i (i (i sums f) (i (i infsum s0) f)) s0) (i (i summable s0) f))
(rule (i (i (i hasu_realu_integral f) (i (i realu_integral s0) f)) s0) (i (i realu_integrableu_on f) s0))
(rule (i (i (i higheru_complexu_derivative (i NUMERAL (i BIT1 u_0))) f) z) (i (i complexu_derivative f) z))
(rule (i (i (i affsign sgn) (i (i DIFF s0) t)) t) (i (i (i affsign sgn) s0) t))
(rule (i (i (i m_m_g_ f) (i f (i netlimit net0))) net0) (i (i continuous f) net0))
(rule (i (i IN (i lift x)) (i (i IMAGE lift) s0)) (i (i IN x) s0))
(rule (i (i sum (i (i (i support realu_add) f) s0)) f) (i (i sum s0) f))
(rule (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) (i affu_dim s0)) (i w_ (i (i a_ s0) EMPTY)))
(rule (i (i a_ (i det A)) (i realu_ofu_num (i NUMERAL u_0))) (i (i l_ (i rank A)) (i dimindex UNIV)))
(rule (i (i b_s_ (i FINITE s0)) (i (i a_u_c s0) UNIV)) (i COUNTABLE s0))
(rule (i binom (i (i c_ (i NUMERAL u_0)) (i SUC k))) (i NUMERAL u_0))
(rule (i (i APPEND (i REVERSE l)) (i (i CONS x) NIL)) (i REVERSE (i (i CONS x) l)))
(rule (i csqrt (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i complexu_inv (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i UNIONS (i (i INSERT s0) (i (i INSERT t) EMPTY))) (i (i UNION s0) t))
(rule (i INTERS (i (i INSERT s0) (i (i INSERT t) EMPTY))) (i (i INTER s0) t))
(rule (i (i (i (i RELPOW (i NUMERAL u_0)) R) x) y) (i (i a_ x) y))
(rule (i (i vectoru_add (i Cx (i realu_ofu_num (i NUMERAL u_0)))) x) x)
(rule (i (i intu_mul (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) x) x)
(rule (i (i intu_mul x) (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) x)
(rule (i (i vectoru_add x) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) x)
(rule (i complex (i (i c_ (i Re z)) (i Im z))) z)
(rule (i (i vectoru_sub x) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) x)
(rule (i (i matrixu_vectoru_mul (i mat (i NUMERAL (i BIT1 u_0)))) x) x)
(rule (i (i matrixu_mul (i mat (i NUMERAL (i BIT1 u_0)))) A) A)
(rule (i (i matrixu_mul A) (i mat (i NUMERAL (i BIT1 u_0)))) A)
(rule (i (i r_r_ (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) X) X)
(rule (i (i r_ (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) x) x)
(rule (i dist (i (i c_ m) (i (i p_ m) n))) n)
(rule (i dist (i (i c_ (i (i p_ m) n)) m)) n)
(rule (i CARD (i (i o_o_ (i NUMERAL (i BIT1 u_0))) n)) n)
(rule (i binom (i (i c_ n) (i NUMERAL (i BIT1 u_0)))) n)
(rule (i (i m_ (i SUC n)) (i NUMERAL (i BIT1 u_0))) n)
(rule (i closedu_interval (i (i CONS (i (i c_ a) a)) NIL)) (i (i INSERT a) EMPTY))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i atn x)) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i atn x)) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i realu_inv x)) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i realu_le (i realu_neg x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i realu_lt (i realu_neg x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i floor x)) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i a_ (i frac x)) (i realu_ofu_num (i NUMERAL u_0))) (i integer x))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i realu_inv x)) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i root (i NUMERAL (i BIT0 (i BIT1 u_0)))) x) (i sqrt x))
(rule (i (i a_ (i det A)) (i realu_ofu_num (i NUMERAL u_0))) (i w_ (i invertible A)))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Im z)) (i (i realu_le (i Arg z)) pi))
(rule (i ball (i (i c_ x) (i realu_ofu_num (i NUMERAL u_0)))) EMPTY)
(rule (i (i a_ (i intu_sgn x)) (i intu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i intu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i Im z)) (i realu_ofu_num (i NUMERAL u_0))) (i real0 z))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i realu_neg x)) (i (i realu_le x) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL u_0)))) x) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i realu_neg x)) (i (i realu_lt x) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i rpow (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) z) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i cpow (i Cx (i realu_ofu_num (i NUMERAL u_0)))) z) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i drop x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i vec (i NUMERAL u_0))))
(rule (i (i a_ (i infnorm x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i vec (i NUMERAL u_0))))
(rule (i (i a_ (i intu_neg x)) (i intu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i intu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i vectoru_norm x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i vec (i NUMERAL u_0))))
(rule (i (i a_ (i realu_neg x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i matrixu_neg A)) (i mat (i NUMERAL u_0))) (i (i a_ A) (i mat (i NUMERAL u_0))))
(rule (i (i rotate2d t) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i complexu_mul x) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_mul (i exp (i realu_neg x))) (i exp x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i intu_pow (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) n) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i vectoru_norm (i cexp (i (i complexu_mul ii) (i Cx t)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) (i intu_neg x)) (i (i intu_le x) (i intu_ofu_num (i NUMERAL u_0))))
(rule (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) (i intu_neg x)) (i (i intu_lt x) (i intu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_le (i vectoru_norm x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i vec (i NUMERAL u_0))))
(rule (i (i realu_mul (i exp x)) (i exp (i realu_neg x))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i c_ (i hrealu_ofu_num n)) (i hrealu_ofu_num (i NUMERAL u_0))) (i trealu_ofu_num n))
(rule (i (i a_ (i intu_abs x)) (i intu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i intu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i realu_inv x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i realu_abs x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i realu_sgn x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_pow (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) n) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i m_m_g_ (i (i o Cx) s0)) (i Cx l)) (i (i m_m_m_g_ s0) l))
(rule (i (i m_m_g_ (i (i o lift) s0)) (i lift l)) (i (i m_m_m_g_ s0) l))
(rule (i (i sums (i (i o lift) f)) (i lift l)) (i (i realu_sums f) l))
(rule (i (i (i lifted op) (i SOME x)) (i SOME y)) (i SOME (i (i op x) y)))
(rule (i (i (i COND b) (i f x)) (i f y)) (i f (i (i (i COND b) x) y)))
(rule (i (i (i (i (i frustum v0) v0) h1) h2) a) EMPTY)
(rule (i (i (i COND b) (i f x)) (i g x)) (i (i (i (i COND b) f) g) x))
(rule (i (i s_b_ (i P x)) (i (i MEM x) l)) (i (i MEM x) (i (i FILTER P) l)))
(rule (i UNIONS (i (i IMAGE (i (i slice k) a)) s0)) (i (i (i slice k) a) (i UNIONS s0)))
(rule (i (i CONS (i f h)) (i (i MAP f) t)) (i (i MAP f) (i (i CONS h) t)))
(rule (i (i realu_lt (i (i realu_add x) (i realu_neg y))) z) (i (i realu_lt x) (i (i realu_add z) y)))
(rule (i (i intu_lt (i (i intu_add x) (i intu_neg y))) z) (i (i intu_lt x) (i (i intu_add z) y)))
(rule (i angle (i (i c_ v) (i (i c_ u) w))) (i (i (i arcV u) v) w))
(rule (i (i d_ (i (i d_ (i transp A)) i0)) j) (i (i d_ (i (i d_ A) j)) i0))
(rule (i (i intu_lt y) (i (i intu_add x) (i intu_neg z))) (i (i intu_lt (i (i intu_add y) z)) x))
(rule (i (i realu_lt y) (i (i realu_add x) (i realu_neg z))) (i (i realu_lt (i (i realu_add y) z)) x))
(rule (i (i (i homotopicu_paths s0) (i reversepath p)) (i reversepath q)) (i (i (i homotopicu_paths s0) p) q))
(rule (i (i realu_div x) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) x)
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) x) x)
(rule (i (i d_ (i lift x)) (i NUMERAL (i BIT1 u_0))) x)
(rule (i (i realu_mul x) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) x)
(rule (i Re (i complex (i (i c_ x) y))) x)
(rule (i (i nsum (i (i INSERT x) EMPTY)) f) (i f x))
(rule (i (i vectoru_sub (i (i vectoru_add x) y)) x) y)
(rule (i (i vectoru_add y) (i (i vectoru_sub x) y)) x)
(rule (i (i vectoru_add (i (i vectoru_sub x) y)) y) x)
(rule (i g (i vec (i NUMERAL (i BIT1 u_0)))) (i pathfinish g))
(rule (i (i (i (i ITLIST2 f) NIL) l2) b) b)
(rule (i (i hull convex) (i (i INSERT a) EMPTY)) (i (i INSERT a) EMPTY))
(rule (i (i a_ (i LENGTH l)) (i NUMERAL u_0)) (i (i a_ l) NIL))
(rule (i (i a_ (i (i hull conic) s0)) EMPTY) (i (i a_ s0) EMPTY))
(rule (i (i a_ (i (i hull convex) s0)) EMPTY) (i (i a_ s0) EMPTY))
(rule (i (i a_ (i inside s0)) (i outside s0)) (i (i a_ s0) UNIV))
(rule (i (i a_ (i (i hull affine) s0)) EMPTY) (i (i a_ s0) EMPTY))
(rule (i (i a_ (i dim s0)) (i dimindex UNIV)) (i (i a_ (i span s0)) UNIV))
(rule (i (i hull affine) (i (i INSERT a) EMPTY)) (i (i INSERT a) EMPTY))
(rule (i (i vsum (i (i INSERT x) EMPTY)) f) (i f x))
(rule (i (i (i reduced lab) (i NUMERAL u_0)) x) (i NUMERAL u_0))
(rule (i (i m_ m) (i (i p_ m) n)) (i NUMERAL u_0))
(rule (i (i m_ n) (i (i p_ m) n)) (i NUMERAL u_0))
(rule (i (i (i (i ITLIST2 f) NIL) NIL) b) b)
(rule (i (i pastecart (i vec n)) (i vec n)) (i vec n))
(rule (i binom (i (i c_ (i SUC n)) n)) (i SUC n))
(rule (i (i (i FCONS a) f) (i NUMERAL u_0)) a)
(rule (i (i a_ (i oneu_REP (i oneu_ABS r))) r) r)
(rule (i pathfinish (i linepath (i (i c_ a) b))) b)
(rule (i (i vectoru_sub x) (i (i vectoru_sub x) y)) y)
(rule (i pathstart (i linepath (i (i c_ a) b))) a)
(rule (i (i continuous (i (i o lift) f)) net0) (i (i realu_continuous f) net0))
(rule (i (i a_ (i BIT1 m)) (i BIT0 n)) F)
(rule (i (i a_ (i BIT0 m)) (i BIT1 n)) F)
(rule (i (i pairwise r) (i (i INSERT x) EMPTY)) T)
(rule (i (i realu_div (i sin x)) (i cos x)) (i tan x))
(rule (i (i (i ITER (i NUMERAL u_0)) f) x) x)
(rule (i (i intu_sub (i intu_ofu_num (i NUMERAL u_0))) x) (i intu_neg x))
(rule (i (i summable s0) (i (i o Cx) f)) (i (i realu_summable s0) f))
(rule (i (i summable s0) (i (i o lift) f)) (i (i realu_summable s0) f))
(rule (i (i realu_mul x) (i (i realu_pow x) n)) (i (i realu_pow x) (i SUC n)))
(rule (i (i p_ (i NUMERAL n)) (i NUMERAL n)) (i NUMERAL (i BIT0 n)))
(rule (i (i t_ (i SUC n)) (i FACT n)) (i FACT (i SUC n)))
(rule (i (i intu_mul x) (i (i intu_pow x) n)) (i (i intu_pow x) (i SUC n)))
(rule (i (i complexu_mul x) (i (i complexu_pow x) n)) (i (i complexu_pow x) (i SUC n)))
(rule (i (i vectoru_sub (i vec (i NUMERAL u_0))) x) (i vectoru_neg x))
(rule (i (i a_ (i (i hull affine) s0)) s0) (i affine s0))
(rule (i (i hasu_measure s0) (i realu_ofu_num (i NUMERAL u_0))) (i negligible s0))
(rule (i (i a_ (i relativeu_interior s0)) (i closure s0)) (i affine s0))
(rule (i (i a_ (i openu_in (i topology0 r))) r) (i istopology r))
(rule (i (i matrixu_sub (i mat (i NUMERAL u_0))) A) (i matrixu_neg A))
(rule (i (i a_ (i (i hull conic) s0)) s0) (i conic s0))
(rule (i (i a_ (i (i hull convex) s0)) s0) (i convex s0))
(rule (i (i UNION (i inside s0)) (i outside s0)) (i (i DIFF UNIV) s0))
(rule (i (i hasu_realu_measure s0) (i realu_ofu_num (i NUMERAL u_0))) (i realu_negligible s0))
(rule (i (i a_ (i destu_cart (i mku_cart r))) r) T)
(rule (i (i hull affine) (i (i hull convex) s0)) (i (i hull affine) s0))
(rule (i (i a_ (i Cx (i Re z))) z) (i real0 z))
(rule (i rank (i (i matrixu_mul (i transp A)) A)) (i rank A))
(rule (i (i hrealu_add (i hrealu_ofu_num (i NUMERAL u_0))) x) x)
(rule (i (i a_ (i realu_ofu_int x)) (i realu_ofu_int y)) (i (i a_ x) y))
(rule (i (i complexu_mul (i Cx x)) (i Cx y)) (i Cx (i (i realu_mul x) y)))
(rule (i (i realu_ge (i realu_ofu_int x)) (i realu_ofu_int y)) (i (i intu_ge x) y))
(rule (i (i realu_div (i realu_abs x)) (i realu_abs y)) (i realu_abs (i (i realu_div x) y)))
(rule (i (i realu_gt (i realu_ofu_int x)) (i realu_ofu_int y)) (i (i intu_gt x) y))
(rule (i (i UNION (i closure s0)) (i closure t)) (i closure (i (i UNION s0) t)))
(rule (i (i realu_le (i realu_ofu_int x)) (i realu_ofu_int y)) (i (i intu_le x) y))
(rule (i (i realu_lt (i realu_ofu_int x)) (i realu_ofu_int y)) (i (i intu_lt x) y))
(rule (i (i complexu_mul (i complexu_inv w)) (i complexu_inv z)) (i complexu_inv (i (i complexu_mul w) z)))
(rule (i (i m_ (i BIT1 m)) (i BIT1 n)) (i BIT0 (i (i m_ m) n)))
(rule (i (i m_ (i BIT0 m)) (i BIT0 n)) (i BIT0 (i (i m_ m) n)))
(rule (i (i m_ (i NUMERAL m)) (i NUMERAL n)) (i NUMERAL (i (i m_ m) n)))
(rule (i (i EXP (i NUMERAL m)) (i NUMERAL n)) (i NUMERAL (i (i EXP m) n)))
(rule (i (i t_ (i NUMERAL m)) (i NUMERAL n)) (i NUMERAL (i (i t_ m) n)))
(rule (i (i p_ (i BIT1 m)) (i BIT0 n)) (i BIT1 (i (i p_ m) n)))
(rule (i (i p_ (i BIT0 m)) (i BIT1 n)) (i BIT1 (i (i p_ m) n)))
(rule (i (i p_ (i BIT0 m)) (i BIT0 n)) (i BIT0 (i (i p_ m) n)))
(rule (i (i p_ (i NUMERAL m)) (i NUMERAL n)) (i NUMERAL (i (i p_ m) n)))
(rule (i (i realu_mul (i vectoru_norm w)) (i vectoru_norm z)) (i vectoru_norm (i (i complexu_mul w) z)))
(rule (i (i realu_add (i realu_ofu_int x)) (i realu_ofu_int y)) (i realu_ofu_int (i (i intu_add x) y)))
(rule (i simpleu_path (i linepath (i (i c_ a) b))) (i w_ (i (i a_ a) b)))
(rule (i (i matrixu_add (i transp A)) (i transp B)) (i transp (i (i matrixu_add A) B)))
(rule (i (i s_b_ (i ODD m)) (i ODD n)) (i ODD (i (i t_ m) n)))
(rule (i (i DIFF (i interior s0)) (i closure t)) (i interior (i (i DIFF s0) t)))
(rule (i (i realu_div (i realu_ofu_num x)) (i realu_ofu_num y)) (i (i DECIMAL x) y))
(rule (i (i realu_mul (i realu_ofu_int x)) (i realu_ofu_int y)) (i realu_ofu_int (i (i intu_mul x) y)))
(rule (i (i realu_min (i realu_ofu_int x)) (i realu_ofu_int y)) (i realu_ofu_int (i (i intu_min x) y)))
(rule (i (i vectoru_add (i cnj w)) (i cnj z)) (i cnj (i (i vectoru_add w) z)))
(rule (i (i s_b_ (i COUNTABLE s0)) (i COUNTABLE t)) (i COUNTABLE (i (i UNION s0) t)))
(rule (i (i a_ (i (i connectedu_component s0) x)) EMPTY) (i w_ (i (i IN x) s0)))
(rule (i (i realu_mul (i exp x)) (i exp y)) (i exp (i (i realu_add x) y)))
(rule (i (i hrealu_mul (i hrealu_ofu_num m)) (i hrealu_ofu_num n)) (i hrealu_ofu_num (i (i t_ m) n)))
(rule (i relativeu_interior (i openu_segment (i (i c_ a) b))) (i openu_segment (i (i c_ a) b)))
(rule (i (i complexu_mul (i cexp w)) (i cexp z)) (i cexp (i (i vectoru_add w) z)))
(rule (i arc (i linepath (i (i c_ a) b))) (i w_ (i (i a_ a) b)))
(rule (i (i complexu_div (i cnj w)) (i cnj z)) (i cnj (i (i complexu_div w) z)))
(rule (i (i p_ m) (i (i t_ m) n)) (i (i t_ m) (i SUC n)))
(rule (i (i IN (i vectoru_neg x)) (i span s0)) (i (i IN x) (i span s0)))
(rule (i (i vectoru_sub (i Cx x)) (i Cx y)) (i Cx (i (i realu_sub x) y)))
(rule (i (i realu_mul (i realu_sgn x)) (i realu_sgn y)) (i realu_sgn (i (i realu_mul x) y)))
(rule (i (i realu_add (i drop x)) (i drop y)) (i drop (i (i vectoru_add x) y)))
(rule (i interior (i cball (i (i c_ x) e))) (i ball (i (i c_ x) e)))
(rule (i (i vectoru_add (i lift x)) (i lift y)) (i lift (i (i realu_add x) y)))
(rule (i (i realu_ge (i vectoru_norm x)) (i vectoru_norm y)) (i (i (i netord atu_infinity) x) y))
(rule (i (i realu_mul (i realu_abs a)) (i infnorm x)) (i infnorm (i (i r_ a) x)))
(rule (i (i s_b_ (i negligible s0)) (i negligible t)) (i negligible (i (i UNION s0) t)))
(rule (i (i a_ (i cnj z)) (i Cx x)) (i (i a_ z) (i Cx x)))
(rule (i (i realu_add (i realu_ofu_num m)) (i realu_ofu_num n)) (i realu_ofu_num (i (i p_ m) n)))
(rule (i (i intu_add (i intu_ofu_num m)) (i intu_ofu_num n)) (i intu_ofu_num (i (i p_ m) n)))
(rule (i (i INTER (i interior s0)) (i interior t)) (i interior (i (i INTER s0) t)))
(rule (i (i realu_mul (i realu_abs x)) (i realu_abs y)) (i realu_abs (i (i realu_mul x) y)))
(rule (i (i UNION (i UNIONS s0)) (i UNIONS t)) (i UNIONS (i (i UNION s0) t)))
(rule (i (i realu_sub pi) (i (i vectoru_angle x) y)) (i (i vectoru_angle (i vectoru_neg x)) y))
(rule (i (i realu_sub (i trace A)) (i trace B)) (i trace (i (i matrixu_sub A) B)))
(rule (i (i realu_sub (i Im x)) (i Im y)) (i Im (i (i vectoru_sub x) y)))
(rule (i (i o f) (i (i ITER n) f)) (i (i ITER (i SUC n)) f))
(rule (i (i b_s_ (i EVEN m)) (i EVEN n)) (i EVEN (i (i t_ m) n)))
(rule (i (i realu_mul (i realu_inv x)) (i realu_inv y)) (i realu_inv (i (i realu_mul x) y)))
(rule (i (i realu_sub (i Re x)) (i Re y)) (i Re (i (i vectoru_sub x) y)))
(rule (i (i matrixu_add (i matrixu_neg A)) (i matrixu_neg B)) (i matrixu_neg (i (i matrixu_add A) B)))
(rule (i (i vectoru_add (i vectoru_neg x)) (i vectoru_neg y)) (i vectoru_neg (i (i vectoru_add x) y)))
(rule (i (i INTER (i INTERS s0)) (i INTERS t)) (i INTERS (i (i UNION s0) t)))
(rule (i (i intu_mul (i intu_abs x)) (i intu_abs y)) (i intu_abs (i (i intu_mul x) y)))
(rule (i (i intu_add (i intu_neg x)) (i intu_neg y)) (i intu_neg (i (i intu_add x) y)))
(rule (i (i realu_sub pi) (i (i vectoru_angle x) y)) (i (i vectoru_angle x) (i vectoru_neg y)))
(rule (i (i a_ (i (i pathu_component s0) x)) EMPTY) (i w_ (i (i IN x) s0)))
(rule (i (i openu_in (i (i subtopology top) u)) u) (i (i SUBSET u) (i topspace top)))
(rule (i (i vectoru_sub (i sndcart x)) (i sndcart y)) (i sndcart (i (i vectoru_sub x) y)))
(rule (i (i vectoru_add (i Cx x)) (i Cx y)) (i Cx (i (i realu_add x) y)))
(rule (i (i complexu_mul (i cnj w)) (i cnj z)) (i cnj (i (i complexu_mul w) z)))
(rule (i reversepath (i linepath (i (i c_ a) b))) (i linepath (i (i c_ b) a)))
(rule (i (i APPEND (i REVERSE m)) (i REVERSE l)) (i REVERSE (i (i APPEND l) m)))
(rule (i UNIONS (i (i IMAGE (i IMAGE f)) s0)) (i (i IMAGE f) (i UNIONS s0)))
(rule (i (i a_ (i EVEN m)) (i EVEN n)) (i EVEN (i (i p_ m) n)))
(rule (i (i p_ (i LENGTH l)) (i LENGTH m)) (i LENGTH (i (i APPEND l) m)))
(rule (i (i vectoru_sub (i fstcart x)) (i fstcart y)) (i fstcart (i (i vectoru_sub x) y)))
(rule (i (i t_ m) (i (i EXP m) n)) (i (i EXP m) (i SUC n)))
(rule (i (i complexu_div (i Cx x)) (i Cx y)) (i Cx (i (i realu_div x) y)))
(rule (i (i closedu_in (i (i subtopology top) u)) u) (i (i SUBSET u) (i topspace top)))
(rule (i setdist (i (i c_ s0) (i closure t))) (i setdist (i (i c_ s0) t)))
(rule (i setdist (i (i c_ (i closure s0)) t)) (i setdist (i (i c_ s0) t)))
(rule (i (i s_b_ (i realu_bounded s0)) (i realu_bounded t)) (i realu_bounded (i (i UNION s0) t)))
(rule (i (i realu_max (i realu_ofu_int x)) (i realu_ofu_int y)) (i realu_ofu_int (i (i intu_max x) y)))
(rule (i (i realu_div (i vectoru_norm w)) (i vectoru_norm z)) (i vectoru_norm (i (i complexu_div w) z)))
(rule (i (i UNION (i setu_ofu_list l1)) (i setu_ofu_list l2)) (i setu_ofu_list (i (i APPEND l1) l2)))
(rule (i (i realu_add (i trace A)) (i trace B)) (i trace (i (i matrixu_add A) B)))
(rule (i (i realu_add (i Im x)) (i Im y)) (i Im (i (i vectoru_add x) y)))
(rule (i (i realu_mul (i det A)) (i det B)) (i det (i (i matrixu_mul A) B)))
(rule (i (i hrealu_add (i hrealu_ofu_num m)) (i hrealu_ofu_num n)) (i hrealu_ofu_num (i (i p_ m) n)))
(rule (i (i s_b_ (i FINITE s0)) (i FINITE t)) (i FINITE (i (i UNION s0) t)))
(rule (i (i realu_sub (i realu_ofu_int x)) (i realu_ofu_int y)) (i realu_ofu_int (i (i intu_sub x) y)))
(rule (i (i realu_add (i Re x)) (i Re y)) (i Re (i (i vectoru_add x) y)))
(rule (i (i matrixu_sub (i transp A)) (i transp B)) (i transp (i (i matrixu_sub A) B)))
(rule (i (i realu_max (i realu_ofu_num m)) (i realu_ofu_num n)) (i realu_ofu_num (i (i MAX m) n)))
(rule (i (i realu_min (i realu_ofu_num m)) (i realu_ofu_num n)) (i realu_ofu_num (i (i MIN m) n)))
(rule (i (i intu_max (i intu_ofu_num m)) (i intu_ofu_num n)) (i intu_ofu_num (i (i MAX m) n)))
(rule (i (i vectoru_sub (i cnj w)) (i cnj z)) (i cnj (i (i vectoru_sub w) z)))
(rule (i (i realu_mul (i realu_ofu_num m)) (i realu_ofu_num n)) (i realu_ofu_num (i (i t_ m) n)))
(rule (i (i intu_min (i intu_ofu_num m)) (i intu_ofu_num n)) (i intu_ofu_num (i (i MIN m) n)))
(rule (i (i realu_add (i realu_neg x)) (i realu_neg y)) (i realu_neg (i (i realu_add x) y)))
(rule (i (i intu_mul (i intu_ofu_num m)) (i intu_ofu_num n)) (i intu_ofu_num (i (i t_ m) n)))
(rule (i (i s_b_ (i bounded s0)) (i bounded t)) (i bounded (i (i UNION s0) t)))
(rule (i (i intu_divides (i intu_ofu_num a)) (i intu_ofu_num b)) (i (i numu_divides a) b))
(rule (i (i realu_div (i exp x)) (i exp y)) (i exp (i (i realu_sub x) y)))
(rule (i (i realu_mul (i realu_abs a)) (i vectoru_norm x)) (i vectoru_norm (i (i r_ a) x)))
(rule (i (i pastecart (i vectoru_neg x)) (i vectoru_neg y)) (i vectoru_neg (i (i pastecart x) y)))
(rule (i (i vectoru_add (i sndcart x)) (i sndcart y)) (i sndcart (i (i vectoru_add x) y)))
(rule (i (i s_b_ (i realu_negligible s0)) (i realu_negligible t)) (i realu_negligible (i (i UNION s0) t)))
(rule (i (i complexu_div (i cexp w)) (i cexp z)) (i cexp (i (i vectoru_sub w) z)))
(rule (i (i realu_div (i realu_sgn x)) (i realu_sgn y)) (i realu_sgn (i (i realu_div x) y)))
(rule (i (i s_b_ (i FINITE s0)) (i FINITE t)) (i FINITE (i (i p_u_c s0) t)))
(rule (i (i intu_mul (i intu_sgn x)) (i intu_sgn y)) (i intu_sgn (i (i intu_mul x) y)))
(rule (i intu_ofu_real (i (i realu_pow (i realu_ofu_int x)) n)) (i (i intu_pow x) n))
(rule (i (i vectoru_add (i fstcart x)) (i fstcart y)) (i fstcart (i (i vectoru_add x) y)))
(rule (i (i realu_sub (i drop x)) (i drop y)) (i drop (i (i vectoru_sub x) y)))
(rule (i (i vectoru_sub (i lift x)) (i lift y)) (i lift (i (i realu_sub x) y)))
(rule (i (i matrixu_mul (i transp B)) (i transp A)) (i transp (i (i matrixu_mul A) B)))
(rule (i inverse (i swap (i (i c_ a) b))) (i swap (i (i c_ a) b)))
(rule (i (i hrealu_add n) (i hrealu_ofu_num (i NUMERAL u_0))) n)
(rule (i (i a_ (i (i connectedu_component s0) x)) UNIV) (i (i a_ s0) UNIV))
(rule (i (i permutes p) (i (i INSERT a) EMPTY)) (i (i a_ p) I))
(rule (i (i a_ (i (i IMAGE f) s0)) EMPTY) (i (i a_ s0) EMPTY))
(rule (i (i a_ (i (i INTER s0) t)) EMPTY) (i (i DISJOINT s0) t))
(rule (i (i a_ (i (i MAP f) l)) NIL) (i (i a_ l) NIL))
(rule (i (i a_ (i realu_neg x)) (i realu_neg y)) (i (i a_ x) y))
(rule (i (i realu_mul (i realu_neg x)) (i realu_neg y)) (i (i realu_mul x) y))
(rule (i (i intu_sub x) (i (i intu_add x) y)) (i intu_neg y))
(rule (i (i realu_sub (i realu_neg x)) (i realu_neg y)) (i (i realu_sub y) x))
(rule (i (i p_ (i (i t_ m) n)) n) (i (i t_ (i SUC m)) n))
(rule (i (i g_ (i BIT1 n)) (i BIT1 m)) (i (i g_ n) m))
(rule (i (i g_ (i BIT0 n)) (i BIT1 m)) (i (i g_ n) m))
(rule (i (i g_ (i BIT1 n)) (i BIT0 m)) (i (i g_a_ n) m))
(rule (i (i g_ (i BIT0 n)) (i BIT0 m)) (i (i g_ n) m))
(rule (i (i g_ (i NUMERAL n)) (i NUMERAL m)) (i (i g_ n) m))
(rule (i (i g_a_ (i BIT1 n)) (i BIT1 m)) (i (i g_a_ n) m))
(rule (i (i g_a_ (i BIT0 n)) (i BIT1 m)) (i (i g_ n) m))
(rule (i (i g_a_ (i BIT1 n)) (i BIT0 m)) (i (i g_a_ n) m))
(rule (i (i g_a_ (i BIT0 n)) (i BIT0 m)) (i (i g_a_ n) m))
(rule (i (i g_a_ (i NUMERAL n)) (i NUMERAL m)) (i (i g_a_ n) m))
(rule (i (i l_ (i BIT1 m)) (i BIT1 n)) (i (i l_ m) n))
(rule (i (i l_ (i BIT1 m)) (i BIT0 n)) (i (i l_ m) n))
(rule (i (i l_ (i BIT0 m)) (i BIT1 n)) (i (i l_a_ m) n))
(rule (i (i l_ (i BIT0 m)) (i BIT0 n)) (i (i l_ m) n))
(rule (i (i l_ (i NUMERAL m)) (i NUMERAL n)) (i (i l_ m) n))
(rule (i (i l_a_ (i BIT1 m)) (i BIT1 n)) (i (i l_a_ m) n))
(rule (i (i l_a_ (i BIT1 m)) (i BIT0 n)) (i (i l_ m) n))
(rule (i (i l_a_ (i BIT0 m)) (i BIT1 n)) (i (i l_a_ m) n))
(rule (i (i l_a_ (i BIT0 m)) (i BIT0 n)) (i (i l_a_ m) n))
(rule (i (i l_a_ (i NUMERAL m)) (i NUMERAL n)) (i (i l_a_ m) n))
(rule (i (i a_ (i BIT1 m)) (i BIT1 n)) (i (i a_ m) n))
(rule (i (i a_ (i BIT0 m)) (i BIT0 n)) (i (i a_ m) n))
(rule (i (i a_ (i NUMERAL m)) (i NUMERAL n)) (i (i a_ m) n))
(rule (i (i product (i (i o_o_ n) n)) f) (i f n))
(rule (i (i realu_sub x) (i (i realu_add x) y)) (i realu_neg y))
(rule (i Re (i (i complexu_div z) (i Cx x))) (i (i realu_div (i Re z)) x))
(rule (i (i a_ (i SUC m)) (i SUC n)) (i (i a_ m) n))
(rule (i PRE (i (i m_ (i SUC m)) n)) (i (i m_ m) n))
(rule (i (i hasu_measure (i (i IMAGE lift) s0)) m) (i (i hasu_realu_measure s0) m))
(rule (i (i intu_lt (i intu_neg x)) (i intu_neg y)) (i (i intu_lt y) x))
(rule (i (i realu_lt (i realu_neg x)) (i realu_neg y)) (i (i realu_lt y) x))
(rule (i (i a_ (i realu_ofu_num m)) (i realu_ofu_num n)) (i (i a_ m) n))
(rule (i (i realu_ge (i realu_ofu_num m)) (i realu_ofu_num n)) (i (i g_a_ m) n))
(rule (i (i realu_gt (i realu_ofu_num m)) (i realu_ofu_num n)) (i (i g_ m) n))
(rule (i (i realu_le (i realu_ofu_num m)) (i realu_ofu_num n)) (i (i l_a_ m) n))
(rule (i (i realu_lt (i realu_ofu_num m)) (i realu_ofu_num n)) (i (i l_ m) n))
(rule (i (i realu_sub (i (i realu_sub x) y)) x) (i realu_neg y))
(rule (i (i a_a_g_ (i w_ t1)) (i w_ t2)) (i (i a_a_g_ t2) t1))
(rule (i (i realu_le (i exp x)) (i exp y)) (i (i realu_le x) y))
(rule (i (i l_ (i SUC m)) (i SUC n)) (i (i l_ m) n))
(rule (i (i realu_lt (i exp x)) (i exp y)) (i (i realu_lt x) y))
(rule (i (i a_ (i INDu_SUC x1)) (i INDu_SUC x2)) (i (i a_ x1) x2))
(rule (i (i a_ (i exp x)) (i exp y)) (i (i a_ x) y))
(rule (i (i intu_le (i intu_neg x)) (i intu_neg y)) (i (i intu_le y) x))
(rule (i (i trealu_eq (i trealu_ofu_num m)) (i trealu_ofu_num n)) (i (i a_ m) n))
(rule (i (i realu_le (i atn x)) (i atn y)) (i (i realu_le x) y))
(rule (i (i trealu_le (i trealu_ofu_num m)) (i trealu_ofu_num n)) (i (i l_a_ m) n))
(rule (i (i a_ (i INJN n10)) (i INJN n20)) (i (i a_ n10) n20))
(rule (i (i m_ (i SUC m)) (i SUC n)) (i (i m_ m) n))
(rule (i (i naddu_eq (i naddu_ofu_num m)) (i naddu_ofu_num n)) (i (i a_ m) n))
(rule (i (i naddu_le (i naddu_ofu_num m)) (i naddu_ofu_num n)) (i (i l_a_ m) n))
(rule (i exp (i (i realu_mul (i realu_ofu_num n)) x)) (i (i realu_pow (i exp x)) n))
(rule (i (i a_ (i hrealu_ofu_num m)) (i hrealu_ofu_num n)) (i (i a_ m) n))
(rule (i (i a_ (i lift x)) (i lift y)) (i (i a_ x) y))
(rule (i (i hrealu_le (i hrealu_ofu_num m)) (i hrealu_ofu_num n)) (i (i l_a_ m) n))
(rule (i (i a_ (i intu_neg x)) (i intu_neg y)) (i (i a_ x) y))
(rule (i (i a_ (i intu_ofu_num m)) (i intu_ofu_num n)) (i (i a_ m) n))
(rule (i (i intu_ge (i intu_ofu_num m)) (i intu_ofu_num n)) (i (i g_a_ m) n))
(rule (i (i intu_gt (i intu_ofu_num m)) (i intu_ofu_num n)) (i (i g_ m) n))
(rule (i (i intu_le (i intu_ofu_num m)) (i intu_ofu_num n)) (i (i l_a_ m) n))
(rule (i (i intu_lt (i intu_ofu_num m)) (i intu_ofu_num n)) (i (i l_ m) n))
(rule (i (i realu_lt (i atn x)) (i atn y)) (i (i realu_lt x) y))
(rule (i (i realu_le (i realu_neg x)) (i realu_neg y)) (i (i realu_le y) x))
(rule (i (i nsum (i (i o_o_ n) n)) f) (i f n))
(rule (i (i a_ (i atn x)) (i atn y)) (i (i a_ x) y))
(rule (i (i a_ (i (i o_o_ m) n)) EMPTY) (i (i l_ n) m))
(rule (i Im (i (i complexu_div z) (i Cx x))) (i (i realu_div (i Im z)) x))
(rule (i (i a_ (i Cx x)) (i Cx y)) (i (i a_ x) y))
(rule (i (i l_a_ (i SUC m)) (i SUC n)) (i (i l_a_ m) n))
(rule (i (i a_ (i realu_inv x)) (i realu_inv y)) (i (i a_ x) y))
(rule (i (i intu_mul (i intu_neg x)) (i intu_neg y)) (i (i intu_mul x) y))
(rule (i (i intu_sub (i intu_neg x)) (i intu_neg y)) (i (i intu_sub y) x))
(rule (i (i sum (i (i o_o_ n) n)) f) (i f n))
(rule (i (i intu_sub (i (i intu_sub x) y)) x) (i intu_neg y))
(rule (i (i a_ (i vec m)) (i vec n)) (i (i a_ m) n))
(rule (i csqrt (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i realu_inv (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i casn (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i intu_abs (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i complexu_inv (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i ctan (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i realu_abs (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i sqrt (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i det (i mat (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i vectoru_neg (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i vectoru_norm (i basis (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i csin (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i REPu_prod (i ABSu_prod (i (i mku_pair x) y))) (i (i mku_pair x) y))
(rule (i (i a_ (i INR a)) (i INR ai_)) (i (i a_ a) ai_))
(rule (i (i a_ (i INJA a1)) (i INJA a2)) (i (i a_ a1) a2))
(rule (i (i a_ (i INL a)) (i INL ai_)) (i (i a_ a) ai_))
(rule (i (i IN x) (i (i INSERT y) EMPTY)) (i (i a_ x) y))
(rule (i evenperm (i swap (i (i c_ a) b))) (i (i a_ a) b))
(rule (i (i DELETE (i (i DELETE s0) x)) x) (i (i DELETE s0) x))
(rule (i basis (i NUMERAL (i BIT0 (i BIT1 u_0)))) ii)
(rule (i (i vectoru_sub x) (i (i vectoru_add x) y)) (i vectoru_neg y))
(rule (i (i SUBSET (i (i INSERT x) EMPTY)) s0) (i (i IN x) s0))
(rule (i (i INSERT x) (i (i INSERT x) s0)) (i (i INSERT x) s0))
(rule (i (i between x) (i (i c_ a) a)) (i (i a_ x) a))
(rule (i (i a_ (i INJF f1)) (i INJF f2)) (i (i a_ f1) f2))
(rule (i (i a_ (i (i INSERT x) s0)) s0) (i (i IN x) s0))
(rule (i (i a_ (i (i UNION s0) t)) t) (i (i SUBSET s0) t))
(rule (i (i complexu_mul (i vectoru_neg x)) (i vectoru_neg y)) (i (i complexu_mul x) y))
(rule (i (i vectoru_sub (i vectoru_neg x)) (i vectoru_neg y)) (i (i vectoru_sub y) x))
(rule (i (i IN x) (i (i IMAGE drop) s0)) (i (i IN (i lift x)) s0))
(rule (i (i IN x) (i (i IMAGE lift) s0)) (i (i IN (i drop x)) s0))
(rule (i (i a_ (i transp A)) (i transp B)) (i (i a_ A) B))
(rule (i (i a_ (i cnj w)) (i cnj z)) (i (i a_ w) z))
(rule (i (i vectoru_angle (i vectoru_neg x)) (i vectoru_neg y)) (i (i vectoru_angle x) y))
(rule (i (i vectoru_sub (i (i vectoru_sub x) y)) x) (i vectoru_neg y))
(rule (i FINITE (i openu_segment (i (i c_ a) b))) (i (i a_ a) b))
(rule (i (i a_ (i drop x)) (i drop y)) (i (i a_ x) y))
(rule (i (i connectedu_component (i (i connectedu_component s0) x)) x) (i (i connectedu_component s0) x))
(rule (i (i a_ (i vectoru_neg x)) (i vectoru_neg y)) (i (i a_ x) y))
(rule (i (i affu_ge (i (i DIFF s0) t)) t) (i (i affu_ge s0) t))
(rule (i (i pathu_component (i (i pathu_component s0) x)) x) (i (i pathu_component s0) x))
(rule (i (i DIFF (i (i DIFF s0) t)) t) (i (i DIFF s0) t))
(rule (i (i a_ (i u_destu_rec x)) (i u_destu_rec y)) (i (i a_ x) y))
(rule (i (i extremeu_pointu_of x) (i (i INSERT a) EMPTY)) (i (i a_ x) a))
(rule (i (i faceu_of (i (i INSERT x) EMPTY)) s0) (i (i extremeu_pointu_of x) s0))
(rule (i (i a_ (i (i INTER s0) t)) s0) (i (i SUBSET s0) t))
(rule (i (i hull P) (i (i hull P) s0)) (i (i hull P) s0))
(rule (i (i a_ (i (i DELETE s0) x)) s0) (i w_ (i (i IN x) s0)))
(rule (i (i o (i (i ITER n) f)) f) (i (i ITER (i SUC n)) f))
(rule (i (i MOD n) (i NUMERAL (i BIT1 u_0))) (i NUMERAL u_0))
(rule (i trace (i mat (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i dimindex UNIV)))
(rule (i (i a_ (i dimindex UNIV)) (i dimindex UNIV)) (i (i homeomorphic UNIV) UNIV))
(rule (i (i p_ (i dimindex UNIV)) (i dimindex UNIV)) (i dimindex UNIV))
(rule (i (i cross x) (i vec (i NUMERAL u_0))) (i vec (i NUMERAL u_0)))
(rule (i (i cross (i vec (i NUMERAL u_0))) x) (i vec (i NUMERAL u_0)))
(rule (i tan (i (i realu_mul (i realu_ofu_num n)) pi)) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i dot (i vec (i NUMERAL u_0))) x) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i r_r_ c) (i mat (i NUMERAL u_0))) (i mat (i NUMERAL u_0)))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL u_0))) x) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i matrixu_mul (i mat (i NUMERAL u_0))) A) (i mat (i NUMERAL u_0)))
(rule (i binom (i (i c_ n) (i NUMERAL u_0))) (i NUMERAL (i BIT1 u_0)))
(rule (i (i r_ (i realu_ofu_num (i NUMERAL u_0))) x) (i vec (i NUMERAL u_0)))
(rule (i (i dot x) (i vec (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i realu_mul x) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i matrixu_mul A) (i mat (i NUMERAL u_0))) (i mat (i NUMERAL u_0)))
(rule (i (i hrealu_mul (i hrealu_ofu_num (i NUMERAL u_0))) m) (i hrealu_ofu_num (i NUMERAL u_0)))
(rule (i sin (i (i realu_mul (i realu_ofu_num n)) pi)) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i intu_mul (i intu_ofu_num (i NUMERAL u_0))) x) (i intu_ofu_num (i NUMERAL u_0)))
(rule (i (i hrealu_mul m) (i hrealu_ofu_num (i NUMERAL u_0))) (i hrealu_ofu_num (i NUMERAL u_0)))
(rule (i (i matrixu_vectoru_mul (i mat (i NUMERAL u_0))) x) (i vec (i NUMERAL u_0)))
(rule (i (i intu_mul x) (i intu_ofu_num (i NUMERAL u_0))) (i intu_ofu_num (i NUMERAL u_0)))
(rule (i (i EXP (i NUMERAL (i BIT1 u_0))) n) (i NUMERAL (i BIT1 u_0)))
(rule (i (i r_r_ (i realu_ofu_num (i NUMERAL u_0))) A) (i mat (i NUMERAL u_0)))
(rule (i (i matrixu_vectoru_mul A) (i vec (i NUMERAL u_0))) (i vec (i NUMERAL u_0)))
(rule (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i basis (i NUMERAL (i BIT1 u_0))))
(rule (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i cos pi))
(rule (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i neutral complexu_mul))
(rule (i intu_neg (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i affu_dim EMPTY))
(rule (i (i a_ (i destu_nadd (i mku_nadd r))) r) (i isu_nadd r))
(rule (i (i UNION p) (i (i UNION p) q)) (i (i UNION p) q))
(rule (i (i INTER p) (i (i INTER p) q)) (i (i INTER p) q))
(rule (i (i s_b_ p) (i (i s_b_ p) q)) (i (i s_b_ p) q))
(rule (i (i b_s_ p) (i (i b_s_ p) q)) (i (i b_s_ p) q))
(rule (i (i realu_sub x) (i (i realu_sub x) y)) y)
(rule (i (i realu_add y) (i (i realu_sub x) y)) x)
(rule (i (i realu_sub (i (i realu_add x) y)) x) y)
(rule (i (i realu_add (i (i realu_sub x) y)) y) x)
(rule (i Im (i complex (i (i c_ x) y))) y)
(rule (i (i CONS x) (i (i REPLICATE n) x)) (i (i REPLICATE (i SUC n)) x))
(rule (i (i sum (i (i INSERT x) EMPTY)) f) (i f x))
(rule (i (i rotate2d (i realu_ofu_num (i NUMERAL u_0))) z) z)
(rule (i (i intu_add (i intu_ofu_num (i NUMERAL u_0))) x) x)
(rule (i (i intu_sub x) (i intu_ofu_num (i NUMERAL u_0))) x)
(rule (i (i complexu_pow x) (i NUMERAL (i BIT1 u_0))) x)
(rule (i (i intu_add x) (i intu_ofu_num (i NUMERAL u_0))) x)
(rule (i (i intu_mul (i intu_sgn x)) (i intu_abs x)) x)
(rule (i (i pastecart (i fstcart z)) (i sndcart z)) z)
(rule (i (i IMAGE (i (i o drop) lift)) s0) s0)
(rule (i (i IMAGE (i (i o lift) drop)) s0) s0)
(rule (i (i intu_pow x) (i NUMERAL (i BIT1 u_0))) x)
(rule (i (i matrixu_add (i mat (i NUMERAL u_0))) A) A)
(rule (i (i matrixu_add A) (i mat (i NUMERAL u_0))) A)
(rule (i (i c_ (i FST x)) (i SND x)) x)
(rule (i (i matrixu_sub A) (i mat (i NUMERAL u_0))) A)
(rule (i (i vectoru_add (i vec (i NUMERAL u_0))) x) x)
(rule (i (i vectoru_add x) (i vec (i NUMERAL u_0))) x)
(rule (i (i m_ (i (i p_ m) n)) n) m)
(rule (i (i m_ (i (i p_ m) n)) m) n)
(rule (i (i t_ (i NUMERAL (i BIT1 u_0))) n) n)
(rule (i (i DIV n) (i NUMERAL (i BIT1 u_0))) n)
(rule (i dist (i (i c_ (i NUMERAL u_0)) n)) n)
(rule (i (i EXP n) (i NUMERAL (i BIT1 u_0))) n)
(rule (i dist (i (i c_ n) (i NUMERAL u_0))) n)
(rule (i (i t_ m) (i NUMERAL (i BIT1 u_0))) m)
(rule (i (i intu_max x) (i (i intu_max x) y)) (i (i intu_max x) y))
(rule (i (i intu_min x) (i (i intu_min x) y)) (i (i intu_min x) y))
(rule (i acs (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i log (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i r_ c) (i vec (i NUMERAL u_0))) (i vec (i NUMERAL u_0)))
(rule (i (i dropout k) (i vec (i NUMERAL u_0))) (i vec (i NUMERAL u_0)))
(rule (i vectoru_norm (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i Arg (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i vectoru_sub x) (i vec (i NUMERAL u_0))) x)
(rule (i (i realu_min x) (i (i realu_min x) y)) (i (i realu_min x) y))
(rule (i (i realu_max x) (i (i realu_max x) y)) (i (i realu_max x) y))
(rule (i (i intu_add y) (i (i intu_sub x) y)) x)
(rule (i (i intu_add (i (i intu_sub x) y)) y) x)
(rule (i (i intu_sub (i (i intu_add x) y)) x) y)
(rule (i (i intu_sub x) (i (i intu_sub x) y)) y)
(rule (i (i INSERT (i vec (i NUMERAL u_0))) EMPTY) (i span EMPTY))
(rule (i (i INSERT (i vec (i NUMERAL u_0))) EMPTY) (i (i hull convexu_cone) EMPTY))
(rule (i (i vsum (i (i o_o_ n) n)) f) (i f n))
(rule (i (i realu_sub (i realu_ofu_num (i NUMERAL u_0))) x) (i realu_neg x))
(rule (i (i a_ (i realu_ofu_int (i intu_ofu_real r))) r) (i integer r))
(rule (i (i s_b_ (i realu_bounded s0)) (i realu_closed s0)) (i realu_compact s0))
(rule (i (i DIFF (i closure s0)) (i interior s0)) (i frontier s0))
(rule (i (i complexu_div (i csin z)) (i ccos z)) (i ctan z))
(rule (i (i s_b_ (i bounded s0)) (i closed s0)) (i compact s0))
(rule (i (i b_s_ (i rotationu_matrix Q)) (i rotoinversionu_matrix Q)) (i orthogonalu_matrix Q))
(rule (i (i s_b_ (i polyhedron s0)) (i bounded s0)) (i polytope s0))
(rule (i trivialu_limit (i (i within (i at a)) s0)) (i w_ (i (i limitu_pointu_of a) s0)))
(rule (i (i INTER (i inside s0)) (i outside s0)) EMPTY)
(rule (i (i p_ m) (i NUMERAL (i BIT1 u_0))) (i SUC m))
(rule (i w_ (i (i a_ n) (i NUMERAL u_0))) (i (i l_ (i NUMERAL u_0)) n))
(rule (i (i d_ z) (i NUMERAL (i BIT1 u_0))) (i Re z))
(rule (i (i d_ x) (i NUMERAL (i BIT1 u_0))) (i drop x))
(rule (i (i continuous (i (i o Cx) f)) net0) (i (i realu_continuous f) net0))
(rule (i (i product (i (i INSERT x) EMPTY)) f) (i f x))
(rule (i (i s_b_ P) (i (i a_ v) t)) (i (i (i SETSPEC v) P) t))
(rule (i (i intu_divides n) (i (i intu_sub x) y)) (i (i (i intu_mod n) x) y))
(rule (i pathstart (i (i (i subpath u) v) g)) (i g u))
(rule (i (i (i FCONS a) f) (i SUC n)) (i f n))
(rule (i reversepath (i (i (i subpath u) v) g)) (i (i (i subpath v) u) g))
(rule (i (i UNCURRY f) (i (i c_ x) y)) (i (i f x) y))
(rule (i pathfinish (i (i (i subpath u) v) g)) (i g v))
(rule (i (i (i (i conicu_cap v0) v0) r) a) EMPTY)
(rule (i (i realu_add (i realu_ofu_num (i NUMERAL u_0))) x) x)
(rule (i (i realu_pow x) (i NUMERAL (i BIT1 u_0))) x)
(rule (i (i realu_add x) (i realu_ofu_num (i NUMERAL u_0))) x)
(rule (i (i realu_sub x) (i realu_ofu_num (i NUMERAL u_0))) x)
(rule (i (i realu_mul (i realu_sgn x)) (i realu_abs x)) x)
(rule (i (i (i ITLIST f) NIL) b) b)
(rule (i LAST (i (i CONS h) NIL)) h)
(rule (i HD (i (i CONS h) t)) h)
(rule (i relativeu_interior (i (i INSERT a) EMPTY)) (i (i INSERT a) EMPTY))
(rule (i (i measurableu_on (i indicator s0)) UNIV) (i lebesgueu_measurable s0))
(rule (i (i a_ (i setu_ofu_list l)) EMPTY) (i (i a_ l) NIL))
(rule (i (i a_ (i closure s0)) EMPTY) (i (i a_ s0) EMPTY))
(rule (i (i HASu_SIZE s0) (i NUMERAL u_0)) (i (i a_ s0) EMPTY))
(rule (i RC (i TC (i SC R))) (i RSTC R))
(rule (i UNIONS (i (i INSERT s0) EMPTY)) s0)
(rule (i INTERS (i (i INSERT s0) EMPTY)) s0)
(rule (i (i EL (i NUMERAL u_0)) l) (i HD l))
(rule (i (i higheru_complexu_derivative (i NUMERAL u_0)) f) f)
(rule (i (i subtopology top) (i topspace top)) top)
(rule (i (i m_ (i BIT1 n)) u_0) (i BIT1 n))
(rule (i (i m_ (i BIT0 n)) u_0) (i BIT0 n))
(rule (i (i g_a_ u_0) (i BIT0 n)) (i (i g_a_ u_0) n))
(rule (i (i l_ u_0) (i BIT0 n)) (i (i l_ u_0) n))
(rule (i (i a_ u_0) (i BIT0 n)) (i (i a_ u_0) n))
(rule (i (i p_ (i BIT1 n)) u_0) (i BIT1 n))
(rule (i (i p_ (i BIT0 n)) u_0) (i BIT0 n))
(rule (i (i p_ u_0) (i BIT1 n)) (i BIT1 n))
(rule (i (i p_ u_0) (i BIT0 n)) (i BIT0 n))
(rule (i vectoru_norm (i Cx (i realu_ofu_num n))) (i realu_ofu_num n))
(rule (i SND (i (i c_ x) y)) y)
(rule (i FST (i (i c_ x) y)) x)
(rule (i (i (i COND b) t) t) t)
(rule (i NULL (i (i CONS h) t)) F)
(rule (i fstcart (i (i pastecart x) y)) x)
(rule (i sndcart (i (i pastecart x) y)) y)
(rule (i intu_ofu_real (i realu_sgn (i realu_ofu_int x))) (i intu_sgn x))
(rule (i Re (i csin (i Cx x))) (i sin x))
(rule (i intu_ofu_real (i realu_abs (i realu_ofu_int x))) (i intu_abs x))
(rule (i Re (i ctan (i Cx x))) (i tan x))
(rule (i Cx (i vectoru_norm (i Cx x))) (i Cx (i realu_abs x)))
(rule (i SUC (i SUC (i BIT0 n))) (i BIT0 (i SUC n)))
(rule (i Re (i cacs (i Cx x))) (i acs x))
(rule (i Re (i casn (i Cx x))) (i asn x))
(rule (i Re (i catn (i Cx x))) (i atn x))
(rule (i Re (i ccos (i Cx x))) (i cos x))
(rule (i intu_ofu_real (i realu_neg (i realu_ofu_int i0))) (i intu_neg i0))
(rule (i Re (i cexp (i Cx x))) (i exp x))
(rule (i mku_num (i INDu_SUC (i destu_num n))) (i SUC n))
(rule (i (i (i MAP2 f) NIL) NIL) NIL)
(rule (i sin (i (i realu_add x) pi)) (i realu_neg (i sin x)))
(rule (i (i realu_div x) (i realu_abs x)) (i realu_sgn x))
(rule (i (i realu_lt (i floor x)) x) (i w_ (i integer x)))
(rule (i cos (i (i realu_add x) pi)) (i realu_neg (i cos x)))
(rule (i (i realu_sub x) (i floor x)) (i frac x))
(rule (i bounded (i (i IMAGE lift) s0)) (i realu_bounded s0))
(rule (i (i vectoru_add w) (i vectoru_neg z)) (i (i vectoru_sub w) z))
(rule (i SUC (i (i p_ n) n)) (i BIT1 n))
(rule (i affu_dim (i (i hull affine) s0)) (i affu_dim s0))
(rule (i frontier (i (i DIFF UNIV) s0)) (i frontier s0))
(rule (i (i SUBSET (i closure s0)) s0) (i closed s0))
(rule (i lebesgueu_measurable (i (i DIFF UNIV) s0)) (i lebesgueu_measurable s0))
(rule (i (i a_ (i closure s0)) s0) (i closed s0))
(rule (i collinear (i (i hull convex) s0)) (i collinear s0))
(rule (i diameter (i (i hull convex) s0)) (i diameter s0))
(rule (i affu_dim (i (i hull convex) s0)) (i affu_dim s0))
(rule (i (i (i affsign sgnu_gt) EMPTY) S) (i conv0 S))
(rule (i (i a_ (i interior s0)) s0) (i open s0))
(rule (i bounded (i (i hull convex) s0)) (i bounded s0))
(rule (i coplanar (i (i hull affine) s0)) (i coplanar s0))
(rule (i (i SUBSET (i frontier s0)) s0) (i closed s0))
(rule (i collinear (i (i hull affine) s0)) (i collinear s0))
(rule (i relativeu_interior (i (i hull affine) s0)) (i (i hull affine) s0))
(rule (i realu_lebesgueu_measurable (i (i DIFF UNIV) s0)) (i realu_lebesgueu_measurable s0))
(rule (i (i within (i at x)) UNIV) (i at x))
(rule (i (i a_ (i span s0)) s0) (i subspace s0))
(rule (i (i hull affine) (i closure s0)) (i (i hull affine) s0))
(rule (i (i a_ (i cnj z)) z) (i real0 z))
(rule (i (i vectoru_matrixu_mul x) (i transp A)) (i (i matrixu_vectoru_mul A) x))
(rule (i (i realu_add x) (i realu_neg y)) (i (i realu_sub x) y))
(rule (i (i destu_cart x) (i finiteu_index i0)) (i (i d_ x) i0))
(rule (i w_ (i (i intu_le y) x)) (i (i intu_lt x) y))
(rule (i (i complexu_mul w) (i complexu_inv z)) (i (i complexu_div w) z))
(rule (i openu_interval (i (i c_ a) b)) (i (i rect a) b))
(rule (i (i realu_mul x) (i realu_inv y)) (i (i realu_div x) y))
(rule (i (i matrixu_add A) (i matrixu_neg B)) (i (i matrixu_sub A) B))
(rule (i pathfinish (i (i o f) p)) (i f (i pathfinish p)))
(rule (i (i intu_add x) (i intu_neg y)) (i (i intu_sub x) y))
(rule (i LENGTH (i (i CONS h) t)) (i SUC (i LENGTH t)))
(rule (i vectoru_neg (i (i cross y) x)) (i (i cross x) y))
(rule (i ball (i (i c_ z) r)) (i (i normball z) r))
(rule (i matrix (i (i frechetu_derivative f) net0)) (i (i jacobian f) net0))
(rule (i pathstart (i (i o f) p)) (i f (i pathstart p)))
(rule (i w_ (i (i realu_le y) x)) (i (i realu_lt x) y))
(rule (i ABSu_prod (i (i mku_pair x) y)) (i (i c_ x) y))
(rule (i (i intu_sub x) (i intu_neg y)) (i (i intu_add x) y))
(rule (i realu_inv (i (i realu_div x) y)) (i (i realu_div y) x))
(rule (i (i realu_sub x) (i realu_neg y)) (i (i realu_add x) y))
(rule (i (i (i netord atu_neginfinity) x) y) (i (i realu_le x) y))
(rule (i intu_neg (i (i intu_sub x) y)) (i (i intu_sub y) x))
(rule (i (i rpow x) (i realu_ofu_num n)) (i (i realu_pow x) n))
(rule (i w_ (i (i l_a_ m) n)) (i (i l_ n) m))
(rule (i w_ (i (i l_ m) n)) (i (i l_a_ n) m))
(rule (i (i d_ (i vec k)) i0) (i realu_ofu_num k))
(rule (i w_ (i (i realu_lt x) y)) (i (i realu_le y) x))
(rule (i (i l_ m) (i SUC n)) (i (i l_a_ m) n))
(rule (i w_ (i (i intu_lt x) y)) (i (i intu_le y) x))
(rule (i realu_neg (i (i realu_sub x) y)) (i (i realu_sub y) x))
(rule (i (i (i netord atu_posinfinity) x) y) (i (i realu_ge x) y))
(rule (i (i l_a_ (i SUC m)) n) (i (i l_ m) n))
(rule (i trealu_neg (i (i c_ x) y)) (i (i c_ y) x))
(rule (i (i (i netord sequentially) m) n) (i (i g_a_ m) n))
(rule (i (i IN m) (i from n)) (i (i l_a_ n) m))
(rule (i mat (i NUMERAL (i BIT1 u_0))) (i matrix I))
(rule (i realu_ofu_num (i NUMERAL (i BIT1 u_0))) (i neutral realu_mul))
(rule (i realu_ofu_num (i NUMERAL (i BIT1 u_0))) (i vectoru_norm ii))
(rule (i realu_ofu_num (i NUMERAL (i BIT1 u_0))) (i sign I))
(rule (i NUMERAL (i BIT0 (i BIT1 u_0))) (i dimindex UNIV))
(rule (i NUMERAL (i BIT1 (i BIT1 u_0))) (i dimindex UNIV))
(rule (i realu_ofu_num (i NUMERAL (i BIT1 u_0))) (i Im ii))
(rule (i Cx (i realu_ofu_num (i NUMERAL u_0))) (i vec (i NUMERAL u_0)))
(rule (i w_ (i (i l_a_u_c s0) t)) (i (i l_u_c t) s0))
(rule (i w_ (i (i l_u_c s0) t)) (i (i l_a_u_c t) s0))
(rule (i matrixu_neg (i (i matrixu_sub A) B)) (i (i matrixu_sub B) A))
(rule (i vectoru_neg (i (i vectoru_sub x) y)) (i (i vectoru_sub y) x))
(rule (i pathfinish (i (i p_p_ g1) g2)) (i pathfinish g2))
(rule (i negligible (i (i INSERT a) s0)) (i negligible s0))
(rule (i (i orthogonal (i vectoru_neg x)) y) (i (i orthogonal x) y))
(rule (i (i vectoru_sub x) (i vectoru_neg y)) (i (i vectoru_add x) y))
(rule (i (i IN x) (i setu_ofu_list l)) (i (i MEM x) l))
(rule (i (i orthogonal x) (i vectoru_neg y)) (i (i orthogonal x) y))
(rule (i realu_negligible (i (i INSERT a) s0)) (i realu_negligible s0))
(rule (i (i matrixu_vectoru_mul (i transp A)) x) (i (i vectoru_matrixu_mul x) A))
(rule (i pathstart (i (i p_p_ g1) g2)) (i pathstart g1))
(rule (i vectoru_norm (i (i rotate2d t) z)) (i vectoru_norm z))
(rule (i measure (i (i rect a) b)) (i (i volu_rect a) b))
(rule (i COUNTABLE (i (i DELETE s0) x)) (i COUNTABLE s0))
(rule (i COUNTABLE (i (i INSERT x) s0)) (i COUNTABLE s0))
(rule (i complexu_inv (i (i complexu_div w) z)) (i (i complexu_div z) w))
(rule (i LENGTH (i (i MAP f) l)) (i LENGTH l))
(rule (i (i (i pathu_component s0) x) x) (i (i IN x) s0))
(rule (i bounded (i (i INSERT x) s0)) (i bounded s0))
(rule (i (i complexu_mul (i Cx c)) x) (i (i r_ c) x))
(rule (i (i (i connectedu_component s0) x) x) (i (i IN x) s0))
(rule (i FINITE (i (i DELETE s0) x)) (i FINITE s0))
(rule (i FINITE (i (i INSERT x) s0)) (i FINITE s0))
(rule (i (i t_ m) (i NUMERAL u_0)) (i NUMERAL u_0))
(rule (i (i t_ (i NUMERAL u_0)) n) (i NUMERAL u_0))
(rule (i (i g_ (i BIT0 n)) u_0) (i (i g_ n) u_0))
(rule (i (i l_a_ (i BIT0 n)) u_0) (i (i l_a_ n) u_0))
(rule (i (i a_ (i BIT0 n)) u_0) (i (i a_ n) u_0))
(rule (i (i EXP (i BIT1 m)) u_0) (i BIT1 u_0))
(rule (i (i EXP (i BIT0 m)) u_0) (i BIT1 u_0))
(rule (i (i (i ALL2 P) NIL) NIL) T)
(rule (i setdist (i (i c_ s0) EMPTY)) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i setdist (i (i c_ EMPTY) t)) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i Arg (i Cx (i realu_ofu_num n))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i EXP m) (i NUMERAL u_0)) (i NUMERAL (i BIT1 u_0)))
(rule (i affu_dim (i (i INSERT a) EMPTY)) (i intu_ofu_num (i NUMERAL u_0)))
(rule (i (i l_ u_0) (i BIT1 n)) T)
(rule (i (i l_a_ u_0) (i BIT1 n)) T)
(rule (i (i l_a_ u_0) (i BIT0 n)) T)
(rule (i (i l_ (i BIT1 n)) u_0) F)
(rule (i (i l_ (i BIT0 n)) u_0) F)
(rule (i (i l_a_ (i BIT1 n)) u_0) F)
(rule (i (i a_ u_0) (i BIT1 n)) F)
(rule (i (i a_ (i BIT1 n)) u_0) F)
(rule (i (i l_ m) (i NUMERAL u_0)) F)
(rule (i (i (i MAP2 f) NIL) l) NIL)
(rule (i topspace (i (i subtopology euclidean) s0)) s0)
(rule (i topspace (i (i subtopology euclideanreal) s0)) s0)
(rule (i midpoint (i (i c_ x) x)) x)
(rule (i LENGTH (i (i REPLICATE n) x)) n)
(rule (i (i p_ (i NUMERAL u_0)) n) n)
(rule (i (i m_ m) (i NUMERAL u_0)) m)
(rule (i (i p_ m) (i NUMERAL u_0)) m)
(rule (i intu_sgn (i intu_ofu_num (i NUMERAL u_0))) (i intu_ofu_num (i NUMERAL u_0)))
(rule (i realu_inv (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i trace (i mat (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i tan (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i intu_abs (i intu_ofu_num (i NUMERAL u_0))) (i intu_ofu_num (i NUMERAL u_0)))
(rule (i intu_neg (i intu_ofu_num (i NUMERAL u_0))) (i intu_ofu_num (i NUMERAL u_0)))
(rule (i vectoru_norm (i vec (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i infnorm (i vec (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i realu_sgn (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i vectoru_neg (i vec (i NUMERAL u_0))) (i vec (i NUMERAL u_0)))
(rule (i realu_abs (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i sqrt (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i realu_neg (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i matrixu_neg (i mat (i NUMERAL u_0))) (i mat (i NUMERAL u_0)))
(rule (i atn (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i sin (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i det (i mat (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i hrealu_inv (i hrealu_ofu_num (i NUMERAL u_0))) (i hrealu_ofu_num (i NUMERAL u_0)))
(rule (i asn (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i rank (i mat (i NUMERAL u_0))) (i NUMERAL u_0))
(rule (i openu_interval (i (i c_ a) a)) EMPTY)
(rule (i (i (i ALL2 P) NIL) l2) (i (i a_ l2) NIL))
(rule (i (i REPLICATE (i NUMERAL u_0)) x) NIL)
(rule (i (i (i slice k) a) EMPTY) EMPTY)
(rule (i (i m_ u_0) (i BIT1 n)) u_0)
(rule (i (i m_ u_0) (i BIT0 n)) u_0)
(rule (i (i EXP u_0) (i BIT1 n)) u_0)
(rule (i (i t_ (i BIT1 n)) u_0) u_0)
(rule (i (i t_ (i BIT0 n)) u_0) u_0)
(rule (i (i t_ u_0) (i BIT1 n)) u_0)
(rule (i (i t_ u_0) (i BIT0 n)) u_0)
(rule (i (i (i lifted op) u_) NONE) NONE)
(rule (i (i (i lifted op) NONE) u_) NONE)
(rule (i (i within (i atreal x)) UNIV) (i atreal x))
(rule (i (i a_ (i floor x)) x) (i integer x))
(rule (i tan (i (i realu_add x) pi)) (i tan x))
(rule (i (i higheru_realu_derivative (i NUMERAL u_0)) f) f)
(rule (i mku_real (i trealu_eq (i trealu_ofu_num m))) (i realu_ofu_num m))
(rule (i mku_hreal (i naddu_eq (i naddu_ofu_num m))) (i hrealu_ofu_num m))
(rule (i open (i (i IMAGE lift) s0)) (i realu_open s0))
(rule (i (i HASu_SIZE s0) (i CARD s0)) (i FINITE s0))
(rule (i (i hasu_realu_measure s0) (i realu_measure s0)) (i realu_measurable s0))
(rule (i isu_interval (i (i IMAGE lift) s0)) (i isu_realinterval s0))
(rule (i measurable (i (i IMAGE lift) s0)) (i realu_measurable s0))
(rule (i connected (i (i IMAGE lift) s0)) (i isu_realinterval s0))
(rule (i compact (i (i IMAGE lift) s0)) (i realu_compact s0))
(rule (i lebesgueu_measurable (i (i IMAGE lift) s0)) (i realu_lebesgueu_measurable s0))
(rule (i open (i (i DIFF UNIV) s0)) (i closed s0))
(rule (i realu_open (i (i DIFF UNIV) s0)) (i realu_closed s0))
(rule (i sqrt (i (i dot x) x)) (i vectoru_norm x))
(rule (i realu_closed (i (i DIFF UNIV) s0)) (i realu_open s0))
(rule (i closed (i (i DIFF UNIV) s0)) (i open s0))
(rule (i negligible (i (i IMAGE lift) s0)) (i realu_negligible s0))
(rule (i (i DELETE s0) (i CHOICE s0)) (i REST s0))
(rule (i (i hasu_measure s0) (i measure s0)) (i measurable s0))
(rule (i closed (i (i IMAGE lift) s0)) (i realu_closed s0))
(rule (i convex (i (i IMAGE lift) s0)) (i isu_realinterval s0))
(rule (i (i INTER (i inside s0)) s0) EMPTY)
(rule (i (i (i support op) f) EMPTY) EMPTY)
(rule (i (i INTER (i outside s0)) s0) EMPTY)
(rule (i openu_segment (i (i c_ a) a)) EMPTY)
(rule (i (i ITER (i NUMERAL u_0)) f) I)
(rule (i swap (i (i c_ a) a)) I)
(rule (i g (i vec (i NUMERAL u_0))) (i pathstart g))
(rule (i TL (i (i CONS h) t)) t)
(rule (i (i (i o f) g) x) (i f (i g x)))
(rule (i (i (i affsign sgn) s0) EMPTY) (i (i hull affine) s0))
(rule (i (i (i a_a_ x) y) rel) (i (i rel x) y))
(rule (i (i (i INV R) x) y) (i (i R y) x))
(rule (i netlimit (i atreal a)) a)
(rule (i (i realu_min x) x) x)
(rule (i (i realu_max x) x) x)
(rule (i vectoru_neg (i vectoru_neg x)) x)
(rule (i OUTR (i INR y)) y)
(rule (i (i l_u_c s0) UNIV) (i FINITE s0))
(rule (i (i l_a_u_c s0) UNIV) (i COUNTABLE s0))
(rule (i (i UNION p) p) p)
(rule (i (i INTER p) p) p)
(rule (i (i subtopology top) UNIV) top)
(rule (i w_ (i w_ t)) t)
(rule (i w_ (i EVEN n)) (i ODD n))
(rule (i drop (i vec n)) (i realu_ofu_num n))
(rule (i transp (i mat n)) (i mat n))
(rule (i ODD (i NUMERAL n)) (i ODD n))
(rule (i EVEN (i NUMERAL n)) (i EVEN n))
(rule (i PRE (i BIT1 n)) (i BIT0 n))
(rule (i SUC (i BIT0 n)) (i BIT1 n))
(rule (i (i p_ n) n) (i BIT0 n))
(rule (i realu_abs (i realu_ofu_num n)) (i realu_ofu_num n))
(rule (i floor (i realu_ofu_num n)) (i realu_ofu_num n))
(rule (i intu_abs (i intu_ofu_num n)) (i intu_ofu_num n))
(rule (i sndcart (i vec n)) (i vec n))
(rule (i fstcart (i vec n)) (i vec n))
(rule (i lift (i realu_ofu_num n)) (i vec n))
(rule (i w_ (i ODD n)) (i EVEN n))
(rule (i realu_ofu_int (i intu_ofu_num n)) (i realu_ofu_num n))
(rule (i ODD (i NUMERAL u_0)) F)
(rule (i (i l_ u_0) u_0) F)
(rule (i (i EX P) NIL) F)
(rule (i (i MEM x) NIL) F)
(rule (i mku_nadd (i destu_nadd a)) a)
(rule (i intu_abs (i intu_abs x)) (i intu_abs x))
(rule (i intu_abs (i intu_neg x)) (i intu_abs x))
(rule (i (i intu_max x) x) x)
(rule (i (i intu_min x) x) x)
(rule (i intu_ofu_real (i realu_ofu_num n)) (i intu_ofu_num n))
(rule (i realu_abs (i vectoru_norm x)) (i vectoru_norm x))
(rule (i transp (i columnvector v)) (i rowvector v))
(rule (i (i affu_gt EMPTY) s0) (i conv0 s0))
(rule (i RSTC (i RSTC R)) (i RSTC R))
(rule (i (i exposedu_faceu_of s0) s0) (i convex s0))
(rule (i (i hull subspace) s0) (i span s0))
(rule (i dim (i closure s0)) (i dim s0))
(rule (i (i hull closed) s0) (i closure s0))
(rule (i vectoru_norm (i pad2d3d x)) (i vectoru_norm x))
(rule (i realu_abs (i infnorm x)) (i infnorm x))
(rule (i (i faceu_of s0) s0) (i convex s0))
(rule (i dim (i span s0)) (i dim s0))
(rule (i TC (i TC R)) (i TC R))
(rule (i infnorm (i vectoru_neg x)) (i infnorm x))
(rule (i STC (i STC R)) (i STC R))
(rule (i (i closedu_in euclidean) s0) (i closed s0))
(rule (i (i l_a_u_c UNIV) s0) (i INFINITE s0))
(rule (i SC (i SC R)) (i SC R))
(rule (i RTC (i RTC R)) (i RTC R))
(rule (i columns (i transp A)) (i rows A))
(rule (i rows (i transp A)) (i columns A))
(rule (i (i rotate2d pi) z) (i vectoru_neg z))
(rule (i closure (i closure s0)) (i closure s0))
(rule (i vectoru_norm (i cnj z)) (i vectoru_norm z))
(rule (i rank (i transp A)) (i rank A))
(rule (i RC (i RC R)) (i RC R))
(rule (i det (i transp A)) (i det A))
(rule (i ccos (i vectoru_neg z)) (i ccos z))
(rule (i (i openu_in euclideanreal) s0) (i realu_open s0))
(rule (i RSC (i RSC R)) (i RSC R))
(rule (i (i closedu_in euclideanreal) s0) (i realu_closed s0))
(rule (i real0 (i complexu_inv z)) (i real0 z))
(rule (i bounded (i closure s0)) (i bounded s0))
(rule (i compact (i closure s0)) (i bounded s0))
(rule (i path (i reversepath g)) (i path g))
(rule (i Re (i cnj z)) (i Re z))
(rule (i vectoru_norm (i vectoru_neg x)) (i vectoru_norm x))
(rule (i orthogonalu_matrix (i transp A)) (i orthogonalu_matrix A))
(rule (i span (i span s0)) (i span s0))
(rule (i interior (i interior s0)) (i interior s0))
(rule (i (i g_a_u_c UNIV) t) (i COUNTABLE t))
(rule (i (i openu_in euclidean) s0) (i open s0))
(rule (i transp (i rowvector v)) (i columnvector v))
(rule (i pathu_image (i reversepath g)) (i pathu_image g))
(rule (i OUTL (i INL x)) x)
(rule (i (i FILTER P) NIL) NIL)
(rule (i (i m_ u_0) u_0) u_0)
(rule (i (i t_ u_0) u_0) u_0)
(rule (i (i p_ u_0) u_0) u_0)
(rule (i (i IN x) P) (i P x))
(rule (i (i LET f) x) (i f x))
(rule (i (i s_b_ p) p) p)
(rule (i (i b_s_ p) p) p)
(rule (i (i nsum EMPTY) f) (i NUMERAL u_0))
(rule (i intu_ofu_num (i dimindex UNIV)) (i affu_dim UNIV))
(rule (i EVEN (i NUMERAL u_0)) T)
(rule (i (i l_a_ u_0) u_0) T)
(rule (i (i a_ u_0) u_0) T)
(rule (i (i PAIRWISE r) NIL) T)
(rule (i (i ALL P) NIL) T)
(rule (i ODD (i BIT1 n)) T)
(rule (i EVEN (i BIT0 n)) T)
(rule (i (i pairwise r) EMPTY) T)
(rule (i (i a_ x) x) T)
(rule (i ODD (i BIT0 n)) F)
(rule (i EVEN (i BIT1 n)) F)
(rule (i oneu_ABS (i oneu_REP a)) a)
(rule (i intu_ofu_real (i realu_ofu_int a)) a)
(rule (i pathfinish (i reversepath g)) (i pathstart g))
(rule (i SC (i INV R)) (i SC R))
(rule (i pathstart (i reversepath g)) (i pathfinish g))
(rule (i (i APPEND NIL) l) l)
(rule (i finiteu_index (i destu_finiteu_image a)) a)
(rule (i topology0 (i openu_in a)) a)
(rule (i REVERSE (i REVERSE l)) l)
(rule (i (i APPEND l) NIL) l)
(rule (i mku_net (i netord a)) a)
(rule (i cnj (i cnj z)) z)
(rule (i (i UNION s0) EMPTY) s0)
(rule (i (i UNION EMPTY) s0) s0)
(rule (i ccos (i cacs z)) z)
(rule (i lift (i drop x)) x)
(rule (i reversepath (i reversepath g)) g)
(rule (i intu_neg (i intu_neg x)) x)
(rule (i (i IMAGE I) s0) s0)
(rule (i (i INTER s0) UNIV) s0)
(rule (i (i INTER UNIV) s0) s0)
(rule (i csin (i casn z)) z)
(rule (i complexu_inv (i complexu_inv x)) x)
(rule (i (i DIFF s0) EMPTY) s0)
(rule (i transp (i transp A)) A)
(rule (i mku_finiteu_sum (i destu_finiteu_sum a)) a)
(rule (i netlimit (i at a)) a)
(rule (i mku_cart (i destu_cart a)) a)
(rule (i ABSu_prod (i REPu_prod a)) a)
(rule (i PRE (i SUC n)) n)
(rule (i numu_ofu_int (i intu_ofu_num n)) n)
(rule (i (i ZIP NIL) NIL) NIL)
(rule (i (i ZIP NIL) l2) NIL)
(rule (i realu_ofu_num (i NUMERAL u_0)) (i diameter EMPTY))
(rule (i realu_ofu_num (i NUMERAL u_0)) (i tan pi))
(rule (i vec (i NUMERAL u_0)) (i neutral vectoru_add))
(rule (i realu_ofu_num (i NUMERAL u_0)) (i realu_measure EMPTY))
(rule (i realu_ofu_num (i NUMERAL u_0)) (i Re ii))
(rule (i realu_ofu_num (i NUMERAL u_0)) (i measure EMPTY))
(rule (i realu_ofu_num (i NUMERAL u_0)) (i content EMPTY))
(rule (i NUMERAL (i BIT1 u_0)) (i dimindex UNIV))
(rule (i realu_ofu_num (i NUMERAL u_0)) (i neutral realu_add))
(rule (i realu_ofu_num (i NUMERAL u_0)) (i sin pi))
(rule (i NUMERAL (i BIT1 u_0)) (i neutral t_))
(rule (i (i IMAGE f) EMPTY) EMPTY)
(rule (i (i EXP u_0) u_0) (i BIT1 u_0))
(rule (i NUMERAL (i NUMERAL u_0)) (i NUMERAL u_0))
(rule (i PRE (i NUMERAL u_0)) (i NUMERAL u_0))
(rule (i (i IMAGE lift) UNIV) UNIV)
(rule (i (i IMAGE drop) UNIV) UNIV)
(rule (i (i hull affine) UNIV) UNIV)
(rule (i from (i NUMERAL u_0)) UNIV)
(rule (i (i hull convex) EMPTY) EMPTY)
(rule (i (i hull convex) UNIV) UNIV)
(rule (i BIT0 (i NUMERAL u_0)) (i NUMERAL u_0))
(rule (i (i hull affine) EMPTY) EMPTY)
(rule (i (i hull conic) EMPTY) EMPTY)
(rule (i realu_abs (i exp x)) (i exp x))
(rule (i realu_sgn (i realu_inv x)) (i realu_sgn x))
(rule (i integer (i realu_neg x)) (i integer x))
(rule (i rational (i realu_neg x)) (i rational x))
(rule (i vectoru_norm (i Cx x)) (i realu_abs x))
(rule (i realu_abs (i realu_neg x)) (i realu_abs x))
(rule (i cos (i realu_neg x)) (i cos x))
(rule (i integer (i realu_abs x)) (i integer x))
(rule (i rational (i realu_inv x)) (i rational x))
(rule (i vectoru_norm (i lift x)) (i realu_abs x))
(rule (i realu_abs (i realu_abs x)) (i realu_abs x))
(rule (i cnj (i Cx x)) (i Cx x))
(rule (i cos (i realu_abs x)) (i cos x))
(rule (i w_ (i dependent s0)) (i independent s0))
(rule (i RC (i SC R)) (i RSC R))
(rule (i RC (i TC R)) (i RTC R))
(rule (i TC (i SC R)) (i STC R))
(rule (i w_ (i FINITE s0)) (i INFINITE s0))
(rule (i dim (i rows A)) (i rank A))
(rule (i dim (i columns A)) (i rank A))
(rule (i realu_abs (i drop x)) (i vectoru_norm x))
(rule (i UNIONS (i components u)) u)
(rule (i (i MAP f) NIL) NIL)
(rule (i (i INTER s0) EMPTY) EMPTY)
(rule (i (i INTER EMPTY) s0) EMPTY)
(rule (i (i pathu_component EMPTY) x) EMPTY)
(rule (i (i connectedu_component EMPTY) x) EMPTY)
(rule (i (i DIFF EMPTY) s0) EMPTY)
(rule (i (i pathu_component UNIV) x) UNIV)
(rule (i (i UNION s0) UNIV) UNIV)
(rule (i (i UNION UNIV) s0) UNIV)
(rule (i (i DIFF s0) s0) EMPTY)
(rule (i (i DIFF s0) UNIV) EMPTY)
(rule (i (i DELETE EMPTY) x) EMPTY)
(rule (i (i INSERT x) UNIV) UNIV)
(rule (i (i connectedu_component UNIV) x) UNIV)
(rule (i tan (i atn y)) y)
(rule (i realu_inv (i realu_inv x)) x)
(rule (i realu_neg (i realu_neg x)) x)
(rule (i Re (i Cx x)) x)
(rule (i drop (i lift x)) x)
(rule (i log (i exp x)) x)
(rule (i iterate realu_mul) product)
(rule (i iterate realu_add) sum)
(rule (i rconesgn a_) rconeu_eq)
(rule (i rconesgn realu_ge) rconeu_ge)
(rule (i rconesgn realu_gt) rconeu_gt)
(rule (i iterate p_) nsum)
(rule (i u_mku_rec ZBOT) BOTTOM)
(rule (i iterate complexu_mul) cproduct)
(rule (i REVERSE NIL) NIL)
(rule (i ODD u_0) F)
(rule (i w_ T) F)
(rule (i realu_abs pi) pi)
(rule (i BUTLAST NIL) NIL)
(rule (i PRE u_0) u_0)
(rule (i BIT0 u_0) u_0)
(rule (i MAP I) I)
(rule (i inverse I) I)
(rule (i EVEN u_0) T)
(rule (i neutral s_b_) T)
(rule (i evenperm I) T)
(rule (i w_ F) T)
(rule (i NULL NIL) T)
(rule (i mku_num INDu_0) u_0)
(rule (i GSPEC p) p)
(rule (i NUMERAL n) n)
(rule (i I x) x)
(rule (i UNIONS EMPTY) EMPTY)
(rule (i closure EMPTY) EMPTY)
(rule (i span UNIV) UNIV)
(rule (i setu_ofu_list NIL) EMPTY)
(rule (i interior EMPTY) EMPTY)
(rule (i topspace euclideanreal) UNIV)
(rule (i INTERS EMPTY) UNIV)
(rule (i topspace euclidean) UNIV)
(rule (i frontier EMPTY) EMPTY)
(rule (i closure UNIV) UNIV)
(rule (i relativeu_interior EMPTY) EMPTY)
(rule (i inside EMPTY) EMPTY)
(rule (i frontier UNIV) EMPTY)
(rule (i outside EMPTY) UNIV)
(rule (i interior UNIV) UNIV)
(rule (i affsign sgnu_lt) affu_lt)
(rule (i affsign sgnu_gt) affu_gt)
(rule (i topology0 open) euclidean)
(rule (i affsign sgnu_le) affu_le)
(rule (i topology0 realu_open) euclideanreal)
(rule (i affsign sgnu_ge) affu_ge)
(rule (i LETu_END t) t)
