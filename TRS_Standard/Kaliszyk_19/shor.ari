; @origtpdbfilename shor.trs
; @xtcfilename "./TRS_Standard/Kaliszyk_19/shor.xml"
(format TRS)
(fun i 2)
(fun DIFF 0)
(fun UNIV 0)
(fun interior 0)
(fun frontier 0)
(fun connectedu_component 0)
(fun realu_div 0)
(fun sol0 0)
(fun pi 0)
(fun const1 0)
(fun p_ 0)
(fun t_ 0)
(fun sub6 0)
(fun scalar6 0)
(fun add6 0)
(fun mku_456 0)
(fun rotate5 0)
(fun truncateu_solu_x 0)
(fun rotate6 0)
(fun rotate4 0)
(fun realu_mul 0)
(fun realu_ofu_num 0)
(fun NUMERAL 0)
(fun BIT0 0)
(fun BIT1 0)
(fun u_0 0)
(fun mm1 0)
(fun mul6 0)
(fun uni 0)
(fun c_ 0)
(fun lfun 0)
(fun proju_y4 0)
(fun DECIMAL 0)
(fun truncateu_dihu_x 0)
(fun proju_y5 0)
(fun proju_y6 0)
(fun mm2 0)
(fun truncateu_vol3f 0)
(fun realu_integral 0)
(fun closedu_realu_interval 0)
(fun CONS 0)
(fun NIL 0)
(fun openu_realu_interval 0)
(fun s_b_ 0)
(fun w_ 0)
(fun a_ 0)
(fun vec 0)
(fun vectoru_norm 0)
(fun vectoru_add 0)
(fun realu_add 0)
(fun vectoru_angle 0)
(fun sqrt 0)
(fun realu_pow 0)
(fun cos 0)
(fun atn 0)
(fun ssqrt 0)
(fun intu_neg 0)
(fun intu_min 0)
(fun intu_max 0)
(fun UNION 0)
(fun b_s_ 0)
(fun FINITE 0)
(fun a_u_c 0)
(fun COUNTABLE 0)
(fun realu_sub 0)
(fun sqrt8 0)
(fun truncateu_gamma2u_x 0)
(fun IMAGE 0)
(fun mku_finiteu_sum 0)
(fun o_o_ 0)
(fun dimindex 0)
(fun sums 0)
(fun o 0)
(fun lift 0)
(fun realu_sums 0)
(fun EMPTY 0)
(fun rotate2 0)
(fun rotate3 0)
(fun constant6 0)
(fun realu_abs 0)
(fun d_ 0)
(fun measure 0)
(fun hull 0)
(fun convex 0)
(fun INSERT 0)
(fun Cx 0)
(fun Re 0)
(fun complexu_mul 0)
(fun ii 0)
(fun Im 0)
(fun realu_le 0)
(fun realu_lt 0)
(fun INTER 0)
(fun dih2u_x 0)
(fun ldih2u_x 0)
(fun Arg 0)
(fun COND 0)
(fun criticalu_edgeu_y 0)
(fun wtcount3u_y 0)
(fun gchi 0)
(fun dih4u_x 0)
(fun gchi4u_x 0)
(fun m_ 0)
(fun CARD 0)
(fun UNIONS 0)
(fun components 0)
(fun dot 0)
(fun INTERS 0)
(fun arcV 0)
(fun inverse 0)
(fun nodeu_map 0)
(fun realu_ofu_int 0)
(fun intu_ofu_real 0)
(fun integer 0)
(fun pathu_image 0)
(fun reversepath 0)
(fun IN 0)
(fun setu_ofu_edge 0)
(fun sigmau_fan 0)
(fun extensionu_sigmau_fan 0)
(fun matrixu_vectoru_mul 0)
(fun rhazimu_x 0)
(fun rhazim3u_x 0)
(fun continuous 0)
(fun realu_continuous 0)
(fun angle 0)
(fun DELETE 0)
(fun openu_interval 0)
(fun vectoru_sub 0)
(fun ball 0)
(fun bnu_squanderTarget 0)
(fun bnu_squanderFace 0)
(fun intu_lt 0)
(fun intu_add 0)
(fun mku_num 0)
(fun INDu_SUC 0)
(fun destu_num 0)
(fun SUC 0)
(fun au_sy 0)
(fun bu_sy 0)
(fun COVER5u_SY 0)
(fun dihV 0)
(fun apexu_std3u_lllu_xww 0)
(fun bnu_tri 0)
(fun bnu_quad 0)
(fun bnu_except 0)
(fun bnu_vertextype 0)
(fun intu_ofu_num 0)
(fun intu_sub 0)
(fun intu_abs 0)
(fun HASu_SIZE 0)
(fun transp 0)
(fun rowvector 0)
(fun columnvector 0)
(fun twopow 0)
(fun collinear 0)
(fun parallel 0)
(fun conicu_cap 0)
(fun deltau_sub1u_x 0)
(fun deltau_x 0)
(fun proju_y3 0)
(fun dih3u_x 0)
(fun gchi3u_x 0)
(fun hasu_integral 0)
(fun indicator 0)
(fun negligible 0)
(fun r_ 0)
(fun rank 0)
(fun matrixu_mul 0)
(fun dihu_x 0)
(fun sin 0)
(fun SDIFF 0)
(fun DISJOINT 0)
(fun sqn 0)
(fun ldih6u_xu_divu_sqrtdeltau_posbranch 0)
(fun ldih6u_xu_n 0)
(fun conic 0)
(fun deltau_126u_x 0)
(fun pathstart 0)
(fun openu_in 0)
(fun euclidean 0)
(fun open 0)
(fun linepath 0)
(fun intu_pow 0)
(fun sum 0)
(fun conv 0)
(fun edgeu_map 0)
(fun faceu_map 0)
(fun dartu_degenerate 0)
(fun swap 0)
(fun I 0)
(fun isu_realinterval 0)
(fun realu_inv 0)
(fun solu_euleru_xu_divu_sqrtdelta 0)
(fun solu_euler345u_xu_divu_sqrtdelta 0)
(fun upsu_x 0)
(fun upsu_xu_pow2 0)
(fun closedu_interval 0)
(fun l_ 0)
(fun closed 0)
(fun realu_closed 0)
(fun hplus 0)
(fun intu_le 0)
(fun intu_mul 0)
(fun realu_neg 0)
(fun proju_x2 0)
(fun asn 0)
(fun proju_x1 0)
(fun sqrt3 0)
(fun unit6 0)
(fun pow2 0)
(fun div6 0)
(fun asnFnhk 0)
(fun bnu_admissible1 0)
(fun bnu_admissible2 0)
(fun bnu_admissible3 0)
(fun bnu_admissible 0)
(fun hypermap0 0)
(fun quotientu_darts 0)
(fun emap 0)
(fun nmap 0)
(fun fmap 0)
(fun quotient 0)
(fun marchalu_quartic 0)
(fun mardihu_x 0)
(fun p_p_ 0)
(fun pad2d3d 0)
(fun subtopology 0)
(fun maxu_real 0)
(fun float 0)
(fun r_r_ 0)
(fun mat 0)
(fun drop 0)
(fun POWER 0)
(fun bnu_rotate1 0)
(fun bnu_rotate 0)
(fun gamma3fu_126u_su_n 0)
(fun yu_ofu_x 0)
(fun lmdihu_xu_n 0)
(fun lmdih2u_xu_n 0)
(fun lmdih6u_xu_n 0)
(fun gamma3fu_126u_n 0)
(fun FST 0)
(fun abdodec 0)
(fun adodec 0)
(fun matrix 0)
(fun frechetu_derivative 0)
(fun jacobian 0)
(fun ldihu_xu_divu_sqrtdeltau_posbranch 0)
(fun ldih2u_xu_divu_sqrtdeltau_posbranch 0)
(fun g_ 0)
(fun azim 0)
(fun azimu_fan 0)
(fun from 0)
(fun l_a_ 0)
(fun vectoru_neg 0)
(fun clog 0)
(fun less 0)
(fun convexu_on 0)
(fun realu_convexu_on 0)
(fun rhazim2u_x 0)
(fun shiftpath 0)
(fun real3u_ofu_triple 0)
(fun mku_vec3 0)
(fun apexu_std3u_lllu_wxx 0)
(fun SUBSET 0)
(fun graph 0)
(fun fan1 0)
(fun fan2 0)
(fun fan6 0)
(fun fan7 0)
(fun FAN 0)
(fun coplanar 0)
(fun arclength 0)
(fun h0 0)
(fun arcu_hhn 0)
(fun RC 0)
(fun fstcart 0)
(fun floor 0)
(fun frac 0)
(fun affine 0)
(fun casn 0)
(fun ldih5u_xu_divu_sqrtdeltau_posbranch 0)
(fun ldih5u_xu_n 0)
(fun proju_y2 0)
(fun gchi2u_x 0)
(fun affsign 0)
(fun sgnu_le 0)
(fun affu_le 0)
(fun measurableu_on 0)
(fun realu_measurableu_on 0)
(fun numberu_ofu_nodes 0)
(fun numberu_ofu_edges 0)
(fun numberu_ofu_faces 0)
(fun dart 0)
(fun numberu_ofu_components 0)
(fun planaru_hypermap 0)
(fun MEM 0)
(fun APPEND 0)
(fun within 0)
(fun at 0)
(fun real0 0)
(fun atreal 0)
(fun volu_y 0)
(fun gcy 0)
(fun dihu_y 0)
(fun dih2u_y 0)
(fun dih3u_y 0)
(fun dih4u_y 0)
(fun dih5u_y 0)
(fun dih6u_y 0)
(fun gamma4fgcy 0)
(fun lmfun 0)
(fun MOD 0)
(fun ODD 0)
(fun gamma3fu_vu_lfun 0)
(fun gamma3fu_xu_vu_lfun 0)
(fun taumu_sub1u_x 0)
(fun taumu_x 0)
(fun solu_y 0)
(fun ccos 0)
(fun csin 0)
(fun cpow 0)
(fun wedgeu_ge 0)
(fun SND 0)
(fun tupleu_stableu_sy 0)
(fun Iu_SY 0)
(fun pastecart 0)
(fun FCONS 0)
(fun neutral 0)
(fun deltau_y 0)
(fun solu_euler246u_xu_divu_sqrtdelta 0)
(fun solu_euler156u_xu_divu_sqrtdelta 0)
(fun mcell0 0)
(fun mcell1 0)
(fun mcell2 0)
(fun mcell3 0)
(fun mcell4 0)
(fun mcell 0)
(fun MIN 0)
(fun intu_sgn 0)
(fun muyu_v 0)
(fun d3 0)
(fun cnj 0)
(fun g_a_u_c 0)
(fun limitu_pointu_of 0)
(fun minu_real 0)
(fun gamma3u_x 0)
(fun gamma23u_keep135u_x 0)
(fun eulerAu_x 0)
(fun edgeu_flat2u_x 0)
(fun euleru_2flatu_x 0)
(fun p_u_c 0)
(fun du_sy 0)
(fun COVER2u_SY 0)
(fun mku_hreal 0)
(fun naddu_eq 0)
(fun naddu_ofu_num 0)
(fun hrealu_ofu_num 0)
(fun cball 0)
(fun exp 0)
(fun tau0 0)
(fun normalize 0)
(fun acs 0)
(fun orbitu_map 0)
(fun face 0)
(fun truncateu_gamma3fu_x 0)
(fun truncateu_gamma23au_x 0)
(fun hinhcau 0)
(fun eta2u_126 0)
(fun eta2u_135 0)
(fun volu_x 0)
(fun vol3fu_456 0)
(fun circular 0)
(fun lunar 0)
(fun cross 0)
(fun omegau_listu_n 0)
(fun omegau_list 0)
(fun MAX 0)
(fun node 0)
(fun realu_sgn 0)
(fun MAP 0)
(fun matvec 0)
(fun matrixu_sub 0)
(fun rotate2d 0)
(fun distance 0)
(fun CONSTR 0)
(fun dim 0)
(fun columns 0)
(fun taum 0)
(fun tauq 0)
(fun sqrt2 0)
(fun gamma3fu_135u_n 0)
(fun upperu_dihu_y 0)
(fun vol2r 0)
(fun vol2f 0)
(fun gamma23fu_n 0)
(fun lnazim 0)
(fun complexu_pow 0)
(fun hasu_measure 0)
(fun measurable 0)
(fun packingu_trg 0)
(fun centeru_pac 0)
(fun m_m_m_g_ 0)
(fun m_m_g_ 0)
(fun proju_y1 0)
(fun gchi1u_x 0)
(fun EXP 0)
(fun normball 0)
(fun between 0)
(fun loop0 0)
(fun res 0)
(fun faceu_loop 0)
(fun fu_fanu_pair 0)
(fun dart1u_ofu_fan 0)
(fun fu_fanu_pairu_ext 0)
(fun nodeu_path 0)
(fun CHOICE 0)
(fun REST 0)
(fun complexu_div 0)
(fun cexp 0)
(fun orthogonalu_matrix 0)
(fun complex 0)
(fun ly 0)
(fun hrealu_add 0)
(fun hrealu_mul 0)
(fun trivialu_limit 0)
(fun cos797 0)
(fun span 0)
(fun bnu_exceptionalVertex 0)
(fun csqrt 0)
(fun summable 0)
(fun realu_summable 0)
(fun outside 0)
(fun gamma3fu_vLRu_nlfun 0)
(fun gamma3fu_vLRu_xu_nlfun 0)
(fun ordu_pairs 0)
(fun divisionu_of 0)
(fun dartsu_ofu_hyp 0)
(fun azimu_cycle 0)
(fun EE 0)
(fun nnu_ofu_hyp 0)
(fun EL 0)
(fun dihu4 0)
(fun mxi 0)
(fun dihu3 0)
(fun dihu2 0)
(fun fu_sy 0)
(fun prod0 0)
(fun plainu_hypermap 0)
(fun taumu_sub246u_x 0)
(fun inverseu_sigmau_fanu_alt 0)
(fun gamma2u_xu_divu_azim 0)
(fun iterate 0)
(fun cproduct 0)
(fun taumu_sub345u_x 0)
(fun pow4 0)
(fun pow3 0)
(fun ldih3u_xu_divu_sqrtdeltau_posbranch 0)
(fun ldih3u_xu_n 0)
(fun pow1 0)
(fun complexu_inv 0)
(fun basis 0)
(fun vector 0)
(fun EVEN 0)
(fun bnu_tabulate2 0)
(fun bnu_enumerator 0)
(fun bnu_enumTab 0)
(fun volR 0)
(fun etau_y 0)
(fun rad2u_y 0)
(fun fdodec 0)
(fun bnu_countVertices 0)
(fun bnu_verticesu_graph 0)
(fun sign 0)
(fun product 0)
(fun sndcart 0)
(fun gamma3f 0)
(fun gamma23fu_126u_03 0)
(fun promote1u_tou_6 0)
(fun evenperm 0)
(fun sgnu_ge 0)
(fun quadraticu_rootu_plus 0)
(fun quadraticu_rootu_plusu_curry 0)
(fun ITER 0)
(fun dihu_xu_divu_sqrtdeltau_posbranch 0)
(fun lmdihu_xu_divu_sqrtdeltau_posbranch 0)
(fun rhazimu_xu_divu_sqrtdeltau_posbranch 0)
(fun rhazim3u_xu_divu_sqrtdeltau_posbranch 0)
(fun bounded 0)
(fun realu_negligible 0)
(fun compose6 0)
(fun dummy6 0)
(fun proju_x6 0)
(fun mku_126 0)
(fun truncateu_gamma23u_xu_C 0)
(fun truncateu_gamma23u_xu_B 0)
(fun bump 0)
(fun halfbumpu_x 0)
(fun gamma3fu_v 0)
(fun netord 0)
(fun sequentially 0)
(fun g_a_ 0)
(fun closure 0)
(fun pathu_component 0)
(fun vecmat 0)
(fun support 0)
(fun bu_coef 0)
(fun deltau_x34 0)
(fun u_mku_rec 0)
(fun ZBOT 0)
(fun BOTTOM 0)
(fun trealu_neg 0)
(fun iu_fan 0)
(fun extendedu_dart 0)
(fun ldihu_xu_n 0)
(fun ldih6u_xu_126u_n 0)
(fun dartu_std3u_mini 0)
(fun sgnu_lt 0)
(fun affu_lt 0)
(fun sgnu_gt 0)
(fun affu_gt 0)
(fun affu_ge 0)
(fun aff 0)
(fun delta4u_squaredu_x 0)
(fun delta4u_squaredu_y 0)
(fun dih5u_xu_divu_sqrtdeltau_posbranch 0)
(fun deltau_x4 0)
(fun bnu_sub 0)
(fun bnu_enumt 0)
(fun trealu_mul 0)
(fun delta 0)
(fun coplanaru_alt 0)
(fun vsum 0)
(fun h0cut 0)
(fun TL 0)
(fun ivsu_azimu_cycle 0)
(fun ldih2u_xu_n 0)
(fun intervalu_eps 0)
(fun intu_mod 0)
(fun numu_mod 0)
(fun dua 0)
(fun azimu_dart 0)
(fun initialu_sublist 0)
(fun projection 0)
(fun log 0)
(fun dih4u_xu_126u_s2 0)
(fun a_a_g_ 0)
(fun exceptionalu_face 0)
(fun typeu_ofu_node 0)
(fun nodeu_typeu_exceptionalu_face 0)
(fun CROSS 0)
(fun rational 0)
(fun apexffA 0)
(fun apexff5 0)
(fun apexff4 0)
(fun bnu_verticesu_face 0)
(fun rconeu_gt 0)
(fun homotopicu_paths 0)
(fun inside 0)
(fun intu_divides 0)
(fun numu_divides 0)
(fun eu_fanu_pair 0)
(fun eu_fanu_pairu_ext 0)
(fun cu_coef 0)
(fun detu_vec3 0)
(fun wedge 0)
(fun pathfinish 0)
(fun subpath 0)
(fun closedu_segment 0)
(fun bnu_countNonFinals 0)
(fun bnu_finalGraph 0)
(fun nsum 0)
(fun cosV 0)
(fun rhazim2u_xu_divu_sqrtdeltau_posbranch 0)
(fun tauu_residualu_x 0)
(fun tan 0)
(fun relativeu_interior 0)
(fun frustum 0)
(fun frustt 0)
(fun tupleu_hypermap 0)
(fun bisu_lt 0)
(fun voronoiu_open 0)
(fun dartu_nondegenerate 0)
(fun edge 0)
(fun isu_edgeu_merge 0)
(fun midpoint 0)
(fun proju_point 0)
(fun dropout 0)
(fun netlimit 0)
(fun realu_max 0)
(fun realu_min 0)
(fun F0 0)
(fun root 0)
(fun ldihu_xu_126u_n 0)
(fun conv0 0)
(fun unit0 0)
(fun mInside 0)
(fun heading 0)
(fun LENGTH 0)
(fun nabs 0)
(fun pathR 0)
(fun bnu_mapAt 0)
(fun bnu_replace 0)
(fun bnu_replacefacesAt 0)
(fun pathL 0)
(fun hasu_realu_integral 0)
(fun intu_gcd 0)
(fun numu_gcd 0)
(fun dih3u_xu_135u_s2 0)
(fun ldih3u_xu_135u_s2 0)
(fun dih5u_x 0)
(fun dih5u_xu_126u_s2 0)
(fun path 0)
(fun etau_x 0)
(fun tameu_8 0)
(fun compact 0)
(fun connectedu_hypermap 0)
(fun simpleu_hypermap 0)
(fun tameu_2 0)
(fun tameu_1 0)
(fun chiu_x 0)
(fun ISu_SY 0)
(fun klu_sy 0)
(fun dih3u_xu_divu_sqrtdeltau_posbranch 0)
(fun gamma3fu_vL0 0)
(fun gamma3fu_xu_vL0 0)
(fun topspace 0)
(fun closedu_in 0)
(fun INV 0)
(fun interp 0)
(fun trealu_ofu_num 0)
(fun affu_dim 0)
(fun faceu_of 0)
(fun extremeu_pointu_of 0)
(fun FACT 0)
(fun binom 0)
(fun two6 0)
(fun proju_x4 0)
(fun proju_x5 0)
(fun vecmats 0)
(fun polyhedron 0)
(fun polytope 0)
(fun dih6u_xu_126u_s2 0)
(fun ldih6u_xu_126u_s2 0)
(fun DIV 0)
(fun tayloru_coeffu_catn 0)
(fun realu_ge 0)
(fun t0 0)
(fun anchor 0)
(fun cone0 0)
(fun euclideanreal 0)
(fun rh0 0)
(fun lfunu_y1 0)
(fun bnu_excessTCount 0)
(fun differentiable 0)
(fun complexu_differentiable 0)
(fun dist 0)
(fun realu_open 0)
(fun oppositeu_hypermap 0)
(fun bnu_nextVertex 0)
(fun bnu_nextVertices 0)
(fun bnu_splitAtRec 0)
(fun bnu_splitAt 0)
(fun naddu_le 0)
(fun naddu_add 0)
(fun hasu_orders 0)
(fun setu_ofu_quadrilateralsu_meetingu_node 0)
(fun wu_dartu_fan 0)
(fun rconeu_fan 0)
(fun rwu_dartu_fan 0)
(fun promote 0)
(fun intu_gt 0)
(fun inverseu_sigmau_fan 0)
(fun det 0)
(fun rotationu_matrix 0)
(fun dih2u_xu_126u_s2 0)
(fun ldih2u_xu_126u_s2 0)
(fun intu_ge 0)
(fun tauu_fun 0)
(fun Vu_SY 0)
(fun Eu_SY 0)
(fun Fu_SY 0)
(fun du_fun 0)
(fun tauu_star 0)
(fun RSC 0)
(fun a_a_ 0)
(fun u_destu_rec 0)
(fun bnu_rotateu_to 0)
(fun bnu_minu_list 0)
(fun bnu_rotateu_min 0)
(fun cm3u_upsu_x 0)
(fun cofactor 0)
(fun oneu_stepu_contour 0)
(fun bnu_directedLength 0)
(fun setu_ofu_list 0)
(fun bnu_neighbors 0)
(fun bnu_duplicateEdge 0)
(fun hasu_realu_measure 0)
(fun apexu_supu_flat 0)
(fun higheru_complexu_derivative 0)
(fun complexu_derivative 0)
(fun subspace 0)
(fun halfbumpu_x4 0)
(fun halfbumpu_x1 0)
(fun proju_x3 0)
(fun flatu_termu_x 0)
(fun taumu_2flatu_x 0)
(fun hasu_vectoru_derivative 0)
(fun hasu_realu_derivative 0)
(fun cone 0)
(fun poweru_mapu_points 0)
(fun INDu_0 0)
(fun catn 0)
(fun next 0)
(fun size 0)
(fun drop3 0)
(fun drop2 0)
(fun drop1 0)
(fun SC 0)
(fun gamma3fu_126 0)
(fun gamma3fu_vL 0)
(fun orthogonal 0)
(fun volu_ballu_wedge 0)
(fun setu_ofu_trianglesu_meetingu_node 0)
(fun setu_ofu_exceptionalu_meetingu_node 0)
(fun l_a_u_c 0)
(fun voronoiu_list 0)
(fun voronoiu_nondg 0)
(fun eu_plane 0)
(fun unwinding 0)
(fun trace 0)
(fun matrixu_add 0)
(fun nu_fanu_pair 0)
(fun nu_fanu_pairu_ext 0)
(fun matrixu_neg 0)
(fun bnu_isu_pru_Iso 0)
(fun bnu_isu_pru_iso 0)
(fun LISTu_TO 0)
(fun bnu_tabulate0 0)
(fun realu_integrableu_on 0)
(fun dihu_xu_135u_s2 0)
(fun ldihu_xu_135u_s2 0)
(fun supportu_list 0)
(fun cycu_emap 0)
(fun cycu_nmap 0)
(fun cycu_fmap 0)
(fun cyclicu_hypermap 0)
(fun setdist 0)
(fun orthonormal 0)
(fun edgeu_of 0)
(fun vectoru_tou_pair 0)
(fun azim1 0)
(fun minu_num 0)
(fun atn2 0)
(fun solR 0)
(fun derivedu_form 0)
(fun packing 0)
(fun centeredu_pac 0)
(fun realu_gt 0)
(fun matan 0)
(fun realu_bounded 0)
(fun cacs 0)
(fun volu_conicu_capu_wedge 0)
(fun mku_real 0)
(fun trealu_eq 0)
(fun shift 0)
(fun doubleu_edgeu_walkup 0)
(fun doubleu_nodeu_walkup 0)
(fun doubleu_faceu_walkup 0)
(fun betau_bumpu_lb 0)
(fun bnu_isu_Iso 0)
(fun bnu_isu_iso 0)
(fun taumu_y1u_y2 0)
(fun taumu_x1u_x2 0)
(fun rho 0)
(fun rhazim3 0)
(fun apexfA 0)
(fun apexf5 0)
(fun apexf4 0)
(fun lmdih3u_xu_divu_sqrtdeltau_posbranch 0)
(fun voronoiu_closed 0)
(fun truncateu_vol3ru_456 0)
(fun cayleytr 0)
(fun cayleyR 0)
(fun isu_nodeu_split 0)
(fun dartu_of 0)
(fun rhou_fun 0)
(fun ESTD 0)
(fun mku_135 0)
(fun geomdetaili_simplex 0)
(fun rotoinversionu_matrix 0)
(fun gamma3fu_vLu_lfun 0)
(fun apexu_A 0)
(fun ITLIST 0)
(fun homotopicu_loops 0)
(fun PASSOC 0)
(fun realu_lebesgueu_measurable 0)
(fun lebesgueu_measurable 0)
(fun PSUBSET 0)
(fun standard 0)
(fun hrealu_le 0)
(fun four6 0)
(fun deltau_pentu_x 0)
(fun bnu_separated2 0)
(fun bnu_separated3 0)
(fun bnu_separated 0)
(fun asn797k 0)
(fun setu_ofu_cube 0)
(fun unionu_ofu_cube 0)
(fun setu_ofu_components 0)
(fun infsum 0)
(fun rhazim2 0)
(fun wedge3u_fan 0)
(fun integral 0)
(fun atn2curry 0)
(fun diagonal0 0)
(fun euleru_1flatu_x 0)
(fun ifu_azimsu_fan 0)
(fun combu_component 0)
(fun edgeu_walkup 0)
(fun isu_splittingu_component 0)
(fun rconesgn 0)
(fun bnu_sub1 0)
(fun bnu_isu_Hom 0)
(fun bnu_isu_hom 0)
(fun rconeu_ge 0)
(fun normize 0)
(fun T 0)
(fun isu_faceu_split 0)
(fun rconeu_eq 0)
(fun equiintegrableu_on 0)
(fun integrableu_on 0)
(fun protracted 0)
(fun hrealu_inv 0)
(fun flu_sy 0)
(fun content 0)
(fun epigraph 0)
(fun taumu_y2 0)
(fun taumu_x2 0)
(fun taumu_y1 0)
(fun taumu_x1 0)
(fun bnu_tame9a 0)
(fun bnu_tame10 0)
(fun bnu_tame11a 0)
(fun bnu_tame11b 0)
(fun bnu_tame12o 0)
(fun bnu_tame13a 0)
(fun bnu_tame 0)
(fun simplex 0)
(fun edgeu_path 0)
(fun LAST 0)
(fun gamma3fu_vLu_n0 0)
(fun gamma3fu_vLu_xu_n0 0)
(fun selfu_pairs 0)
(fun ffu_ofu_hyp 0)
(fun inu_list 0)
(fun destu_nadd 0)
(fun mku_nadd 0)
(fun isu_nadd 0)
(fun join 0)
(fun lunaru_deform 0)
(fun leftu_actionu_list 0)
(fun sphericalu_map 0)
(fun complementu_set 0)
(fun x1cube 0)
(fun cstab 0)
(fun bu_ear0 0)
(fun deltau_135u_x 0)
(fun maxu_num 0)
(fun bnu_maxu_list 0)
(fun Ju_SY 0)
(fun polaru_le 0)
(fun FILTER 0)
(fun bnu_finalu_face 0)
(fun bnu_faces 0)
(fun bnu_finals 0)
(fun dart4u_diag3 0)
(fun marchal 0)
(fun deltau_234u_x 0)
(fun topology0 0)
(fun hasu_complexu_derivative 0)
(fun setu_ofu_orbits 0)
(fun faceu_set 0)
(fun nodeu_set 0)
(fun supportu_darts 0)
(fun faceu_collection 0)
(fun realu_compact 0)
(fun dartu_std3u_bigu_200u_218 0)
(fun COVER3u_SY 0)
(fun rows 0)
(fun numu_ofu_int 0)
(fun deltau_x6 0)
(fun solu_x 0)
(fun gamma23f 0)
(fun convu_trg 0)
(fun acsu_sqrtu_x1u_d4 0)
(fun scale 0)
(fun gou_oneu_step 0)
(fun du_tame 0)
(fun tableu_multiplier 0)
(fun tupleu_loop 0)
(fun flatu_term 0)
(fun truncateu_simplex 0)
(fun pairwise 0)
(fun dih6u_x 0)
(fun mardih6u_x 0)
(fun eeu_ofu_hyp 0)
(fun REVERSE 0)
(fun volu_frusttu_wedge 0)
(fun sinV 0)
(fun hasu_boundedu_variationu_on 0)
(fun hasu_boundedu_realu_variationu_on 0)
(fun criticalu_edgeX 0)
(fun criticalu_weight 0)
(fun bnu_nonFinals 0)
(fun admu_1 0)
(fun admu_2 0)
(fun admu_3 0)
(fun admissibleu_weight 0)
(fun slice 0)
(fun gamma3fu_vLu_n 0)
(fun gamma3fu_vLu_nlfun 0)
(fun sup 0)
(fun preimage 0)
(fun isolatedu_dart 0)
(fun inf 0)
(fun bnu_inju_on 0)
(fun realu_infsum 0)
(fun part7 0)
(fun part6 0)
(fun part5 0)
(fun part4 0)
(fun part3 0)
(fun part2 0)
(fun drop0 0)
(fun part1 0)
(fun truncateu_gamma23u_x 0)
(fun isu_disjoint 0)
(fun dih6u_xu_135u_s2 0)
(fun atu_posinfinity 0)
(fun simpleu_path 0)
(fun arc 0)
(fun dartu_ofu_fan 0)
(fun hypermapu_ofu_fan 0)
(fun hminus 0)
(fun continuousu_on 0)
(fun RTC 0)
(fun mardih5u_x 0)
(fun dih4u_xu_divu_sqrtdeltau_posbranch 0)
(fun bnu_subdivFace0 0)
(fun bnu_the 0)
(fun HD 0)
(fun bnu_subdivFace 0)
(fun closestu_point 0)
(fun invertible 0)
(fun surfR 0)
(fun ctan 0)
(fun bdodec 0)
(fun volu_rect 0)
(fun halfatn4 0)
(fun halfatn 0)
(fun edgeu_flat 0)
(fun INJ 0)
(fun SURJ 0)
(fun BIJ 0)
(fun wtcount6u_y 0)
(fun circumcenter 0)
(fun convexu_cone 0)
(fun atan2u_temp 0)
(fun gamma2u_x1u_divu_a 0)
(fun num2 0)
(fun rat2 0)
(fun num1 0)
(fun rat1 0)
(fun affineu_dependent 0)
(fun permutes 0)
(fun map1 0)
(fun intu_ball 0)
(fun setu_ofu_ccube 0)
(fun map0 0)
(fun connected 0)
(fun vectoru_matrixu_mul 0)
(fun conflictingu_dia 0)
(fun interioru_pos 0)
(fun INJN 0)
(fun naddu_mul 0)
(fun edgeu_set 0)
(fun lmdih6u_xu_divu_sqrtdeltau_posbranch 0)
(fun REVERSEu_TABLE 0)
(fun TABLE 0)
(fun mardih4u_x 0)
(fun truncateu_sqrt 0)
(fun trealu_le 0)
(fun mku_finiteu_product 0)
(fun reduced 0)
(fun ellipsoid 0)
(fun gamma3fu_vLRu_lfun 0)
(fun rpow 0)
(fun rect 0)
(fun bnu_congs 0)
(fun ldihu_x 0)
(fun ldih3u_x 0)
(fun au_spine5 0)
(fun dartu_std3u_small 0)
(fun node3u_y 0)
(fun loopu_path 0)
(fun nodeu_walkup 0)
(fun betau_bumpu_y 0)
(fun isu_contour 0)
(fun isu_inju_list 0)
(fun isu_inju_contour 0)
(fun lmdih5u_xu_divu_sqrtdeltau_posbranch 0)
(fun lmdih5u_xu_n 0)
(fun gamma3fu_135u_su_n 0)
(fun convexu_localu_fan 0)
(fun CONDITION2u_SY 0)
(fun l_u_c 0)
(fun rhou_x 0)
(fun mardih3u_x 0)
(fun rhazim 0)
(fun radius 0)
(fun apexu_flatu_hll 0)
(fun chi 0)
(fun rhou_ij 0)
(fun taumu_1flatu_x 0)
(fun ldihu_xu_135u_n 0)
(fun apexu_std3u_lhh 0)
(fun gamma3fu_vLu_xu_nlfun 0)
(fun isu_faceu_degenerate 0)
(fun bisu_le 0)
(fun gamma3fu_vLRu_n0 0)
(fun gamma3fu_vLRu_xu_n0 0)
(fun ldih3u_xu_135u_n 0)
(fun mirror 0)
(fun complement 0)
(fun node2u_y 0)
(fun ABSu_prod 0)
(fun mku_pair 0)
(fun rad2u_x 0)
(fun gamma3fu_vLRu_n 0)
(fun realu_measurable 0)
(fun voronoiu_set 0)
(fun bnu_heights 0)
(fun bnu_height 0)
(fun truncateu_volu_x 0)
(fun hu_dart 0)
(fun mardih2u_x 0)
(fun UNCURRY 0)
(fun dih5u_xu_135u_s2 0)
(fun ldih5u_xu_135u_s2 0)
(fun INFINITE 0)
(fun faceu_setu_ofu_fan 0)
(fun lmdih3u_xu_n 0)
(fun OUTR 0)
(fun INR 0)
(fun faceu_walkup 0)
(fun analyticu_on 0)
(fun vol4f 0)
(fun OUTL 0)
(fun INL 0)
(fun destu_bnu_graph 0)
(fun solidu_triangle 0)
(fun intu_coprime 0)
(fun numu_coprime 0)
(fun bnu_faceListAt 0)
(fun bnu_facesAt 0)
(fun TC 0)
(fun RSTC 0)
(fun apexu_flat 0)
(fun sqrtu_x6 0)
(fun sqrtu_x5 0)
(fun sqrtu_x4 0)
(fun sqrtu_x3 0)
(fun sqrtu_x2 0)
(fun sqrtu_x1 0)
(fun isu_interval 0)
(fun setu_ofu_faceu_meetingu_node 0)
(fun e3u_fan 0)
(fun e2u_fan 0)
(fun maxu_real3 0)
(fun lmdih2u_xu_divu_sqrtdeltau_posbranch 0)
(fun isu_nodeu_degenerate 0)
(fun bnu_concat 0)
(fun cu_union 0)
(fun bnu_maxGon 0)
(fun gamma3fu_xu_vLRu_lfun 0)
(fun ratform 0)
(fun norm2hh 0)
(fun mapu_tou_nuau_kg 0)
(fun nuau_kg 0)
(fun monomial 0)
(fun REPLICATE 0)
(fun mapu_tou_ball 0)
(fun gamma3fu_vLR 0)
(fun tameu_tableu_d 0)
(fun planaru_ind 0)
(fun gamma23u_full8u_x 0)
(fun hl 0)
(fun rogers 0)
(fun dihu_xu_126u_s2 0)
(fun ldihu_xu_126u_s2 0)
(fun realu_measure 0)
(fun isu_edgeu_degenerate 0)
(fun e1u_fan 0)
(fun glue 0)
(fun attach 0)
(fun index 0)
(fun geney 0)
(fun faceu_contour 0)
(fun genex 0)
(fun linear 0)
(fun orthogonalu_transformation 0)
(fun bu_tame 0)
(fun bnu_squanderVertex 0)
(fun infnorm 0)
(fun gamma23fu_126u_03u_n 0)
(fun poweru_list 0)
(fun realu_derivative 0)
(fun realu_differentiable 0)
(fun ballu_annulus 0)
(fun diagonal1 0)
(fun mainu_estimate 0)
(fun SETSPEC 0)
(fun gamma3fu_xu_vLu_lfun 0)
(fun negligibleu_funu_p 0)
(fun negligibleu_funu_0 0)
(fun STC 0)
(fun ASSOC 0)
(fun bnu_minimal 0)
(fun bnu_minimalFace 0)
(fun gamma3fu_135 0)
(fun diameter 0)
(fun isu_edgeu_split 0)
(fun dartY 0)
(fun dartX 0)
(fun apexu_std3u_hll 0)
(fun naddu_rinv 0)
(fun naddu_inv 0)
(fun orientation 0)
(fun ind0 0)
(fun mAdd 0)
(fun tpy 0)
(fun tpx 0)
(fun PRE 0)
(fun top0 0)
(fun setu_partu_components 0)
(fun vu_prime 0)
(fun eu_prime 0)
(fun localization 0)
(fun LET 0)
(fun bnu_Faces 0)
(fun ku_sy 0)
(fun NUMPAIR 0)
(fun tgt 0)
(fun bnu_planeGraphsP 0)
(fun bnu_PlaneGraphs 0)
(fun contractedu_dart 0)
(fun au_tame 0)
(fun bnu_fgraph 0)
(fun norm2hhu_x 0)
(fun polaru_lt 0)
(fun azimu_iu_fan 0)
(fun destu_cart 0)
(fun finiteu_index 0)
(fun au_ear0 0)
(fun earu_sy 0)
(fun atu_infinity 0)
(fun openu_segment 0)
(fun x1u_deltau_x 0)
(fun isolatedu_qua 0)
(fun isolatedu_pai 0)
(fun bu_spine5 0)
(fun kle 0)
(fun acsu_sqrtu_x2u_d4 0)
(fun regularu_sphericalu_polygonu_area 0)
(fun zero6 0)
(fun belong 0)
(fun COVER1u_SY 0)
(fun COVER4u_SY 0)
(fun COVER6u_SY 0)
(fun COVERu_SY 0)
(fun homotopicu_with 0)
(fun ALL 0)
(fun bnu_between 0)
(fun INJF 0)
(fun gamma23fu_redu_03 0)
(fun nodeu_contour 0)
(fun vectoru_derivative 0)
(fun gamma4f 0)
(fun vol3r 0)
(fun vol3f 0)
(fun ylist 0)
(fun xfan 0)
(fun yfan 0)
(fun numberu_ofu_orbits 0)
(fun vol3fu_sqrt2u_lmplus 0)
(fun vol3fu_xu_sqrt2u_lmplus 0)
(fun independent 0)
(fun supportu_node 0)
(fun radV 0)
(fun bnu_setFinal 0)
(fun isu_restricted 0)
(fun isu_normal 0)
(fun canon 0)
(fun head 0)
(fun isu_splitu_condition 0)
(fun uniformlyu_continuousu_on 0)
(fun realu_uniformlyu_continuousu_on 0)
(fun NUMSUM 0)
(fun dart4u_diag3u_b 0)
(fun deltau_x14 0)
(fun deltau_x13 0)
(fun deltau_x12 0)
(fun piu_rt18 0)
(fun HYP 0)
(fun apexu_flatu_l 0)
(fun apexu_flatu_h 0)
(fun bnu_makeFaceFinalFaceList 0)
(fun nodeu_exceptionalu_face 0)
(fun reflexive 0)
(fun symmetric 0)
(fun transitive 0)
(fun equivalenceu_relation 0)
(fun tameu_10 0)
(fun dartu_mllu_w 0)
(fun dihR 0)
(fun euleru_3flatu_x 0)
(fun dartu_mllu_n 0)
(fun machineu_eps 0)
(fun r1u_leu_fan 0)
(fun r2u_leu_fan 0)
(fun r2u_geu_fan 0)
(fun r3u_leu_fan 0)
(fun r3u_geu_fan 0)
(fun ru_fan 0)
(fun dih4u_xu_135u_s2 0)
(fun numu_combo1 0)
(fun apexu_std3u_smallu_hll 0)
(fun safesqrt 0)
(fun absolutelyu_integrableu_on 0)
(fun absolutelyu_realu_integrableu_on 0)
(fun back 0)
(fun homeomorphic 0)
(fun isu_nodeu_nondegenerate 0)
(fun canonu_darts 0)
(fun canonu_flag 0)
(fun flag 0)
(fun isu_marked 0)
(fun smallestu_angleu_set 0)
(fun smallestu_angleu_line 0)
(fun adjacentu_pai 0)
(fun isu_nodeu_merge 0)
(fun dependent 0)
(fun ortho0 0)
(fun d1u_fan 0)
(fun d20u_fan 0)
(fun du_fan 0)
(fun bnu_verticesu_set 0)
(fun dih2k 0)
(fun ldih5u_xu_135u_n 0)
(fun bnu_minimalVertex 0)
(fun sqp 0)
(fun faceu_path 0)
(fun gamma3fu_v0 0)
(fun gamma3fu_xu_v0 0)
(fun rhazim6 0)
(fun rhazim5 0)
(fun rhazim4 0)
(fun realu_continuousu_on 0)
(fun surfRy 0)
(fun surfRdyc2 0)
(fun GSPEC 0)
(fun tripleu_ofu_real3 0)
(fun upperu_dihu_x 0)
(fun bnu_graph 0)
(fun bnu_Seed 0)
(fun ldih6u_x 0)
(fun dnax 0)
(fun dnay 0)
(fun genesis 0)
(fun isu_faceu_merge 0)
(fun rotate345 0)
(fun surfy 0)
(fun surfu_x 0)
(fun ineq 0)
(fun halfatn4u_co 0)
(fun bnu_degree 0)
(fun INJA 0)
(fun topologicalu_componentu_yfan 0)
(fun fullyu_surrounded 0)
(fun conformingu_bijection 0)
(fun conformingu_halfu_space 0)
(fun conformingu_solidu_angle 0)
(fun conformingu_diagonal 0)
(fun conforming 0)
(fun bnu_tabulate 0)
(fun INJP 0)
(fun ZCONSTR 0)
(fun trealu_add 0)
(fun exposedu_faceu_of 0)
(fun dartu_std4 0)
(fun dartu_std3 0)
(fun LETu_END 0)
(fun atu_neginfinity 0)
(fun gamma3fu_vLR0 0)
(fun gamma3fu_xu_vLR0 0)
(fun rotate234 0)
(fun marku_term 0)
(fun tameu_hypermap 0)
(fun gchi6u_x 0)
(fun sigmau_sy 0)
(fun unionu_ofu_intu_cube 0)
(fun REPu_prod 0)
(fun obstructed 0)
(fun unobstructed 0)
(fun bernstein 0)
(fun TAGB 0)
(fun strictu_qua2 0)
(fun rconeu_lt 0)
(fun abcu_ofu_quadratic 0)
(fun muR 0)
(fun enclosed 0)
(fun gamma3fu_xu_divu_sqrtdelta 0)
(fun mapu_tou_voronoi 0)
(fun dartu_Hllu_w 0)
(fun dartu_Hllu_n 0)
(fun totalu_weight 0)
(fun rotate126 0)
(fun arclengthu_xu_123 0)
(fun arclengthu_xu_234 0)
(fun gchi5u_x 0)
(fun baseu_pointu_fan 0)
(fun facetu_of 0)
(fun tameu_3 0)
(fun tameu_4 0)
(fun tameu_5a 0)
(fun tameu_9a 0)
(fun tameu_11a 0)
(fun tameu_11b 0)
(fun tameu_12o 0)
(fun tameu_13a 0)
(fun arclengthu_y2 0)
(fun arclengthu_y1 0)
(fun poweru_maps 0)
(fun nu_fan 0)
(fun poweru_nu_fan 0)
(fun arclengthu_x2 0)
(fun arclengthu_x1 0)
(fun promote3u_tou_6 0)
(fun closedu_realu_segment 0)
(fun openu_realu_segment 0)
(fun vectoru_variation 0)
(fun realu_variation 0)
(fun hasu_derivative 0)
(fun eta2u_456 0)
(fun facetu_repu_a 0)
(fun polyu_sortu_fn 0)
(fun x1u_deltau_y 0)
(fun inju_orbit 0)
(fun samsara 0)
(fun arclengthu_xu_126 0)
(fun dartu_std3u_lw 0)
(fun ldih2u_xu_126u_n 0)
(fun taumu_3flatu_x 0)
(fun delta4u_y 0)
(fun setu_ofu_orbitsu_pointsu_fan 0)
(fun numberu_ofu_orbitsu_pointsu_fan 0)
(rule (i (i DIFF (i (i DIFF UNIV) (i interior s0))) (i interior (i (i DIFF UNIV) s0))) (i frontier s0))
(rule (i (i connectedu_component UNIV) x) UNIV)
(rule (i (i realu_div sol0) pi) const1)
(rule (i (i p_ (i (i t_ m) n)) (i (i t_ m) p)) (i (i t_ m) (i (i p_ n) p)))
(rule (i (i sub6 (i (i scalar6 (i (i add6 (i mku_456 (i rotate5 (i truncateu_solu_x c)))) (i (i add6 (i mku_456 (i rotate6 (i truncateu_solu_x c)))) (i mku_456 (i rotate4 (i truncateu_solu_x c)))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi)))) (i (i scalar6 (i (i add6 (i (i mul6 (i (i scalar6 (i uni (i (i c_ lfun) (i (i scalar6 proju_y4) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))))) m4)) (i mku_456 (i rotate4 (i truncateu_dihu_x c))))) (i (i add6 (i (i mul6 (i (i scalar6 (i uni (i (i c_ lfun) (i (i scalar6 proju_y5) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))))) m5)) (i mku_456 (i rotate5 (i truncateu_dihu_x c))))) (i (i mul6 (i (i scalar6 (i uni (i (i c_ lfun) (i (i scalar6 proju_y6) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))))) m6)) (i mku_456 (i rotate6 (i truncateu_dihu_x c))))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) pi)))) (i (i (i (i truncateu_vol3f c) m4) m5) m6))
(rule (i (i realu_integral (i closedu_realu_interval (i (i CONS (i (i c_ a) b)) NIL))) f) (i (i realu_integral (i openu_realu_interval (i (i c_ a) b))) f))
(rule (i (i s_b_ (i w_ (i (i a_ x) (i vec (i NUMERAL u_0))))) (i (i s_b_ (i w_ (i (i a_ y) (i vec (i NUMERAL u_0))))) (i (i a_ (i vectoru_norm (i (i vectoru_add x) y))) (i (i realu_add (i vectoru_norm x)) (i vectoru_norm y))))) (i (i a_ (i (i vectoru_angle x) y)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i sqrt (i (i realu_add (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i cos (i atn x)))
(rule (i ssqrt (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i intu_neg (i (i intu_min (i intu_neg x)) (i intu_neg y))) (i (i intu_max x) y))
(rule (i (i UNION s0) s0) s0)
(rule (i (i b_s_ (i FINITE s0)) (i (i a_u_c s0) UNIV)) (i COUNTABLE s0))
(rule (i (i realu_sub (i (i realu_mul (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) x)) (i (i realu_div (i sqrt x)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i realu_sub (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi))) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_div (i sqrt x)) sqrt8)))) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) pi))) (i (i realu_mul m) (i lfun (i (i realu_div (i sqrt x)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))))) (i (i truncateu_gamma2u_x m) x))
(rule (i (i IMAGE mku_finiteu_sum) (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i (i p_ (i dimindex UNIV)) (i dimindex UNIV)))) UNIV)
(rule (i (i sums (i (i o lift) f)) (i lift l)) (i (i realu_sums f) l))
(rule (i (i DIFF s0) EMPTY) s0)
(rule (i (i add6 (i truncateu_dihu_x c)) (i (i add6 (i rotate2 (i truncateu_dihu_x c))) (i (i sub6 (i rotate3 (i truncateu_dihu_x c))) (i constant6 pi)))) (i truncateu_solu_x c))
(rule (i (i realu_div (i realu_abs (i (i realu_add (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i (i realu_sub (i (i d_ c) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_sub (i (i d_ d) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0)))))))) (i (i realu_add (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i realu_sub (i (i d_ c) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_sub (i (i d_ d) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))))) (i (i realu_sub (i (i realu_sub (i (i realu_sub (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_mul (i (i realu_sub (i (i d_ c) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_sub (i (i d_ d) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i (i realu_sub (i (i d_ c) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_sub (i (i d_ d) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i realu_sub (i (i d_ c) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_sub (i (i d_ d) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0))))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_mul (i (i realu_sub (i (i d_ c) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_sub (i (i d_ d) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))))))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 (i BIT1 u_0)))))) (i measure (i (i hull convex) (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) (i (i INSERT d) EMPTY)))))))
(rule (i (i vectoru_add (i Cx (i Re z))) (i (i complexu_mul ii) (i Cx (i Im z)))) z)
(rule (i w_ (i (i realu_le y) x)) (i (i realu_lt x) y))
(rule (i (i b_s_ (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x)) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) y))) (i (i s_b_ (i (i realu_le x) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_le y) (i realu_ofu_num (i NUMERAL u_0))))) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_mul x) y)))
(rule (i (i INTER s0) s0) s0)
(rule (i (i realu_mul (i lfun (i (i realu_div (i sqrt x2)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dih2u_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i ldih2u_x x1) x2) x3) x4) x5) x6))
(rule (i Arg (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i p_ (i (i (i COND (i criticalu_edgeu_y y1)) (i NUMERAL (i BIT1 u_0))) (i NUMERAL u_0))) (i (i p_ (i (i (i COND (i criticalu_edgeu_y y2)) (i NUMERAL (i BIT1 u_0))) (i NUMERAL u_0))) (i (i (i COND (i criticalu_edgeu_y y3)) (i NUMERAL (i BIT1 u_0))) (i NUMERAL u_0)))) (i (i (i wtcount3u_y y1) y2) y3))
(rule (i (i realu_mul (i gchi (i sqrt x4))) (i (i (i (i (i (i dih4u_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i gchi4u_x x1) x2) x3) x4) x5) x6))
(rule (i cos (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi)) x)) (i cos x))
(rule (i (i m_ (i (i p_ n) (i NUMERAL (i BIT1 u_0)))) m) (i CARD (i (i o_o_ m) n)))
(rule (i UNIONS (i components u)) u)
(rule (i (i realu_lt (i (i dot x) x)) (i (i dot y) y)) (i (i realu_lt (i vectoru_norm x)) (i vectoru_norm y)))
(rule (i (i INTER (i INTERS f)) (i INTERS g)) (i INTERS (i (i UNION f) g)))
(rule (i (i realu_lt (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i (i arcV p) u) v)) (i (i realu_lt (i cos (i (i (i arcV p) u) v))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ x) (i (i inverse (i nodeu_map H)) y)) (i (i a_ y) (i (i nodeu_map H) x)))
(rule (i (i a_ (i realu_ofu_int (i intu_ofu_real r))) r) (i integer r))
(rule (i (i realu_le (i (i dot x) x)) (i (i dot y) y)) (i (i realu_le (i vectoru_norm x)) (i vectoru_norm y)))
(rule (i pathu_image (i reversepath g)) (i pathu_image g))
(rule (i (i (i COND (i w_ (i (i IN u) (i (i (i setu_ofu_edge v) V) E)))) u) (i (i (i (i (i sigmau_fan x) V) E) v) u)) (i (i (i (i (i extensionu_sigmau_fan x) V) E) v) u))
(rule (i (i matrixu_vectoru_mul A0) (i vec (i NUMERAL u_0))) (i vec (i NUMERAL u_0)))
(rule (i rotate3 rhazimu_x) rhazim3u_x)
(rule (i (i continuous (i (i o lift) f)) net0) (i (i realu_continuous f) net0))
(rule (i angle (i (i c_ v) (i (i c_ u) w))) (i (i (i arcV u) v) w))
(rule (i (i vectoru_add x) (i vec (i NUMERAL u_0))) x)
(rule (i (i realu_integral (i closedu_realu_interval (i (i CONS (i (i c_ a) a)) NIL))) f) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i a_ (i (i DELETE s0) x)) s0) (i w_ (i (i IN x) s0)))
(rule (i openu_interval (i (i c_ (i (i vectoru_sub x) (i lift e))) (i (i vectoru_add x) (i lift e)))) (i ball (i (i c_ x) e)))
(rule (i (i (i COND (i (i a_ n) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i NUMERAL u_0)) (i (i (i COND (i (i a_ n) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))))))))) (i (i (i COND (i (i a_ n) (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0))))))))))))))) (i (i (i COND (i (i a_ n) (i NUMERAL (i BIT0 (i BIT1 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0))))))))))))))) bnu_squanderTarget)))) (i bnu_squanderFace n))
(rule (i (i intu_lt (i (i intu_add x) (i intu_neg y))) z) (i (i intu_lt x) (i (i intu_add z) y)))
(rule (i mku_num (i INDu_SUC (i destu_num n))) (i SUC n))
(rule (i (i s_b_ (i (i realu_le (i (i au_sy s1) (i (i c_ p) q))) (i (i au_sy s0) (i (i c_ p) q)))) (i (i s_b_ (i (i realu_le (i (i au_sy s2) (i (i c_ p) q))) (i (i au_sy s0) (i (i c_ p) q)))) (i (i s_b_ (i (i realu_le (i (i au_sy s0) (i (i c_ p) q))) (i (i bu_sy s1) (i (i c_ p) q)))) (i (i realu_le (i (i au_sy s0) (i (i c_ p) q))) (i (i bu_sy s2) (i (i c_ p) q)))))) (i (i (i (i (i COVER5u_SY p) q) s0) s1) s2))
(rule (i (i (i (i dihV (i (i vectoru_add v) u)) (i (i vectoru_add v) w)) (i (i vectoru_add v) v1)) (i (i vectoru_add v) v2)) (i (i (i (i dihV u) w) v1) v2))
(rule (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i apexu_std3u_lllu_xww y1) y2) y3) y4) y5) y6))
(rule (i (i c_ (i (i bnu_tri g) v)) (i (i c_ (i (i bnu_quad g) v)) (i (i bnu_except g) v))) (i (i bnu_vertextype g) v))
(rule (i (i s_b_ (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) d)) (i (i s_b_ (i (i intu_lt (i (i intu_sub x) d)) y)) (i (i intu_lt y) (i (i intu_add x) d)))) (i (i intu_lt (i intu_abs (i (i intu_sub y) x))) d))
(rule (i (i HASu_SIZE (i (i INSERT a) (i (i INSERT b) EMPTY))) (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i w_ (i (i a_ a) b)))
(rule (i (i INSERT x) UNIV) UNIV)
(rule (i transp (i rowvector v)) (i columnvector v))
(rule (i (i s_b_ (i (i b_s_ (i w_ b)) t1)) (i (i b_s_ b) t2)) (i (i (i COND b) t1) t2))
(rule (i realu_abs (i twopow a)) (i twopow a))
(rule (i collinear (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT v) (i (i INSERT w) EMPTY)))) (i (i parallel v) w))
(rule (i (i (i (i conicu_cap v0) v0) r) a) EMPTY)
(rule (i (i (i (i (i (i (i deltau_sub1u_x x1s) x1) x2) x3) x4) x5) x6) (i (i (i (i (i (i deltau_x x1s) x2) x3) x4) x5) x6))
(rule (i (i mul6 (i uni (i (i c_ gchi) proju_y3))) dih3u_x) gchi3u_x)
(rule (i (i a_ (i (i dot x) x)) (i (i dot y) y)) (i (i a_ (i vectoru_norm x)) (i vectoru_norm y)))
(rule (i (i (i hasu_integral (i indicator s0)) (i vec (i NUMERAL u_0))) UNIV) (i negligible s0))
(rule (i sqrt (i (i realu_mul (i (i dot vc) vc)) (i (i realu_sub (i (i realu_mul (i (i dot va) va)) (i (i dot vc) vc))) (i (i realu_pow (i (i dot va) vc)) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i vectoru_norm (i (i vectoru_sub (i (i r_ (i (i dot vc) vc)) va)) (i (i r_ (i (i dot va) vc)) vc))))
(rule (i (i realu_sub (i (i realu_pow (i (i realu_add a) b)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul a) b))) (i (i realu_pow (i (i realu_sub a) b)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i rank (i (i matrixu_mul (i transp A0)) A0)) (i rank A0))
(rule (i rotate3 dihu_x) dih3u_x)
(rule (i sin (i (i realu_add x) (i (i realu_mul (i realu_ofu_num n)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi)))) (i sin x))
(rule (i (i DELETE EMPTY) x) EMPTY)
(rule (i (i UNION (i (i DIFF X) Y)) (i (i DIFF Y) X)) (i (i SDIFF X) Y))
(rule (i (i s_b_ (i (i DISJOINT s0) u)) (i (i DISJOINT t) u)) (i (i DISJOINT (i (i UNION s0) t)) u))
(rule (i (i realu_mul (i sqn (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6))) (i (i (i (i (i (i ldih6u_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i ldih6u_xu_n x1) x2) x3) x4) x5) x6))
(rule (i (i hull conic) EMPTY) EMPTY)
(rule (i (i (i (i (i (i (i (i (i deltau_126u_x x3s) x4s) x5s) x1) x2) x3) x4) x5) x6) (i (i (i (i (i (i deltau_x x1) x2) x3s) x4s) x5s) x6))
(rule (i pathstart (i (i o f) p)) (i f (i pathstart p)))
(rule (i (i a_ (i vec m)) (i vec n)) (i (i a_ m) n))
(rule (i (i openu_in euclidean) s0) (i open s0))
(rule (i (i realu_sub (i (i realu_mul (i cos x)) (i cos y))) (i (i realu_mul (i sin x)) (i sin y))) (i cos (i (i realu_add x) y)))
(rule (i UNIONS (i (i IMAGE (i DIFF X)) V)) (i (i DIFF X) (i INTERS V)))
(rule (i (i intu_sub (i (i intu_sub x) y)) x) (i intu_neg y))
(rule (i pathstart (i linepath (i (i c_ a) b))) a)
(rule (i (i intu_pow (i intu_neg (i intu_ofu_num x))) (i NUMERAL (i BIT0 n))) (i (i intu_pow (i intu_ofu_num x)) (i NUMERAL (i BIT0 n))))
(rule (i (i matrixu_mul (i transp B0)) (i transp A0)) (i transp (i (i matrixu_mul A0) B0)))
(rule (i cos (i realu_abs x)) (i cos x))
(rule (i (i sum (i (i o_o_ n) n)) f) (i f n))
(rule (i conv EMPTY) EMPTY)
(rule (i (i b_s_ (i (i a_ (i (i edgeu_map H) x)) x)) (i (i b_s_ (i (i a_ (i (i nodeu_map H) x)) x)) (i (i a_ (i (i faceu_map H) x)) x))) (i (i dartu_degenerate H) x))
(rule (i swap (i (i c_ a) a)) I)
(rule (i convex (i (i IMAGE lift) s0)) (i isu_realinterval s0))
(rule (i (i intu_sub (i intu_neg x)) (i intu_neg y)) (i (i intu_sub y) x))
(rule (i sqrt (i (i dot x) x)) (i vectoru_norm x))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_inv (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i rotate5 solu_euleru_xu_divu_sqrtdelta) solu_euler345u_xu_divu_sqrtdelta)
(rule (i (i (i upsu_x (i (i realu_mul x) x)) (i (i realu_mul y) y)) (i (i realu_mul z) z)) (i (i (i upsu_xu_pow2 x) y) z))
(rule (i interior (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i openu_interval (i (i c_ a) b)))
(rule (i (i a_ x) (i (i inverse (i faceu_map H)) y)) (i (i a_ y) (i (i faceu_map H) x)))
(rule (i (i IMAGE g) (i closedu_interval (i (i CONS (i (i c_ (i vec (i NUMERAL u_0))) (i vec (i NUMERAL (i BIT1 u_0))))) NIL))) (i pathu_image g))
(rule (i (i l_ (i (i p_ m) n)) (i (i p_ m) p)) (i (i l_ n) p))
(rule (i (i intu_sub x) (i (i intu_sub x) y)) y)
(rule (i closed (i (i IMAGE lift) s0)) (i realu_closed s0))
(rule (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0)))))))))))))))) hplus)
(rule (i (i vectoru_sub (i lift x)) (i lift y)) (i lift (i (i realu_sub x) y)))
(rule (i (i intu_le (i (i intu_add x) y)) (i (i intu_add x) z)) (i (i intu_le y) z))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_mul x) x)) (i w_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i intu_neg (i intu_neg x)) x)
(rule (i realu_ofu_num (i (i p_ (i (i m_ m) n)) (i (i m_ n) m))) (i realu_abs (i (i realu_sub (i realu_ofu_num n)) (i realu_ofu_num m))))
(rule (i (i intu_mul (i intu_neg x)) (i intu_neg y)) (i (i intu_mul x) y))
(rule (i (i realu_lt (i (i realu_add x) (i realu_neg y))) z) (i (i realu_lt x) (i (i realu_add z) y)))
(rule (i (i a_ (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i a_ (i realu_abs x)) (i realu_abs y)))
(rule (i (i mul6 proju_x2) (i uni (i (i c_ asn) (i (i mul6 (i (i add6 (i (i mul6 proju_x1) (i constant6 (i (i realu_div sqrt3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))))) (i (i mul6 (i uni (i (i c_ sqrt) (i (i sub6 unit6) (i uni (i (i c_ pow2) (i (i mul6 proju_x1) (i constant6 (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))))))))) (i constant6 (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))))) (i uni (i (i c_ sin) (i (i div6 (i constant6 pi)) proju_x2))))))) asnFnhk)
(rule (i (i s_b_ (i (i bnu_admissible1 w) g)) (i (i s_b_ (i (i bnu_admissible2 w) g)) (i (i bnu_admissible3 w) g))) (i (i bnu_admissible w) g))
(rule (i (i a_ (i (i intu_add x) y)) (i intu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i intu_neg y)))
(rule (i hypermap0 (i (i c_ (i (i quotientu_darts H) NF)) (i (i c_ (i (i emap H) NF)) (i (i c_ (i (i nmap H) NF)) (i (i fmap H) NF))))) (i (i quotient H) NF))
(rule (i (i realu_mul (i marchalu_quartic (i (i realu_div (i sqrt x1)) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) (i (i (i (i (i (i dihu_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i mardihu_x x1) x2) x3) x4) x5) x6))
(rule (i angle (i (i c_ vap) (i (i c_ (i vec (i NUMERAL u_0))) vbp))) (i (i (i arcV (i vec (i NUMERAL u_0))) vap) vbp))
(rule (i (i realu_sub (i (i dot x) z)) (i (i dot y) z)) (i (i dot (i (i vectoru_sub x) y)) z))
(rule (i (i realu_mul (i gchi (i sqrt x3))) (i (i (i (i (i (i dih3u_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i gchi3u_x x1) x2) x3) x4) x5) x6))
(rule (i (i p_p_ (i (i o f) p)) (i (i o f) q)) (i (i o f) (i (i p_p_ p) q)))
(rule (i FINITE (i (i INSERT x) s0)) (i FINITE s0))
(rule (i (i dot (i pad2d3d x)) (i pad2d3d y)) (i (i dot x) y))
(rule (i FINITE (i (i DELETE s0) x)) (i FINITE s0))
(rule (i (i subtopology top) UNIV) top)
(rule (i inverse I) I)
(rule (i (i (i COND (i (i realu_lt y) x)) x) y) (i (i maxu_real x) y))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i (i float a) b)) (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) a))
(rule (i (i r_r_ (i realu_ofu_num (i NUMERAL u_0))) A0) (i mat (i NUMERAL u_0)))
(rule (i (i realu_sub (i drop x)) (i drop y)) (i drop (i (i vectoru_sub x) y)))
(rule (i (i (i POWER bnu_rotate1) n) xs) (i (i bnu_rotate n) xs))
(rule (i (i vectoru_sub (i (i r_ a) x)) (i (i r_ a) y)) (i (i r_ a) (i (i vectoru_sub x) y)))
(rule (i (i realu_add (i (i (i (i (i (i gamma3fu_126u_su_n y1) y2) y3) y4) y5) y6)) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) pi))) (i (i realu_add (i (i (i (i (i (i (i yu_ofu_x lmdihu_xu_n) y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i (i yu_ofu_x lmdih2u_xu_n) y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i (i yu_ofu_x lmdih6u_xu_n) y1) y2) y3) y4) y5) y6))))) (i (i (i (i (i (i gamma3fu_126u_n y1) y2) y3) y4) y5) y6))
(rule (i FST abdodec) adodec)
(rule (i matrix (i (i frechetu_derivative f) net0)) (i (i jacobian f) net0))
(rule (i rotate2 ldihu_xu_divu_sqrtdeltau_posbranch) ldih2u_xu_divu_sqrtdeltau_posbranch)
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_sub (i (i float ai_) bi_)) (i (i float a) b))) (i (i realu_lt (i (i float a) b)) (i (i float ai_) bi_)))
(rule (i (i (i COND (i (i g_ (i CARD (i (i (i setu_ofu_edge v) V) E))) (i NUMERAL (i BIT1 u_0)))) (i (i (i (i azim x) v) w) (i (i (i (i (i sigmau_fan x) V) E) v) w))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi)) (i (i (i (i (i azimu_fan x) V) E) v) w))
(rule (i (i a_ (i openu_interval (i (i c_ a) b))) EMPTY) (i COUNTABLE (i openu_interval (i (i c_ a) b))))
(rule (i (i IN m) (i from n)) (i (i l_a_ n) m))
(rule (i (i complexu_mul (i vectoru_neg ii)) (i Cx (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i clog (i vectoru_neg ii)))
(rule (i (i s_b_ (i l (i (i c_ x) y))) (i w_ (i (i a_ x) y))) (i (i less l) (i (i c_ x) y)))
(rule (i (i convexu_on (i (i o f) drop)) (i (i IMAGE lift) s0)) (i (i realu_convexu_on f) s0))
(rule (i rotate2 rhazimu_x) rhazim2u_x)
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_sub (i (i float ai_) bi_)) (i (i float a) b))) (i (i realu_le (i (i float a) b)) (i (i float ai_) bi_)))
(rule (i (i shiftpath t) (i linepath (i (i c_ a) a))) (i linepath (i (i c_ a) a)))
(rule (i (i l_a_ (i NUMERAL (i BIT1 u_0))) n) (i (i l_ (i NUMERAL u_0)) n))
(rule (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul sqrt8) sqrt8))
(rule (i real3u_ofu_triple (i (i c_ a) (i (i c_ b) c))) (i (i (i mku_vec3 a) b) c))
(rule (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i apexu_std3u_lllu_wxx y1) y2) y3) y4) y5) y6))
(rule (i (i s_b_ (i (i SUBSET (i UNIONS E)) V)) (i (i s_b_ (i graph E)) (i (i s_b_ (i fan1 (i (i c_ x) (i (i c_ V) E)))) (i (i s_b_ (i fan2 (i (i c_ x) (i (i c_ V) E)))) (i (i s_b_ (i fan6 (i (i c_ x) (i (i c_ V) E)))) (i fan7 (i (i c_ x) (i (i c_ V) E)))))))) (i FAN (i (i c_ x) (i (i c_ V) E))))
(rule (i coplanar (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT (i vectoru_neg x)) s0))) (i coplanar (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT x) s0))))
(rule (i (i (i arclength (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) arcu_hhn)
(rule (i (i b_s_ (i (i R a0) a1)) (i (i a_ a1) a0)) (i (i (i RC R) a0) a1))
(rule (i (i vectoru_add (i fstcart x)) (i fstcart y)) (i fstcart (i (i vectoru_add x) y)))
(rule (i (i realu_sub x) (i floor x)) (i frac x))
(rule (i (i (i (i dihV (i vec (i NUMERAL u_0))) (i vectoru_neg v1)) (i vectoru_neg v2)) (i vectoru_neg v3)) (i (i (i (i dihV (i vec (i NUMERAL u_0))) v1) v2) v3))
(rule (i (i IN x) A0) (i A0 x))
(rule (i (i hull affine) (i (i INSERT a) EMPTY)) (i (i INSERT a) EMPTY))
(rule (i collinear (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT (i (i vectoru_sub x) y)) (i (i INSERT (i (i vectoru_sub z) y)) EMPTY)))) (i collinear (i (i INSERT x) (i (i INSERT y) (i (i INSERT z) EMPTY)))))
(rule (i vectoru_neg (i Cx (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i casn (i vectoru_neg (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))))
(rule (i (i realu_mul (i sqn (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6))) (i (i (i (i (i (i ldih5u_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i ldih5u_xu_n x1) x2) x3) x4) x5) x6))
(rule (i (i mul6 (i uni (i (i c_ gchi) proju_y2))) dih2u_x) gchi2u_x)
(rule (i affsign sgnu_le) affu_le)
(rule (i (i measurableu_on (i (i o lift) (i (i o f) drop))) (i (i IMAGE lift) s0)) (i (i realu_measurableu_on f) s0))
(rule (i realu_abs (i drop x)) (i vectoru_norm x))
(rule (i (i a_ (i (i p_ (i numberu_ofu_nodes H)) (i (i p_ (i numberu_ofu_edges H)) (i numberu_ofu_faces H)))) (i (i p_ (i CARD (i dart H))) (i (i t_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i numberu_ofu_components H)))) (i planaru_hypermap H))
(rule (i (i b_s_ (i (i MEM x) l1)) (i (i MEM x) l2)) (i (i MEM x) (i (i APPEND l1) l2)))
(rule (i (i continuous (i (i o Cx) (i (i o f) Re))) (i (i within (i at (i Cx x))) (i (i INTER real0) (i (i IMAGE Cx) s0)))) (i (i realu_continuous f) (i (i within (i atreal x)) s0)))
(rule (i (i realu_sub (i (i (i (i (i (i volu_y y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i realu_mul (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) mm1)) (i (i realu_add (i (i realu_mul (i gcy y1)) (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6))) (i (i realu_add (i (i realu_mul (i gcy y2)) (i (i (i (i (i (i dih2u_y y1) y2) y3) y4) y5) y6))) (i (i realu_add (i (i realu_mul (i gcy y3)) (i (i (i (i (i (i dih3u_y y1) y2) y3) y4) y5) y6))) (i (i realu_add (i (i realu_mul (i gcy y4)) (i (i (i (i (i (i dih4u_y y1) y2) y3) y4) y5) y6))) (i (i realu_add (i (i realu_mul (i gcy y5)) (i (i (i (i (i (i dih5u_y y1) y2) y3) y4) y5) y6))) (i (i realu_mul (i gcy y6)) (i (i (i (i (i (i dih6u_y y1) y2) y3) y4) y5) y6))))))))) (i (i (i (i (i (i (i gamma4fgcy y1) y2) y3) y4) y5) y6) lmfun))
(rule (i w_ (i (i b_s_ (i (i realu_lt a) b)) (i (i realu_lt b) a))) (i (i a_ a) b))
(rule (i (i a_ (i (i MOD n) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0))) (i ODD n))
(rule (i rotate2 dihu_x) dih2u_x)
(rule (i (i a_ (i (i realu_sub (i (i float a) b)) (i (i float ai_) bi_))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ (i (i float a) b)) (i (i float ai_) bi_)))
(rule (i (i (i (i (i (i gamma3fu_vu_lfun (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i gamma3fu_xu_vu_lfun x1) x2) x3) x4) x5) x6))
(rule (i (i (i (i (i (i (i taumu_sub1u_x x1s) x1) x2) x3) x4) x5) x6) (i (i (i (i (i (i taumu_x x1s) x2) x3) x4) x5) x6))
(rule (i (i intu_mul (i (i intu_pow x) n)) (i (i intu_pow y) n)) (i (i intu_pow (i (i intu_mul x) y)) n))
(rule (i (i realu_add (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i dih2u_y y1) y2) y3) y4) y5) y6)) (i (i realu_sub (i (i (i (i (i (i dih3u_y y1) y2) y3) y4) y5) y6)) pi))) (i (i (i (i (i (i solu_y y1) y2) y3) y4) y5) y6))
(rule (i (i vectoru_add (i (i complexu_mul (i ccos w)) (i ccos z))) (i (i complexu_mul (i csin w)) (i csin z))) (i ccos (i (i vectoru_sub w) z)))
(rule (i (i a_ (i realu_inv x)) (i realu_inv y)) (i (i a_ x) y))
(rule (i (i a_ (i (i cpow w) z)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ w) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i intu_ofu_real (i (i realu_pow (i realu_ofu_int x)) n)) (i (i intu_pow x) n))
(rule (i (i realu_le (i (i (i (i azim v0) v1) w1) x)) (i (i (i (i azim v0) v1) w1) w2)) (i (i IN x) (i (i (i (i wedgeu_ge v0) v1) w1) w2)))
(rule (i FST (i SND (i SND (i tupleu_stableu_sy s0)))) (i Iu_SY s0))
(rule (i (i realu_add (i (i d_ x) i0)) (i (i d_ y) i0)) (i (i d_ (i (i vectoru_add x) y)) i0))
(rule (i (i pastecart (i (i r_ c) x1)) (i (i r_ c) y1)) (i (i r_ c) (i (i pastecart x1) y1)))
(rule (i (i FCONS (i f (i NUMERAL u_0))) (i (i o f) SUC)) f)
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) (i (i realu_mul (i (i realu_div (i (i realu_add a) (i (i realu_add b) c))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i realu_sub (i (i realu_div (i (i realu_add a) (i (i realu_add b) c))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) a)) (i (i realu_mul (i (i realu_sub (i (i realu_div (i (i realu_add a) (i (i realu_add b) c))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) b)) (i (i realu_sub (i (i realu_div (i (i realu_add a) (i (i realu_add b) c))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) c))))) (i (i (i upsu_x (i (i realu_mul a) a)) (i (i realu_mul b) b)) (i (i realu_mul c) c)))
(rule (i NUMERAL (i BIT1 u_0)) (i neutral t_))
(rule (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i asn (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i asn (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i realu_mul (i sqn (i (i (i (i (i (i deltau_y y1) y2) y3) y4) y5) y6))) (i (i realu_sub (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi))) (i (i realu_add (i (i (i (i (i (i (i yu_ofu_x solu_euleru_xu_divu_sqrtdelta) y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i (i yu_ofu_x solu_euler246u_xu_divu_sqrtdelta) y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i (i yu_ofu_x solu_euler156u_xu_divu_sqrtdelta) y1) y2) y3) y4) y5) y6)))))) (i (i (i (i (i (i gamma3fu_126u_su_n y1) y2) y3) y4) y5) y6))
(rule (i (i (i COND (i (i a_ i0) (i NUMERAL u_0))) (i (i mcell0 V) ul)) (i (i (i COND (i (i a_ i0) (i NUMERAL (i BIT1 u_0)))) (i (i mcell1 V) ul)) (i (i (i COND (i (i a_ i0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i mcell2 V) ul)) (i (i (i COND (i (i a_ i0) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i mcell3 V) ul)) (i (i mcell4 V) ul))))) (i (i (i mcell i0) V) ul))
(rule (i (i vectoru_sub x) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) x)
(rule (i (i (i COND (i (i l_a_ m) n)) m) n) (i (i MIN m) n))
(rule (i interior UNIV) UNIV)
(rule (i (i intu_mul (i intu_sgn x)) (i intu_sgn y)) (i intu_sgn (i (i intu_mul x) y)))
(rule (i (i (i (i (i (i muyu_v v1) v2) v3) v4) v5) (i (i realu_pow (i (i d3 v4) v5)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i (i (i (i (i solu_y (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) sol0)
(rule (i cnj (i Cx x)) (i Cx x))
(rule (i (i realu_add (i (i realu_sub (i (i realu_sub (i (i realu_mul (i realu_neg x1)) x1)) (i (i realu_mul x2) x2))) (i (i realu_mul x6) x6))) (i (i realu_add (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul x1) x6))) (i (i realu_add (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul x1) x2))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul x2) x6))))) (i (i (i upsu_x x1) x2) x6))
(rule (i (i g_a_u_c UNIV) t) (i COUNTABLE t))
(rule (i (i r_ (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) x) x)
(rule (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) x) (i realu_inv x))
(rule (i (i b_s_ (i (i limitu_pointu_of x) s0)) (i (i limitu_pointu_of x) t)) (i (i limitu_pointu_of x) (i (i UNION s0) t)))
(rule (i (i (i COND (i (i realu_lt x) y)) x) y) (i (i minu_real x) y))
(rule (i (i realu_add (i (i (i (i (i (i (i gamma3u_x m1) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) x1) x3) x5)) (i (i realu_mul (i (i realu_sub (i (i (i (i (i (i dihu_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i dihu_x x1) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x3) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x5) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))))))) (i (i (i (i (i (i (i gamma23u_keep135u_x m1) x1) x2) x3) x4) x5) x6))
(rule (i (i (i (i (i (i eulerAu_x x1) x2) x3) x4) (i (i (i (i (i (i edgeu_flat2u_x x13) x1) x3) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i edgeu_flat2u_x x12) x1) x2) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i euleru_2flatu_x x1) x2) x3) x4) x13) x12))
(rule (i (i realu_mul (i (i realu_add x) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) y))) (i (i realu_sub x) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) y))) (i (i realu_sub (i (i realu_mul x) x)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul y) y))))
(rule (i (i s_b_ (i FINITE s0)) (i FINITE t)) (i FINITE (i (i p_u_c s0) t)))
(rule (i (i d_ x) (i NUMERAL (i BIT1 u_0))) (i drop x))
(rule (i (i realu_mul (i realu_abs x)) (i realu_abs y)) (i realu_abs (i (i realu_mul x) y)))
(rule (i (i realu_pow (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) n) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i realu_le (i du_sy s0)) (i (i realu_add (i du_sy s1)) (i du_sy s2))) (i (i (i COVER2u_SY s0) s1) s2))
(rule (i intu_abs (i intu_ofu_num n)) (i intu_ofu_num n))
(rule (i interior (i interior s0)) (i interior s0))
(rule (i (i realu_add (i (i realu_pow (i sin x)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i cos x)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i mku_hreal (i naddu_eq (i naddu_ofu_num m))) (i hrealu_ofu_num m))
(rule (i cball (i (i c_ x) (i realu_ofu_num (i NUMERAL u_0)))) (i (i INSERT x) EMPTY))
(rule (i (i a_ (i exp x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_mul (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 (i BIT1 u_0)))))) sol0)) pi)) (i (i realu_div (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 (i BIT1 u_0)))))) tau0))) mm2)
(rule (i (i a_ (i (i realu_add x) z)) (i (i realu_add y) z)) (i (i a_ x) y))
(rule (i (i a_ (i (i dot (i normalize v)) u)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ (i (i dot v) u)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_mul sol0) (i (i realu_div (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) tau0)) mm1)
(rule (i acs (i (i realu_div (i (i dot (i (i vectoru_sub v) u)) (i (i vectoru_sub w) u))) (i (i realu_mul (i vectoru_norm (i (i vectoru_sub v) u))) (i vectoru_norm (i (i vectoru_sub w) u))))) (i (i (i arcV u) v) w))
(rule (i (i orbitu_map (i faceu_map H)) x) (i (i face H) x))
(rule (i (i s_b_ (i (i a_ (i (i dot x) x)) (i (i dot x) y))) (i (i a_ (i (i dot y) y)) (i (i dot x) x))) (i (i a_ x) y))
(rule (i (i realu_mul (i gchi (i sqrt x2))) (i (i (i (i (i (i dih2u_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i gchi2u_x x1) x2) x3) x4) x5) x6))
(rule (i (i realu_add (i (i realu_mul (i (i (i (i (i (i (i (i (i (i truncateu_gamma3fu_x (i realu_ofu_num (i NUMERAL u_0))) m1) m2) m6) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) x1) x2) x6)) iw1)) (i (i realu_add (i (i realu_mul (i (i (i (i (i (i (i (i (i (i truncateu_gamma3fu_x (i realu_ofu_num (i NUMERAL u_0))) m1) m3) m5) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) x1) x3) x5)) iw2)) (i (i realu_mul (i (i realu_sub az4) (i (i realu_add (i (i (i (i (i (i dihu_x x1) x2) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x6)) (i (i (i (i (i (i dihu_x x1) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x3) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x5) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i truncateu_gamma2u_x m1) x1)))) (i (i (i (i (i (i (i (i (i (i (i (i (i truncateu_gamma23au_x iw1) iw2) m1) m2) m3) m5) m6) x1) x2) x3) az4) x5) x6))
(rule (i ball (i (i c_ x) r)) (i (i hinhcau x) r))
(rule (i rotate3 eta2u_126) eta2u_135)
(rule (i (i sub6 (i mku_456 volu_x)) (i vol3fu_456 m4)) (i gamma3u_x m4))
(rule (i sin (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i vectoru_add (i (i vectoru_sub x) y)) y) x)
(rule (i (i l_a_ (i SUC m)) (i SUC n)) (i (i l_a_ m) n))
(rule (i (i s_b_ (i w_ (i (i circular V) E))) (i (i s_b_ (i (i SUBSET (i (i INSERT v) (i (i INSERT w) EMPTY))) V)) (i (i s_b_ (i w_ (i (i a_ v) w))) (i collinear (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT v) (i (i INSERT w) EMPTY))))))) (i (i (i lunar (i (i c_ v) w)) V) E))
(rule (i (i cross x) (i vec (i NUMERAL u_0))) (i vec (i NUMERAL u_0)))
(rule (i (i (i omegau_listu_n V) (i (i CONS u0) (i (i CONS u1) (i (i CONS u2) NIL)))) (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i (i omegau_list V) (i (i CONS u0) (i (i CONS u1) (i (i CONS u2) NIL)))))
(rule (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i atn (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i csin z)) (i ccos z))) (i csin (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) z)))
(rule (i (i (i COND (i (i l_a_ m) n)) n) m) (i (i MAX m) n))
(rule (i (i a_ (i cnj z)) z) (i real0 z))
(rule (i (i vectoru_sub (i (i complexu_mul x) z)) (i (i complexu_mul y) z)) (i (i complexu_mul (i (i vectoru_sub x) y)) z))
(rule (i (i intu_lt (i intu_neg x)) (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i orbitu_map (i nodeu_map H)) x) (i (i node H) x))
(rule (i (i realu_mul (i twopow (i intu_ofu_num m))) (i twopow (i intu_neg (i intu_ofu_num n)))) (i twopow (i (i intu_sub (i intu_ofu_num m)) (i intu_ofu_num n))))
(rule (i (i realu_div (i realu_sgn x)) (i realu_sgn y)) (i realu_sgn (i (i realu_div x) y)))
(rule (i (i APPEND (i (i MAP f) l1)) (i (i MAP f) l2)) (i (i MAP f) (i (i APPEND l1) l2)))
(rule (i (i vectoru_sub (i matvec x)) (i matvec y)) (i matvec (i (i matrixu_sub x) y)))
(rule (i (i vectoru_sub (i (i rotate2d t) w)) (i (i rotate2d t) z)) (i (i rotate2d t) (i (i vectoru_sub w) z)))
(rule (i (i s_b_ (i w_ (i (i a_ A0) B0))) (i (i s_b_ (i w_ (i (i a_ C) B0))) (i (i a_ (i distance (i (i c_ A0) C))) (i (i realu_add (i distance (i (i c_ A0) B0))) (i distance (i (i c_ B0) C)))))) (i (i a_ (i angle (i (i c_ A0) (i (i c_ B0) C)))) pi))
(rule (i (i s_b_ (i (i a_ c1) c2)) (i (i s_b_ (i (i a_ i1) i2)) (i (i a_ r1) r2))) (i (i a_ (i (i (i CONSTR c1) i1) r1)) (i (i (i CONSTR c2) i2) r2)))
(rule (i (i s_b_ (i real0 z)) (i (i realu_lt (i Re z)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ (i Arg z)) pi))
(rule (i dim (i columns A0)) (i rank A0))
(rule (i (i realu_add (i (i (i (i (i (i taum y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i taum y7) y2) y3) y4) y8) y9)) (i (i (i (i (i (i (i (i (i tauq y1) y2) y3) y4) y5) y6) y7) y8) y9))
(rule (i (i realu_add (i (i realu_div (i (i (i (i (i (i gamma3fu_126u_n y1) y2) sqrt2) sqrt2) sqrt2) y6)) (i realu_ofu_num w1))) (i (i realu_add (i (i realu_div (i (i (i (i (i (i gamma3fu_135u_n y1) sqrt2) y3) sqrt2) y5) sqrt2)) (i realu_ofu_num w2))) (i (i realu_mul (i (i realu_sub (i (i realu_sub (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i upperu_dihu_y y1) y2) r) r) r) y6))) (i (i (i (i (i (i upperu_dihu_y y1) y3) r) r) r) y5))) (i (i realu_div (i (i realu_sub (i (i vol2r y1) r)) (i (i (i vol2f y1) r) f))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))))) (i (i (i (i (i (i (i (i (i (i gamma23fu_n y1) y2) y3) y4) y5) y6) w1) w2) r) f))
(rule (i (i realu_sub (i (i realu_mul (i (i (i (i (i (i solu_y y1) y2) y3) y4) y5) y6)) (i (i realu_add (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) const1))) (i (i realu_mul const1) (i (i realu_add (i (i (i (i (i (i lnazim y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i lnazim y2) y3) y1) y5) y6) y4)) (i (i (i (i (i (i lnazim y3) y1) y2) y6) y4) y5))))) (i (i (i (i (i (i taum y1) y2) y3) y4) y5) y6))
(rule (i (i s_b_ (i (i l_a_ m) n)) (i (i l_a_ n) m)) (i (i a_ m) n))
(rule (i (i realu_mul (i realu_inv (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))))) (i (i realu_sub (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))))) (i (i realu_mul (i (i realu_sub h) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_add (i (i realu_mul (i (i realu_add (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))))))))))))))))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT1 u_0))))))))))))))))))))))) (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_pow h) (i NUMERAL u_0)))) (i (i realu_add (i (i realu_mul (i (i realu_sub (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 u_0))))))))))))))))))))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0)))))))))))))))))))))))) (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_pow h) (i NUMERAL (i BIT1 u_0))))) (i (i realu_add (i (i realu_mul (i (i realu_add (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0)))))))))))))))))))))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))))))))))))))))))) (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_pow h) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))))))))))))))))))) (i (i realu_pow h) (i NUMERAL (i BIT1 (i BIT1 u_0)))))))))) (i (i realu_sub (i marchalu_quartic h)) (i lfun h)))
(rule (i (i vectoru_sub (i (i complexu_pow (i ccos z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i complexu_pow (i csin z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i ccos (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) z)))
(rule (i (i hasu_measure s0) (i measure s0)) (i measurable s0))
(rule (i Cx (i realu_ofu_num (i NUMERAL u_0))) (i vec (i NUMERAL u_0)))
(rule (i (i s_b_ (i packingu_trg s0)) (i s0 v)) (i (i centeru_pac s0) v))
(rule (i (i m_m_m_g_ (i (i o drop) s0)) (i drop l)) (i (i m_m_g_ s0) l))
(rule (i (i b_s_ (i (i a_ s0) EMPTY)) (i (i a_ s0) UNIV)) (i (i a_ (i frontier s0)) EMPTY))
(rule (i (i (i (i (i (i fx (i (i realu_mul y1) y1)) (i (i realu_mul y2) y2)) (i (i realu_mul y3) y3)) (i (i realu_mul y4) y4)) (i (i realu_mul y5) y5)) (i (i realu_mul y6) y6)) (i (i (i (i (i (i (i yu_ofu_x fx) y1) y2) y3) y4) y5) y6))
(rule (i (i vectoru_sub (i (i vectoru_add x) y)) x) y)
(rule (i (i mul6 (i uni (i (i c_ gchi) proju_y1))) dihu_x) gchi1u_x)
(rule (i (i EXP (i NUMERAL (i BIT1 u_0))) n) (i NUMERAL (i BIT1 u_0)))
(rule (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) pi)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))) sol0)) tau0)
(rule (i ball (i (i c_ z) r)) (i (i normball z) r))
(rule (i realu_ofu_num (i NUMERAL u_0)) (i sin pi))
(rule (i (i between (i (i vectoru_add a) x)) (i (i c_ (i (i vectoru_add a) y)) (i (i vectoru_add a) z))) (i (i between x) (i (i c_ y) z)))
(rule (i realu_abs (i realu_abs x)) (i realu_abs x))
(rule (i (i (i POWER (i inverse (i nodeu_map H))) (i CARD (i (i node H) x))) x) x)
(rule (i loop0 (i (i c_ (i (i face H) x)) (i (i res (i faceu_map H)) (i (i face H) x)))) (i (i faceu_loop H) x))
(rule (i (i intu_le (i intu_neg x)) (i intu_neg y)) (i (i intu_le y) x))
(rule (i vectoru_neg (i vectoru_neg x)) x)
(rule (i (i a_ (i (i intu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i intu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i a_ (i intu_abs x)) (i intu_abs y)))
(rule (i (i res (i fu_fanu_pair (i (i c_ V) E))) (i dart1u_ofu_fan (i (i c_ V) E))) (i fu_fanu_pairu_ext (i (i c_ V) E)))
(rule (i (i (i POWER (i nodeu_map H)) i0) x) (i (i (i nodeu_path H) x) i0))
(rule (i (i DELETE s0) (i CHOICE s0)) (i REST s0))
(rule (i (i complexu_div (i cexp w)) (i cexp z)) (i cexp (i (i vectoru_sub w) z)))
(rule (i (i hull P) (i (i hull P) s0)) (i (i hull P) s0))
(rule (i (i s_b_ (i (i a_ (i (i realu_add (i (i realu_pow (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i b_s_ (i (i s_b_ (i (i a_ (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i a_ (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_neg (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0))))))) (i (i s_b_ (i (i a_ (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i realu_neg (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i a_ (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0))))))) (i orthogonalu_matrix A0))
(rule (i (i (i POWER (i inverse (i faceu_map H))) (i CARD (i (i face H) x))) x) x)
(rule (i complex (i (i c_ (i Re z)) (i Im z))) z)
(rule (i (i realu_mul (i vectoru_norm x)) (i (i realu_mul (i vectoru_norm y)) (i sin (i (i vectoru_angle x) y)))) (i vectoru_norm (i (i cross x) y)))
(rule (i (i (i connectedu_component s0) x) x) (i (i IN x) s0))
(rule (i (i (i (i (i (i (i constant6 c) x1) x2) x3) x4) x5) x6) c)
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Im z)) (i (i realu_le (i Arg z)) pi))
(rule (i (i realu_mul (i ly y1)) (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i lnazim y1) y2) y3) y4) y5) y6))
(rule (i (i hrealu_add (i (i hrealu_mul x) y)) (i (i hrealu_mul x) z)) (i (i hrealu_mul x) (i (i hrealu_add y) z)))
(rule (i trivialu_limit (i (i within (i at a)) s0)) (i w_ (i (i limitu_pointu_of a) s0)))
(rule (i cos (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))))))))) cos797)
(rule (i (i realu_div (i (i realu_sub (i sin (i (i realu_add x) y))) (i sin (i (i realu_sub x) y)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i cos x)) (i sin y)))
(rule (i sqrt (i (i realu_add (i (i realu_pow (i Re z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i Im z)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i vectoru_norm z))
(rule (i (i (i (i (i (i (i yu_ofu_x volu_x) y1) y2) y3) y4) y5) y6) (i (i (i (i (i (i volu_y y1) y2) y3) y4) y5) y6))
(rule (i span (i span s0)) (i span s0))
(rule (i w_ (i (i a_ (i (i bnu_except g) v)) (i NUMERAL u_0))) (i (i bnu_exceptionalVertex g) v))
(rule (i (i s_b_ (i integer a)) (i (i s_b_ (i (i realu_le a) x)) (i (i realu_lt x) (i (i realu_add a) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))))) (i (i a_ (i floor x)) a))
(rule (i (i m_ (i (i t_ m) p)) (i (i t_ n) p)) (i (i t_ (i (i m_ m) n)) p))
(rule (i (i dot v) (i normalize v)) (i vectoru_norm v))
(rule (i (i a_ (i csqrt z)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ z) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_add x) x)) (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i summable s0) (i (i o lift) f)) (i (i realu_summable s0) f))
(rule (i outside EMPTY) UNIV)
(rule (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i sin (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 (i BIT1 u_0))))))))
(rule (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i cos (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0)))))))
(rule (i (i (i (i (i (i gamma3fu_vLRu_nlfun (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i gamma3fu_vLRu_xu_nlfun x1) x2) x3) x4) x5) x6))
(rule (i (i IN (i (i INSERT (i FST x)) (i (i INSERT (i SND x)) EMPTY))) E) (i (i IN x) (i ordu_pairs E)))
(rule (i Re (i cexp (i Cx x))) (i exp x))
(rule (i (i s_b_ (i (i a_ x) (i Cx (i realu_ofu_num (i NUMERAL u_0))))) (i w_ (i (i a_ n) (i NUMERAL u_0)))) (i (i a_ (i (i complexu_pow x) n)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i a_ (i (i MAP f) l)) NIL) (i (i a_ l) NIL))
(rule (i (i a_ s0) (i (i INSERT (i closedu_interval (i (i CONS (i (i c_ a) a)) NIL))) EMPTY)) (i (i divisionu_of s0) (i closedu_interval (i (i CONS (i (i c_ a) a)) NIL))))
(rule (i (i realu_add (i (i realu_mul x1) (i (i realu_mul x4) (i (i realu_add (i realu_neg x1)) (i (i realu_add x2) (i (i realu_add (i (i realu_sub x3) x4)) (i (i realu_add x5) x6))))))) (i (i realu_add (i (i realu_mul x2) (i (i realu_mul x5) (i (i realu_add (i (i realu_sub x1) x2)) (i (i realu_add x3) (i (i realu_add (i (i realu_sub x4) x5)) x6)))))) (i (i realu_sub (i (i realu_sub (i (i realu_sub (i (i realu_sub (i (i realu_mul x3) (i (i realu_mul x6) (i (i realu_add x1) (i (i realu_add (i (i realu_sub x2) x3)) (i (i realu_add x4) (i (i realu_sub x5) x6))))))) (i (i realu_mul x2) (i (i realu_mul x3) x4)))) (i (i realu_mul x1) (i (i realu_mul x3) x5)))) (i (i realu_mul x1) (i (i realu_mul x2) x6)))) (i (i realu_mul x4) (i (i realu_mul x5) x6))))) (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6))
(rule (i (i (i COND (i (i IN (i (i c_ v) u)) (i (i dartsu_ofu_hyp E) V))) (i (i c_ v) (i (i (i (i azimu_cycle (i (i EE v) E)) x) v) u))) (i (i c_ v) u)) (i (i nnu_ofu_hyp (i (i c_ x) (i (i c_ V) E))) (i (i c_ v) u)))
(rule (i acs (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))))
(rule (i (i (i (i dihV (i (i EL (i NUMERAL u_0)) ul)) (i (i EL (i NUMERAL (i BIT1 u_0))) ul)) (i (i EL (i NUMERAL (i BIT0 (i BIT1 u_0)))) ul)) (i (i EL (i NUMERAL (i BIT1 (i BIT1 u_0)))) ul)) (i dihu4 ul))
(rule (i (i (i (i dihV (i (i EL (i NUMERAL u_0)) ul)) (i (i EL (i NUMERAL (i BIT1 u_0))) ul)) (i (i EL (i NUMERAL (i BIT0 (i BIT1 u_0)))) ul)) (i (i mxi V) ul)) (i (i dihu3 V) ul))
(rule (i (i a_ (i distance (i (i c_ a) b))) (i (i realu_add (i distance (i (i c_ a) x))) (i distance (i (i c_ x) b)))) (i (i between x) (i (i c_ a) b)))
(rule (i (i (i (i dihV (i (i EL (i NUMERAL u_0)) ul)) (i (i EL (i NUMERAL (i BIT1 u_0))) ul)) (i (i mxi V) ul)) (i (i (i omegau_listu_n V) ul) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i dihu2 V) ul))
(rule (i (i vectoru_add (i (i r_ a) x)) (i (i r_ b) x)) (i (i r_ (i (i realu_add a) b)) x))
(rule (i (i s_b_ (i (i SUBSET s0) u)) (i (i SUBSET t) u)) (i (i SUBSET (i (i UNION s0) t)) u))
(rule (i SND (i SND (i SND (i SND (i SND (i SND (i tupleu_stableu_sy s0))))))) (i fu_sy s0))
(rule (i (i realu_mul (i (i prod0 (i (i c_ (i NUMERAL u_0)) n)) f)) (i (i prod0 (i (i c_ n) p)) f)) (i (i prod0 (i (i c_ (i NUMERAL u_0)) (i (i p_ n) p))) f))
(rule (i (i intu_le (i intu_neg x)) (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i vectoru_add w) (i vectoru_neg z)) (i (i vectoru_sub w) z))
(rule (i (i a_ (i edgeu_map H)) (i (i o (i nodeu_map H)) (i faceu_map H))) (i plainu_hypermap H))
(rule (i (i (i (i (i (i (i (i (i taumu_sub246u_x x2s) x4s) x6s) x1) x2) x3) x4) x5) x6) (i (i (i (i (i (i taumu_x x1) x2s) x3) x4s) x5) x6s))
(rule (i (i inverse (i (i (i (i sigmau_fan x) V) E) v)) w) (i (i (i (i (i inverseu_sigmau_fanu_alt x) V) E) v) w))
(rule (i (i realu_mul (i gchi (i sqrt x1))) (i (i (i (i (i (i dihu_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i gchi1u_x x1) x2) x3) x4) x5) x6))
(rule (i (i intu_le (i (i intu_add x) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) y) (i (i intu_lt x) y))
(rule (i (i s_b_ (i (i IN a) s0)) (i (i s_b_ (i (i IN b) s0)) (i (i a_ (i (i connectedu_component s0) a)) (i (i connectedu_component s0) b)))) (i w_ (i (i a_ (i (i INTER (i (i connectedu_component s0) a)) (i (i connectedu_component s0) b))) EMPTY)))
(rule (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) e)) (i (i IN y) (i cball (i (i c_ x) e)))) (i (i limitu_pointu_of y) (i ball (i (i c_ x) e))))
(rule (i (i realu_sub (i (i realu_mul (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) x)) (i (i realu_div (i sqrt x)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i realu_sub (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi))) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_div (i sqrt x)) sqrt8)))) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) pi))) (i (i realu_mul m) (i lfun (i (i realu_div (i sqrt x)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))))) (i (i gamma2u_xu_divu_azim m) x))
(rule (i orthogonalu_matrix (i transp A0)) (i orthogonalu_matrix A0))
(rule (i (i b_s_ (i (i s_b_ (i (i l_a_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) x)) (i (i l_ m) n))) (i (i s_b_ (i (i a_ x) (i NUMERAL u_0))) (i (i s_b_ (i w_ (i (i a_ m) (i NUMERAL u_0)))) (i (i a_ n) (i NUMERAL u_0))))) (i (i l_ (i (i EXP x) m)) (i (i EXP x) n)))
(rule (i (i (i COND (i (i a_ x) y)) (i (i DELETE s0) y)) (i (i INSERT x) (i (i DELETE s0) y))) (i (i DELETE (i (i INSERT x) s0)) y))
(rule (i iterate complexu_mul) cproduct)
(rule (i (i DELETE (i (i DELETE s0) x)) x) (i (i DELETE s0) x))
(rule (i Re (i (i complexu_mul z1) (i cnj z2))) (i (i dot z1) z2))
(rule (i (i realu_le (i (i realu_add x) y)) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_le x) (i realu_neg y)))
(rule (i (i (i (i (i (i (i (i (i taumu_sub345u_x x3s) x4s) x5s) x1) x2) x3) x4) x5) x6) (i (i (i (i (i (i taumu_x x1) x2) x3s) x4s) x5s) x6))
(rule (i (i realu_pow y) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))) (i pow4 y))
(rule (i (i realu_pow y) (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i pow3 y))
(rule (i (i realu_mul (i sqn (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6))) (i (i (i (i (i (i ldih3u_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i ldih3u_xu_n x1) x2) x3) x4) x5) x6))
(rule (i (i realu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i pow2 y))
(rule (i (i realu_pow y) (i NUMERAL (i BIT1 u_0))) (i pow1 y))
(rule (i (i hrealu_add (i hrealu_ofu_num (i NUMERAL u_0))) x) x)
(rule (i complexu_inv (i complexu_inv x)) x)
(rule (i (i vectoru_add (i (i r_ a) (i basis (i NUMERAL (i BIT1 u_0))))) (i (i vectoru_add (i (i r_ b) (i basis (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i r_ c) (i basis (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i vector (i (i CONS a) (i (i CONS b) (i (i CONS c) NIL)))))
(rule (i (i (i COND (i EVEN n)) (i (i b_s_ (i (i a_ n) (i NUMERAL u_0))) (i (i a_ (i realu_abs x)) (i realu_abs y)))) (i (i a_ x) y)) (i (i a_ (i (i realu_pow x) n)) (i (i realu_pow y) n)))
(rule (i (i (i bnu_tabulate2 (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0)))))) bnu_enumerator) bnu_enumTab)
(rule (i (i realu_add (i (i realu_mul (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i (i volR (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i (i etau_y (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) y)) (i sqrt (i (i (i (i (i (i rad2u_y (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) y) y) y))))) (i (i realu_add (i (i realu_mul a) (i (i (i (i (i (i solu_y (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) y) y) y))) (i (i realu_mul (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul b) (i (i (i (i (i (i dihu_y (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) y) y) y))))) (i (i (i fdodec y) a) b))
(rule (i (i o_o_ (i NUMERAL u_0)) (i (i m_ (i bnu_countVertices g)) (i NUMERAL (i BIT1 u_0)))) (i bnu_verticesu_graph g))
(rule (i (i (i COND (i (i a_ a) b)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i sign (i swap (i (i c_ a) b))))
(rule (i (i product (i (i INSERT x) EMPTY)) f) (i f x))
(rule (i (i s_b_ (i (i a_ (i fstcart x)) (i fstcart y))) (i (i a_ (i sndcart x)) (i sndcart y))) (i (i a_ x) y))
(rule (i (i realu_add (i (i realu_div (i (i (i (i (i gamma3f y1) y2) y6) r) f)) (i realu_ofu_num w1))) (i (i realu_mul (i (i realu_sub (i (i realu_sub (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i dihu_y y1) y2) r) r) r) y6))) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))))) (i (i realu_div (i (i realu_sub (i (i vol2r y1) r)) (i (i (i vol2f y1) r) f))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi)))) (i (i (i (i (i (i (i (i (i gamma23fu_126u_03 y1) y2) y3) y4) y5) y6) w1) r) f))
(rule (i (i a_ (i realu_abs x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i s_b_ (i (i intu_le z) x)) (i (i intu_le z) y)) (i (i intu_le z) (i (i intu_min x) y)))
(rule (i (i (i (i (i (i (i promote1u_tou_6 f) x1) x2) x3) x4) x5) x6) (i f x1))
(rule (i (i s_b_ (i (i intu_le x) y)) (i (i intu_le y) x)) (i (i a_ x) y))
(rule (i (i (i COND (i evenperm p)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i sign p))
(rule (i (i (i COND (i EVEN n)) (i (i realu_pow x) n)) (i realu_neg (i (i realu_pow x) n))) (i (i realu_pow (i realu_neg x)) n))
(rule (i (i (i affsign sgnu_ge) EMPTY) S) (i conv S))
(rule (i quadraticu_rootu_plus (i (i c_ a) (i (i c_ b) c))) (i (i (i quadraticu_rootu_plusu_curry a) b) c))
(rule (i (i a_ (i (i edgeu_map H) x)) (i (i inverse (i faceu_map H)) x)) (i (i a_ (i (i nodeu_map H) x)) x))
(rule (i (i intu_mul x) (i intu_ofu_num (i NUMERAL u_0))) (i intu_ofu_num (i NUMERAL u_0)))
(rule (i (i realu_sub (i (i realu_mul (i sin w)) (i cos z))) (i (i realu_mul (i cos w)) (i sin z))) (i sin (i (i realu_sub w) z)))
(rule (i (i complexu_mul (i Cx c)) x) (i (i r_ c) x))
(rule (i (i ITER n) I) I)
(rule (i (i realu_mul (i lmfun (i (i realu_div (i sqrt x1)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dihu_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i lmdihu_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6))
(rule (i rotate3 rhazimu_xu_divu_sqrtdeltau_posbranch) rhazim3u_xu_divu_sqrtdeltau_posbranch)
(rule (i (i s_b_ (i (i a_ (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i (i d_ y) (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i a_ (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ y) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i a_ (i (i d_ x) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ y) (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i a_ x) y))
(rule (i (i realu_mul (i (i realu_pow x) n)) (i (i realu_pow y) n)) (i (i realu_pow (i (i realu_mul x) y)) n))
(rule (i bounded (i (i INSERT x) s0)) (i bounded s0))
(rule (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) a)) (i (i a_ (i (i dot x) x)) (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i a_ (i vectoru_norm x)) a))
(rule (i (i a_ (i Cx (i Re z))) z) (i real0 z))
(rule (i (i s_b_ (i realu_negligible s0)) (i realu_negligible t)) (i realu_negligible (i (i UNION s0) t)))
(rule (i (i add6 (i (i scalar6 (i (i (i (i (i (i (i compose6 (i (i (i (i truncateu_gamma3fu_x (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) m1) m2) m6)) dummy6) dummy6) dummy6) proju_x1) proju_x2) proju_x6)) iw1)) (i (i mul6 (i (i sub6 dihu_x) (i (i add6 (i mku_126 (i truncateu_dihu_x (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i constant6 d)))) (i uni (i (i c_ (i truncateu_gamma2u_x m1)) proju_x1)))) (i (i (i (i (i truncateu_gamma23u_xu_C d) iw1) m1) m2) m6))
(rule (i (i mul6 (i (i sub6 dihu_x) (i constant6 (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))))))) (i uni (i (i c_ (i truncateu_gamma2u_x m1)) proju_x1))) (i truncateu_gamma23u_xu_B m1))
(rule (i (i a_ (i Cx x)) (i Cx y)) (i (i a_ x) y))
(rule (i (i vectoru_add (i sndcart x)) (i sndcart y)) (i sndcart (i (i vectoru_add x) y)))
(rule (i (i b_s_ (i (i a_ a) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) a)) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) a))
(rule (i bump (i (i realu_div (i sqrt x)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i halfbumpu_x x))
(rule (i (i s_b_ (i (i SUBSET s0) t)) (i (i SUBSET s0) u)) (i (i SUBSET s0) (i (i INTER t) u)))
(rule (i (i realu_mul (i (i realu_sub (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i realu_div (i (i realu_sub (i (i vol2r y1) sqrt2)) (i (i (i vol2f y1) sqrt2) f))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) (i (i (i (i (i (i (i gamma3fu_v y1) y2) y3) y4) y5) y6) f))
(rule (i (i pastecart (i vectoru_neg x)) (i vectoru_neg y)) (i vectoru_neg (i (i pastecart x) y)))
(rule (i (i (i netord sequentially) m) n) (i (i g_a_ m) n))
(rule (i (i a_ (i realu_inv x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i a_ x) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i a_ (i realu_inv x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i hull affine) (i closure s0)) (i (i hull affine) s0))
(rule (i (i realu_div (i (i (i (i (i (i f x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i g x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i (i (i div6 f) g) x1) x2) x3) x4) x5) x6))
(rule (i (i (i COND (i (i b_s_ (i (i a_ a) b)) (i (i a_ c) b))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_pow (i (i realu_div (i (i dot (i (i vectoru_sub a) b)) (i (i vectoru_sub c) b))) (i (i realu_mul (i vectoru_norm (i (i vectoru_sub a) b))) (i vectoru_norm (i (i vectoru_sub c) b))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_pow (i sin (i angle (i (i c_ a) (i (i c_ b) c))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i (i pathu_component s0) x) x) (i (i IN x) s0))
(rule (i Im (i (i complexu_div z) (i Cx x))) (i (i realu_div (i Im z)) x))
(rule (i (i b_s_ (i (i intu_le z) x)) (i (i intu_le z) y)) (i (i intu_le z) (i (i intu_max x) y)))
(rule (i (i vectoru_add (i (i vecmat i0) x)) (i (i vecmat i0) y)) (i (i vecmat i0) (i (i vectoru_add x) y)))
(rule (i (i sum (i (i (i support realu_add) f) s0)) f) (i (i sum s0) f))
(rule (i (i s_b_ (i (i a_ (i (i realu_add (i (i realu_pow (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i a_ (i (i realu_add (i (i realu_pow (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_ (i (i realu_add (i (i realu_mul (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i realu_ofu_num (i NUMERAL u_0))))) (i orthogonalu_matrix A0))
(rule (i (i realu_add (i (i realu_mul (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul x12) x))) (i (i (i (i (i bu_coef x12) x13) x14) x23) x24)) (i (i (i (i (i (i deltau_x34 x12) x13) x14) x23) x24) x))
(rule (i (i d_ z) (i NUMERAL (i BIT1 u_0))) (i Re z))
(rule (i (i s_b_ (i (i a_ (i (i matrixu_mul (i transp Q)) Q)) (i mat (i NUMERAL (i BIT1 u_0))))) (i (i a_ (i (i matrixu_mul Q) (i transp Q))) (i mat (i NUMERAL (i BIT1 u_0))))) (i orthogonalu_matrix Q))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i atn x)) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i u_mku_rec ZBOT) BOTTOM)
(rule (i trealu_neg (i (i c_ x) y)) (i (i c_ y) x))
(rule (i coplanar (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT x) (i (i INSERT y) (i (i INSERT z) EMPTY))))) (i (i a_ (i (i dot (i (i cross x) y)) z)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_mul (i exp (i Re z))) (i sin (i Im z))) (i Im (i cexp z)))
(rule (i (i (i (i iu_fan (i vec (i NUMERAL u_0))) V) E) (i (i c_ (i vec (i NUMERAL u_0))) (i (i c_ v) (i (i c_ w) w)))) (i (i extendedu_dart (i (i c_ V) E)) (i (i c_ v) w)))
(rule (i (i vectoru_sub (i (i matrixu_vectoru_mul A0) x)) (i (i matrixu_vectoru_mul A0) y)) (i (i matrixu_vectoru_mul A0) (i (i vectoru_sub x) y)))
(rule (i (i INTER (i (i UNION s0) t)) (i (i UNION s0) u)) (i (i UNION s0) (i (i INTER t) u)))
(rule (i (i a_ (i (i faceu_map H) x)) (i (i faceu_map H) y)) (i (i a_ x) y))
(rule (i mku_126 (i rotate6 ldihu_xu_n)) ldih6u_xu_126u_n)
(rule (i (i intu_lt (i (i intu_add x) z)) (i (i intu_add y) z)) (i (i intu_lt x) y))
(rule (i (i (i COND b) (i f x)) (i g x)) (i (i (i (i COND b) f) g) x))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i dartu_std3u_mini y1) y2) y3) y4) y5) y6))
(rule (i affsign sgnu_lt) affu_lt)
(rule (i affsign sgnu_gt) affu_gt)
(rule (i affsign sgnu_ge) affu_ge)
(rule (i hull affine) aff)
(rule (i yu_ofu_x delta4u_squaredu_x) delta4u_squaredu_y)
(rule (i rotate5 dihu_xu_divu_sqrtdeltau_posbranch) dih5u_xu_divu_sqrtdeltau_posbranch)
(rule (i (i realu_pow (i (i (i (i (i (i deltau_x4 x1) x2) x3) x4) x5) x6)) (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i (i (i (i (i (i delta4u_squaredu_x x1) x2) x3) x4) x5) x6))
(rule (i realu_ofu_int (i intu_ofu_num n)) (i realu_ofu_num n))
(rule (i (i (i COND (i (i s_b_ (i (i l_ inner) (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i l_ outer) (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) (i (i bnu_sub (i (i bnu_sub bnu_enumTab) inner)) outer)) (i (i bnu_enumerator inner) outer)) (i (i bnu_enumt inner) outer))
(rule (i (i b_s_ (i (i R x) y)) (i (i a_ x) y)) (i (i (i RC R) x) y))
(rule (i (i c_ (i (i hrealu_add (i (i hrealu_mul x1) x2)) (i (i hrealu_mul y1) y2))) (i (i hrealu_add (i (i hrealu_mul x1) y2)) (i (i hrealu_mul y1) x2))) (i (i trealu_mul (i (i c_ x1) y1)) (i (i c_ x2) y2)))
(rule (i (i s_b_ (i w_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0))))) (i w_ (i (i a_ y) (i realu_ofu_num (i NUMERAL u_0))))) (i w_ (i (i a_ (i (i realu_mul x) y)) (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i (i (i (i (i delta (i (i realu_pow (i distance (i (i c_ x1) x2))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ x1) x3))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ x1) x4))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ x2) x3))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ x2) x4))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ x3) x4))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i w_ (i coplanaru_alt (i (i INSERT x1) (i (i INSERT x2) (i (i INSERT x3) (i (i INSERT x4) EMPTY)))))))
(rule (i (i (i COND (i (i b_s_ (i (i a_ x) (i vec (i NUMERAL u_0)))) (i (i a_ y) (i vec (i NUMERAL u_0))))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_div (i (i dot x) y)) (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y)))) (i cos (i (i vectoru_angle x) y)))
(rule (i (i s_b_ (i (i realu_le x) y)) (i (i realu_le y) x)) (i (i a_ x) y))
(rule (i (i vsum (i (i INSERT x) EMPTY)) f) (i f x))
(rule (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i acs (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i (i m_m_m_g_ (i (i o f) drop)) a) (i at (i lift x))) (i (i (i m_m_m_g_ f) a) (i atreal x)))
(rule (i (i (i COND (i (i realu_le y) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL u_0))) (i h0cut y))
(rule (i (i EL (i (i p_ n) (i NUMERAL (i BIT1 u_0)))) l) (i (i EL n) (i TL l)))
(rule (i (i (i (i ivsu_azimu_cycle (i (i INSERT v) EMPTY)) x) u) v) v)
(rule (i (i realu_mul (i sqn (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6))) (i (i (i (i (i (i ldih2u_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i ldih2u_xu_n x1) x2) x3) x4) x5) x6))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_sub ex) (i realu_abs (i (i realu_sub a) f)))) (i (i (i intervalu_eps a) f) ex))
(rule (i (i s_b_ (i (i DISJOINT s0) t)) (i w_ (i (i IN x) t))) (i (i DISJOINT (i (i INSERT x) s0)) t))
(rule (i (i (i intu_mod (i intu_ofu_num n)) (i intu_ofu_num x)) (i intu_ofu_num y)) (i (i (i numu_mod n) x) y))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_add b) (i (i realu_sub c) a))) (i (i (i dua a) b) c))
(rule (i (i (i COND (i (i a_ v) w)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi)) (i (i (i (i (i azimu_fan (i vec (i NUMERAL u_0))) V) E) v) w)) (i (i azimu_dart (i (i c_ V) E)) (i (i c_ v) w)))
(rule (i (i b_s_ (i (i initialu_sublist xl) ul)) (i (i a_ xl) (i (i APPEND ul) (i (i CONS v) NIL)))) (i (i initialu_sublist xl) (i (i APPEND ul) (i (i CONS v) NIL))))
(rule (i (i vectoru_sub x) (i (i r_ (i (i realu_div (i (i dot x) e)) (i (i dot e) e))) e)) (i (i projection e) x))
(rule (i (i s_b_ (i w_ (i (i IN u) (i aff (i (i INSERT x) (i (i INSERT v) EMPTY)))))) (i w_ (i (i a_ x) v))) (i w_ (i collinear (i (i INSERT x) (i (i INSERT v) (i (i INSERT u) EMPTY))))))
(rule (i (i b_s_ (i (i a_ (i angle (i (i c_ A0) (i (i c_ B0) C)))) (i angle (i (i c_ Ai_) (i (i c_ Bi_) Ci_))))) (i (i a_ (i angle (i (i c_ A0) (i (i c_ B0) C)))) (i (i realu_sub pi) (i angle (i (i c_ Ai_) (i (i c_ Bi_) Ci_)))))) (i (i a_ (i sin (i angle (i (i c_ A0) (i (i c_ B0) C))))) (i sin (i angle (i (i c_ Ai_) (i (i c_ Bi_) Ci_))))))
(rule (i (i a_ (i (i o_o_ m) n)) EMPTY) (i (i l_ n) m))
(rule (i (i vectoru_add x) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) x)
(rule (i vectoru_norm (i vectoru_neg x)) (i vectoru_norm x))
(rule (i (i s_b_ (i w_ (i (i a_ (i (i faceu_map H) x)) x))) (i (i a_ (i (i faceu_map H) (i (i faceu_map H) x))) x)) (i (i a_ (i CARD (i (i face H) x))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i log (i exp x)) x)
(rule (i intu_ofu_real (i realu_neg (i realu_ofu_int i0))) (i intu_neg i0))
(rule (i mku_126 dih4u_x) dih4u_xu_126u_s2)
(rule (i (i a_ (i dim s0)) (i dimindex UNIV)) (i (i a_ (i span s0)) UNIV))
(rule (i frontier UNIV) EMPTY)
(rule (i (i realu_mul x) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) x)
(rule (i inverse (i swap (i (i c_ a) b))) (i swap (i (i c_ a) b)))
(rule (i vectoru_norm (i lift x)) (i realu_abs x))
(rule (i (i a_a_g_ (i (i s_b_ (i (i exceptionalu_face H) x)) (i (i a_ (i CARD (i (i node H) x))) (i NUMERAL (i BIT0 (i BIT1 (i BIT1 u_0))))))) (i (i a_ (i (i typeu_ofu_node H) x)) (i (i c_ (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i (i c_ (i NUMERAL u_0)) (i NUMERAL (i BIT1 u_0)))))) (i (i nodeu_typeu_exceptionalu_face H) x))
(rule (i (i b_s_ (i (i a_ s0) EMPTY)) (i (i a_ t) EMPTY)) (i (i a_ (i (i CROSS s0) t)) EMPTY))
(rule (i (i realu_add (i realu_ofu_num (i NUMERAL u_0))) x) x)
(rule (i (i realu_mul (i realu_abs a)) (i vectoru_norm x)) (i vectoru_norm (i (i r_ a) x)))
(rule (i (i realu_div (i sqrt (i (i realu_sub (i (i realu_pow (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i dot x) y)) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i sqrt (i (i realu_pow (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i sqrt (i (i realu_div (i (i realu_sub (i (i realu_pow (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i dot x) y)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_pow (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))))
(rule (i Re (i cnj z)) (i Re z))
(rule (i rational (i realu_inv x)) (i rational x))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y4) sqrt8))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y6) sqrt8))) NIL)))))) (i (i (i (i (i (i apexffA y1) y2) y3) y4) y5) y6))
(rule (i (i IN (i lift x)) (i (i IMAGE lift) s0)) (i (i IN x) s0))
(rule (i (i realu_div (i exp x)) (i exp y)) (i exp (i (i realu_sub x) y)))
(rule (i (i d_ z) (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i Im z))
(rule (i (i o f) (i (i POWER f) k)) (i (i POWER f) (i SUC k)))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y5) sqrt8))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i apexff5 y1) y2) y3) y4) y5) y6))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ sqrt8) (i (i c_ y4) sqrt8))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y5) sqrt8))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i apexff4 y1) y2) y3) y4) y5) y6))
(rule (i intu_ofu_real (i (i realu_mul (i realu_ofu_int x)) (i realu_ofu_int y))) (i (i intu_mul x) y))
(rule (i (i (i COND (i (i a_ n) (i NUMERAL u_0))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i complexu_pow (i Cx (i realu_ofu_num (i NUMERAL u_0)))) n))
(rule (i (i INTER (i (i hull affine) s0)) s0) s0)
(rule (i bnu_verticesu_face (i (i c_ vs) f)) vs)
(rule (i (i INTER (i (i normball v0) r)) (i (i (i rconeu_gt v0) v1) a)) (i (i (i (i conicu_cap v0) v1) r) a))
(rule (i vectoru_neg (i (i cross y) x)) (i (i cross x) y))
(rule (i (i (i homotopicu_paths s0) (i reversepath p)) (i reversepath q)) (i (i (i homotopicu_paths s0) p) q))
(rule (i inside EMPTY) EMPTY)
(rule (i (i intu_divides (i intu_ofu_num a)) (i intu_ofu_num b)) (i (i numu_divides a) b))
(rule (i (i res (i eu_fanu_pair (i (i c_ V) E))) (i dart1u_ofu_fan (i (i c_ V) E))) (i eu_fanu_pairu_ext (i (i c_ V) E)))
(rule (i (i realu_add (i (i realu_mul (i realu_neg x12)) (i (i realu_pow x34) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_add (i (i realu_mul (i (i (i (i (i bu_coef x12) x13) x14) x23) x24)) x34)) (i (i (i (i (i cu_coef x12) x13) x14) x23) x24))) (i (i (i (i (i (i delta x12) x13) x14) x23) x24) x34))
(rule (i (i (i (i (i (i delta (i (i realu_pow (i (i d3 d) a)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d3 d) b)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d3 d) c)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d3 a) b)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d3 a) c)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d3 b) c)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_pow (i (i (i detu_vec3 (i (i vectoru_sub a) d)) (i (i vectoru_sub b) d)) (i (i vectoru_sub c) d))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))
(rule (i (i realu_add (i (i realu_div x) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_div x) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) x)
(rule (i (i a_ (i vectoru_neg x)) (i vec (i NUMERAL u_0))) (i (i a_ x) (i vec (i NUMERAL u_0))))
(rule (i (i INTER (i aff (i (i INSERT v0) (i (i INSERT v1) EMPTY)))) (i (i (i (i wedge v0) v1) w1) w2)) EMPTY)
(rule (i pathfinish (i (i (i subpath u) v) g)) (i g v))
(rule (i (i s_b_ (i (i realu_lt (i realu_neg k)) x)) (i (i realu_lt x) k)) (i (i realu_lt (i realu_abs x)) k))
(rule (i (i IN x) (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i (i between x) (i (i c_ a) b)))
(rule (i csin (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i s_b_ (i (i realu_le (i realu_neg k)) x)) (i (i realu_le x) k)) (i (i realu_le (i realu_abs x)) k))
(rule (i (i a_ (i bnu_countNonFinals g)) (i NUMERAL u_0)) (i bnu_finalGraph g))
(rule (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i ccos (i (i complexu_div (i (i vectoru_add w) z)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i ccos (i (i complexu_div (i (i vectoru_sub w) z)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i (i vectoru_add (i ccos w)) (i ccos z)))
(rule (i iterate p_) nsum)
(rule (i span (i (i DELETE s0) (i vec (i NUMERAL u_0)))) (i span s0))
(rule (i (i realu_mul (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))))))))) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_div (i (i realu_pow (i (i realu_sub h) h0)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i realu_sub hplus) h0)) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i bump h))
(rule (i (i realu_div (i (i dot u) v)) (i (i realu_mul (i vectoru_norm u)) (i vectoru_norm v))) (i (i cosV u) v))
(rule (i (i realu_add (i (i (i (i (i (i rhazimu_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6)) (i (i realu_add (i (i (i (i (i (i rhazim2u_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i rhazim3u_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6))) (i (i (i (i (i (i tauu_residualu_x x1) x2) x3) x4) x5) x6))
(rule (i tan (i atn y)) y)
(rule (i (i hull P) (i (i UNION s0) (i (i hull P) t))) (i (i hull P) (i (i UNION s0) t)))
(rule (i (i b_s_ (i (i s_b_ (i (i realu_lt (i drop b)) (i drop a))) (i (i realu_lt (i drop d)) (i drop c)))) (i (i s_b_ (i (i a_ (i drop a)) (i drop c))) (i (i a_ (i drop b)) (i drop d)))) (i (i a_ (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i closedu_interval (i (i CONS (i (i c_ c) d)) NIL))))
(rule (i (i eu_fanu_pair (i (i c_ V) E)) (i (i c_ v) w)) (i (i c_ w) v))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i atn x)) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i s_b_ (i bounded s0)) (i bounded t)) (i bounded (i (i UNION s0) t)))
(rule (i (i UNION (i (i INSERT x) EMPTY)) s0) (i (i INSERT x) s0))
(rule (i (i a_ (i (i hull affine) s0)) EMPTY) (i (i a_ s0) EMPTY))
(rule (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) a)) (i (i realu_le (i (i dot x) x)) (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_le (i vectoru_norm x)) a))
(rule (i relativeu_interior EMPTY) EMPTY)
(rule (i (i (i (i (i frustum v0) v1) (i realu_ofu_num (i NUMERAL u_0))) h) a) (i (i (i (i frustt v0) v1) h) a))
(rule (i (i intu_divides n) (i (i intu_sub x) y)) (i (i (i intu_mod n) x) y))
(rule (i (i intu_mul (i intu_ofu_num m)) (i intu_ofu_num n)) (i intu_ofu_num (i (i t_ m) n)))
(rule (i (i realu_add (i (i realu_mul (i (i d_ a) (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ c) (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i realu_add (i (i realu_mul (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul (i (i d_ c) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i realu_sub (i (i realu_mul (i (i d_ c) (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i realu_add (i (i realu_mul (i (i d_ a) (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul (i (i d_ c) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i realu_add (i (i realu_mul (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ c) (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i realu_mul (i (i d_ c) (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0))))))))))) (i (i (i detu_vec3 a) b) c))
(rule (i (i c_ (i dart H)) (i (i c_ (i edgeu_map H)) (i (i c_ (i nodeu_map H)) (i faceu_map H)))) (i tupleu_hypermap H))
(rule (i (i (i m_m_g_ (i (i o f) drop)) a) (i (i within (i at (i lift x))) (i (i IMAGE lift) s0))) (i (i (i m_m_g_ f) a) (i (i within (i atreal x)) s0)))
(rule (i INTERS (i (i IMAGE (i bisu_lt v)) (i (i DELETE s0) v))) (i (i voronoiu_open s0) v))
(rule (i (i (i m_m_g_ f) (i f x)) (i (i within (i atreal x)) s0)) (i (i continuous f) (i (i within (i atreal x)) s0)))
(rule (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) sqrt8)
(rule (i (i s_b_ (i (i dartu_nondegenerate H) x)) (i w_ (i (i IN (i (i nodeu_map H) x)) (i (i edge H) x)))) (i (i isu_edgeu_merge H) x))
(rule (i sqrt (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))) sqrt3)
(rule (i (i d_ (i lift x)) (i NUMERAL (i BIT1 u_0))) x)
(rule (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) sqrt2)
(rule (i (i realu_add (i t (i NUMERAL (i BIT1 u_0)))) (i (i realu_add (i t (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i t (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i sum (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) t))
(rule (i (i sum (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i NUMERAL (i BIT1 u_0)))) f) (i f (i NUMERAL (i BIT1 u_0))))
(rule (i (i realu_add (i realu_neg x)) (i realu_neg y)) (i realu_neg (i (i realu_add x) y)))
(rule (i (i r_ (i realu_inv (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i vectoru_add a) b)) (i midpoint (i (i c_ a) b)))
(rule (i (i r_ (i (i realu_div (i (i dot x) e)) (i (i dot e) e))) e) (i (i proju_point e) x))
(rule (i Arg (i (i complexu_div (i (i dropout (i NUMERAL (i BIT1 (i BIT1 u_0)))) y)) (i (i dropout (i NUMERAL (i BIT1 (i BIT1 u_0)))) x))) (i (i (i (i azim (i vec (i NUMERAL u_0))) (i basis (i NUMERAL (i BIT1 (i BIT1 u_0))))) x) y))
(rule (i (i (i m_m_g_ f) (i f (i netlimit net0))) net0) (i (i continuous f) net0))
(rule (i (i hull affine) (i (i hull convex) s0)) (i (i hull affine) s0))
(rule (i closedu_interval (i (i CONS (i (i c_ (i lift (i (i realu_max (i drop a)) (i drop c)))) (i lift (i (i realu_min (i drop b)) (i drop d))))) NIL)) (i (i INTER (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i closedu_interval (i (i CONS (i (i c_ c) d)) NIL))))
(rule (i (i a_ (i intu_abs x)) (i intu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i intu_ofu_num (i NUMERAL u_0))))
(rule (i negligible (i (i IMAGE lift) s0)) (i realu_negligible s0))
(rule (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) (i intu_neg (i intu_ofu_num n))) F0)
(rule (i vectoru_norm (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i root (i NUMERAL (i BIT0 (i BIT1 u_0)))) x) (i sqrt x))
(rule (i mku_126 ldihu_xu_n) ldihu_xu_126u_n)
(rule (i (i realu_mul (i lfun (i (i realu_div (i sqrt x1)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dihu_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i ldihu_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6))
(rule (i (i (i affsign sgnu_gt) EMPTY) S) (i conv0 S))
(rule (i vectoru_norm (i basis (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i closed (i (i DIFF UNIV) s0)) (i open s0))
(rule (i (i realu_lt y) (i (i realu_add x) (i realu_neg z))) (i (i realu_lt (i (i realu_add y) z)) x))
(rule (i rotate2 rhazimu_xu_divu_sqrtdeltau_posbranch) rhazim2u_xu_divu_sqrtdeltau_posbranch)
(rule (i (i a_ (i atn x)) (i atn y)) (i (i a_ x) y))
(rule (i intu_ofu_real (i (i realu_min (i realu_ofu_int x)) (i realu_ofu_int y))) (i (i intu_min x) y))
(rule (i realu_ofu_num (i NUMERAL (i BIT1 u_0))) unit0)
(rule (i (i (i POWER (i faceu_map H)) (i SUC (i (i (i (i mInside H) NF) L) x))) x) (i (i (i (i heading H) NF) L) x))
(rule (i (i (i (i azim (i (i vectoru_add a) v)) (i (i vectoru_add a) w)) (i (i vectoru_add a) w1)) (i (i vectoru_add a) w2)) (i (i (i (i azim v) w) w1) w2))
(rule (i (i realu_le (i realu_neg x)) (i realu_neg y)) (i (i realu_le y) x))
(rule (i LENGTH (i (i MAP f) l)) (i LENGTH l))
(rule (i (i (i COND (i (i realu_le h) h0)) (i (i realu_div (i (i realu_sub h0) h)) (i (i realu_sub h0) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL u_0))) (i lmfun h))
(rule (i (i a_ (i (i vectoru_add x) z)) (i (i vectoru_add y) z)) (i (i a_ x) y))
(rule (i (i s_b_ (i (i a_ (i (i INTER X) A0)) EMPTY)) (i (i a_ (i (i INTER X) B0)) EMPTY)) (i (i a_ (i (i INTER X) (i (i UNION A0) B0))) EMPTY))
(rule (i SUC (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i NUMERAL (i BIT1 (i BIT1 u_0))))
(rule (i (i nsum (i (i o_o_ n) n)) f) (i f n))
(rule (i nabs (i intu_ofu_num u)) u)
(rule (i (i realu_add (i (i realu_pow (i (i realu_mul r) (i cos x))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i realu_mul r) (i sin x))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow r) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i csin (i casn z)) z)
(rule (i (i a_ (i (i r_ (i vectoru_norm (i (i vectoru_sub x) y))) (i (i vectoru_sub y) z))) (i (i r_ (i vectoru_norm (i (i vectoru_sub y) z))) (i (i vectoru_sub x) y))) (i (i a_ (i distance (i (i c_ x) z))) (i (i realu_add (i distance (i (i c_ x) y))) (i distance (i (i c_ y) z)))))
(rule (i (i c_ (i (i realu_div (i (i realu_add a) b)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) b) (i pathR (i (i c_ a) b)))
(rule (i (i a_ (i (i INTER s0) t)) s0) (i (i SUBSET s0) t))
(rule (i (i (i bnu_mapAt ns) (i (i bnu_replace f) fs)) Fs) (i (i (i (i bnu_replacefacesAt ns) f) fs) Fs))
(rule (i (i c_ a) (i (i realu_div (i (i realu_add a) b)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i pathL (i (i c_ a) b)))
(rule (i (i (i hasu_integral (i (i o lift) (i (i o f) drop))) (i lift y)) (i (i IMAGE lift) s0)) (i (i (i hasu_realu_integral f) y) s0))
(rule (i intu_gcd (i (i c_ (i intu_ofu_num a)) (i intu_ofu_num b))) (i intu_ofu_num (i numu_gcd (i (i c_ a) b))))
(rule (i (i realu_mul (i lfun (i (i realu_div (i sqrt x3)) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) (i (i (i (i (i (i dih3u_xu_135u_s2 x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i ldih3u_xu_135u_s2 x1) x2) x3) x4) x5) x6))
(rule (i vectoru_neg (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i vectoru_neg (i (i vectoru_sub x) y)) (i (i vectoru_sub y) x))
(rule (i (i intu_add x) (i intu_neg y)) (i (i intu_sub x) y))
(rule (i mku_126 dih5u_x) dih5u_xu_126u_s2)
(rule (i path (i reversepath g)) (i path g))
(rule (i (i dropout k) (i vec (i NUMERAL u_0))) (i vec (i NUMERAL u_0)))
(rule (i (i s_b_ (i EVEN m)) (i w_ (i (i a_ n) (i NUMERAL u_0)))) (i EVEN (i (i EXP m) n)))
(rule (i (i intu_min (i intu_ofu_num m)) (i intu_ofu_num n)) (i intu_ofu_num (i (i MIN m) n)))
(rule (i (i realu_mul (i realu_ofu_num m)) (i realu_ofu_num n)) (i realu_ofu_num (i (i t_ m) n)))
(rule (i sqrt (i (i realu_div (i (i realu_mul x1) (i (i realu_mul x2) x3))) (i (i (i upsu_x x1) x2) x3))) (i (i (i etau_x x1) x2) x3))
(rule (i realu_abs (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i vectoru_norm x))
(rule (i normalize (i vec (i NUMERAL u_0))) (i vec (i NUMERAL u_0)))
(rule (i (i matrixu_vectoru_mul (i mat (i NUMERAL u_0))) x) (i vec (i NUMERAL u_0)))
(rule (i (i vectoru_sub x) (i (i proju_point e) x)) (i (i projection e) x))
(rule (i w_ (i ODD n)) (i EVEN n))
(rule (i Re (i ccos (i Cx x))) (i cos x))
(rule (i intu_ofu_real (i (i realu_max (i realu_ofu_int x)) (i realu_ofu_int y))) (i (i intu_max x) y))
(rule (i (i g_a_ (i numberu_ofu_faces H)) (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i tameu_8 H))
(rule (i compact (i closure s0)) (i bounded s0))
(rule (i (i s_b_ (i connectedu_hypermap H)) (i simpleu_hypermap H)) (i tameu_2 H))
(rule (i (i s_b_ (i plainu_hypermap H)) (i planaru_hypermap H)) (i tameu_1 H))
(rule (i (i realu_add (i realu_neg (i (i realu_mul x1) (i (i realu_mul x4) x4)))) (i (i realu_add (i (i realu_mul x1) (i (i realu_mul x4) x5))) (i (i realu_add (i (i realu_sub (i (i realu_mul x2) (i (i realu_mul x4) x5))) (i (i realu_mul x2) (i (i realu_mul x5) x5)))) (i (i realu_add (i (i realu_mul x1) (i (i realu_mul x4) x6))) (i (i realu_add (i (i realu_mul x3) (i (i realu_mul x4) x6))) (i (i realu_add (i (i realu_mul x2) (i (i realu_mul x5) x6))) (i (i realu_sub (i (i realu_sub (i (i realu_mul x3) (i (i realu_mul x5) x6))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul x4) (i (i realu_mul x5) x6))))) (i (i realu_mul x3) (i (i realu_mul x6) x6))))))))) (i (i (i (i (i (i chiu_x x1) x2) x3) x4) x5) x6))
(rule (i bounded (i closure s0)) (i bounded s0))
(rule (i complex (i (i c_ (i Re z)) (i realu_neg (i Im z)))) (i cnj z))
(rule (i CARD (i (i (i ISu_SY s0) p) q)) (i (i (i klu_sy s0) p) q))
(rule (i rotate3 dihu_xu_divu_sqrtdeltau_posbranch) dih3u_xu_divu_sqrtdeltau_posbranch)
(rule (i (i (i (i (i (i gamma3fu_vL0 (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i gamma3fu_xu_vL0 x1) x2) x3) x4) x5) x6))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Im (i complexu_inv z))) (i (i realu_lt (i Im z)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i s_b_ (i (i SUBSET s0) (i topspace top))) (i (i openu_in top) (i (i DIFF (i topspace top)) s0))) (i (i closedu_in top) s0))
(rule (i (i (i INV R) x) y) (i (i R y) x))
(rule (i (i p_ (i (i t_ m) p)) (i (i t_ n) p)) (i (i t_ (i (i p_ m) n)) p))
(rule (i closure UNIV) UNIV)
(rule (i (i (i (i (i interp (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i realu_ofu_num (i NUMERAL u_0))) y) (i ly y))
(rule (i (i c_ (i hrealu_ofu_num n)) (i hrealu_ofu_num (i NUMERAL u_0))) (i trealu_ofu_num n))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Re (i (i complexu_mul a) (i cnj b)))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Re (i (i complexu_div a) b))))
(rule (i affu_dim (i (i INSERT a) EMPTY)) (i intu_ofu_num (i NUMERAL u_0)))
(rule (i (i faceu_of (i (i INSERT x) EMPTY)) s0) (i (i extremeu_pointu_of x) s0))
(rule (i evenperm (i swap (i (i c_ a) b))) (i (i a_ a) b))
(rule (i (i t_ (i FACT n)) (i (i t_ (i FACT k)) (i binom (i (i c_ (i (i p_ n) k)) k)))) (i FACT (i (i p_ n) k)))
(rule (i (i HASu_SIZE s0) (i NUMERAL u_0)) (i (i a_ s0) EMPTY))
(rule (i (i realu_mul (i realu_sgn x)) (i realu_abs x)) x)
(rule (i (i (i (i (i (i (i compose6 f) two6) two6) two6) proju_x4) proju_x5) proju_x6) (i mku_456 f))
(rule (i (i b_s_ (i (i s_b_ (i (i a_ a) c)) (i (i a_ b) d))) (i (i s_b_ (i (i a_ a) d)) (i (i a_ b) c))) (i (i a_ (i (i INSERT a) (i (i INSERT b) EMPTY))) (i (i INSERT c) (i (i INSERT d) EMPTY))))
(rule (i vecmats (i matvec A0)) A0)
(rule (i (i s_b_ (i polyhedron s0)) (i bounded s0)) (i polytope s0))
(rule (i (i vectoru_sub (i cnj w)) (i cnj z)) (i cnj (i (i vectoru_sub w) z)))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) sqrt2) sqrt8)
(rule (i (i realu_mul (i lfun (i (i realu_div (i sqrt x6)) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) (i (i (i (i (i (i dih6u_xu_126u_s2 x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i ldih6u_xu_126u_s2 x1) x2) x3) x4) x5) x6))
(rule (i (i matrixu_sub (i (i r_r_ b) A0)) (i (i r_r_ c) A0)) (i (i r_r_ (i (i realu_sub b) c)) A0))
(rule (i (i intu_max (i intu_ofu_num m)) (i intu_ofu_num n)) (i intu_ofu_num (i (i MAX m) n)))
(rule (i (i (i COND (i EVEN n)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i (i realu_mul (i realu_ofu_num (i FACT (i (i m_ n) (i NUMERAL (i BIT1 u_0)))))) (i (i realu_pow (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i DIV (i (i m_ n) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i tayloru_coeffu_catn n) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i s_b_ (i (i a_ x) (i vec n))) (i (i a_ y) (i vec n))) (i (i a_ (i (i pastecart x) y)) (i vec n)))
(rule (i UNIONS (i (i IMAGE (i INTER A0)) U)) (i (i INTER (i UNIONS U)) A0))
(rule (i (i realu_lt (i atn x)) (i atn y)) (i (i realu_lt x) y))
(rule (i (i vectoru_add (i (i cross x) y)) (i (i cross x) z)) (i (i cross x) (i (i vectoru_add y) z)))
(rule (i (i s_b_ (i (i SUBSET (i (i INSERT v) (i (i INSERT v1) (i (i INSERT v2) EMPTY)))) s0)) (i (i s_b_ (i (i realu_le (i (i d3 v1) v2)) (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))))) (i (i s_b_ (i (i realu_ge (i (i d3 v1) v2)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) t0))) (i (i s_b_ (i (i realu_le (i (i d3 v) v1)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) t0))) (i (i realu_le (i (i d3 v) v2)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) t0)))))) (i (i (i (i anchor v) v1) v2) s0))
(rule (i (i (i affsign sgnu_gt) (i (i INSERT v) EMPTY)) S) (i (i cone0 v) S))
(rule (i lift (i realu_ofu_num n)) (i vec n))
(rule (i topspace (i (i subtopology euclideanreal) s0)) s0)
(rule (i (i hull affine) EMPTY) EMPTY)
(rule (i tan (i (i realu_add x) pi)) (i tan x))
(rule (i realu_neg (i sin (i (i realu_sub x) pi))) (i sin x))
(rule (i (i a_ (i (i realu_mul (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) a)) a)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i w_ (i (i a_ a) (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul pi) (i (i realu_mul r) (i (i realu_mul r) (i realu_inv (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0)))))))))) (i (i realu_mul (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul pi) (i (i realu_mul (i realu_inv (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i vol2r y) r))
(rule (i (i (i affsign sgn) (i (i DIFF s0) t)) t) (i (i (i affsign sgn) s0) t))
(rule (i (i complexu_div z) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) z)
(rule (i (i complexu_mul (i vectoru_neg (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) x) (i vectoru_neg x))
(rule (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))) h0)
(rule (i (i projection d) (i vec (i NUMERAL u_0))) (i vec (i NUMERAL u_0)))
(rule (i (i s_b_ (i w_ (i (i a_ x) (i vec (i NUMERAL u_0))))) (i (i s_b_ (i w_ (i (i a_ y) (i vec (i NUMERAL u_0))))) (i (i a_ (i (i vectoru_add (i (i r_ (i vectoru_norm x)) y)) (i (i r_ (i vectoru_norm y)) x))) (i vec (i NUMERAL u_0))))) (i (i a_ (i (i vectoru_angle x) y)) pi))
(rule (i (i scalar6 (i (i sub6 (i (i scalar6 unit6) h0)) proju_x1)) rh0) lfunu_y1)
(rule (i (i rotate2d (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) z) (i (i complexu_mul ii) z))
(rule (i (i MOD (i (i p_ (i (i t_ m) n)) p)) n) (i (i MOD p) n))
(rule (i (i s_b_ (i (i realu_le z) x)) (i (i realu_le z) y)) (i (i realu_le z) (i (i realu_min x) y)))
(rule (i (i m_m_g_ (i (i o lift) s0)) (i lift l)) (i (i m_m_m_g_ s0) l))
(rule (i (i realu_min (i realu_ofu_num m)) (i realu_ofu_num n)) (i realu_ofu_num (i (i MIN m) n)))
(rule (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))))) bnu_excessTCount)
(rule (i (i b_s_ (i (i a_ (i (i r_ (i vectoru_norm x)) y)) (i (i r_ (i vectoru_norm y)) x))) (i (i a_ (i (i r_ (i vectoru_norm x)) y)) (i (i r_ (i realu_neg (i vectoru_norm y))) x))) (i (i a_ (i realu_abs (i (i dot x) y))) (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y))))
(rule (i (i s_b_ (i (i differentiable f) (i at z))) (i (i s_b_ (i (i a_ (i (i d_ (i (i d_ (i (i jacobian f) (i at z))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i d_ (i (i jacobian f) (i at z))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i a_ (i (i d_ (i (i d_ (i (i jacobian f) (i at z))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_neg (i (i d_ (i (i d_ (i (i jacobian f) (i at z))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0))))))) (i (i complexu_differentiable f) (i at z)))
(rule (i (i (i COND (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) x)) (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i (i COND (i (i intu_lt x) (i intu_ofu_num (i NUMERAL u_0)))) (i intu_neg (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i intu_ofu_num (i NUMERAL u_0)))) (i intu_sgn x))
(rule (i dist (i (i c_ (i (i t_ m) p)) (i (i t_ n) p))) (i (i t_ (i dist (i (i c_ m) n))) p))
(rule (i (i a_ (i Im (i (i complexu_mul a) (i cnj b)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ (i Im (i (i complexu_div a) b))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i realu_closed (i (i DIFF UNIV) s0)) (i realu_open s0))
(rule (i (i s_b_ (i (i a_ (i Im x)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i b_s_ (i (i s_b_ (i (i realu_le a) (i Re x))) (i (i realu_le (i Re x)) b))) (i (i s_b_ (i (i realu_le b) (i Re x))) (i (i realu_le (i Re x)) a)))) (i (i IN x) (i closedu_segment (i (i CONS (i (i c_ (i Cx a)) (i Cx b))) NIL))))
(rule (i (i typeu_ofu_node (i oppositeu_hypermap H)) x) (i (i typeu_ofu_node H) x))
(rule (i (i UNION (i (i INTER s0) t)) (i (i INTER s0) u)) (i (i INTER s0) (i (i UNION t) u)))
(rule (i (i intu_pow x) (i NUMERAL (i BIT1 u_0))) x)
(rule (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i csin (i (i complexu_div (i (i vectoru_add w) z)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i csin (i (i complexu_div (i (i vectoru_sub z) w)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i (i vectoru_sub (i ccos w)) (i ccos z)))
(rule (i cos (i realu_neg x)) (i cos x))
(rule (i (i (i POWER (i bnu_nextVertex (i (i c_ vs) f))) n) v) (i (i (i bnu_nextVertices (i (i c_ vs) f)) n) v))
(rule (i (i a_ (i (i intu_add x) z)) (i (i intu_add y) z)) (i (i a_ x) y))
(rule (i (i realu_mul (i exp x)) (i exp (i realu_neg x))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i (i bnu_splitAtRec c) NIL) xs) (i (i bnu_splitAt c) xs))
(rule (i (i intu_lt (i intu_ofu_num m)) (i intu_ofu_num n)) (i (i l_ m) n))
(rule (i (i s_b_ (i measurable s0)) (i (i a_ (i measure s0)) m)) (i (i hasu_measure s0) m))
(rule (i real0 (i complexu_inv z)) (i real0 z))
(rule (i (i a_ (i vectoru_neg x)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ x) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i intu_le (i intu_ofu_num m)) (i intu_ofu_num n)) (i (i l_a_ m) n))
(rule (i (i b_s_ (i (i s_b_ (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) x)) (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) y))) (i (i s_b_ (i (i intu_lt x) (i intu_ofu_num (i NUMERAL u_0)))) (i (i intu_lt y) (i intu_ofu_num (i NUMERAL u_0))))) (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_mul x) y)))
(rule (i (i UNION (i (i (i setu_ofu_edge v) V) E1)) (i (i (i setu_ofu_edge v) V) E2)) (i (i (i setu_ofu_edge v) V) (i (i UNION E1) E2)))
(rule (i (i naddu_le (i (i naddu_add x) z)) (i (i naddu_add y) z)) (i (i naddu_le x) y))
(rule (i (i m_ n) (i (i p_ m) n)) (i NUMERAL u_0))
(rule (i (i closedu_in euclideanreal) s0) (i realu_closed s0))
(rule (i (i b_s_ (i (i a_ x) (i intu_ofu_num (i NUMERAL u_0)))) (i (i b_s_ (i (i a_ y) (i intu_ofu_num (i NUMERAL u_0)))) (i (i b_s_ (i (i s_b_ (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) x)) (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) y))) (i (i s_b_ (i (i intu_lt x) (i intu_ofu_num (i NUMERAL u_0)))) (i (i intu_lt y) (i intu_ofu_num (i NUMERAL u_0))))))) (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_mul x) y)))
(rule (i (i vectoru_add (i vec (i NUMERAL u_0))) x) x)
(rule (i (i realu_mul (i (i realu_div (i (i realu_sub (i exp (i realu_neg (i Im z)))) (i exp (i Im z)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i sin (i Re z))) (i Im (i ccos z)))
(rule (i (i realu_div (i sqrt (i (i realu_mul a) (i (i realu_mul a) (i (i realu_mul (i (i realu_sub (i (i realu_mul b) b)) (i (i realu_mul a) a))) (i (i realu_sub (i (i realu_mul c) c)) (i (i realu_mul b) b))))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 (i BIT1 u_0)))))) (i (i (i volR a) b) c))
(rule (i (i a_ (i (i o (i edgeu_map H)) (i edgeu_map H))) I) (i plainu_hypermap H))
(rule (i (i hrealu_mul m) (i hrealu_ofu_num (i NUMERAL u_0))) (i hrealu_ofu_num (i NUMERAL u_0)))
(rule (i (i s_b_ (i (i a_ (i (i o f) f)) I)) (i w_ (i (i a_ f) I))) (i (i hasu_orders f) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i setu_ofu_quadrilateralsu_meetingu_node (i oppositeu_hypermap H)) x) (i (i setu_ofu_quadrilateralsu_meetingu_node H) x))
(rule (i (i INTER (i (i (i (i wu_dartu_fan x) V) E) (i (i c_ y) (i (i c_ v) (i (i c_ w) w1))))) (i (i (i rconeu_fan x) v) h)) (i (i (i (i (i rwu_dartu_fan x) V) E) (i (i c_ y) (i (i c_ v) (i (i c_ w) w1)))) h))
(rule (i (i b_s_ (i (i realu_le z) x)) (i (i realu_le z) y)) (i (i realu_le z) (i (i realu_max x) y)))
(rule (i (i m_ (i (i p_ m) n)) m) n)
(rule (i (i realu_max (i realu_ofu_num m)) (i realu_ofu_num n)) (i realu_ofu_num (i (i MAX m) n)))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_add x) y)) (i (i realu_le (i realu_neg x)) y))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_add x) x)) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i realu_inv x)) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i (i (i (i (i (i promote f) x1) x2) x3) x4) x5) x6) (i f x1))
(rule (i cexp (i (i complexu_mul (i Cx (i realu_ofu_num n))) x)) (i (i complexu_pow (i cexp x)) n))
(rule (i (i intu_gt (i intu_ofu_num m)) (i intu_ofu_num n)) (i (i g_ m) n))
(rule (i (i a_ (i inside s0)) (i outside s0)) (i (i a_ s0) UNIV))
(rule (i (i c_ w) (i (i (i (i (i inverseu_sigmau_fan (i vec (i NUMERAL u_0))) V) E) w) v)) (i (i fu_fanu_pair (i (i c_ V) E)) (i (i c_ v) w)))
(rule (i (i s_b_ (i orthogonalu_matrix Q)) (i (i a_ (i det Q)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i rotationu_matrix Q))
(rule (i (i mul6 (i uni (i (i c_ lfun) (i (i div6 proju_y2) two6)))) dih2u_xu_126u_s2) ldih2u_xu_126u_s2)
(rule (i (i s_b_ (i (i a_a_g_ a) c)) (i (i a_a_g_ b) c)) (i (i a_a_g_ (i (i b_s_ a) b)) c))
(rule (i (i intu_ge (i intu_ofu_num m)) (i intu_ofu_num n)) (i (i g_a_ m) n))
(rule (i (i realu_sub (i (i (i tauu_fun (i Vu_SY (i vecmats l))) (i Eu_SY (i vecmats l))) (i Fu_SY (i vecmats l)))) (i du_fun (i (i c_ s0) l))) (i (i tauu_star s0) l))
(rule (i realu_open (i (i DIFF UNIV) s0)) (i realu_closed s0))
(rule (i (i extremeu_pointu_of x) (i (i INSERT a) EMPTY)) (i (i a_ x) a))
(rule (i RSC (i RSC R)) (i RSC R))
(rule (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) d)) (i (i s_b_ (i (i realu_lt (i (i realu_sub x) d)) y)) (i (i realu_lt y) (i (i realu_add x) d)))) (i (i realu_lt (i realu_abs (i (i realu_sub y) x))) d))
(rule (i (i a_ (i intu_ofu_num m)) (i intu_ofu_num n)) (i (i a_ m) n))
(rule (i (i (i a_a_ (i intu_ofu_num x)) (i intu_ofu_num y)) (i intu_mod (i intu_ofu_num n))) (i (i (i a_a_ x) y) (i numu_mod n)))
(rule (i inverse (i (i (i (i extensionu_sigmau_fan x) V) E) v)) (i (i (i (i inverseu_sigmau_fan x) V) E) v))
(rule (i (i b_s_ (i (i a_ s0) EMPTY)) (i (i a_ s0) UNIV)) (i (i s_b_ (i closed s0)) (i open s0)))
(rule (i (i a_ (i u_destu_rec x)) (i u_destu_rec y)) (i (i a_ x) y))
(rule (i (i bnu_rotateu_to vs) (i bnu_minu_list vs)) (i bnu_rotateu_min vs))
(rule (i (i IN m) (i (i o_o_ (i NUMERAL u_0)) n)) (i (i l_a_ m) n))
(rule (i netlimit (i at a)) a)
(rule (i (i realu_div (i (i (i upsu_x (i (i realu_pow (i vectoru_norm (i (i vectoru_sub v1) v2))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i vectoru_norm (i (i vectoru_sub v2) v3))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i vectoru_norm (i (i vectoru_sub v3) v1))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i (i cm3u_upsu_x v1) v2) v3))
(rule (i (i s_b_ (i w_ (i (i a_ (i det A0)) (i realu_ofu_num (i NUMERAL u_0))))) (i (i a_ Ai_) (i (i r_r_ (i realu_inv (i det A0))) (i transp (i cofactor A0))))) (i (i a_ (i (i matrixu_mul A0) Ai_)) (i mat (i NUMERAL (i BIT1 u_0)))))
(rule (i conv (i (i INSERT u) EMPTY)) (i (i INSERT u) EMPTY))
(rule (i (i b_s_ (i (i a_ y) (i (i faceu_map H) x))) (i (i a_ x) (i (i nodeu_map H) y))) (i (i (i oneu_stepu_contour H) x) y))
(rule (i (i s_b_ (i (i l_a_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i (i (i bnu_directedLength f) a) b))) (i (i s_b_ (i (i l_a_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i (i (i bnu_directedLength f) b) a))) (i (i setu_ofu_list (i (i bnu_neighbors g) a)) b))) (i (i (i (i bnu_duplicateEdge g) f) a) b))
(rule (i (i (i o f) g) x) (i f (i g x)))
(rule (i (i matrixu_sub A0) (i mat (i NUMERAL u_0))) A0)
(rule (i (i hasu_realu_measure s0) (i realu_ofu_num (i NUMERAL u_0))) (i realu_negligible s0))
(rule (i (i s_b_ (i integer (i (i realu_sub x) a))) (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) a)) (i (i realu_lt a) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i (i a_ (i frac x)) a))
(rule (i (i vectoru_add (i (i complexu_mul x) z)) (i (i complexu_mul y) z)) (i (i complexu_mul (i (i vectoru_add x) y)) z))
(rule (i (i (i COND (i (i IN x) (i dart1u_ofu_fan (i (i c_ V) E)))) (i (i fu_fanu_pair (i (i c_ V) E)) x)) x) (i (i fu_fanu_pairu_ext (i (i c_ V) E)) x))
(rule (i frontier EMPTY) EMPTY)
(rule (i (i intu_sub (i (i intu_mul x) z)) (i (i intu_mul y) z)) (i (i intu_mul (i (i intu_sub x) y)) z))
(rule (i (i a_ (i (i vectoru_sub x) y)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ x) y))
(rule (i (i matrixu_sub (i transp A0)) (i transp B0)) (i transp (i (i matrixu_sub A0) B0)))
(rule (i (i dot (i (i cross v1) v2)) v3) (i (i (i detu_vec3 v1) v2) v3))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ sqrt8) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i apexu_supu_flat y1) y2) y3) y4) y5) y6))
(rule (i (i vectoru_sub x) (i (i projection e) x)) (i (i proju_point e) x))
(rule (i (i a_ (i (i vectoru_sub x) y)) (i vec (i NUMERAL u_0))) (i (i a_ x) y))
(rule (i (i s_b_ (i w_ (i (i a_ x) (i vec (i NUMERAL u_0))))) (i (i s_b_ (i w_ (i (i a_ y) (i vec (i NUMERAL u_0))))) (i (i a_ (i vectoru_norm (i (i vectoru_sub x) y))) (i (i realu_add (i vectoru_norm x)) (i vectoru_norm y))))) (i (i a_ (i (i vectoru_angle x) y)) pi))
(rule (i (i s_b_ (i w_ (i (i a_ x) (i vec (i NUMERAL u_0))))) (i (i s_b_ (i w_ (i (i a_ y) (i vec (i NUMERAL u_0))))) (i (i a_ (i (i r_ (i vectoru_norm x)) y)) (i (i r_ (i vectoru_norm y)) x)))) (i (i a_ (i (i vectoru_angle x) y)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_add (i Re x)) (i Re y)) (i Re (i (i vectoru_add x) y)))
(rule (i (i openu_in euclideanreal) s0) (i realu_open s0))
(rule (i (i intu_lt y) (i (i intu_add x) (i intu_neg z))) (i (i intu_lt (i (i intu_add y) z)) x))
(rule (i (i a_ (i Im (i (i complexu_div (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))) (i (i vectoru_add (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ (i Re z)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i (i higheru_complexu_derivative (i NUMERAL (i BIT1 u_0))) f) z) (i (i complexu_derivative f) z))
(rule (i (i b_s_ (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) x)) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) y))) (i (i s_b_ (i (i realu_lt x) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_lt y) (i realu_ofu_num (i NUMERAL u_0))))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_mul x) y)))
(rule (i (i complexu_mul (i (i vectoru_add (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))) (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))) (i (i vectoru_add (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_pow z) (i NUMERAL (i BIT0 (i BIT1 u_0))))))
(rule (i (i vectoru_sub a) (i (i complexu_mul ii) (i (i complexu_mul ii) u))) (i (i vectoru_add a) u))
(rule (i (i complexu_mul (i (i vectoru_add (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))) (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))) (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) (i (i complexu_mul ii) (i (i complexu_mul z) z)))))
(rule (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL u_0)))) x) (i vectoru_neg x))
(rule (i (i complexu_mul (i complexu_inv (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i vectoru_add (i (i complexu_mul (i complexu_inv (i (i vectoru_add (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_pow z) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z)))) (i (i complexu_mul (i complexu_inv (i (i vectoru_add (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_pow z) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i vectoru_add (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))))) (i complexu_inv (i (i vectoru_add (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_pow z) (i NUMERAL (i BIT0 (i BIT1 u_0)))))))
(rule (i (i a_ (i span s0)) s0) (i subspace s0))
(rule (i (i realu_sub (i realu_ofu_int x)) (i realu_ofu_int y)) (i realu_ofu_int (i (i intu_sub x) y)))
(rule (i (i SUBSET s0) (i (i INSERT (i vec (i NUMERAL u_0))) EMPTY)) (i (i a_ (i dim s0)) (i NUMERAL u_0)))
(rule (i (i b_s_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0)))) (i (i b_s_ (i (i a_ y) (i realu_ofu_num (i NUMERAL u_0)))) (i (i b_s_ (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) x)) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) y))) (i (i s_b_ (i (i realu_lt x) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_lt y) (i realu_ofu_num (i NUMERAL u_0))))))) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_mul x) y)))
(rule (i (i realu_sub x) (i realu_ofu_num (i NUMERAL u_0))) x)
(rule (i closedu_interval (i (i CONS (i (i c_ (i (i vectoru_sub x) (i lift e))) (i (i vectoru_add x) (i lift e)))) NIL)) (i cball (i (i c_ x) e)))
(rule (i (i (i (i (i (i halfbumpu_x4 x1) x2) x3) x4) x5) x6) (i halfbumpu_x x4))
(rule (i (i (i COND (i (i realu_lt (i (i realu_add (i frac x)) (i frac y))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_add (i floor x)) (i floor y))) (i (i realu_add (i (i realu_add (i floor x)) (i floor y))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i floor (i (i realu_add x) y)))
(rule (i (i (i (i (i (i halfbumpu_x1 x1) x2) x3) x4) x5) x6) (i halfbumpu_x x1))
(rule (i (i add6 (i (i mul6 proju_y1) (i (i mul6 proju_y2) proju_y3))) (i (i add6 (i (i scalar6 (i (i mul6 proju_y1) (i (i add6 proju_x2) (i (i sub6 proju_x3) proju_x4)))) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))) (i (i add6 (i (i scalar6 (i (i mul6 proju_y2) (i (i add6 proju_x1) (i (i sub6 proju_x3) proju_x5)))) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))) (i (i scalar6 (i (i mul6 proju_y3) (i (i add6 proju_x1) (i (i sub6 proju_x2) proju_x6)))) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))))) eulerAu_x)
(rule (i (i s_b_ (i FINITE s0)) (i FINITE t)) (i FINITE (i (i UNION s0) t)))
(rule (i (i realu_add (i (i (i (i (i (i taumu_x x1) x2) x3) x4) (i (i (i (i (i (i edgeu_flat2u_x x13) x1) x3) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i edgeu_flat2u_x x12) x1) x2) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))))) (i (i realu_add (i flatu_termu_x x12)) (i flatu_termu_x x13))) (i (i (i (i (i (i taumu_2flatu_x x1) x2) x3) x4) x13) x12))
(rule (i fan2 (i (i c_ x) (i (i c_ V) E))) (i w_ (i (i IN x) V)))
(rule (i (i vectoru_add (i (i r_ (i (i d_ v) (i NUMERAL (i BIT1 u_0)))) (i basis (i NUMERAL (i BIT1 u_0))))) (i (i vectoru_add (i (i r_ (i (i d_ v) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i basis (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i r_ (i (i d_ v) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i basis (i NUMERAL (i BIT1 (i BIT1 u_0))))))) v)
(rule (i (i (i hasu_vectoru_derivative (i (i o lift) (i (i o f) drop))) (i lift fi_)) (i at (i lift x))) (i (i (i hasu_realu_derivative f) fi_) (i atreal x)))
(rule (i (i (i affsign sgnu_ge) (i (i INSERT v) EMPTY)) S) (i (i cone v) S))
(rule (i (i (i (i (i (i (i uni (i (i c_ f) x)) x1) x2) x3) x4) x5) x6) (i f (i (i (i (i (i (i x x1) x2) x3) x4) x5) x6)))
(rule (i (i hull P) (i (i UNION (i (i hull P) s0)) t)) (i (i hull P) (i (i UNION s0) t)))
(rule (i (i (i (i (i (i (i poweru_mapu_points sigmau_fan) x) V) E) v) (i (i (i (i (i (i (i poweru_mapu_points sigmau_fan) x) V) E) v) u) n)) m) (i (i (i (i (i (i (i poweru_mapu_points sigmau_fan) x) V) E) v) u) (i (i p_ m) n)))
(rule (i mku_num INDu_0) u_0)
(rule (i (i realu_le (i vectoru_norm x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i vec (i NUMERAL u_0))))
(rule (i open (i (i DIFF UNIV) s0)) (i closed s0))
(rule (i (i intu_lt (i (i intu_add x) y)) (i (i intu_add x) z)) (i (i intu_lt y) z))
(rule (i (i m_ (i SUC n)) (i NUMERAL (i BIT1 u_0))) n)
(rule (i (i hrealu_add (i hrealu_ofu_num m)) (i hrealu_ofu_num n)) (i hrealu_ofu_num (i (i p_ m) n)))
(rule (i sin (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i (i POWER (i nodeu_map H)) (i CARD (i (i node H) x))) x) x)
(rule (i Re (i catn (i Cx x))) (i atn x))
(rule (i (i POWER (i next L)) (i size L)) I)
(rule (i (i sum (i (i INSERT x) EMPTY)) f) (i f x))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i realu_inv x)) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i m_ m) (i (i p_ m) n)) (i NUMERAL u_0))
(rule (i SND (i SND (i SND (i SND u)))) (i drop3 u))
(rule (i SND (i SND (i SND u))) (i drop2 u))
(rule (i SND (i SND u)) (i drop1 u))
(rule (i cos (i (i realu_add x) pi)) (i realu_neg (i cos x)))
(rule (i Re (i casn (i Cx x))) (i asn x))
(rule (i (i a_ (i binom (i (i c_ n) k))) (i NUMERAL u_0)) (i (i l_ n) k))
(rule (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) (i intu_neg x)) (i (i intu_lt x) (i intu_ofu_num (i NUMERAL u_0))))
(rule (i (i b_s_ (i (i R a0) a1)) (i (i (i SC R) a1) a0)) (i (i (i SC R) a0) a1))
(rule (i (i realu_add (i (i realu_div (i (i (i (i (i (i (i gamma3fu_126 y1) y2) y3) y4) y5) y6) f)) (i realu_ofu_num w1))) (i (i (i (i (i (i (i gamma3fu_vL y1) y2) y3) y4) y5) y6) f)) (i (i (i (i (i (i (i (i (i gamma23fu_126u_03 y1) y2) y3) y4) y5) y6) w1) sqrt2) f))
(rule (i realu_abs (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i realu_mul (i det A0)) (i det B0)) (i det (i (i matrixu_mul A0) B0)))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i sqrt (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))))))
(rule (i (i a_ (i (i (i detu_vec3 (i (i vectoru_sub v1) v0)) (i (i vectoru_sub v2) v0)) (i (i vectoru_sub v3) v0))) (i realu_ofu_num (i NUMERAL u_0))) (i coplanar (i (i INSERT v0) (i (i INSERT v1) (i (i INSERT v2) (i (i INSERT v3) EMPTY))))))
(rule (i realu_neg (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i asn (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))))
(rule (i (i a_ (i (i vectoru_angle x) y)) (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i orthogonal x) y))
(rule (i (i cross (i vec (i NUMERAL u_0))) x) (i vec (i NUMERAL u_0)))
(rule (i (i a_ (i (i (i detu_vec3 (i (i vectoru_sub v1) v0)) (i (i vectoru_sub v2) v0)) (i (i vectoru_sub v3) v0))) (i realu_ofu_num (i NUMERAL u_0))) (i coplanaru_alt (i (i INSERT v0) (i (i INSERT v1) (i (i INSERT v2) (i (i INSERT v3) EMPTY))))))
(rule (i (i realu_add (i (i realu_pow (i (i realu_sub (i (i realu_mul (i (i d_ (i (i vectoru_sub v2) v1)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ (i (i vectoru_sub v3) v1)) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_mul (i (i d_ (i (i vectoru_sub v2) v1)) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ (i (i vectoru_sub v3) v1)) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_add (i (i realu_pow (i (i realu_sub (i (i realu_mul (i (i d_ (i (i vectoru_sub v2) v1)) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ (i (i vectoru_sub v3) v1)) (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i (i d_ (i (i vectoru_sub v2) v1)) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i vectoru_sub v3) v1)) (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i realu_sub (i (i realu_mul (i (i d_ (i (i vectoru_sub v2) v1)) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i vectoru_sub v3) v1)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i d_ (i (i vectoru_sub v2) v1)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ (i (i vectoru_sub v3) v1)) (i NUMERAL (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i (i cm3u_upsu_x v1) v2) v3))
(rule (i (i realu_mul (i (i (i (i azim v0) v1) v2) v3)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div (i (i realu_pow r) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i (i (i (i volu_ballu_wedge v0) v1) v2) v3) r))
(rule (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_pow (i cos x)) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i cos x))) (i cos (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))) x)))
(rule (i (i t_ (i (i EXP m) p)) (i (i EXP n) p)) (i (i EXP (i (i t_ m) n)) p))
(rule (i (i vectoru_sub (i (i complexu_mul x) y)) (i (i complexu_mul x) z)) (i (i complexu_mul x) (i (i vectoru_sub y) z)))
(rule (i (i c_ (i CARD (i (i setu_ofu_trianglesu_meetingu_node H) x))) (i (i c_ (i CARD (i (i setu_ofu_quadrilateralsu_meetingu_node H) x))) (i CARD (i (i setu_ofu_exceptionalu_meetingu_node H) x)))) (i (i typeu_ofu_node H) x))
(rule (i (i l_a_u_c s0) UNIV) (i COUNTABLE s0))
(rule (i (i (i COND b) (i (i d_ x) i0)) (i (i d_ y) i0)) (i (i d_ (i (i (i COND b) x) y)) i0))
(rule (i (i realu_add (i Im x)) (i Im y)) (i Im (i (i vectoru_add x) y)))
(rule (i angle (i (i c_ (i (i vectoru_add a) b)) (i (i c_ (i (i vectoru_add a) c)) (i (i vectoru_add a) d)))) (i angle (i (i c_ b) (i (i c_ c) d))))
(rule (i (i s_b_ (i (i l_ (i LENGTH ul)) (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0)))))) (i (i s_b_ (i (i SUBSET (i setu_ofu_list ul)) V)) (i (i a_ (i (i intu_add (i affu_dim (i (i voronoiu_list V) ul))) (i intu_ofu_num (i LENGTH ul)))) (i intu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))))) (i (i voronoiu_nondg V) ul))
(rule (i (i DIFF (i (i DIFF s0) t)) t) (i (i DIFF s0) t))
(rule (i pathfinish (i (i o f) p)) (i f (i pathfinish p)))
(rule (i (i s_b_ (i w_ (i (i a_ a) b))) (i (i a_ (i distance (i (i c_ a) x))) (i distance (i (i c_ b) x)))) (i (i (i eu_plane a) b) x))
(rule (i (i r_ (i vectoru_norm v)) (i normalize v)) v)
(rule (i (i complexu_div (i (i vectoru_sub z) (i clog (i cexp z)))) (i (i complexu_mul (i Cx (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) ii)) (i unwinding z))
(rule (i ccos (i vectoru_neg z)) (i ccos z))
(rule (i (i s_b_ (i (i l_a_ m) (i (i p_ n) p))) (i (i l_a_ n) (i (i p_ m) p))) (i (i l_a_ (i dist (i (i c_ m) n))) p))
(rule (i (i realu_sub (i (i realu_mul (i (i dot w) y)) (i (i dot x) z))) (i (i realu_mul (i (i dot w) z)) (i (i dot x) y))) (i (i dot (i (i cross w) x)) (i (i cross y) z)))
(rule (i angle (i (i c_ x) (i (i c_ (i vec (i NUMERAL u_0))) y))) (i (i vectoru_angle x) y))
(rule (i (i b_s_ (i (i a_ x) (i Cx (i realu_ofu_num (i NUMERAL u_0))))) (i (i a_ y) (i Cx (i realu_ofu_num (i NUMERAL u_0))))) (i (i a_ (i (i complexu_mul x) y)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i a_ (i (i r_ (i vectoru_norm (i (i vectoru_sub x) a))) (i (i vectoru_sub b) x))) (i (i r_ (i vectoru_norm (i (i vectoru_sub b) x))) (i (i vectoru_sub x) a))) (i (i between x) (i (i c_ a) b)))
(rule (i (i continuous (i (i o Cx) (i (i o f) Re))) (i (i within (i at (i Cx x))) real0)) (i (i realu_continuous f) (i atreal x)))
(rule (i (i realu_add (i trace A0)) (i trace B0)) (i trace (i (i matrixu_add A0) B0)))
(rule (i (i (i (i azimu_cycle (i (i INSERT v) EMPTY)) x) u) v) v)
(rule (i (i complexu_mul ii) (i Cx (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i clog ii))
(rule (i (i (i COND (i (i IN x) (i dart1u_ofu_fan (i (i c_ V) E)))) (i (i nu_fanu_pair (i (i c_ V) E)) x)) x) (i (i nu_fanu_pairu_ext (i (i c_ V) E)) x))
(rule (i (i matrixu_add A0) (i matrixu_neg B0)) (i (i matrixu_sub A0) B0))
(rule (i (i IN v) (i ball (i (i c_ (i Cx (i realu_ofu_num (i NUMERAL u_0)))) r))) (i (i realu_lt (i vectoru_norm v)) r))
(rule (i (i complexu_mul (i (i complexu_pow (i vectoru_neg (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) n)) z) (i (i rotate2d (i (i realu_mul (i realu_ofu_num n)) pi)) z))
(rule (i det (i vector (i (i CONS a) (i (i CONS b) (i (i CONS c) NIL))))) (i (i (i detu_vec3 a) b) c))
(rule (i (i setu_ofu_trianglesu_meetingu_node (i oppositeu_hypermap H)) x) (i (i setu_ofu_trianglesu_meetingu_node H) x))
(rule (i (i (i bnu_isu_pru_Iso phi) (i setu_ofu_list fs1)) (i setu_ofu_list fs2)) (i (i (i bnu_isu_pru_iso phi) fs1) fs2))
(rule (i dist (i (i c_ n) (i NUMERAL u_0))) n)
(rule (i (i UNION (i setu_ofu_list l1)) (i setu_ofu_list l2)) (i setu_ofu_list (i (i APPEND l1) l2)))
(rule (i tan (i (i realu_sub (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) x)) (i realu_inv (i tan x)))
(rule (i (i s_b_ (i w_ (i (i IN x) s0))) (i (i SUBSET s0) t)) (i (i SUBSET s0) (i (i DELETE t) x)))
(rule (i (i s_b_ (i (i IN x) s0)) (i w_ (i (i a_ x) (i CHOICE s0)))) (i (i IN x) (i REST s0)))
(rule (i (i MAP (i SND p)) (i LISTu_TO (i FST p))) (i bnu_tabulate0 p))
(rule (i (i s_b_ (i (i realu_integrableu_on f) s0)) (i (i a_ (i (i realu_integral s0) f)) i0)) (i (i (i hasu_realu_integral f) i0) s0))
(rule (i (i s_b_ (i (i l_ (i NUMERAL u_0)) m)) (i (i l_ (i NUMERAL u_0)) n)) (i (i l_ (i NUMERAL u_0)) (i (i t_ m) n)))
(rule (i nabs (i intu_neg (i intu_ofu_num n))) n)
(rule (i tan (i (i realu_add x) (i (i realu_mul (i realu_ofu_num n)) pi))) (i tan x))
(rule (i (i b_s_ (i (i s_b_ p) q)) (i (i s_b_ p) r)) (i (i s_b_ p) (i (i b_s_ q) r)))
(rule (i (i l_a_ (i SUC m)) n) (i (i l_ m) n))
(rule (i (i realu_mul (i lfun (i (i realu_div (i sqrt x1)) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) (i (i (i (i (i (i dihu_xu_135u_s2 x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i ldihu_xu_135u_s2 x1) x2) x3) x4) x5) x6))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Im (i (i complexu_mul a) (i cnj b)))) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Im (i (i complexu_div a) b))))
(rule (i (i a_ (i vectoru_norm (i (i vectoru_add x) y))) (i (i realu_add (i vectoru_norm x)) (i vectoru_norm y))) (i (i a_ (i (i r_ (i vectoru_norm x)) y)) (i (i r_ (i vectoru_norm y)) x)))
(rule (i (i UNION (i inside s0)) (i outside s0)) (i (i DIFF UNIV) s0))
(rule (i hypermap0 (i (i c_ (i (i UNION (i (i supportu_list p) k)) (i (i supportu_list q) k))) (i (i c_ (i (i (i cycu_emap p) q) k)) (i (i c_ (i (i (i cycu_nmap p) q) k)) (i (i (i cycu_fmap p) q) k))))) (i (i (i cyclicu_hypermap p) q) k))
(rule (i (i UNION (i (i EE v) E)) (i (i EE v) S)) (i (i EE v) (i (i UNION E) S)))
(rule (i (i a_ (i closure s0)) EMPTY) (i (i a_ s0) EMPTY))
(rule (i setdist (i (i c_ (i (i INSERT x) EMPTY)) (i (i INSERT y) EMPTY))) (i distance (i (i c_ x) y)))
(rule (i (i realu_add (i realu_ofu_num m)) (i realu_ofu_num n)) (i realu_ofu_num (i (i p_ m) n)))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i sin x)) (i cos x))) (i sin (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x)))
(rule (i rotate5 ldihu_xu_divu_sqrtdeltau_posbranch) ldih5u_xu_divu_sqrtdeltau_posbranch)
(rule (i (i s_b_ (i (i a_ (i (i dot e1) e1)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i a_ (i (i dot e2) e2)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i a_ (i (i dot e3) e3)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i a_ (i (i dot e1) e2)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i s_b_ (i (i a_ (i (i dot e1) e3)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i s_b_ (i (i a_ (i (i dot e2) e3)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i dot (i (i cross e1) e2)) e3)))))))) (i (i (i orthonormal e1) e2) e3))
(rule (i (i a_ (i (i matrixu_mul A0) (i transp A0))) (i mat (i NUMERAL (i BIT1 u_0)))) (i orthogonalu_matrix A0))
(rule (i (i a_ (i (i hull convex) s0)) s0) (i convex s0))
(rule (i SUC (i BIT0 n)) (i BIT1 n))
(rule (i (i realu_le (i realu_abs (i (i realu_sub x) f))) eps) (i (i (i intervalu_eps x) f) eps))
(rule (i (i s_b_ (i (i l_a_ m) p)) (i (i l_a_ p) n)) (i (i IN p) (i (i o_o_ m) n)))
(rule (i (i INTER (i from k)) (i (i o_o_ (i NUMERAL u_0)) n)) (i (i o_o_ k) n))
(rule (i (i rotate2d (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi)) z) z)
(rule (i (i s_b_ (i (i faceu_of e) s0)) (i (i a_ (i affu_dim e)) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i edgeu_of e) s0))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i sin (i (i realu_div (i (i realu_add x) y)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i sin (i (i realu_div (i (i realu_sub y) x)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_sub (i cos x)) (i cos y)))
(rule (i (i c_ (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i (i c_ (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ x) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i vectoru_tou_pair x))
(rule (i (i pathu_component (i (i pathu_component s0) x)) x) (i (i pathu_component s0) x))
(rule (i (i DIFF (i closedu_realu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i INSERT a) (i (i INSERT b) EMPTY))) (i openu_realu_interval (i (i c_ a) b)))
(rule (i (i INTER (i inside s0)) (i outside s0)) EMPTY)
(rule (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi)) (i (i (i (i azim x) v) u) w)) (i (i (i (i azim1 x) v) u) w))
(rule (i (i realu_mul (i (i realu_div (i (i realu_add (i exp (i Im z))) (i exp (i realu_neg (i Im z))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i sin (i Re z))) (i Re (i csin z)))
(rule (i (i s_b_ (i w_ (i (i IN u) (i aff (i (i INSERT x) (i (i INSERT v) EMPTY)))))) (i w_ (i (i a_ x) v))) (i w_ (i collinear (i (i INSERT x) (i (i INSERT u) (i (i INSERT v) EMPTY))))))
(rule (i (i m_m_g_ (i (i o Cx) s0)) (i Cx l)) (i (i m_m_m_g_ s0) l))
(rule (i (i a_ (i INDu_SUC x1)) (i INDu_SUC x2)) (i (i a_ x1) x2))
(rule (i minu_num (i setu_ofu_list xs)) (i bnu_minu_list xs))
(rule (i (i a_ (i (i hull convex) s0)) EMPTY) (i (i a_ s0) EMPTY))
(rule (i det (i transp A0)) (i det A0))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i atn2 (i (i c_ (i sqrt (i (i realu_mul (i (i realu_add c) b)) (i (i realu_add b) a)))) (i sqrt (i (i realu_mul (i (i realu_sub c) b)) (i (i realu_sub b) a)))))) (i (i (i solR a) b) c))
(rule (i (i a_a_g_ p) (i (i (i hasu_realu_derivative f) fi_) (i (i within (i atreal x)) s0))) (i (i (i (i (i derivedu_form p) f) fi_) x) s0))
(rule (i (i s_b_ (i packing s0)) (i (i IN v) s0)) (i (i centeredu_pac s0) v))
(rule (i UNIONS (i (i INSERT (i (i INSERT v) (i (i INSERT w) EMPTY))) EMPTY)) (i (i INSERT v) (i (i INSERT w) EMPTY)))
(rule (i (i vectoru_sub (i (i complexu_mul (i csin w)) (i ccos z))) (i (i complexu_mul (i ccos w)) (i csin z))) (i csin (i (i vectoru_sub w) z)))
(rule (i (i realu_div (i vectoru_norm w)) (i vectoru_norm z)) (i vectoru_norm (i (i complexu_div w) z)))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i cos (i (i realu_div (i (i realu_add x) y)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i cos (i (i realu_div (i (i realu_sub x) y)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_add (i cos x)) (i cos y)))
(rule (i (i realu_add (i (i realu_mul (i realu_neg x12)) (i (i realu_pow x34) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_add (i (i realu_mul (i (i realu_add (i (i realu_mul (i realu_neg x13)) x14)) (i (i realu_add (i (i realu_mul (i realu_neg x23)) x24)) (i (i realu_add (i (i realu_mul x13) x24)) (i (i realu_add (i (i realu_mul x14) x23)) (i (i realu_add (i (i realu_mul (i realu_neg x12)) x12)) (i (i realu_add (i (i realu_mul x12) x14)) (i (i realu_add (i (i realu_mul x12) x24)) (i (i realu_add (i (i realu_mul x12) x13)) (i (i realu_mul x12) x23)))))))))) x34)) (i (i realu_add (i (i realu_mul (i (i realu_mul x14) x23)) x12)) (i (i realu_add (i (i realu_mul (i (i realu_mul x14) x23)) x13)) (i (i realu_add (i (i realu_mul (i (i realu_mul (i realu_neg x14)) x23)) x14)) (i (i realu_add (i (i realu_mul (i (i realu_mul (i realu_neg x14)) x23)) x23)) (i (i realu_add (i (i realu_mul (i (i realu_mul x14) x23)) x24)) (i (i realu_add (i (i realu_mul (i (i realu_mul (i realu_neg x12)) x13)) x23)) (i (i realu_add (i (i realu_mul (i (i realu_mul (i realu_neg x12)) x14)) x24)) (i (i realu_add (i (i realu_mul (i (i realu_mul x13) x24)) x12)) (i (i realu_add (i (i realu_mul (i (i realu_mul (i realu_neg x13)) x24)) x13)) (i (i realu_add (i (i realu_mul (i (i realu_mul x13) x24)) x14)) (i (i realu_add (i (i realu_mul (i (i realu_mul x13) x24)) x23)) (i (i realu_mul (i (i realu_mul (i realu_neg x13)) x24)) x24)))))))))))))) (i (i (i (i (i (i delta x12) x13) x14) x23) x24) x34))
(rule (i (i realu_max (i realu_ofu_int x)) (i realu_ofu_int y)) (i realu_ofu_int (i (i intu_max x) y)))
(rule (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) (i intu_neg x)) (i (i intu_le x) (i intu_ofu_num (i NUMERAL u_0))))
(rule (i (i (i COND (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i (i COND (i (i realu_gt x) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_div (i atn (i sqrt x))) (i sqrt x))) (i (i realu_div (i log (i (i realu_div (i (i realu_add (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i sqrt (i realu_neg x)))) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i sqrt (i realu_neg x)))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i sqrt (i realu_neg x)))))) (i matan x))
(rule (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i acs (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0)))))))) pi) sol0)
(rule (i (i s_b_ (i realu_bounded s0)) (i realu_bounded t)) (i realu_bounded (i (i UNION s0) t)))
(rule (i Re (i cacs (i Cx x))) (i acs x))
(rule (i (i a_ (i (i realu_pow (i vectoru_norm (i (i cross (i (i vectoru_sub v2) v1)) (i (i vectoru_sub v3) v1)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL u_0))) (i collinear (i (i INSERT v1) (i (i INSERT v2) (i (i INSERT v3) EMPTY)))))
(rule (i vector (i (i CONS (i (i realu_sub (i (i realu_mul (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_mul (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i CONS (i (i realu_sub (i (i realu_mul (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i (i d_ a) (i NUMERAL (i BIT1 u_0)))) (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i CONS (i (i realu_sub (i (i realu_mul (i (i d_ a) (i NUMERAL (i BIT1 u_0)))) (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT1 u_0)))))) NIL)))) (i (i cross a) b))
(rule (i (i realu_sub (i (i realu_pow (i cos x)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i sin x)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i cos (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x)))
(rule (i topspace (i (i subtopology euclidean) s0)) s0)
(rule (i (i realu_mul x) (i realu_inv y)) (i (i realu_div x) y))
(rule (i (i b_s_ (i (i a_ n) (i NUMERAL u_0))) (i (i b_s_ (i (i a_ n) (i NUMERAL (i BIT1 u_0)))) (i (i a_ n) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i l_a_ n) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i (i POWER (i faceu_map H)) (i CARD (i (i face H) x))) x) x)
(rule (i (i a_ (i (i INTER s0) t)) EMPTY) (i (i DISJOINT s0) t))
(rule (i fstcart (i vec n)) (i vec n))
(rule (i (i realu_mul (i (i (i (i azim v0) v1) v2) v3)) (i (i realu_mul (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) c)) (i (i realu_div (i (i realu_pow r) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i (i (i (i (i volu_conicu_capu_wedge v0) v1) v2) v3) r) c))
(rule (i mku_real (i trealu_eq (i trealu_ofu_num m))) (i realu_ofu_num m))
(rule (i (i vectoru_add (i (i r_ c) x)) (i (i r_ c) y)) (i (i r_ c) (i (i vectoru_add x) y)))
(rule (i hypermap0 (i (i c_ (i dart H)) (i (i c_ (i (i o (i faceu_map H)) (i nodeu_map H))) (i (i c_ (i inverse (i nodeu_map H))) (i inverse (i faceu_map H)))))) (i oppositeu_hypermap H))
(rule (i shift (i shift (i (i (i doubleu_edgeu_walkup (i shift H)) x) y))) (i (i (i doubleu_nodeu_walkup H) x) y))
(rule (i (i (i m_m_g_ (i (i o f) Re)) a) (i (i within (i at (i Cx x))) (i (i INTER real0) (i (i IMAGE Cx) s0)))) (i (i (i m_m_g_ f) a) (i (i within (i atreal x)) s0)))
(rule (i (i realu_add (i (i realu_sub (i (i realu_mul (i realu_neg x2)) x3)) (i (i realu_mul x1) x4))) (i (i realu_add (i (i realu_mul x2) x5)) (i (i realu_add (i (i realu_sub (i (i realu_mul x3) x6)) (i (i realu_mul x5) x6))) (i (i realu_mul x1) (i (i realu_add (i realu_neg x1)) (i (i realu_add x2) (i (i realu_add (i (i realu_sub x3) x4)) (i (i realu_add x5) x6)))))))) (i (i (i (i (i (i deltau_x4 x1) x2) x3) x4) x5) x6))
(rule (i shift (i (i (i doubleu_edgeu_walkup (i shift (i shift H))) x) y)) (i (i (i doubleu_faceu_walkup H) x) y))
(rule (i (i a_ (i det A0)) (i realu_ofu_num (i NUMERAL u_0))) (i (i l_ (i rank A0)) (i dimindex UNIV)))
(rule (i realu_neg (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i realu_neg (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))))))))) betau_bumpu_lb)
(rule (i (i DIFF UNIV) (i interior (i (i DIFF UNIV) s0))) (i closure s0))
(rule (i (i complexu_div (i (i vectoru_add (i cexp (i (i complexu_mul ii) z))) (i cexp (i (i complexu_mul (i vectoru_neg ii)) z)))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i ccos z))
(rule (i FST (i (i c_ x) y)) x)
(rule (i binom (i (i c_ n) (i NUMERAL (i BIT1 u_0)))) n)
(rule (i LENGTH (i (i CONS a) (i (i CONS b) (i (i CONS c) NIL)))) (i NUMERAL (i BIT1 (i BIT1 u_0))))
(rule (i RC (i RC R)) (i RC R))
(rule (i (i realu_mul (i t (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul (i t (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i t (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i product (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) t))
(rule (i (i product (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i NUMERAL (i BIT1 u_0)))) f) (i f (i NUMERAL (i BIT1 u_0))))
(rule (i (i (i bnu_isu_Iso phi) (i setu_ofu_list fs1)) (i setu_ofu_list fs2)) (i (i (i bnu_isu_iso phi) fs1) fs2))
(rule (i (i a_ (i (i realu_pow (i sqrt x)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) x) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i (i COND (i (i a_ x) (i NUMERAL u_0))) (i (i a_ (i (i a_ m) (i NUMERAL u_0))) (i (i a_ n) (i NUMERAL u_0)))) (i (i b_s_ (i (i a_ x) (i NUMERAL (i BIT1 u_0)))) (i (i a_ m) n))) (i (i a_ (i (i EXP x) m)) (i (i EXP x) n)))
(rule (i (i s_b_ (i (i SUBSET a) b)) (i (i SUBSET b) a)) (i (i a_ a) b))
(rule (i (i (i (i (i (i (i taumu_y1u_y2 a) (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i (i taumu_x1u_x2 a) x1) x2) x3) x4) x5) x6))
(rule (i collinear (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT v) (i (i INSERT (i (i cross v) w)) EMPTY)))) (i collinear (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT v) (i (i INSERT w) EMPTY)))))
(rule (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_div mm1) pi))) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) pi))) (i lmfun (i (i realu_div y) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i gcy y))
(rule (i (i ITER (i NUMERAL (i BIT1 u_0))) f) f)
(rule (i (i (i (i (i (i proju_y6 x1) x2) x3) x4) x5) x6) (i sqrt x6))
(rule (i (i (i (i (i (i proju_y5 x1) x2) x3) x4) x5) x6) (i sqrt x5))
(rule (i (i (i (i (i (i proju_y4 x1) x2) x3) x4) x5) x6) (i sqrt x4))
(rule (i (i (i (i (i (i proju_y3 x1) x2) x3) x4) x5) x6) (i sqrt x3))
(rule (i (i (i (i (i (i proju_y2 x1) x2) x3) x4) x5) x6) (i sqrt x2))
(rule (i (i (i (i (i (i proju_y1 x1) x2) x3) x4) x5) x6) (i sqrt x1))
(rule (i (i realu_mul (i rho y3)) (i (i (i (i (i (i dih3u_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i rhazim3 y1) y2) y3) y4) y5) y6))
(rule (i (i (i (i (i (i proju_x6 x1) x2) x3) x4) x5) x6) x6)
(rule (i (i (i (i (i (i proju_x5 x1) x2) x3) x4) x5) x6) x5)
(rule (i (i (i (i (i (i proju_x4 x1) x2) x3) x4) x5) x6) x4)
(rule (i (i (i (i (i (i proju_x3 x1) x2) x3) x4) x5) x6) x3)
(rule (i (i (i (i (i (i proju_x2 x1) x2) x3) x4) x5) x6) x2)
(rule (i (i (i (i (i (i proju_x1 x1) x2) x3) x4) x5) x6) x1)
(rule (i complexu_inv (i (i complexu_div w) z)) (i (i complexu_div z) w))
(rule (i (i a_ (i (i nodeu_map H) x)) (i (i nodeu_map H) y)) (i (i a_ x) y))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y4) sqrt8))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y5) sqrt8))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i apexfA y1) y2) y3) y4) y5) y6))
(rule (i realu_neg (i (i realu_max (i realu_neg x)) (i realu_neg y))) (i (i realu_min x) y))
(rule (i (i a_ (i (i hull conic) s0)) EMPTY) (i (i a_ s0) EMPTY))
(rule (i (i IMAGE I) s0) s0)
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y6) sqrt8))) NIL)))))) (i (i (i (i (i (i apexf5 y1) y2) y3) y4) y5) y6))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ sqrt8) (i (i c_ y4) sqrt8))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y6) sqrt8))) NIL)))))) (i (i (i (i (i (i apexf4 y1) y2) y3) y4) y5) y6))
(rule (i (i realu_lt (i Im (i (i complexu_mul a) (i cnj b)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_lt (i Im (i (i complexu_div a) b))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i (i arcV (i (i vectoru_add a) b)) (i (i vectoru_add a) c)) (i (i vectoru_add a) d)) (i (i (i arcV b) c) d))
(rule (i (i closedu_in (i (i subtopology top) u)) u) (i (i SUBSET u) (i topspace top)))
(rule (i (i r_ (i realu_inv (i vectoru_norm v))) v) (i normalize v))
(rule (i (i (i (i (i (i (i rotate3 lmdihu_xu_divu_sqrtdeltau_posbranch) x1) x2) x3) x4) x5) x6) (i (i (i (i (i (i lmdih3u_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6))
(rule (i matvec (i vecmats A0)) A0)
(rule (i closure (i (i voronoiu_open S) v)) (i (i voronoiu_closed S) v))
(rule (i (i (i (i (i (i rhazim3 (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i rhazim3u_x x1) x2) x3) x4) x5) x6))
(rule (i (i intu_mul (i intu_ofu_num (i NUMERAL u_0))) x) (i intu_ofu_num (i NUMERAL u_0)))
(rule (i rank (i transp A0)) (i rank A0))
(rule (i realu_ofu_num (i NUMERAL u_0)) (i neutral realu_add))
(rule (i (i realu_sub (i (i (i (i (i (i (i truncateu_vol3ru_456 d) x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i (i (i (i (i truncateu_vol3f d) m4) m5) m6) x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i (i (i (i (i truncateu_gamma3fu_x d) m4) m5) m6) x1) x2) x3) x4) x5) x6))
(rule (i (i realu_le (i Im (i complexu_inv z))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Im z)))
(rule (i clog (i vectoru_neg (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i (i complexu_mul ii) (i Cx pi)))
(rule (i (i UNION (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i (i UNION (i closedu_segment (i (i CONS (i (i c_ b) c)) NIL))) (i closedu_segment (i (i CONS (i (i c_ c) a)) NIL)))) (i frontier (i (i hull convex) (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY))))))
(rule (i (i affu_ge (i (i DIFF s0) t)) t) (i (i affu_ge s0) t))
(rule (i (i realu_pow x) (i NUMERAL (i BIT1 u_0))) x)
(rule (i realu_abs pi) pi)
(rule (i (i complexu_div (i (i complexu_pow x) n)) (i (i complexu_pow y) n)) (i (i complexu_pow (i (i complexu_div x) y)) n))
(rule (i (i realu_add (i (i realu_mul (i (i (i upsu_x x12) x13) x23)) (i (i realu_pow x45) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_add (i (i realu_mul (i (i (i (i (i (i (i (i (i (i cayleytr x12) x13) x14) x15) x23) x24) x25) x34) x35) (i realu_ofu_num (i NUMERAL u_0)))) x45)) (i (i (i (i (i (i (i (i (i (i cayleyR x12) x13) x14) x15) x23) x24) x25) x34) x35) (i realu_ofu_num (i NUMERAL u_0))))) (i (i (i (i (i (i (i (i (i (i cayleyR x12) x13) x14) x15) x23) x24) x25) x34) x35) x45))
(rule (i (i realu_add (i (i realu_mul (i det (i vector (i (i CONS y1) (i (i CONS x2) (i (i CONS x3) NIL)))))) (i det (i vector (i (i CONS x1) (i (i CONS y2) (i (i CONS y3) NIL))))))) (i (i realu_add (i (i realu_mul (i det (i vector (i (i CONS y2) (i (i CONS x2) (i (i CONS x3) NIL)))))) (i det (i vector (i (i CONS y1) (i (i CONS x1) (i (i CONS y3) NIL))))))) (i (i realu_mul (i det (i vector (i (i CONS y3) (i (i CONS x2) (i (i CONS x3) NIL)))))) (i det (i vector (i (i CONS y1) (i (i CONS y2) (i (i CONS x1) NIL)))))))) (i (i realu_mul (i det (i vector (i (i CONS x1) (i (i CONS x2) (i (i CONS x3) NIL)))))) (i det (i vector (i (i CONS y1) (i (i CONS y2) (i (i CONS y3) NIL)))))))
(rule (i (i realu_add (i (i realu_mul (i det (i vector (i (i CONS y1) (i (i CONS x2) NIL))))) (i det (i vector (i (i CONS x1) (i (i CONS y2) NIL)))))) (i (i realu_mul (i det (i vector (i (i CONS y2) (i (i CONS x2) NIL))))) (i det (i vector (i (i CONS y1) (i (i CONS x1) NIL)))))) (i (i realu_mul (i det (i vector (i (i CONS x1) (i (i CONS x2) NIL))))) (i det (i vector (i (i CONS y1) (i (i CONS y2) NIL))))))
(rule (i (i vectoru_add (i ccos (i (i complexu_mul (i Cx (i realu_ofu_num n))) z))) (i (i complexu_mul ii) (i csin (i (i complexu_mul (i Cx (i realu_ofu_num n))) z)))) (i (i complexu_pow (i (i vectoru_add (i ccos z)) (i (i complexu_mul ii) (i csin z)))) n))
(rule (i (i s_b_ (i (i dartu_nondegenerate H) x)) (i (i IN (i (i faceu_map H) x)) (i (i node H) x))) (i (i isu_nodeu_split H) x))
(rule (i (i realu_le (i Re (i (i complexu_mul a) (i cnj b)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_le (i Re (i (i complexu_div a) b))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i s_b_ (i (i a_ (i dartu_of L)) (i dartu_of Li_))) (i (i a_ (i next L)) (i next Li_))) (i (i a_ L) Li_))
(rule (i (i within (i at x)) UNIV) (i at x))
(rule (i sin (i (i realu_mul (i realu_ofu_num n)) pi)) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i realu_add (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul (i realu_inv (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i realu_inv pi)) (i (i realu_mul sol0) (i (i realu_sub y) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i rhou_fun y))
(rule (i (i s_b_ (i (i IN v) V)) (i (i s_b_ (i (i IN w) V)) (i (i s_b_ (i w_ (i (i a_ v) w))) (i (i realu_le (i distance (i (i c_ v) w))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))))))) (i (i IN (i (i INSERT v) (i (i INSERT w) EMPTY))) (i ESTD V)))
(rule (i (i a_ (i intu_neg x)) (i intu_neg y)) (i (i a_ x) y))
(rule (i (i (i (i (i (i (i compose6 f) proju_x1) two6) proju_x3) two6) proju_x5) two6) (i mku_135 f))
(rule (i (i a_ (i (i hrealu_add m) p)) (i (i hrealu_add n) p)) (i (i a_ m) n))
(rule (i vectoru_norm (i cnj z)) (i vectoru_norm z))
(rule (i (i s_b_ (i packing s0)) (i (i s_b_ (i (i SUBSET (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) (i (i INSERT d) EMPTY))))) s0)) (i w_ (i (i b_s_ (i (i a_ a) b)) (i (i b_s_ (i (i a_ a) c)) (i (i b_s_ (i (i a_ a) d)) (i (i b_s_ (i (i a_ b) c)) (i (i b_s_ (i (i a_ b) d)) (i (i a_ c) d))))))))) (i (i geomdetaili_simplex (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) (i (i INSERT d) EMPTY))))) s0))
(rule (i (i hull convex) UNIV) UNIV)
(rule (i (i b_s_ (i rotationu_matrix Q)) (i rotoinversionu_matrix Q)) (i orthogonalu_matrix Q))
(rule (i (i (i (i (i (i (i compose6 f) proju_x1) proju_x2) two6) two6) two6) proju_x6) (i mku_126 f))
(rule (i (i realu_mul (i (i realu_sub (i (i realu_sub (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i dihu_y y1) y2) sqrt2) sqrt2) sqrt2) y6))) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))))) (i (i realu_div (i (i realu_sub (i (i vol2r y1) sqrt2)) (i (i realu_sub (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul pi) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_div y1) (i (i realu_mul sqrt2) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))))) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) pi))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul pi) (i lfun (i (i realu_div y1) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) (i (i (i (i (i (i gamma3fu_vLu_lfun y1) y2) y3) y4) y5) y6))
(rule (i integer (i realu_abs x)) (i integer x))
(rule (i (i a_ (i (i dot (i (i vectoru_sub x) a)) (i (i vectoru_sub b) x))) (i (i realu_mul (i vectoru_norm (i (i vectoru_sub x) a))) (i vectoru_norm (i (i vectoru_sub b) x)))) (i (i between x) (i (i c_ a) b)))
(rule (i measure (i aff (i (i INSERT x) (i (i INSERT v) (i (i INSERT u) EMPTY))))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y5) sqrt8))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y6) sqrt8))) NIL)))))) (i (i (i (i (i (i apexu_A y1) y2) y3) y4) y5) y6))
(rule (i (i (i ITLIST f) l1) (i (i (i ITLIST f) l2) a)) (i (i (i ITLIST f) (i (i APPEND l1) l2)) a))
(rule (i complex (i (i c_ (i realu_neg (i Re z))) (i realu_neg (i Im z)))) (i vectoru_neg z))
(rule (i (i complexu_div (i Cx x)) (i Cx y)) (i Cx (i (i realu_div x) y)))
(rule (i realu_abs (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i (i homotopicu_loops s0) (i linepath (i (i c_ a) a))) (i linepath (i (i c_ b) b))) (i (i (i pathu_component s0) a) b))
(rule (i (i b_s_ (i (i l_ i0) k)) (i (i a_ i0) k)) (i (i l_ i0) (i SUC k)))
(rule (i (i realu_div (i sqrt (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i cos (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 (i BIT1 u_0))))))))
(rule (i (i PASSOC f) (i (i c_ x) (i (i c_ y) z))) (i f (i (i c_ (i (i c_ x) y)) z)))
(rule (i (i (i hasu_realu_integral f) (i (i realu_integral s0) f)) s0) (i (i realu_integrableu_on f) s0))
(rule (i realu_lebesgueu_measurable (i (i DIFF UNIV) s0)) (i realu_lebesgueu_measurable s0))
(rule (i (i vectoru_add (i Cx x)) (i (i complexu_mul ii) (i Cx y))) (i complex (i (i c_ x) y)))
(rule (i cos (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i vectoru_add (i (i cross x) z)) (i (i cross y) z)) (i (i cross (i (i vectoru_add x) y)) z))
(rule (i complex (i (i c_ (i (i realu_sub (i (i realu_mul (i Re w)) (i Re z))) (i (i realu_mul (i Im w)) (i Im z)))) (i (i realu_add (i (i realu_mul (i Re w)) (i Im z))) (i (i realu_mul (i Im w)) (i Re z))))) (i (i complexu_mul w) z))
(rule (i (i l_ (i (i p_ m) p)) (i (i p_ n) p)) (i (i l_ m) n))
(rule (i lebesgueu_measurable (i (i IMAGE lift) s0)) (i realu_lebesgueu_measurable s0))
(rule (i (i complexu_div (i (i vectoru_sub (i csin (i (i vectoru_add w) z))) (i csin (i (i vectoru_sub w) z)))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i ccos w)) (i csin z)))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) x)) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i realu_mul x) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) (i affu_dim s0)) (i w_ (i (i a_ s0) EMPTY)))
(rule (i (i (i (i ivsu_azimu_cycle EMPTY) x) y) t) t)
(rule (i (i b_s_ (i ODD m)) (i (i a_ n) (i NUMERAL u_0))) (i ODD (i (i EXP m) n)))
(rule (i (i s_b_ (i (i SUBSET s0) t)) (i w_ (i (i a_ s0) t))) (i (i PSUBSET s0) t))
(rule (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i vectoru_norm (i (i vectoru_sub v) w)))) (i (i realu_le (i vectoru_norm (i (i vectoru_sub v) w))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0))) (i (i standard v) w))
(rule (i (i hrealu_le (i hrealu_ofu_num m)) (i hrealu_ofu_num n)) (i (i l_a_ m) n))
(rule (i (i (i (i (i (i (i compose6 deltau_x) proju_x1) proju_x2) proju_x6) four6) four6) (i constant6 (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))))))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0)))))))))))))))))) deltau_pentu_x)
(rule (i complex (i (i c_ a) (i realu_ofu_num (i NUMERAL u_0)))) (i Cx a))
(rule (i (i s_b_ (i (i a_a_g_ c) (i P x))) (i (i a_a_g_ (i w_ c)) (i P y))) (i P (i (i (i COND c) x) y)))
(rule (i (i s_b_ (i (i bnu_separated2 g) V)) (i (i bnu_separated3 g) V)) (i (i bnu_separated g) V))
(rule (i (i o (i inverse (i (i fmap H) NF))) (i inverse (i (i nmap H) NF))) (i (i emap H) NF))
(rule (i (i mul6 proju_x1) (i uni (i (i c_ asn) (i (i mul6 (i constant6 cos797)) (i uni (i (i c_ sin) (i (i div6 (i constant6 pi)) proju_x1))))))) asn797k)
(rule (i (i s_b_ (i (i a_ (i Re w)) (i Re z))) (i (i a_ (i Im w)) (i Im z))) (i (i a_ w) z))
(rule (i UNIONS (i setu_ofu_cube (i (i hinhcau x) r))) (i (i unionu_ofu_cube x) r))
(rule (i CARD (i setu_ofu_components H)) (i numberu_ofu_components H))
(rule (i dist (i (i c_ (i (i t_ m) n)) (i (i t_ m) p))) (i (i t_ m) (i dist (i (i c_ n) p))))
(rule (i (i a_ (i cball (i (i c_ x) e))) (i (i INSERT x) EMPTY)) (i (i a_ e) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i complexu_div (i cnj z)) (i (i complexu_pow (i Cx (i vectoru_norm z))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i complexu_inv z))
(rule (i (i hrealu_le (i mku_hreal (i naddu_eq x))) (i mku_hreal (i naddu_eq y))) (i (i naddu_le x) y))
(rule (i (i a_ (i (i matrixu_mul (i transp Q)) Q)) (i mat (i NUMERAL (i BIT1 u_0)))) (i orthogonalu_matrix Q))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i atn (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) pi)
(rule (i (i (i sums f) (i (i infsum s0) f)) s0) (i (i summable s0) f))
(rule (i (i hull convex) EMPTY) EMPTY)
(rule (i (i a_ (i lift x)) (i lift y)) (i (i a_ x) y))
(rule (i (i a_ (i intu_neg (i intu_ofu_num n))) (i intu_ofu_num (i NUMERAL u_0))) (i (i a_ n) (i NUMERAL u_0)))
(rule (i (i realu_mul (i rho y2)) (i (i (i (i (i (i dih2u_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i rhazim2 y1) y2) y3) y4) y5) y6))
(rule (i (i INTER (i (i (i (i (i (i wedge3u_fan x) V) E) v) u) i0)) (i aff (i (i INSERT x) (i (i INSERT v) EMPTY)))) EMPTY)
(rule (i relativeu_interior (i (i hull affine) s0)) (i (i hull affine) s0))
(rule (i (i integral (i closedu_interval (i (i CONS (i (i c_ a) a)) NIL))) f) (i vec (i NUMERAL u_0)))
(rule (i (i a_ (i (i IMAGE f) s0)) EMPTY) (i (i a_ s0) EMPTY))
(rule (i atn2 (i (i c_ x) y)) (i (i atn2curry x) y))
(rule (i (i a_ (i (i vectoru_add x) y)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ x) (i vectoru_neg y)))
(rule (i shift (i shift (i shift H))) H)
(rule (i (i realu_lt (i (i realu_add x) y)) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_lt x) (i realu_neg y)))
(rule (i sqrt (i (i realu_mul (i (i realu_pow (i vectoru_norm vc)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_sub (i (i realu_pow (i (i realu_mul (i vectoru_norm va)) (i vectoru_norm vc))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i dot va) vc)) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i vectoru_norm vc)) (i sqrt (i (i realu_sub (i (i realu_pow (i (i realu_mul (i vectoru_norm va)) (i vectoru_norm vc))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i dot va) vc)) (i NUMERAL (i BIT0 (i BIT1 u_0))))))))
(rule (i (i (i m_m_m_g_ f) (i f x)) (i (i within (i atreal x)) s0)) (i (i realu_continuous f) (i (i within (i atreal x)) s0)))
(rule (i (i s_b_ (i w_ (i (i a_ v) w))) (i w_ (i (i IN (i (i INSERT v) (i (i INSERT w) EMPTY))) E))) (i (i (i diagonal0 E) v) w))
(rule (i (i b_s_ (i (i a_ y) (i (i faceu_map H) x))) (i (i a_ y) (i (i inverse (i nodeu_map H)) x))) (i (i (i oneu_stepu_contour H) x) y))
(rule (i (i (i COND (i (i l_a_ k) n)) (i (i realu_div (i realu_ofu_num (i FACT n))) (i (i realu_mul (i realu_ofu_num (i FACT (i (i m_ n) k)))) (i realu_ofu_num (i FACT k))))) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i binom (i (i c_ n) k))))
(rule (i (i a_ (i hrealu_ofu_num m)) (i hrealu_ofu_num n)) (i (i a_ m) n))
(rule (i (i (i (i (i (i eulerAu_x x1) x2) x3) x4) x5) (i (i (i (i (i (i edgeu_flat2u_x x12) x1) x2) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i euleru_1flatu_x x1) x2) x3) x4) x5) x12))
(rule (i (i DISJOINT (i (i connectedu_component s0) a)) (i (i connectedu_component s0) b)) (i w_ (i (i IN a) (i (i connectedu_component s0) b))))
(rule (i (i naddu_le (i (i naddu_add x) y)) (i (i naddu_add x) z)) (i (i naddu_le y) z))
(rule (i (i (i COND (i (i a_ i0) (i CARD (i (i (i setu_ofu_edge v) V) E)))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi)) (i (i (i (i azim x) v) u) (i (i (i (i (i (i (i poweru_mapu_points sigmau_fan) x) V) E) v) u) i0))) (i (i (i (i (i (i ifu_azimsu_fan x) V) E) v) u) i0))
(rule (i (i m_ (i (i t_ m) n)) (i (i t_ m) p)) (i (i t_ m) (i (i m_ n) p)))
(rule (i w_ (i (i a_ (i (i combu_component (i (i edgeu_walkup H) x)) (i (i nodeu_map H) x))) (i (i combu_component (i (i edgeu_walkup H) x)) (i (i inverse (i edgeu_map H)) x)))) (i (i isu_splittingu_component H) x))
(rule (i rconesgn realu_gt) rconeu_gt)
(rule (i (i a_ (i (i cross (i (i vectoru_sub y) x)) (i (i vectoru_sub z) x))) (i vec (i NUMERAL u_0))) (i collinear (i (i INSERT x) (i (i INSERT y) (i (i INSERT z) EMPTY)))))
(rule (i (i realu_add (i (i realu_mul (i cos w)) (i cos z))) (i (i realu_mul (i sin w)) (i sin z))) (i cos (i (i realu_sub w) z)))
(rule (i bnu_sub1 (i (i c_ xs) n)) (i (i EL n) xs))
(rule (i (i (i bnu_isu_Hom phi) (i setu_ofu_list fs1)) (i setu_ofu_list fs2)) (i (i (i bnu_isu_hom phi) fs1) fs2))
(rule (i rconesgn realu_ge) rconeu_ge)
(rule (i (i complexu_mul (i cexp (i (i complexu_mul ii) (i Cx t)))) z) (i (i rotate2d t) z))
(rule (i (i realu_div (i (i realu_add (i realu_neg b)) (i sqrt (i (i realu_sub (i (i realu_pow b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul a) c)))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) a)) (i quadraticu_rootu_plus (i (i c_ a) (i (i c_ b) c))))
(rule (i (i a_ (i vectoru_norm (i normize u))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i w_ (i (i a_ u) (i vec (i NUMERAL u_0)))))
(rule (i (i a_ x) x) T)
(rule (i (i (i (i (i (i rhazim2 (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i rhazim2u_x x1) x2) x3) x4) x5) x6))
(rule (i (i s_b_ (i (i dartu_nondegenerate H) x)) (i (i IN (i (i edgeu_map H) x)) (i (i face H) x))) (i (i isu_faceu_split H) x))
(rule (i rconesgn a_) rconeu_eq)
(rule (i (i m_ (i (i p_ m) n)) (i (i p_ m) p)) (i (i m_ n) p))
(rule (i COUNTABLE (i (i INSERT x) s0)) (i COUNTABLE s0))
(rule (i (i equiintegrableu_on (i (i INSERT f) EMPTY)) (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i integrableu_on f) (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))))
(rule (i det (i vector (i (i CONS x) (i (i CONS y) (i (i CONS z) NIL))))) (i (i dot x) (i (i cross y) z)))
(rule (i COUNTABLE (i (i DELETE s0) x)) (i COUNTABLE s0))
(rule (i (i s_b_ (i (i realu_le (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0)) (i vectoru_norm (i (i vectoru_sub v) w)))) (i (i realu_le (i vectoru_norm (i (i vectoru_sub v) w))) (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))))) (i (i protracted v) w))
(rule (i (i IN x) (i (i hull convex) (i (i INSERT a) (i (i INSERT b) EMPTY)))) (i (i between x) (i (i c_ a) b)))
(rule (i (i s_b_ (i (i IN a) s0)) (i (i s_b_ (i (i IN b) s0)) (i (i IN c) s0))) (i (i SUBSET (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY)))) s0))
(rule (i hrealu_inv (i hrealu_ofu_num (i NUMERAL u_0))) (i hrealu_ofu_num (i NUMERAL u_0)))
(rule (i (i (i COND (i w_ (i (i a_ i0) q))) (i (i fu_sy s0) i0)) p) (i (i (i (i flu_sy s0) p) q) i0))
(rule (i (i a_ (i content (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_le (i drop b)) (i drop a)))
(rule (i (i s_b_ (i (i convexu_on f) s0)) (i convex s0)) (i convex (i (i epigraph s0) f)))
(rule (i (i (i (i (i (i (i (i taumu_y2 a) b) (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i (i (i taumu_x2 a) b) x1) x2) x3) x4) x5) x6))
(rule (i (i (i (i (i (i (i (i taumu_y1 a) b) (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i (i (i taumu_x1 a) b) x1) x2) x3) x4) x5) x6))
(rule (i (i b_s_ (i (i a_ x) a)) (i (i b_s_ (i (i a_ x) b)) (i (i b_s_ (i (i a_ x) c)) (i (i a_ x) d)))) (i (i IN x) (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) (i (i INSERT d) EMPTY))))))
(rule (i (i s_b_ (i bnu_tame9a g)) (i (i s_b_ (i bnu_tame10 g)) (i (i s_b_ (i bnu_tame11a g)) (i (i s_b_ (i bnu_tame11b g)) (i (i s_b_ (i bnu_tame12o g)) (i bnu_tame13a g)))))) (i bnu_tame g))
(rule (i (i b_s_ (i (i a_ x) a)) (i (i b_s_ (i (i a_ x) b)) (i (i a_ x) c))) (i (i IN x) (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY)))))
(rule (i (i a_ n) (i intu_neg (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i simplex n) EMPTY))
(rule (i (i (i POWER (i edgeu_map H)) i0) x) (i (i (i edgeu_path H) x) i0))
(rule (i det (i mat (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i (i COND (i (i a_ t) NIL)) h) (i LAST t)) (i LAST (i (i CONS h) t)))
(rule (i (i mul6 (i uni (i (i c_ rho) proju_y1))) dihu_xu_divu_sqrtdeltau_posbranch) rhazimu_xu_divu_sqrtdeltau_posbranch)
(rule (i (i realu_add (i (i realu_mul (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i realu_add (i (i realu_mul (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0)))))) (i (i realu_sub (i (i realu_sub (i (i realu_sub (i (i realu_mul (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i realu_mul (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_mul (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i NUMERAL (i BIT1 (i BIT1 u_0)))))))) (i (i realu_mul (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i realu_mul (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0)))))))) (i det A0))
(rule (i (i realu_sub (i (i realu_mul (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0))))) (i det A0))
(rule (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0))) (i det A0))
(rule (i det (i mat (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i DIFF (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i INSERT a) (i (i INSERT b) EMPTY))) (i openu_interval (i (i c_ a) b)))
(rule (i closure (i closure s0)) (i closure s0))
(rule (i (i realu_mul (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i realu_mul a) b)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i (i COND (i (i IN x) t)) (i (i INSERT x) (i (i INTER s0) t))) (i (i INTER s0) t)) (i (i INTER (i (i INSERT x) s0)) t))
(rule (i distance (i (i c_ v) w)) (i (i d3 v) w))
(rule (i realu_ofu_num (i NUMERAL (i BIT1 u_0))) (i Im ii))
(rule (i (i b_s_ (i (i realu_le a) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_ge (i (i dot x) x)) (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_ge (i vectoru_norm x)) a))
(rule (i (i vectoru_add (i (i vectoru_sub a) b)) (i (i vectoru_sub b) c)) (i (i vectoru_sub a) c))
(rule (i sin (i (i realu_sub pi) x)) (i sin x))
(rule (i (i (i (i (i (i gamma3fu_vLu_n0 (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i gamma3fu_vLu_xu_n0 x1) x2) x3) x4) x5) x6))
(rule (i (i (i COND (i (i b_s_ (i w_ (i (i IN u) (i (i dartsu_ofu_hyp E) V)))) (i (i IN u) (i (i selfu_pairs E) V)))) u) (i (i c_ (i SND u)) (i (i (i (i ivsu_azimu_cycle (i (i EE (i SND u)) E)) x) (i SND u)) (i FST u)))) (i (i ffu_ofu_hyp (i (i c_ x) (i (i c_ V) E))) u))
(rule (i (i (i COND (i (i IN u) (i (i dartsu_ofu_hyp E) V))) (i (i c_ (i SND u)) (i (i (i (i ivsu_azimu_cycle (i (i EE (i SND u)) E)) x) (i SND u)) (i FST u)))) u) (i (i ffu_ofu_hyp (i (i c_ x) (i (i c_ V) E))) u))
(rule (i from (i NUMERAL u_0)) UNIV)
(rule (i (i complexu_mul (i (i complexu_div ii) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i clog (i (i complexu_div (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))) (i (i vectoru_add (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))))) (i catn z))
(rule (i (i IN x) (i (i supportu_list p) n)) (i (i (i inu_list p) n) x))
(rule (i (i a_ (i destu_nadd (i mku_nadd r))) r) (i isu_nadd r))
(rule (i (i a_ (i det (i vector (i (i CONS (i (i vectoru_sub v1) v0)) (i (i CONS (i (i vectoru_sub v2) v0)) (i (i CONS (i (i vectoru_sub v3) v0)) NIL)))))) (i realu_ofu_num (i NUMERAL u_0))) (i coplanaru_alt (i (i INSERT v0) (i (i INSERT v1) (i (i INSERT v2) (i (i INSERT v3) EMPTY))))))
(rule (i linepath (i (i c_ (i g a)) (i g a))) (i (i (i subpath a) a) g))
(rule (i constant6 (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) four6)
(rule (i (i complexu_mul (i vectoru_neg ii)) (i clog (i (i vectoru_add (i (i complexu_mul ii) z)) (i csqrt (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_pow z) (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i casn z))
(rule (i topspace euclidean) UNIV)
(rule (i (i (i (i join p) q) n) (i (i p_ n) (i SUC i0))) (i q i0))
(rule (i (i vectoru_add (i (i r_ (i (i realu_mul (i vectoru_norm x)) (i (i realu_mul (i cos (i (i realu_mul (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) t)) (i (i (i (i azim (i vec (i NUMERAL u_0))) e3) e1) x)))) (i sin (i (i (i arcV (i vec (i NUMERAL u_0))) e3) x))))) e1)) (i (i vectoru_add (i (i r_ (i (i realu_mul (i vectoru_norm x)) (i (i realu_mul (i sin (i (i realu_mul (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) t)) (i (i (i (i azim (i vec (i NUMERAL u_0))) e3) e1) x)))) (i sin (i (i (i arcV (i vec (i NUMERAL u_0))) e3) x))))) e2)) (i (i r_ (i (i realu_mul (i vectoru_norm x)) (i cos (i (i (i arcV (i vec (i NUMERAL u_0))) e3) x)))) e3))) (i (i (i lunaru_deform (i (i c_ e1) (i (i c_ e2) e3))) t) x))
(rule (i cos (i (i realu_add x) (i (i realu_mul (i realu_ofu_int n)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi)))) (i cos x))
(rule (i sin (i (i realu_sub (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) x)) (i cos x))
(rule (i (i b_s_ (i (i a_ u) (i Cx (i realu_ofu_num (i NUMERAL u_0))))) (i (i a_ v) (i Cx (i realu_ofu_num (i NUMERAL u_0))))) (i (i a_ (i (i complexu_div u) v)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i (i COND (i (i a_ (i (i (i (i azim v) w) a) b)) (i realu_ofu_num (i NUMERAL u_0)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi)) (i (i (i (i azim v) w) a) b))) (i (i (i (i azim v) w) b) a))
(rule (i (i realu_div (i sqrt (i (i (i (i (i (i deltau_x (i (i realu_pow (i distance (i (i c_ x1) x2))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ x1) x3))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ x1) x4))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ x3) x4))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ x2) x4))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ x2) x3))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))) (i measure (i (i hull convex) (i (i INSERT x1) (i (i INSERT x2) (i (i INSERT x3) (i (i INSERT x4) EMPTY)))))))
(rule (i (i leftu_actionu_list I) ul) ul)
(rule (i (i vectoru_add (i Cx (i realu_ofu_num (i NUMERAL u_0)))) x) x)
(rule (i (i a_ (i (i hull affine) s0)) (i (i INSERT a) EMPTY)) (i (i a_ s0) (i (i INSERT a) EMPTY)))
(rule (i (i (i COND (i (i IN x) t)) (i (i UNION s0) t)) (i (i INSERT x) (i (i UNION s0) t))) (i (i UNION (i (i INSERT x) s0)) t))
(rule (i vector (i (i CONS (i (i realu_mul r) (i cos (i (i realu_add t) s0)))) (i (i CONS (i (i realu_mul r) (i sin (i (i realu_add t) s0)))) NIL))) (i (i rotate2d t) (i vector (i (i CONS (i (i realu_mul r) (i cos s0))) (i (i CONS (i (i realu_mul r) (i sin s0))) NIL)))))
(rule (i (i IMAGE g) (i closedu_segment (i (i CONS (i (i c_ u) v)) NIL))) (i pathu_image (i (i (i subpath u) v) g)))
(rule (i (i matrixu_add (i (i r_r_ b) A0)) (i (i r_r_ c) A0)) (i (i r_r_ (i (i realu_add b) c)) A0))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) x) x)
(rule (i (i vectoru_sub (i fstcart x)) (i fstcart y)) (i fstcart (i (i vectoru_sub x) y)))
(rule (i (i (i COND (i (i realu_lt (i realu_abs y)) x)) (i atn (i (i realu_div y) x))) (i (i (i COND (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) y)) (i (i realu_sub (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i atn (i (i realu_div x) y)))) (i (i (i COND (i (i realu_lt y) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_sub (i realu_neg (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i atn (i (i realu_div x) y)))) pi))) (i atn2 (i (i c_ x) y)))
(rule (i (i vectoru_add (i (i r_ (i (i realu_mul r) (i (i realu_mul (i cos theta)) (i sin phi)))) e1)) (i (i vectoru_add (i (i r_ (i (i realu_mul r) (i (i realu_mul (i sin theta)) (i sin phi)))) e2)) (i (i r_ (i (i realu_mul r) (i cos phi))) e3))) (i (i sphericalu_map (i (i c_ e1) (i (i c_ e2) e3))) (i (i c_ r) (i (i c_ theta) phi))))
(rule (i trivialu_limit (i (i within (i at (i lift x))) (i (i IMAGE lift) s0))) (i trivialu_limit (i (i within (i atreal x)) s0)))
(rule (i (i a_ (i setu_ofu_list l)) EMPTY) (i (i a_ l) NIL))
(rule (i (i UNION (i aff (i (i INSERT x) (i (i INSERT v) EMPTY)))) (i complementu_set (i (i INSERT x) (i (i INSERT v) EMPTY)))) UNIV)
(rule (i sndcart (i vec n)) (i vec n))
(rule (i (i s_b_ (i (i a_ (i (i realu_mul a) (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) a))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_ (i (i realu_mul (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) a)) a)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i w_ (i (i a_ a) (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i Arg (i Cx (i realu_ofu_num n))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i res f) EMPTY) I)
(rule (i vectoru_norm (i cexp (i (i complexu_mul ii) (i Cx t)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i mul6 proju_x1) (i (i mul6 proju_x1) proju_x1)) x1cube)
(rule (i constant6 (i realu_ofu_num (i NUMERAL u_0))) dummy6)
(rule (i (i p_ (i LENGTH l)) (i LENGTH m)) (i LENGTH (i (i APPEND l) m)))
(rule (i (i (i COND (i (i a_ (i (i MOD i0) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i MOD j) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL u_0))) (i (i (i COND (i (i IN (i (i INSERT (i (i MOD i0) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i INSERT (i (i MOD j) (i NUMERAL (i BIT1 (i BIT1 u_0))))) EMPTY))) J)) cstab) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0))) (i (i bu_ear0 J) (i (i c_ i0) j)))
(rule (i (i (i (i (i (i (i (i (i deltau_135u_x x2s) x4s) x6s) x1) x2) x3) x4) x5) x6) (i (i (i (i (i (i deltau_x x1) x2s) x3) x4s) x5) x6s))
(rule (i (i a_ (i vectoru_neg x)) (i vectoru_neg y)) (i (i a_ x) y))
(rule (i maxu_num (i setu_ofu_list xs)) (i bnu_maxu_list xs))
(rule (i FST (i SND (i SND (i SND (i SND (i SND (i tupleu_stableu_sy s0))))))) (i Ju_SY s0))
(rule (i (i a_ (i (i INTER (i frontier s0)) s0)) EMPTY) (i open s0))
(rule (i (i a_ (i EVEN m)) (i EVEN n)) (i EVEN (i (i p_ m) n)))
(rule (i (i b_s_ (i (i a_ a) b)) (i (i b_s_ (i (i a_ a) (i vec (i NUMERAL u_0)))) (i (i a_ b) (i vec (i NUMERAL u_0))))) (i (i s_b_ (i (i polaru_le a) b)) (i (i polaru_le b) a)))
(rule (i (i (i omegau_listu_n V) ul) (i (i m_ (i LENGTH ul)) (i NUMERAL (i BIT1 u_0)))) (i (i omegau_list V) ul))
(rule (i (i FILTER bnu_finalu_face) (i bnu_faces g)) (i bnu_finals g))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i dart4u_diag3 y1) y2) y3) y4) y5) y6))
(rule (i (i realu_add (i (i realu_pow (i distance (i (i c_ u) v))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_sub (i (i realu_pow (i distance (i (i c_ u) w))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i distance (i (i c_ u) v))) (i (i realu_mul (i distance (i (i c_ u) w))) (i cos (i (i (i arcV u) v) w))))))) (i (i realu_pow (i distance (i (i c_ v) w))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i realu_add (i (i realu_sub x) y)) y) x)
(rule (i (i realu_sub (i (i realu_add (i (i realu_pow (i distance (i (i c_ A0) B0))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ A0) C))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i distance (i (i c_ A0) B0))) (i (i realu_mul (i distance (i (i c_ A0) C))) (i cos (i angle (i (i c_ B0) (i (i c_ A0) C)))))))) (i (i realu_pow (i distance (i (i c_ B0) C))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i atn (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i rotate6 ldihu_xu_divu_sqrtdeltau_posbranch) ldih6u_xu_divu_sqrtdeltau_posbranch)
(rule (i (i realu_lt (i sin (i (i (i (i azim x) y) u) v))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_lt pi) (i (i (i (i azim x) y) u) v)))
(rule (i (i (i COND (i (i realu_le h) (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i marchalu_quartic h)) (i realu_ofu_num (i NUMERAL u_0))) (i marchal h))
(rule (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_sub h0) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) rh0)
(rule (i (i (i (i (i (i (i (i (i deltau_234u_x x1s) x5s) x6s) x1) x2) x3) x4) x5) x6) (i (i (i (i (i (i deltau_x x1s) x2) x3) x4) x5s) x6s))
(rule (i (i (i COND (i (i IN a) (i (i hull affine) s0))) (i affu_dim s0)) (i (i intu_add (i affu_dim s0)) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i affu_dim (i (i INSERT a) s0)))
(rule (i topology0 realu_open) euclideanreal)
(rule (i (i nsum (i (i INSERT x) EMPTY)) f) (i f x))
(rule (i (i hull P) (i (i UNION (i (i hull P) s0)) (i (i hull P) t))) (i (i hull P) (i (i UNION s0) t)))
(rule (i (i (i hasu_complexu_derivative (i (i o Cx) (i (i o f) Re))) (i Cx fi_)) (i (i within (i at (i Cx a))) real0)) (i (i (i hasu_realu_derivative f) fi_) (i atreal a)))
(rule (i vectoru_norm (i complex (i (i c_ (i cos t)) (i sin t)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i (i COND (i (i a_ k) (i (i p_ n) (i NUMERAL (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul (i (i realu_div (i (i realu_add (i realu_ofu_num n)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_add (i realu_ofu_num n)) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num k))))) (i realu_ofu_num (i binom (i (i c_ n) k))))) (i realu_ofu_num (i binom (i (i c_ (i (i p_ n) (i NUMERAL (i BIT1 u_0)))) k))))
(rule (i (i UNION (i (i IMAGE f) s0)) (i (i IMAGE f) t)) (i (i IMAGE f) (i (i UNION s0) t)))
(rule (i (i setu_ofu_orbits (i dart H)) (i faceu_map H)) (i faceu_set H))
(rule (i NUMERAL (i BIT1 (i BIT1 u_0))) (i dimindex UNIV))
(rule (i NUMERAL (i BIT0 (i BIT1 u_0))) (i dimindex UNIV))
(rule (i NUMERAL (i BIT1 u_0)) (i dimindex UNIV))
(rule (i (i rotate2d pi) z) (i vectoru_neg z))
(rule (i (i setu_ofu_orbits (i dart H)) (i nodeu_map H)) (i nodeu_set H))
(rule (i (i o (i (i POWER f) m)) (i (i POWER f) n)) (i (i POWER f) (i (i p_ m) n)))
(rule (i (i b_s_ (i (i a_ (i (i vectoru_angle x) y)) (i (i vectoru_angle w) z))) (i (i a_ (i (i vectoru_angle x) y)) (i (i realu_sub pi) (i (i vectoru_angle w) z)))) (i (i a_ (i sin (i (i vectoru_angle x) y))) (i sin (i (i vectoru_angle w) z))))
(rule (i supportu_darts (i faceu_collection H)) (i dart H))
(rule (i compact (i (i IMAGE lift) s0)) (i realu_compact s0))
(rule (i (i s_b_ (i (i a_ s0) EMPTY)) (i (i a_ t) EMPTY)) (i (i a_ (i (i UNION s0) t)) EMPTY))
(rule (i (i realu_lt (i floor x)) x) (i w_ (i integer x)))
(rule (i hypermap0 (i (i c_ (i dart H)) (i (i c_ (i nodeu_map H)) (i (i c_ (i faceu_map H)) (i edgeu_map H))))) (i shift H))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i dartu_std3u_bigu_200u_218 y1) y2) y3) y4) y5) y6))
(rule (i dist (i (i c_ (i (i p_ m) n)) m)) n)
(rule (i matrixu_neg (i mat (i NUMERAL u_0))) (i mat (i NUMERAL u_0)))
(rule (i (i b_s_ (i (i a_ x) (i NUMERAL (i BIT1 u_0)))) (i (i a_ n) (i NUMERAL u_0))) (i (i a_ (i (i EXP x) n)) (i NUMERAL (i BIT1 u_0))))
(rule (i (i s_b_ (i (i SUBSET (i Ju_SY s1)) (i (i UNION (i Ju_SY s0)) (i (i INSERT (i (i INSERT p) (i (i INSERT q) EMPTY))) EMPTY)))) (i (i SUBSET (i Ju_SY s2)) (i (i UNION (i Ju_SY s0)) (i (i INSERT (i (i INSERT p) (i (i INSERT q) EMPTY))) EMPTY)))) (i (i (i (i (i COVER3u_SY p) q) s0) s1) s2))
(rule (i (i s_b_ (i (i a_ m) (i NUMERAL u_0))) (i w_ (i (i a_ n) (i NUMERAL u_0)))) (i (i a_ (i (i EXP m) n)) (i NUMERAL u_0)))
(rule (i rows (i transp A0)) (i columns A0))
(rule (i numu_ofu_int (i intu_gcd (i (i c_ (i intu_ofu_num a)) (i intu_ofu_num b)))) (i numu_gcd (i (i c_ a) b)))
(rule (i (i vectoru_add (i (i cross x) (i (i cross y) z))) (i (i vectoru_add (i (i cross y) (i (i cross z) x))) (i (i cross z) (i (i cross x) y)))) (i vec (i NUMERAL u_0)))
(rule (i sqrt (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i (i COND (i (i a_ n) (i NUMERAL u_0))) (i catn z)) (i (i complexu_mul (i Cx (i realu_ofu_num (i FACT (i (i m_ n) (i NUMERAL (i BIT1 u_0))))))) (i (i complexu_mul (i complexu_inv (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i vectoru_add (i (i complexu_mul (i (i complexu_pow (i vectoru_neg ii)) (i (i m_ n) (i NUMERAL (i BIT1 u_0))))) (i (i complexu_pow (i complexu_inv (i (i vectoru_add (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z)))) n))) (i (i complexu_mul (i (i complexu_pow ii) (i (i m_ n) (i NUMERAL (i BIT1 u_0))))) (i (i complexu_pow (i complexu_inv (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z)))) n)))))) (i (i tayloru_coeffu_catn n) z))
(rule (i (i o (i swap (i (i c_ a) b))) (i swap (i (i c_ a) b))) I)
(rule (i (i realu_add (i (i realu_sub (i (i realu_mul (i realu_neg x1)) x2)) (i (i realu_mul x3) x6))) (i (i realu_add (i (i realu_mul x1) x4)) (i (i realu_add (i (i realu_sub (i (i realu_mul x2) x5)) (i (i realu_mul x4) x5))) (i (i realu_mul x3) (i (i realu_add (i realu_neg x3)) (i (i realu_add x1) (i (i realu_add (i (i realu_sub x2) x6)) (i (i realu_add x4) x5)))))))) (i (i (i (i (i (i deltau_x6 x1) x2) x3) x4) x5) x6))
(rule (i exp (i (i realu_mul (i realu_ofu_num n)) x)) (i (i realu_pow (i exp x)) n))
(rule (i (i sub6 (i (i scalar6 (i (i add6 (i mku_456 (i rotate5 solu_x))) (i (i add6 (i mku_456 (i rotate6 solu_x))) (i mku_456 (i rotate4 solu_x))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi)))) (i (i scalar6 (i (i add6 (i (i mul6 (i (i scalar6 (i uni (i (i c_ lfun) (i (i scalar6 proju_y4) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))))) m4)) (i mku_456 (i rotate4 dihu_x)))) (i (i add6 (i (i mul6 (i uni (i (i c_ lfun) (i (i scalar6 proju_y5) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))))) (i mku_456 (i rotate5 dihu_x)))) (i (i mul6 (i uni (i (i c_ lfun) (i (i scalar6 proju_y6) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))))) (i mku_456 (i rotate6 dihu_x)))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) pi)))) (i vol3fu_456 m4))
(rule (i (i IN x) (i cball (i (i c_ (i vec (i NUMERAL u_0))) e))) (i (i realu_le (i vectoru_norm x)) e))
(rule (i (i realu_div (i (i realu_sub h0) h)) (i (i realu_sub h0) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i lfun h))
(rule (i (i realu_add (i (i realu_pow (i distance (i (i c_ b) a))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i vectoru_norm (i (i cross (i (i vectoru_sub b) a)) (i (i vectoru_sub c) a)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ (i (i vectoru_add a) (i (i cross (i (i vectoru_sub b) a)) (i (i vectoru_sub c) a)))) b))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i s_b_ (i (i l_a_u_c s0) t)) (i (i l_a_u_c t) s0)) (i (i a_u_c s0) t))
(rule (i (i complexu_mul (i vectoru_neg ii)) (i clog (i (i vectoru_add z) (i (i complexu_mul ii) (i csqrt (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_pow z) (i NUMERAL (i BIT0 (i BIT1 u_0)))))))))) (i cacs z))
(rule (i (i b_s_ (i (i IN u) (i aff (i (i INSERT x) (i (i INSERT v) EMPTY))))) (i (i a_ x) v)) (i collinear (i (i INSERT x) (i (i INSERT v) (i (i INSERT u) EMPTY)))))
(rule (i (i matrixu_sub (i (i r_r_ c) A0)) (i (i r_r_ c) B0)) (i (i r_r_ c) (i (i matrixu_sub A0) B0)))
(rule (i (i measurableu_on (i (i o Cx) (i (i o f) drop))) (i (i IMAGE lift) s0)) (i (i realu_measurableu_on f) s0))
(rule (i (i realu_add (i (i realu_div (i (i (i (i (i gamma3f y1) y2) y6) r) f)) (i realu_ofu_num w1))) (i (i realu_add (i (i realu_div (i (i (i (i (i gamma3f y1) y3) y5) r) f)) (i realu_ofu_num w2))) (i (i realu_mul (i (i realu_sub (i (i realu_sub (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i dihu_y y1) y2) r) r) r) y6))) (i (i (i (i (i (i dihu_y y1) y3) r) r) r) y5))) (i (i realu_div (i (i realu_sub (i (i vol2r y1) r)) (i (i (i vol2f y1) r) f))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))))) (i (i (i (i (i (i (i (i (i (i gamma23f y1) y2) y3) y4) y5) y6) w1) w2) r) f))
(rule (i (i s_b_ (i (i a_ m) (i NUMERAL (i BIT1 u_0)))) (i (i a_ n) (i NUMERAL (i BIT1 u_0)))) (i (i a_ (i (i t_ m) n)) (i NUMERAL (i BIT1 u_0))))
(rule (i (i realu_mul (i (i (i (i (i (i f x1) x2) x3) x4) x5) x6)) unit0) (i (i (i (i (i (i f x1) x2) x3) x4) x5) x6))
(rule (i (i b_s_ (i (i a_ m) (i NUMERAL u_0))) (i (i a_ n) (i NUMERAL u_0))) (i (i a_ (i (i t_ m) n)) (i NUMERAL u_0)))
(rule (i (i a_ (i (i realu_pow (i (i dot x) y)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i (i dot x) x)) (i (i dot y) y))) (i collinear (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT x) (i (i INSERT y) EMPTY)))))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i dot x) x)) (i w_ (i (i a_ x) (i vec (i NUMERAL u_0)))))
(rule (i (i hull convex) s0) (i convu_trg s0))
(rule (i (i a_ (i LENGTH l)) (i NUMERAL u_0)) (i (i a_ l) NIL))
(rule (i uni (i (i c_ acs) (i (i scalar6 proju_y1) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) acsu_sqrtu_x1u_d4)
(rule (i vector (i (i CONS (i (i realu_mul (i (i d_ t) (i NUMERAL (i BIT1 u_0)))) (i (i d_ u) (i NUMERAL (i BIT1 u_0))))) (i (i CONS (i (i realu_mul (i (i d_ t) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ u) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i CONS (i (i realu_mul (i (i d_ t) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ u) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) NIL)))) (i (i scale t) u))
(rule (i (i (i omegau_listu_n V) (i (i CONS u0) (i (i CONS u1) NIL))) (i NUMERAL (i BIT1 u_0))) (i (i omegau_list V) (i (i CONS u0) (i (i CONS u1) NIL))))
(rule (i (i (i omegau_listu_n V) (i (i CONS u0) (i (i CONS u1) (i (i CONS u2) NIL)))) (i NUMERAL (i BIT1 u_0))) (i (i omegau_list V) (i (i CONS u0) (i (i CONS u1) NIL))))
(rule (i (i a_ (i floor x)) x) (i integer x))
(rule (i dim (i (i INSERT (i vec (i NUMERAL u_0))) s0)) (i dim s0))
(rule (i (i (i hasu_integral f) y) (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i (i hasu_integral f) y) (i openu_interval (i (i c_ a) b))))
(rule (i UNIONS (i (i IMAGE (i IMAGE f)) s0)) (i (i IMAGE f) (i UNIONS s0)))
(rule (i (i b_s_ (i (i a_ y) (i (i edgeu_map H) x))) (i (i b_s_ (i (i a_ y) (i (i nodeu_map H) x))) (i (i a_ y) (i (i faceu_map H) x)))) (i (i (i gou_oneu_step H) x) y))
(rule (i (i realu_add (i (i realu_sub a) b)) (i (i realu_sub b) c)) (i (i realu_sub a) c))
(rule (i (i intu_pow (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) n) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i subtopology top) (i topspace top)) top)
(rule (i (i a_ (i intu_ofu_num n)) (i intu_ofu_num (i NUMERAL u_0))) (i (i a_ n) (i NUMERAL u_0)))
(rule (i (i realu_mul (i du_tame n)) tableu_multiplier) (i realu_ofu_num (i bnu_squanderFace n)))
(rule (i SND (i tupleu_loop L)) (i next L))
(rule (i (i realu_add (i (i realu_mul y) (i (i realu_mul const1) (i (i realu_mul rh0) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))))) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul const1) rh0))) (i rho y))
(rule (i (i a_ (i (i rotate2d t) x)) (i (i rotate2d t) y)) (i (i a_ x) y))
(rule (i (i realu_mul sol0) (i (i realu_div (i (i realu_sub y) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0))) (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i flatu_term y))
(rule (i (i hrealu_le (i (i hrealu_add m) p)) (i (i hrealu_add n) p)) (i (i hrealu_le m) n))
(rule (i (i naddu_le (i naddu_ofu_num m)) (i naddu_ofu_num n)) (i (i l_a_ m) n))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i dot (i (i vectoru_sub u) v)) (i (i vectoru_sub x) (i (i r_ (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i vectoru_add u) v))))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i dot (i (i vectoru_sub u) v)) (i (i vectoru_sub (i (i r_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x)) (i (i vectoru_add u) v)))))
(rule (i (i realu_lt (i realu_neg x)) (i realu_neg y)) (i (i realu_lt y) x))
(rule (i (i truncateu_simplex (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i (i CONS a) (i (i CONS b) (i (i CONS c) (i (i CONS d) NIL))))) (i (i CONS a) (i (i CONS b) (i (i CONS c) (i (i CONS d) NIL)))))
(rule (i (i (i COND (i FINITE (i (i (i support op) f) s0))) (i (i (i iterate op) (i (i (i support op) f) s0)) f)) (i neutral op)) (i (i (i iterate op) s0) f))
(rule (i (i intu_add (i (i intu_mul x) z)) (i (i intu_mul y) z)) (i (i intu_mul (i (i intu_add x) y)) z))
(rule (i (i realu_add (i (i (i (i (i (i f x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i g x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i (i (i add6 f) g) x1) x2) x3) x4) x5) x6))
(rule (i (i integrableu_on (i (i o lift) (i (i o f) drop))) (i (i IMAGE lift) s0)) (i (i realu_integrableu_on f) s0))
(rule (i (i pairwise r) (i (i INSERT x) EMPTY)) T)
(rule (i inside (i (i UNION (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i (i UNION (i closedu_segment (i (i CONS (i (i c_ b) c)) NIL))) (i closedu_segment (i (i CONS (i (i c_ c) a)) NIL))))) (i interior (i (i hull convex) (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY))))))
(rule (i (i realu_mul (i marchalu_quartic (i (i realu_div (i sqrt x6)) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) (i (i (i (i (i (i dih6u_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i mardih6u_x x1) x2) x3) x4) x5) x6))
(rule (i (i MAP f) (i (i FILTER (i (i o P) f)) l)) (i (i FILTER P) (i (i MAP f) l)))
(rule (i (i dropout (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i pad2d3d x)) x)
(rule (i (i s_b_ (i bounded s0)) (i closed s0)) (i compact s0))
(rule (i I x) x)
(rule (i (i realu_pow (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i t_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) n)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i r_r_ (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) X) X)
(rule (i (i IN (i (i eeu_ofu_hyp (i (i c_ x) (i (i c_ V) E))) v)) (i (i dartsu_ofu_hyp E) V)) (i (i IN v) (i (i dartsu_ofu_hyp E) V)))
(rule (i (i (i COND (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x)) x) (i realu_neg x)) (i realu_abs x))
(rule (i (i s_b_ (i (i realu_le x) y)) (i w_ (i (i a_ x) y))) (i (i realu_lt x) y))
(rule (i (i hrealu_mul (i hrealu_ofu_num (i NUMERAL u_0))) m) (i hrealu_ofu_num (i NUMERAL u_0)))
(rule (i (i connectedu_component (i (i connectedu_component s0) x)) x) (i (i connectedu_component s0) x))
(rule (i (i realu_add (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul const1) (i (i realu_div (i (i realu_sub y) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i rho y))
(rule (i collinear (i (i hull affine) s0)) (i collinear s0))
(rule (i (i b_s_ (i (i intu_lt x) z)) (i (i intu_lt y) z)) (i (i intu_lt (i (i intu_min x) y)) z))
(rule (i (i naddu_eq (i naddu_ofu_num m)) (i naddu_ofu_num n)) (i (i a_ m) n))
(rule (i FST (i tupleu_hypermap H)) (i dart H))
(rule (i (i a_ (i (i hull conic) s0)) s0) (i conic s0))
(rule (i (i vectoru_sub (i pad2d3d x)) (i pad2d3d y)) (i pad2d3d (i (i vectoru_sub x) y)))
(rule (i (i APPEND (i REVERSE m)) (i REVERSE l)) (i REVERSE (i (i APPEND l) m)))
(rule (i (i b_s_ (i (i intu_le x) z)) (i (i intu_le y) z)) (i (i intu_le (i (i intu_min x) y)) z))
(rule (i reversepath (i linepath (i (i c_ a) b))) (i linepath (i (i c_ b) a)))
(rule (i (i (i (i ivsu_azimu_cycle (i (i INSERT a) (i (i INSERT b) EMPTY))) v) w) a) b)
(rule (i (i realu_mul (i (i (i (i azim v0) v1) v2) v3)) (i (i realu_mul (i (i realu_pow h) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i realu_div (i (i realu_sub (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul a) a))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 (i BIT1 u_0)))))))) (i (i (i (i (i (i volu_frusttu_wedge v0) v1) v2) v3) h) a))
(rule (i sqrt (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_pow (i (i cosV u) v)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i sinV u) v))
(rule (i (i hasu_boundedu_variationu_on (i (i o lift) (i (i o f) drop))) (i (i IMAGE lift) s0)) (i (i hasu_boundedu_realu_variationu_on f) s0))
(rule (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0))))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))) cstab)
(rule (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i CARD (i (i criticalu_edgeX V) X)))) (i (i criticalu_weight V) X))
(rule (i (i realu_mul (i exp (i realu_neg x))) (i exp x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i LENGTH (i bnu_nonFinals g)) (i bnu_countNonFinals g))
(rule (i (i SUBSET (i frontier s0)) s0) (i closed s0))
(rule (i (i DIFF s0) UNIV) EMPTY)
(rule (i (i complexu_mul (i cnj w)) (i cnj z)) (i cnj (i (i complexu_mul w) z)))
(rule (i det (i vector (i (i CONS x) (i (i CONS y) (i (i CONS z) NIL))))) (i (i dot (i (i cross x) y)) z))
(rule (i (i (i COND (i (i a_ q) NIL)) (i LAST p)) (i LAST q)) (i LAST (i (i APPEND p) q)))
(rule (i (i s_b_ (i (i admu_1 H) w)) (i (i s_b_ (i (i admu_2 H) w)) (i (i admu_3 H) w))) (i (i admissibleu_weight H) w))
(rule (i UNIONS (i (i IMAGE (i (i slice k) a)) s0)) (i (i (i slice k) a) (i UNIONS s0)))
(rule (i (i (i (i (i (i (i gamma3fu_vLu_n y1) y2) y3) y4) y5) y6) lfun) (i (i (i (i (i (i gamma3fu_vLu_nlfun y1) y2) y3) y4) y5) y6))
(rule (i (i (i COND (i (i realu_lt (i (i realu_add (i frac x)) (i frac y))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_add (i frac x)) (i frac y))) (i (i realu_sub (i (i realu_add (i frac x)) (i frac y))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i frac (i (i realu_add x) y)))
(rule (i (i b_s_ (i (i IN x) (i conv (i (i INSERT y) (i (i INSERT z) EMPTY))))) (i (i b_s_ (i (i IN y) (i conv (i (i INSERT x) (i (i INSERT z) EMPTY))))) (i (i IN z) (i conv (i (i INSERT x) (i (i INSERT y) EMPTY)))))) (i collinear (i (i INSERT x) (i (i INSERT y) (i (i INSERT z) EMPTY)))))
(rule (i (i complexu_mul x) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i (i realu_add (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL u_0))) (i (i s_b_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ y) (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i a_ (i (i realu_add (i distance (i (i c_ v1) v))) (i distance (i (i c_ v) v2)))) (i distance (i (i c_ v1) v2))) (i (i IN v) (i conv (i (i INSERT v1) (i (i INSERT v2) EMPTY)))))
(rule (i sup (i (i INSERT x) (i (i INSERT y) EMPTY))) (i (i realu_max x) y))
(rule (i (i matrixu_sub (i mat (i NUMERAL u_0))) A0) (i matrixu_neg A0))
(rule (i columns (i transp A0)) (i rows A0))
(rule (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) a)) (i (i realu_lt (i (i dot x) x)) (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_lt (i vectoru_norm x)) a))
(rule (i (i s_b_ (i (i IN x) dom)) (i (i IN (i f x)) Z)) (i (i IN x) (i (i (i preimage dom) f) Z)))
(rule (i (i s_b_ (i (i a_ (i (i edgeu_map H) x)) x)) (i (i s_b_ (i (i a_ (i (i nodeu_map H) x)) x)) (i (i a_ (i (i faceu_map H) x)) x))) (i (i isolatedu_dart H) x))
(rule (i INTERS (i (i INSERT s0) (i (i INSERT t) EMPTY))) (i (i INTER s0) t))
(rule (i inf (i (i INSERT x) (i (i INSERT y) EMPTY))) (i (i realu_min x) y))
(rule (i INTERS (i (i INSERT s0) EMPTY)) s0)
(rule (i INTERS EMPTY) UNIV)
(rule (i (i s_b_ (i (i (i bnu_isu_Hom phi) Fs1) Fs2)) (i (i bnu_inju_on phi) (i UNIONS (i (i IMAGE setu_ofu_list) Fs1)))) (i (i (i bnu_isu_pru_Iso phi) Fs1) Fs2))
(rule (i (i IN (i (i face H) x)) (i faceu_set H)) (i (i IN x) (i dart H)))
(rule (i (i vectoru_add (i (i complexu_mul x) y)) (i (i complexu_mul x) z)) (i (i complexu_mul x) (i (i vectoru_add y) z)))
(rule (i dim (i rows A0)) (i rank A0))
(rule (i (i res (i (i res f) s0)) s0) (i (i res f) s0))
(rule (i (i (i COND (i (i intu_le x) y)) x) y) (i (i intu_min x) y))
(rule (i (i intu_sub (i (i intu_mul x) y)) (i (i intu_mul x) z)) (i (i intu_mul x) (i (i intu_sub y) z)))
(rule (i (i IN (i (i node H) x)) (i nodeu_set H)) (i (i IN x) (i dart H)))
(rule (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_pow (i cos x)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i sin x)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i (i realu_sums f) (i (i realu_infsum s0) f)) s0) (i (i realu_summable s0) f))
(rule (i (i complexu_mul (i (i complexu_pow x) m)) (i (i complexu_pow x) n)) (i (i complexu_pow x) (i (i p_ m) n)))
(rule (i FST (i SND (i SND (i SND (i SND (i SND (i SND (i SND u)))))))) (i part7 u))
(rule (i FST (i SND (i SND (i SND (i SND (i SND (i SND u))))))) (i part6 u))
(rule (i FST (i SND (i SND (i SND (i SND (i SND u)))))) (i part5 u))
(rule (i FST (i drop3 u)) (i part4 u))
(rule (i FST (i drop2 u)) (i part3 u))
(rule (i FST (i drop1 u)) (i part2 u))
(rule (i FST (i drop0 u)) (i part1 u))
(rule (i (i (i intervalu_eps (i realu_neg x)) (i realu_neg f)) ex) (i (i (i intervalu_eps x) f) ex))
(rule (i tayloru_coeffu_catn (i NUMERAL u_0)) catn)
(rule (i (i add6 (i (i scalar6 (i (i (i (i (i (i (i compose6 (i (i (i (i truncateu_gamma3fu_x (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) m1) m2) m6)) dummy6) dummy6) dummy6) proju_x1) proju_x2) proju_x6)) iw1)) (i (i add6 (i (i scalar6 (i (i (i (i (i (i (i compose6 (i (i (i (i truncateu_gamma3fu_x (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) m1) m3) m5)) dummy6) dummy6) dummy6) proju_x1) proju_x3) proju_x5)) iw2)) (i (i mul6 (i (i sub6 dihu_x) (i (i add6 (i mku_126 (i truncateu_dihu_x (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i mku_135 (i truncateu_dihu_x (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))))) (i uni (i (i c_ (i truncateu_gamma2u_x m1)) proju_x1))))) (i (i (i (i (i (i (i truncateu_gamma23u_x iw1) iw2) m1) m2) m3) m5) m6))
(rule (i (i realu_sub (i realu_ofu_num (i NUMERAL u_0))) x) (i realu_neg x))
(rule (i vectoru_norm (i (i rotate2d t) z)) (i vectoru_norm z))
(rule (i (i realu_lt (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i (i (i dihV v) w) x) y)) (i (i realu_lt (i cos (i (i (i (i dihV v) w) x) y))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i ball (i (i c_ x) e))) EMPTY) (i (i realu_le e) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i (i etau_y (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i sqrt (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0)))))))
(rule (i (i (i sums (i (i o Cx) f)) (i Cx l)) s0) (i (i (i realu_sums f) l) s0))
(rule (i (i (i COND (i (i a_ n) (i NUMERAL u_0))) (i NUMERAL (i BIT1 u_0))) (i NUMERAL u_0)) (i (i EXP (i NUMERAL u_0)) n))
(rule (i (i p_ (i dimindex UNIV)) (i dimindex UNIV)) (i dimindex UNIV))
(rule (i scale (i vec (i NUMERAL (i BIT1 u_0)))) I)
(rule (i (i DISJOINT (i (i supportu_list p) n)) (i (i supportu_list q) m)) (i (i (i (i isu_disjoint p) q) n) m))
(rule (i (i IN (i (i INSERT v) (i (i INSERT x) EMPTY))) E) (i (i IN x) (i (i EE v) E)))
(rule (i (i EXP n) (i NUMERAL (i BIT1 u_0))) n)
(rule (i (i vectoru_add (i Cx x)) (i Cx y)) (i Cx (i (i realu_add x) y)))
(rule (i mku_135 dih6u_x) dih6u_xu_135u_s2)
(rule (i (i (i netord atu_posinfinity) x) y) (i (i realu_ge x) y))
(rule (i (i s_b_ (i simpleu_path g)) (i w_ (i (i a_ (i pathfinish g)) (i pathstart g)))) (i arc g))
(rule (i Cx (i vectoru_norm (i Cx x))) (i Cx (i realu_abs x)))
(rule (i hypermap0 (i (i c_ (i dartu_ofu_fan (i (i c_ V) E))) (i (i c_ (i eu_fanu_pairu_ext (i (i c_ V) E))) (i (i c_ (i nu_fanu_pairu_ext (i (i c_ V) E))) (i fu_fanu_pairu_ext (i (i c_ V) E)))))) (i hypermapu_ofu_fan (i (i c_ V) E)))
(rule (i (i s_b_ (i (i realu_le (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) hminus)) y)) (i (i realu_le y) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) hplus))) (i criticalu_edgeu_y y))
(rule (i cacs (i vectoru_neg (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i Cx pi))
(rule (i (i (i COND (i (i intu_le x) y)) y) x) (i (i intu_max x) y))
(rule (i ly (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h)) (i lfun h))
(rule (i (i realu_mul (i vectoru_norm u)) (i (i realu_mul (i vectoru_norm v)) (i sin (i (i (i arcV (i vec (i NUMERAL u_0))) u) v)))) (i vectoru_norm (i (i cross u) v)))
(rule (i (i dot (i complex (i (i c_ x) y))) (i complex (i (i c_ xi_) yi_))) (i (i realu_add (i (i realu_mul x) xi_)) (i (i realu_mul y) yi_)))
(rule (i (i continuousu_on g) (i closedu_interval (i (i CONS (i (i c_ (i vec (i NUMERAL u_0))) (i vec (i NUMERAL (i BIT1 u_0))))) NIL))) (i path g))
(rule (i RTC (i RTC R)) (i RTC R))
(rule (i (i realu_div (i (i realu_add (i sin (i (i realu_add x) y))) (i sin (i (i realu_sub x) y)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i sin x)) (i cos y)))
(rule (i (i intu_le (i (i intu_add x) y)) (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_le x) (i intu_neg y)))
(rule (i (i (i (i (i (i (i compose6 deltau_x) proju_x1) proju_x2) (i constant6 a)) (i constant6 b)) (i constant6 c)) proju_x6) (i (i (i deltau_126u_x a) b) c))
(rule (i (i rotate2d t) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_mul (i marchalu_quartic (i (i realu_div (i sqrt x5)) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) (i (i (i (i (i (i dih5u_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i mardih5u_x x1) x2) x3) x4) x5) x6))
(rule (i (i s_b_ (i (i a_ (i (i matrixu_vectoru_mul A0) x)) (i vec (i NUMERAL u_0)))) (i (i IN x) (i span (i rows A0)))) (i (i a_ x) (i vec (i NUMERAL u_0))))
(rule (i rotate4 dihu_xu_divu_sqrtdeltau_posbranch) dih4u_xu_divu_sqrtdeltau_posbranch)
(rule (i vector (i (i CONS (i (i realu_sub (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i cos t))) (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i sin t)))) (i (i CONS (i (i realu_add (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i sin t))) (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i cos t)))) NIL))) (i (i rotate2d t) x))
(rule (i (i realu_add (i (i realu_pow (i vectoru_norm (i (i cross x) y))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i dot x) y)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i vectoru_sub (i sndcart x)) (i sndcart y)) (i sndcart (i (i vectoru_sub x) y)))
(rule (i (i (i (i (i bnu_subdivFace0 g) f) (i bnu_the (i HD vos))) (i NUMERAL u_0)) (i TL vos)) (i (i (i bnu_subdivFace g) f) vos))
(rule (i twopow (i (i intu_mul a) (i intu_ofu_num n))) (i (i realu_pow (i twopow a)) n))
(rule (i (i realu_pow (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) n) (i twopow (i intu_ofu_num n)))
(rule (i (i realu_le (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_le (i realu_abs x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i realu_sub (i (i (i (i (i (i f x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i g x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i (i (i sub6 f) g) x1) x2) x3) x4) x5) x6))
(rule (i (i closestu_point (i (i INSERT a) EMPTY)) b) a)
(rule (i w_ (i (i a_ (i det A0)) (i realu_ofu_num (i NUMERAL u_0)))) (i invertible A0))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_add x) y)) (i (i realu_lt (i realu_neg x)) y))
(rule (i (i realu_mul (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div (i (i (i volR a) b) c)) a)) (i (i (i surfR a) b) c))
(rule (i (i a_ (i (i p_ m) p)) (i (i p_ n) p)) (i (i a_ m) n))
(rule (i evenperm I) T)
(rule (i w_ (i (i a_ n) (i NUMERAL u_0))) (i (i l_ (i NUMERAL u_0)) n))
(rule (i (i vectoru_sub (i (i vecmat i0) x)) (i (i vecmat i0) y)) (i (i vecmat i0) (i (i vectoru_sub x) y)))
(rule (i (i realu_add (i (i d_ (i (i d_ A0) i0)) j)) (i (i d_ (i (i d_ B0) i0)) j)) (i (i d_ (i (i d_ (i (i matrixu_add A0) B0)) i0)) j))
(rule (i (i s_b_ (i w_ (i (i a_ (i det A0)) (i realu_ofu_num (i NUMERAL u_0))))) (i (i a_ Ai_) (i (i r_r_ (i realu_inv (i det A0))) (i transp (i cofactor A0))))) (i (i a_ (i (i matrixu_mul Ai_) A0)) (i mat (i NUMERAL (i BIT1 u_0)))))
(rule (i (i (i COND (i EVEN n)) (i (i intu_pow x) n)) (i intu_neg (i (i intu_pow x) n))) (i (i intu_pow (i intu_neg x)) n))
(rule (i (i b_s_ (i (i s_b_ (i (i a_ (i realu_abs x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_a_g_ (i (i realu_lt x) (i realu_ofu_num (i NUMERAL u_0)))) (i EVEN n)))) (i (i a_ n) (i NUMERAL u_0))) (i (i a_ (i (i realu_pow x) n)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i s_b_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0)))) (i w_ (i (i a_ n) (i NUMERAL u_0)))) (i (i a_ (i (i realu_pow x) n)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_div (i (i dot (i (i vectoru_sub u) v0)) (i (i vectoru_sub w) v0))) (i (i realu_mul (i vectoru_norm (i (i vectoru_sub u) v0))) (i vectoru_norm (i (i vectoru_sub w) v0)))) (i cos (i (i (i arcV v0) u) w)))
(rule (i (i b_s_ (i (i (i bnu_isu_pru_Iso phi) Fs1) Fs2)) (i (i (i bnu_isu_pru_Iso phi) Fs1) (i (i IMAGE REVERSE) Fs2))) (i (i (i bnu_isu_Iso phi) Fs1) Fs2))
(rule (i coplanar (i (i hull affine) s0)) (i coplanar s0))
(rule (i (i IN x) (i (i INSERT y) EMPTY)) (i (i a_ x) y))
(rule (i Re (i ctan (i Cx x))) (i tan x))
(rule (i SND abdodec) bdodec)
(rule (i (i d_ (i vector (i (i CONS x) NIL))) (i NUMERAL (i BIT1 u_0))) x)
(rule (i (i (i COND (i (i s_b_ (i (i realu_lt (i (i d_ a) (i NUMERAL (i BIT1 u_0)))) (i (i d_ b) (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i realu_lt (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_lt (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0)))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))))) (i realu_ofu_num (i NUMERAL u_0))) (i (i volu_rect a) b))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) (i atn (i halfatn4 x))) (i atn x))
(rule (i (i o halfatn) (i (i o halfatn) (i (i o halfatn) halfatn))) halfatn4)
(rule (i cos (i (i realu_add x) (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i realu_neg (i sin x)))
(rule (i dist (i (i c_ (i NUMERAL u_0)) n)) n)
(rule (i (i s_b_ (i (i l_a_ m) n)) (i w_ (i (i a_ m) n))) (i (i l_ m) n))
(rule (i sqrt (i quadraticu_rootu_plus (i (i c_ (i (i realu_mul y1) y1)) (i (i c_ (i (i realu_add (i (i realu_mul (i (i realu_mul y1) y1)) (i (i realu_mul y1) y1))) (i (i realu_sub (i (i realu_mul (i (i realu_sub (i (i realu_mul y3) y3)) (i (i realu_mul y5) y5))) (i (i realu_sub (i (i realu_mul y2) y2)) (i (i realu_mul y6) y6)))) (i (i realu_mul (i (i realu_mul y1) y1)) (i (i realu_add (i (i realu_mul y2) y2)) (i (i realu_add (i (i realu_mul y3) y3)) (i (i realu_add (i (i realu_mul y5) y5)) (i (i realu_mul y6) y6)))))))) (i (i realu_add (i (i realu_mul (i (i realu_mul y1) y1)) (i (i realu_mul (i (i realu_mul y3) y3)) (i (i realu_mul y5) y5)))) (i (i realu_sub (i (i realu_sub (i (i realu_mul (i (i realu_mul y1) y1)) (i (i realu_mul (i (i realu_mul y2) y2)) (i (i realu_mul y6) y6)))) (i (i realu_mul (i (i realu_mul y3) y3)) (i (i realu_mul (i (i realu_add (i (i realu_mul y1) y1)) (i (i realu_add (i (i realu_sub (i (i realu_mul y2) y2)) (i (i realu_mul y3) y3))) (i (i realu_sub (i (i realu_mul y5) y5)) (i (i realu_mul y6) y6))))) (i (i realu_mul y6) y6))))) (i (i realu_mul (i (i realu_mul y2) y2)) (i (i realu_mul (i (i realu_mul y5) y5)) (i (i realu_add (i (i realu_sub (i (i realu_mul y1) y1)) (i (i realu_mul y2) y2))) (i (i realu_add (i (i realu_sub (i (i realu_mul y3) y3)) (i (i realu_mul y5) y5))) (i (i realu_mul y6) y6))))))))))) (i (i (i (i (i edgeu_flat y1) y2) y3) y5) y6))
(rule (i (i s_b_ (i (i (i INJ f) s0) t)) (i (i (i SURJ f) s0) t)) (i (i (i BIJ f) s0) t))
(rule (i (i realu_add (i (i realu_mul (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i vectoru_norm x)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_add (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i (i realu_mul a) b)) (i (i dot x) y)))) (i (i realu_mul (i (i realu_pow b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i vectoru_norm y)) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_pow (i vectoru_norm (i (i vectoru_add (i (i r_ a) x)) (i (i r_ b) y)))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i matrixu_sub (i (i matrixu_mul A0) C)) (i (i matrixu_mul B0) C)) (i (i matrixu_mul (i (i matrixu_sub A0) B0)) C))
(rule (i (i realu_add (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i atn2 (i (i c_ (i sqrt (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul x1) (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6))))) (i realu_neg (i (i (i (i (i (i deltau_x4 x1) x2) x3) x4) x5) x6))))) (i (i (i (i (i (i dihu_x x1) x2) x3) x4) x5) x6))
(rule (i (i p_ (i (i (i wtcount3u_y y1) y2) y3)) (i (i (i wtcount3u_y y4) y5) y6)) (i (i (i (i (i (i wtcount6u_y y1) y2) y3) y4) y5) y6))
(rule (i circumcenter (i (i INSERT a) (i (i INSERT b) EMPTY))) (i midpoint (i (i c_ a) b)))
(rule (i circumcenter (i (i INSERT x) EMPTY)) x)
(rule (i (i openu_in (i (i subtopology top) u)) u) (i (i SUBSET u) (i topspace top)))
(rule (i (i realu_div (i realu_ofu_num (i NUMERAL u_0))) x) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i s_b_ (i w_ (i (i a_ s0) EMPTY))) (i (i s_b_ (i convex s0)) (i conic s0))) (i convexu_cone s0))
(rule (i (i (i COND (i (i realu_lt (i realu_abs y)) x)) (i atn (i (i realu_div y) x))) (i (i (i COND (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) y)) (i (i realu_sub (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i atn (i (i realu_div x) y)))) (i (i (i COND (i (i realu_lt y) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_sub (i realu_neg (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i atn (i (i realu_div x) y)))) pi))) (i atan2u_temp (i (i c_ x) y)))
(rule (i promote1u_tou_6 (i gamma2u_xu_divu_azim m)) (i gamma2u_x1u_divu_a m))
(rule (i (i realu_div (i (i (i (i (i (i num2 e1) e2) e3) a2) b2) c2)) (i (i realu_mul (i (i realu_pow (i sqrt (i (i (i (i (i (i deltau_x (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) a2) b2) c2))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i realu_mul a2) (i (i realu_pow (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) a2)) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i rat2 e1) e2) e3) a2) b2) c2))
(rule (i (i realu_div (i (i (i (i (i (i num1 e1) e2) e3) a2) b2) c2)) (i (i realu_mul (i sqrt (i (i (i (i (i (i deltau_x (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) a2) b2) c2))) (i (i realu_mul (i sqrt a2)) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) a2)))) (i (i (i (i (i (i rat1 e1) e2) e3) a2) b2) c2))
(rule (i (i b_s_ (i (i a_ a) b)) (i (i b_s_ (i (i a_ a) c)) (i (i b_s_ (i (i a_ b) c)) (i affineu_dependent (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY))))))) (i collinear (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY)))))
(rule (i (i (i slice k) a) EMPTY) EMPTY)
(rule (i (i a_ (i (i realu_mul (i (i realu_sub (i (i d_ z) (i NUMERAL (i BIT1 u_0)))) (i (i d_ x) (i NUMERAL (i BIT1 u_0))))) (i (i realu_sub (i (i d_ y) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i (i realu_sub (i (i d_ y) (i NUMERAL (i BIT1 u_0)))) (i (i d_ x) (i NUMERAL (i BIT1 u_0))))) (i (i realu_sub (i (i d_ z) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i collinear (i (i INSERT x) (i (i INSERT y) (i (i INSERT z) EMPTY)))))
(rule (i realu_ofu_num (i NUMERAL u_0)) (i content EMPTY))
(rule (i INTERS (i (i DELETE f) UNIV)) (i INTERS f))
(rule (i (i (i (i (i (i (i compose6 f) proju_x6) proju_x1) proju_x5) proju_x3) proju_x4) proju_x2) (i rotate6 f))
(rule (i (i (i (i (i (i (i compose6 f) proju_x5) proju_x3) proju_x4) proju_x2) proju_x6) proju_x1) (i rotate5 f))
(rule (i (i permutes p) (i (i o_o_ (i NUMERAL u_0)) (i NUMERAL u_0))) (i (i a_ p) I))
(rule (i (i (i (i (i (i (i compose6 f) proju_x4) proju_x2) proju_x6) proju_x1) proju_x5) proju_x3) (i rotate4 f))
(rule (i (i (i (i (i (i (i compose6 f) proju_x3) proju_x1) proju_x2) proju_x6) proju_x4) proju_x5) (i rotate3 f))
(rule (i (i (i (i (i (i (i compose6 f) proju_x2) proju_x3) proju_x1) proju_x5) proju_x6) proju_x4) (i rotate2 f))
(rule (i sndcart (i (i pastecart x) y)) y)
(rule (i (i intu_ge x) (i (i intu_add y) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i intu_gt x) y))
(rule (i pathstart (i (i p_p_ g1) g2)) (i pathstart g1))
(rule (i (i IMAGE map1) (i (i intu_ball x) r)) (i setu_ofu_ccube (i (i intu_ball x) r)))
(rule (i (i b_s_ (i (i a_ (i (i (i arcV x) y) z)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ (i (i (i arcV x) y) z)) pi)) (i (i a_ (i sin (i (i (i arcV x) y) z))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i IMAGE map0) (i (i intu_ball x) r)) (i setu_ofu_cube (i (i intu_ball x) r)))
(rule (i (i (i upsu_x (i (i realu_pow (i distance (i (i c_ a) b))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ a) c))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ b) c))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_pow (i vectoru_norm (i (i cross (i (i vectoru_sub b) a)) (i (i vectoru_sub c) a)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))
(rule (i connected (i (i IMAGE lift) s0)) (i isu_realinterval s0))
(rule (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL)) (i pathu_image (i linepath (i (i c_ a) b))))
(rule (i (i s_b_ (i (i a_a_g_ a) b)) (i (i a_a_g_ b) a)) (i (i a_ a) b))
(rule (i (i matrixu_vectoru_mul (i transp A0)) x) (i (i vectoru_matrixu_mul x) A0))
(rule (i (i m_ (i SUC m)) (i SUC n)) (i (i m_ m) n))
(rule (i (i s_b_ (i (i (i (i (i (i conflictingu_dia v) v1) v3) v2) v4) s0)) (i w_ (i (i a_ (i (i INTER (i conv0 (i (i INSERT v1) (i (i INSERT v3) EMPTY)))) (i conv0 (i (i INSERT v) (i (i INSERT v2) (i (i INSERT v4) EMPTY)))))) EMPTY))) (i (i (i (i (i (i interioru_pos v) v1) v3) v2) v4) s0))
(rule (i sqrt (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i a_ (i (i pathu_component s0) x)) EMPTY) (i w_ (i (i IN x) s0)))
(rule (i (i realu_div (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i realu_div a) b)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i realu_div (i (i realu_pow x) n)) (i (i realu_pow y) n)) (i (i realu_pow (i (i realu_div x) y)) n))
(rule (i sqrt (i (i realu_add (i (i realu_pow (i vectoru_norm x)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i vectoru_norm y)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i vectoru_norm (i (i pastecart x) y)))
(rule (i (i hull affine) (i (i hull affine) s0)) (i (i hull affine) s0))
(rule (i (i b_s_ (i w_ (i (i a_ x) (i NUMERAL u_0)))) (i (i a_ n) (i NUMERAL u_0))) (i (i l_ (i NUMERAL u_0)) (i (i EXP x) n)))
(rule (i (i a_ (i drop x)) (i drop y)) (i (i a_ x) y))
(rule (i (i m_ (i (i p_ m) n)) n) m)
(rule (i realu_neg (i realu_neg x)) x)
(rule (i (i a_ (i INJN n10)) (i INJN n20)) (i (i a_ n10) n20))
(rule (i (i hrealu_mul (i mku_hreal (i naddu_eq x))) (i mku_hreal (i naddu_eq y))) (i mku_hreal (i naddu_eq (i (i naddu_mul x) y))))
(rule (i (i setu_ofu_orbits (i dart H)) (i edgeu_map H)) (i edgeu_set H))
(rule (i realu_ofu_num (i NUMERAL (i BIT1 u_0))) (i sign I))
(rule (i (i realu_mul (i sqn (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6))) (i (i (i (i (i (i lmdih6u_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i lmdih6u_xu_n x1) x2) x3) x4) x5) x6))
(rule (i (i INSERT (i vec (i NUMERAL u_0))) (i (i hull conic) (i (i hull convex) s0))) (i (i hull convexu_cone) s0))
(rule (i (i realu_lt (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_lt (i realu_abs x)) (i realu_abs y)))
(rule (i (i s_b_ (i (i a_ (i intu_abs x)) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_ (i intu_abs y)) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_ (i intu_abs (i (i intu_mul x) y))) (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i FST (i SND (i tupleu_stableu_sy s0))) (i du_sy s0))
(rule (i (i s_b_ (i (i (i netord n) x) y)) (i (i IN x) s0)) (i (i (i netord (i (i within n) s0)) x) y))
(rule (i (i realu_div (i (i (i upsu_x (i (i dot u) u)) (i (i dot v) v)) (i (i dot (i (i vectoru_sub u) v)) (i (i vectoru_sub u) v)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i dot (i (i cross u) v)) (i (i cross u) v)))
(rule (i REVERSE (i (i REVERSEu_TABLE f) k)) (i (i TABLE f) k))
(rule (i (i a_ (i (i intu_add (i (i intu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i intu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i intu_ofu_num (i NUMERAL u_0))) (i (i s_b_ (i (i a_ x) (i intu_ofu_num (i NUMERAL u_0)))) (i (i a_ y) (i intu_ofu_num (i NUMERAL u_0)))))
(rule (i complex (i (i c_ (i (i realu_div (i Re z)) (i (i realu_add (i (i realu_pow (i Re z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i Im z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_div (i realu_neg (i Im z))) (i (i realu_add (i (i realu_pow (i Re z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i Im z)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i complexu_inv z))
(rule (i (i realu_mul (i marchalu_quartic (i (i realu_div (i sqrt x4)) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) (i (i (i (i (i (i dih4u_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i mardih4u_x x1) x2) x3) x4) x5) x6))
(rule (i trivialu_limit (i (i within (i at (i Cx x))) (i (i INTER real0) (i (i IMAGE Cx) s0)))) (i trivialu_limit (i (i within (i atreal x)) s0)))
(rule (i (i (i COND (i (i realu_le x) c)) (i sqrt c)) (i sqrt x)) (i (i truncateu_sqrt c) x))
(rule (i (i intu_mul x) (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) x)
(rule (i (i realu_mul (i sqn (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6))) (i (i (i (i (i (i lmdihu_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i lmdihu_xu_n x1) x2) x3) x4) x5) x6))
(rule (i (i realu_sub pi) (i (i vectoru_angle x) y)) (i (i vectoru_angle x) (i vectoru_neg y)))
(rule (i (i trealu_le (i trealu_ofu_num m)) (i trealu_ofu_num n)) (i (i l_a_ m) n))
(rule (i (i realu_add (i (i realu_mul x) z)) (i (i realu_mul y) z)) (i (i realu_mul (i (i realu_add x) y)) z))
(rule (i bounded (i (i hull convex) s0)) (i bounded s0))
(rule (i (i IMAGE mku_finiteu_product) (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i (i t_ (i dimindex UNIV)) (i dimindex UNIV)))) UNIV)
(rule (i realu_negligible (i (i INSERT a) s0)) (i realu_negligible s0))
(rule (i (i d_ (i (i d_ (i (i matrixu_mul (i rowvector x)) (i (i matrixu_mul (i (i matrixu_mul (i transp A0)) B0)) (i columnvector y)))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0))) (i (i dot (i (i matrixu_vectoru_mul A0) x)) (i (i matrixu_vectoru_mul B0) y)))
(rule (i (i DIFF UNIV) (i (i UNION s0) (i inside s0))) (i outside s0))
(rule (i (i hull convex) (i (i INSERT a) (i (i INSERT b) EMPTY))) (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL)))
(rule (i (i b_s_ (i (i a_ n) (i NUMERAL u_0))) (i (i a_ n) (i NUMERAL (i BIT1 u_0)))) (i (i l_a_ n) (i NUMERAL (i BIT1 u_0))))
(rule (i (i (i COND (i (i a_ a) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i (i COND (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) a)) (i (i vectoru_angle x) y)) (i (i realu_sub pi) (i (i vectoru_angle x) y)))) (i (i vectoru_angle x) (i (i r_ a) y)))
(rule (i (i (i reduced lab) (i NUMERAL u_0)) x) (i NUMERAL u_0))
(rule (i (i pastecart (i fstcart z)) (i sndcart z)) z)
(rule (i (i ellipsoid (i vec (i NUMERAL (i BIT1 u_0)))) r) (i (i normball (i vec (i NUMERAL u_0))) r))
(rule (i realu_neg (i (i realu_sub x) y)) (i (i realu_sub y) x))
(rule (i (i realu_mul (i (i realu_sub (i (i realu_sub (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i dihu_y y1) y2) sqrt2) sqrt2) sqrt2) y6))) (i (i (i (i (i (i dihu_y y1) y3) sqrt2) sqrt2) sqrt2) y5))) (i (i realu_div (i (i realu_sub (i (i vol2r y1) sqrt2)) (i (i realu_sub (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul pi) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_div y1) (i (i realu_mul sqrt2) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))))) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) pi))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul pi) (i lfun (i (i realu_div y1) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) (i (i (i (i (i (i gamma3fu_vLRu_lfun y1) y2) y3) y4) y5) y6))
(rule (i (i s_b_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0)))) (i w_ (i (i a_ y) (i realu_ofu_num (i NUMERAL u_0))))) (i (i a_ (i (i rpow x) y)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_mul (i twopow a)) (i twopow (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i twopow (i (i intu_add a) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))))
(rule (i openu_interval (i (i c_ a) b)) (i (i rect a) b))
(rule (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))))))))))) bnu_squanderTarget)
(rule (i (i APPEND l) NIL) l)
(rule (i (i realu_div x) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) x)
(rule (i (i complexu_mul (i cexp (i (i vectoru_add w) z))) (i cexp (i vectoru_neg z))) (i cexp w))
(rule (i reversepath (i reversepath g)) g)
(rule (i closedu_realu_interval (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL u_0)))) NIL)) EMPTY)
(rule (i (i realu_le (i atn x)) (i atn y)) (i (i realu_le x) y))
(rule (i (i trealu_eq (i trealu_ofu_num m)) (i trealu_ofu_num n)) (i (i a_ m) n))
(rule (i (i realu_add (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i (i d_ y) (i NUMERAL (i BIT1 u_0))))) (i (i realu_add (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ y) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i d_ y) (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i dot x) y))
(rule (i (i realu_add (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i (i d_ y) (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ y) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i dot x) y))
(rule (i (i realu_mul (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i (i d_ y) (i NUMERAL (i BIT1 u_0)))) (i (i dot x) y))
(rule (i (i mul6 (i uni (i (i c_ lfun) (i (i div6 proju_y6) two6)))) dih6u_xu_126u_s2) ldih6u_xu_126u_s2)
(rule (i (i (i arcV (i vec (i NUMERAL u_0))) (i (i vectoru_sub (i (i r_ (i (i dot (i (i vectoru_sub v1) v0)) (i (i vectoru_sub v1) v0))) (i (i vectoru_sub v2) v0))) (i (i r_ (i (i dot (i (i vectoru_sub v2) v0)) (i (i vectoru_sub v1) v0))) (i (i vectoru_sub v1) v0)))) (i (i vectoru_sub (i (i r_ (i (i dot (i (i vectoru_sub v1) v0)) (i (i vectoru_sub v1) v0))) (i (i vectoru_sub v3) v0))) (i (i r_ (i (i dot (i (i vectoru_sub v3) v0)) (i (i vectoru_sub v1) v0))) (i (i vectoru_sub v1) v0)))) (i (i (i (i dihV v0) v1) v2) v3))
(rule (i collinear (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT x) (i (i INSERT y) EMPTY)))) (i (i a_ (i (i cross x) y)) (i vec (i NUMERAL u_0))))
(rule (i (i a_ (i (i IMAGE bnu_congs) (i (i IMAGE (i MAP phi)) Fs1))) (i (i IMAGE bnu_congs) Fs2)) (i (i (i bnu_isu_Hom phi) Fs1) Fs2))
(rule (i topspace euclideanreal) UNIV)
(rule (i (i realu_mul (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_add (i (i realu_mul (i (i realu_pow a2) (i NUMERAL (i BIT0 (i BIT1 u_0))))) e1)) (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i (i realu_sub b2) c2)) (i (i realu_sub e2) e3)))) (i (i realu_mul a2) (i (i realu_add (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) e1)) (i (i realu_add (i (i realu_mul (i (i realu_sub b2) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) e2)) (i (i realu_mul (i (i realu_sub c2) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) e3))))))) (i (i (i (i (i (i num1 e1) e2) e3) a2) b2) c2))
(rule (i rotate3 ldihu_x) ldih3u_x)
(rule (i (i a_ (i (i intu_add x) y)) (i intu_ofu_num (i NUMERAL u_0))) (i (i a_ y) (i intu_neg x)))
(rule (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))))))))))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0)))))))))))))))))))))))))) au_spine5)
(rule (i (i orthogonal x) (i vectoru_neg y)) (i (i orthogonal x) y))
(rule (i closedu_interval (i (i CONS (i (i c_ (i vectoru_neg (i lift e))) (i lift e))) NIL)) (i cball (i (i c_ (i vec (i NUMERAL u_0))) e)))
(rule (i (i matrixu_vectoru_mul (i transp A0)) (i (i cross (i (i matrixu_vectoru_mul A0) x)) (i (i matrixu_vectoru_mul A0) y))) (i (i r_ (i det A0)) (i (i cross x) y)))
(rule (i (i b_s_ (i (i a_ (i (i vectoru_angle x) y)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ (i (i vectoru_angle x) y)) pi)) (i (i a_ (i sin (i (i vectoru_angle x) y))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i IMAGE (i scale t)) (i (i normball (i vec (i NUMERAL u_0))) r)) (i (i ellipsoid t) r))
(rule (i intu_abs (i intu_neg x)) (i intu_abs x))
(rule (i distance (i (i c_ (i lift x)) (i lift y))) (i realu_abs (i (i realu_sub x) y)))
(rule (i (i a_ (i cos (i (i vectoru_angle u) v))) (i cos (i (i vectoru_angle x) y))) (i (i a_ (i (i vectoru_angle u) v)) (i (i vectoru_angle x) y)))
(rule (i (i intu_add (i intu_neg x)) (i intu_neg y)) (i intu_neg (i (i intu_add x) y)))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i dartu_std3u_small y1) y2) y3) y4) y5) y6))
(rule (i (i (i (i (i (i (i node3u_y f) y1) y2) y3) y4) y5) y6) (i (i (i (i (i (i f y3) y1) y2) y6) y4) y5))
(rule (i (i a_ (i (i INSERT x) EMPTY)) (i (i INSERT y) EMPTY)) (i (i a_ x) y))
(rule (i (i (i COND (i (i a_ n) (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_pow (i realu_ofu_num (i NUMERAL u_0))) n))
(rule (i (i s_b_ (i (i a_ l) NIL)) (i (i a_ m) NIL)) (i (i a_ (i (i APPEND l) m)) NIL))
(rule (i (i (i POWER (i next L)) k) x) (i (i (i loopu_path L) x) k))
(rule (i (i nodeu_walkup (i (i nodeu_walkup H) x)) y) (i (i (i doubleu_nodeu_walkup H) x) y))
(rule (i (i realu_mul (i (i (i COND (i criticalu_edgeu_y y1)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_mul (i (i (i COND (i criticalu_edgeu_y y2)) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i (i (i COND (i criticalu_edgeu_y y3)) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i (i (i COND (i criticalu_edgeu_y y4)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_mul (i (i (i COND (i criticalu_edgeu_y y5)) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i (i (i COND (i criticalu_edgeu_y y6)) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_sub (i bump (i (i realu_div y1) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i bump (i (i realu_div y4) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))))))) (i (i (i (i (i (i betau_bumpu_y y1) y2) y3) y4) y5) y6))
(rule (i intu_abs (i intu_neg (i intu_ofu_num n))) (i intu_ofu_num n))
(rule (i (i s_b_ (i (i (i isu_contour H) p) n)) (i (i isu_inju_list p) n)) (i (i (i isu_inju_contour H) p) n))
(rule (i SC (i SC R)) (i SC R))
(rule (i (i intu_mul (i intu_abs x)) (i intu_abs y)) (i intu_abs (i (i intu_mul x) y)))
(rule (i (i realu_mul (i sqn (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6))) (i (i (i (i (i (i lmdih5u_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i lmdih5u_xu_n x1) x2) x3) x4) x5) x6))
(rule (i (i hull affine) UNIV) UNIV)
(rule (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i realu_abs (i (i realu_sub x) a)))) (i (i realu_le (i realu_abs (i (i realu_sub x) a))) (i realu_abs (i (i realu_sub y) a)))) (i (i (i netord (i atreal a)) x) y))
(rule (i (i realu_mul (i sqn (i (i (i (i (i (i deltau_y y1) y2) y3) y4) y5) y6))) (i (i realu_sub (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi))) (i (i realu_add (i (i (i (i (i (i (i yu_ofu_x solu_euleru_xu_divu_sqrtdelta) y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i (i yu_ofu_x solu_euler156u_xu_divu_sqrtdelta) y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i (i yu_ofu_x solu_euler345u_xu_divu_sqrtdelta) y1) y2) y3) y4) y5) y6)))))) (i (i (i (i (i (i gamma3fu_135u_su_n y1) y2) y3) y4) y5) y6))
(rule (i (i hrealu_add (i mku_hreal (i naddu_eq x))) (i mku_hreal (i naddu_eq y))) (i mku_hreal (i naddu_eq (i (i naddu_add x) y))))
(rule (i (i s_b_ (i w_ (i (i a_ (i (i edgeu_map H) x)) x))) (i (i s_b_ (i w_ (i (i a_ (i (i nodeu_map H) x)) x))) (i w_ (i (i a_ (i (i faceu_map H) x)) x)))) (i (i dartu_nondegenerate H) x))
(rule (i convexu_localu_fan (i (i c_ (i Vu_SY v)) (i (i c_ (i Eu_SY v)) (i Fu_SY v)))) (i CONDITION2u_SY v))
(rule (i neutral s_b_) T)
(rule (i (i b_s_ (i (i realu_lt x) z)) (i (i realu_lt y) z)) (i (i realu_lt (i (i realu_min x) y)) z))
(rule (i (i s_b_ (i (i a_ x) (i intu_ofu_num (i NUMERAL u_0)))) (i w_ (i (i a_ n) (i NUMERAL u_0)))) (i (i a_ (i (i intu_pow x) n)) (i intu_ofu_num (i NUMERAL u_0))))
(rule (i w_ (i (i a_ (i ODD m)) (i ODD n))) (i ODD (i (i p_ m) n)))
(rule (i (i b_s_ (i (i realu_le x) z)) (i (i realu_le y) z)) (i (i realu_le (i (i realu_min x) y)) z))
(rule (i (i realu_div x) (i realu_abs x)) (i realu_sgn x))
(rule (i (i intu_mul (i (i intu_pow (i intu_neg (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) n)) (i (i intu_pow (i intu_ofu_num x)) n)) (i (i intu_pow (i intu_neg (i intu_ofu_num x))) n))
(rule (i (i IN i0) (i (i INSERT (i NUMERAL u_0)) (i (i INSERT (i NUMERAL (i BIT1 u_0))) (i (i INSERT (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i (i INSERT (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i (i INSERT (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))) EMPTY)))))) (i (i l_a_ i0) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))))
(rule (i (i s_b_ (i (i l_a_u_c s0) t)) (i w_ (i (i a_u_c s0) t))) (i (i l_u_c s0) t))
(rule (i clog (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_add (i (i realu_sub (i (i realu_sub (i (i realu_mul (i realu_neg x1)) (i (i realu_mul x1) (i (i realu_mul x4) x4)))) (i (i realu_mul x2) (i (i realu_mul x2) (i (i realu_mul x5) x5))))) (i (i realu_mul x3) (i (i realu_mul x3) (i (i realu_mul x6) x6))))) (i (i realu_add (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul x1) (i (i realu_mul x2) (i (i realu_mul x4) x5))))) (i (i realu_add (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul x1) (i (i realu_mul x3) (i (i realu_mul x4) x6))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul x2) (i (i realu_mul x3) (i (i realu_mul x5) x6))))))) (i (i (i (i (i (i rhou_x x1) x2) x3) x4) x5) x6))
(rule (i (i s_b_ (i real0 z)) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Re z))) (i (i a_ (i Arg z)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i vectoru_add y) (i (i vectoru_sub x) y)) x)
(rule (i (i realu_mul (i marchalu_quartic (i (i realu_div (i sqrt x3)) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) (i (i (i (i (i (i dih3u_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i mardih3u_x x1) x2) x3) x4) x5) x6))
(rule (i (i realu_add (i (i (i (i (i (i rhazim y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i rhazim2 y1) y2) y3) y4) y5) y6)) (i (i realu_sub (i (i (i (i (i (i rhazim3 y1) y2) y3) y4) y5) y6)) (i (i realu_mul (i (i realu_add (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) const1)) pi)))) (i (i (i (i (i (i taum y1) y2) y3) y4) y5) y6))
(rule (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) (i intu_neg (i intu_ofu_num n))) (i (i a_ n) (i NUMERAL u_0)))
(rule (i sqrt (i (i realu_add (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i radius (i (i c_ x) y)))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y4) sqrt8))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i apexu_flatu_hll y1) y2) y3) y4) y5) y6))
(rule (i (i intu_add (i (i intu_sub a) b)) (i (i intu_sub b) c)) (i (i intu_sub a) c))
(rule (i (i realu_add (i (i realu_pow (i (i (i (i (i (i chi x12) x13) x14) x23) x24) x34)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i (i (i (i (i delta x12) x13) x14) x23) x24) x34)) (i (i realu_mul x34) (i (i realu_mul x24) x23))))) (i (i realu_mul (i (i (i (i (i (i rhou_ij x12) x13) x14) x23) x24) x34)) (i (i (i upsu_x x34) x24) x23)))
(rule (i lfun (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i a_ (i (i realu_add x) y)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i realu_neg y)))
(rule (i (i realu_add (i (i (i (i (i (i taumu_x x1) x2) x3) x4) x5) (i (i (i (i (i (i edgeu_flat2u_x x12) x1) x2) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))))) (i flatu_termu_x x12)) (i (i (i (i (i (i taumu_1flatu_x x1) x2) x3) x4) x5) x12))
(rule (i (i a_ (i (i realu_sub x) y)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) y))
(rule (i (i IN (i (i edge H) x)) (i edgeu_set H)) (i (i IN x) (i dart H)))
(rule (i REVERSE (i REVERSE l)) l)
(rule (i (i mul6 (i uni (i (i c_ lfun) (i (i div6 proju_y1) two6)))) dihu_xu_135u_s2) ldihu_xu_135u_s2)
(rule (i realu_ofu_num (i NUMERAL u_0)) (i measure EMPTY))
(rule (i mku_135 ldihu_xu_n) ldihu_xu_135u_n)
(rule (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i apexu_std3u_lhh y1) y2) y3) y4) y5) y6))
(rule (i (i b_s_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0)))) (i real0 z)) (i real0 (i (i complexu_mul (i Cx x)) z)))
(rule (i distance (i (i c_ (i vec (i NUMERAL u_0))) v)) (i vectoru_norm v))
(rule (i (i a_ (i exp x)) (i exp y)) (i (i a_ x) y))
(rule (i (i b_s_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) x)) (i (i realu_lt x) (i realu_ofu_num (i NUMERAL u_0)))) (i w_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i w_ (i (i intu_lt x) y)) (i (i intu_le y) x))
(rule (i (i DIFF UNIV) (i (i UNION s0) (i outside s0))) (i inside s0))
(rule (i (i (i (i (i (i gamma3fu_vLu_nlfun (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i gamma3fu_vLu_xu_nlfun x1) x2) x3) x4) x5) x6))
(rule (i (i a_ (i (i m_ m) n)) (i NUMERAL u_0)) (i (i l_a_ m) n))
(rule (i (i s_b_ (i w_ (i (i a_ (i (i edgeu_map H) x)) x))) (i (i s_b_ (i w_ (i (i a_ (i (i nodeu_map H) x)) x))) (i (i a_ (i (i faceu_map H) x)) x))) (i (i isu_faceu_degenerate H) x))
(rule (i (i realu_pow (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) n) (i cos (i (i realu_mul (i realu_ofu_num n)) pi)))
(rule (i w_ (i (i intu_le x) y)) (i (i intu_lt y) x))
(rule (i (i vectoru_sub (i (i vectoru_sub x) y)) x) (i vectoru_neg y))
(rule (i INTERS (i (i IMAGE (i bisu_le v)) (i (i DELETE s0) v))) (i (i voronoiu_closed s0) v))
(rule (i (i intu_mul (i intu_sgn x)) (i intu_abs x)) x)
(rule (i (i complexu_mul (i (i cpow w) z1)) (i (i cpow w) z2)) (i (i cpow w) (i (i vectoru_add z1) z2)))
(rule (i (i (i COND (i (i b_s_ (i (i a_ x) (i vec (i NUMERAL u_0)))) (i (i a_ y) (i vec (i NUMERAL u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_pow (i (i realu_div (i (i dot x) y)) (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y)))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_pow (i sin (i (i vectoru_angle x) y))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i (i (i (i (i gamma3fu_vLRu_n0 (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i gamma3fu_vLRu_xu_n0 x1) x2) x3) x4) x5) x6))
(rule (i mku_135 (i rotate3 ldihu_xu_n)) ldih3u_xu_135u_n)
(rule (i rotate2 ldihu_x) ldih2u_x)
(rule (i (i l_ m) (i SUC n)) (i (i l_a_ m) n))
(rule (i netlimit (i atreal a)) a)
(rule (i FST (i SND (i SND (i SND (i tupleu_stableu_sy s0))))) (i au_sy s0))
(rule (i (i (i (i mirror H) x) n) n) (i (i (i complement H) x) n))
(rule (i (i intu_lt (i (i intu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i intu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i intu_lt (i intu_abs x)) (i intu_abs y)))
(rule (i (i a_ (i frac x)) (i realu_ofu_num (i NUMERAL u_0))) (i integer x))
(rule (i (i (i hasu_integral (i (i o lift) (i (i o f) drop))) (i lift y)) (i closedu_interval (i (i CONS (i (i c_ (i lift a)) (i lift b))) NIL))) (i (i (i hasu_realu_integral f) y) (i closedu_realu_interval (i (i CONS (i (i c_ a) b)) NIL))))
(rule (i (i DIV n) (i NUMERAL (i BIT1 u_0))) n)
(rule (i (i INSERT (i vec (i NUMERAL u_0))) EMPTY) (i (i hull convexu_cone) EMPTY))
(rule (i (i l_a_ (i (i p_ m) p)) (i (i p_ n) p)) (i (i l_a_ m) n))
(rule (i (i (i (i (i (i (i node2u_y f) y1) y2) y3) y4) y5) y6) (i (i (i (i (i (i f y2) y3) y1) y5) y6) y4))
(rule (i (i s_b_ (i (i l_a_u_c s0) t)) (i w_ (i (i l_a_u_c t) s0))) (i (i l_u_c s0) t))
(rule (i realu_inv (i (i realu_pow (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) n)) (i twopow (i intu_neg (i intu_ofu_num n))))
(rule (i (i a_ (i matrixu_neg A0)) (i mat (i NUMERAL u_0))) (i (i a_ A0) (i mat (i NUMERAL u_0))))
(rule (i (i complexu_mul x) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) x)
(rule (i realu_abs (i (i realu_sub (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i (i d_ y) (i NUMERAL (i BIT1 u_0))))) (i distance (i (i c_ x) y)))
(rule (i (i s_b_ (i (i IN x) s0)) (i w_ (i (i a_ (i f x)) (i neutral op)))) (i (i IN x) (i (i (i support op) f) s0)))
(rule (i (i matrixu_mul A0) (i mat (i NUMERAL (i BIT1 u_0)))) A0)
(rule (i (i complexu_div (i (i vectoru_add (i csin (i (i vectoru_add w) z))) (i csin (i (i vectoru_sub w) z)))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i csin w)) (i ccos z)))
(rule (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) a)) (i (i realu_lt (i (i dot x) x)) (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_lt (i vectoru_norm x)) a))
(rule (i (i b_s_ (i (i intu_lt x) y)) (i (i intu_lt y) x)) (i w_ (i (i a_ x) y)))
(rule (i (i realu_pow (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i ABSu_prod (i (i mku_pair x) y)) (i (i c_ x) y))
(rule (i (i (i COND (i (i a_ y) (i realu_ofu_num (i NUMERAL u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i rpow (i realu_ofu_num (i NUMERAL u_0))) y))
(rule (i yu_ofu_x rad2u_x) rad2u_y)
(rule (i (i realu_div (i (i (i (i (i (i rhou_x x1) x2) x3) x4) x5) x6)) (i (i realu_mul (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i rad2u_x x1) x2) x3) x4) x5) x6))
(rule (i (i realu_mul (i (i realu_sub (i (i realu_sub (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i upperu_dihu_y y1) y2) sqrt2) sqrt2) sqrt2) y6))) (i (i (i (i (i (i upperu_dihu_y y1) y3) sqrt2) sqrt2) sqrt2) y5))) (i (i realu_div (i (i realu_sub (i (i vol2r y1) sqrt2)) (i (i (i vol2f y1) sqrt2) f))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) (i (i (i (i (i (i (i gamma3fu_vLRu_n y1) y2) y3) y4) y5) y6) f))
(rule (i (i realu_mul (i (i (i (i (i (i f x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i g x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i (i (i mul6 f) g) x1) x2) x3) x4) x5) x6))
(rule (i floor (i realu_ofu_num n)) (i realu_ofu_num n))
(rule (i measurable (i (i IMAGE lift) s0)) (i realu_measurable s0))
(rule (i (i IN (i (i INSERT a) (i (i INSERT b) EMPTY))) E) (i (i IN (i (i c_ a) b)) (i ordu_pairs E)))
(rule (i (i voronoiu_set V) (i setu_ofu_list wl)) (i (i voronoiu_list V) wl))
(rule (i (i EL v) (i bnu_heights g)) (i (i bnu_height g) v))
(rule (i Re (i cexp (i (i complexu_mul ii) (i Cx x)))) (i cos x))
(rule (i (i vectoru_angle (i vectoru_neg x)) (i vectoru_neg y)) (i (i vectoru_angle x) y))
(rule (i cos (i (i realu_add x) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) (i cos x))
(rule (i sin (i (i realu_add x) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) (i sin x))
(rule (i (i realu_div (i (i truncateu_sqrt c) (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))) (i (i (i (i (i (i (i truncateu_volu_x c) x1) x2) x3) x4) x5) x6))
(rule (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) a)) (i w_ (i (i a_ a) (i realu_ofu_num (i NUMERAL u_0))))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) a))
(rule (i interior EMPTY) EMPTY)
(rule (i sin (i (i realu_add x) pi)) (i realu_neg (i sin x)))
(rule (i sin (i (i realu_add (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) x)) (i cos x))
(rule (i (i realu_div (i vectoru_norm (i FST x))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i hu_dart x))
(rule (i cos (i (i realu_add (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) x)) (i realu_neg (i sin x)))
(rule (i (i (i COND (i (i IN (i (i c_ v) u)) (i (i dartsu_ofu_hyp E) V))) (i (i c_ u) (i (i (i (i ivsu_azimu_cycle (i (i EE u) E)) x) u) v))) (i (i c_ v) u)) (i (i ffu_ofu_hyp (i (i c_ x) (i (i c_ V) E))) (i (i c_ v) u)))
(rule (i (i realu_mul (i marchalu_quartic (i (i realu_div (i sqrt x2)) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) (i (i (i (i (i (i dih2u_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i mardih2u_x x1) x2) x3) x4) x5) x6))
(rule (i (i IN x) (i setu_ofu_list l)) (i (i MEM x) l))
(rule (i (i r_ c) (i vec (i NUMERAL u_0))) (i vec (i NUMERAL u_0)))
(rule (i (i matrixu_add (i (i r_r_ c) A0)) (i (i r_r_ c) B0)) (i (i r_r_ c) (i (i matrixu_add A0) B0)))
(rule (i (i vectoru_sub x) (i vectoru_neg y)) (i (i vectoru_add x) y))
(rule (i atn2 (i (i c_ (i realu_ofu_num (i NUMERAL u_0))) (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i realu_neg (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))
(rule (i (i UNCURRY f) (i (i c_ x) y)) (i (i f x) y))
(rule (i (i mul6 (i uni (i (i c_ lfun) (i (i div6 proju_y5) two6)))) dih5u_xu_135u_s2) ldih5u_xu_135u_s2)
(rule (i (i l_a_u_c UNIV) s0) (i INFINITE s0))
(rule (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_add x) y)) (i (i intu_le (i intu_neg x)) y))
(rule (i ccos (i cacs z)) z)
(rule (i (i a_ (i (i realu_add (i distance (i (i c_ v1) v))) (i distance (i (i c_ v) v2)))) (i distance (i (i c_ v1) v2))) (i (i IN v) (i (i hull convex) (i (i INSERT v1) (i (i INSERT v2) EMPTY)))))
(rule (i (i (i COND (i (i realu_lt x) (i realu_ofu_num (i NUMERAL u_0)))) (i realu_ofu_num (i NUMERAL u_0))) (i sqrt x)) (i ssqrt x))
(rule (i (i realu_add y1) (i (i realu_mul (i (i realu_sub x) x1)) (i (i realu_div (i (i realu_sub y2) y1)) (i (i realu_sub x2) x1)))) (i (i (i (i (i interp x1) y1) x2) y2) x))
(rule (i (i (i COND (i (i a_ n) (i NUMERAL u_0))) (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_pow (i intu_ofu_num (i NUMERAL u_0))) n))
(rule (i ball (i (i c_ x) (i realu_ofu_num (i NUMERAL u_0)))) EMPTY)
(rule (i (i s_b_ (i P x)) (i (i MEM x) l)) (i (i MEM x) (i (i FILTER P) l)))
(rule (i (i vectoru_add (i vectoru_neg x)) (i vectoru_neg y)) (i vectoru_neg (i (i vectoru_add x) y)))
(rule (i (i a_ (i Arg (i complexu_inv z))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ (i Arg z)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i matrixu_add (i matrixu_neg A0)) (i matrixu_neg B0)) (i matrixu_neg (i (i matrixu_add A0) B0)))
(rule (i (i realu_sub (i Re x)) (i Re y)) (i Re (i (i vectoru_sub x) y)))
(rule (i intu_neg (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i affu_dim EMPTY))
(rule (i binom (i (i c_ (i SUC n)) n)) (i SUC n))
(rule (i intu_ofu_real (i realu_ofu_num n)) (i intu_ofu_num n))
(rule (i (i dot (i (i vectoru_sub (i (i r_ (i (i dot w) w)) v1)) (i (i r_ (i (i dot v1) w)) w))) w) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i scalar6 (i uni (i (i c_ sqrt) deltau_x))) (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))) volu_x)
(rule (i realu_ofu_num (i NUMERAL u_0)) (i Re ii))
(rule (i (i realu_sub (i (i realu_mul x) z)) (i (i realu_mul y) z)) (i (i realu_mul (i (i realu_sub x) y)) z))
(rule (i (i realu_mul (i realu_inv x)) (i realu_inv y)) (i realu_inv (i (i realu_mul x) y)))
(rule (i (i vectoru_sub x) (i (i vectoru_add x) y)) (i vectoru_neg y))
(rule (i vectoru_neg (i vec (i NUMERAL u_0))) (i vec (i NUMERAL u_0)))
(rule (i (i s_b_ (i w_ (i (i a_ A0) B0))) (i (i s_b_ (i w_ (i (i a_ C) B0))) (i (i b_s_ (i (i a_ (i distance (i (i c_ A0) B0))) (i (i realu_add (i distance (i (i c_ A0) C))) (i distance (i (i c_ C) B0))))) (i (i a_ (i distance (i (i c_ B0) C))) (i (i realu_add (i distance (i (i c_ A0) C))) (i distance (i (i c_ A0) B0))))))) (i (i a_ (i angle (i (i c_ A0) (i (i c_ B0) C)))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i faceu_set (i hypermapu_ofu_fan (i (i c_ V) E))) (i faceu_setu_ofu_fan (i (i c_ V) E)))
(rule (i (i realu_mul (i sqn (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6))) (i (i (i (i (i (i lmdih3u_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i lmdih3u_xu_n x1) x2) x3) x4) x5) x6))
(rule (i rotate6 solu_euleru_xu_divu_sqrtdelta) solu_euler156u_xu_divu_sqrtdelta)
(rule (i (i r_ (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) x) (i vectoru_neg x))
(rule (i collinear (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT (i basis (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i INSERT x) EMPTY)))) (i (i a_ (i (i dropout (i NUMERAL (i BIT1 (i BIT1 u_0)))) x)) (i vec (i NUMERAL u_0))))
(rule (i OUTR (i INR y)) y)
(rule (i (i a_ (i realu_neg x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i atn (i halfatn x))) (i atn x))
(rule (i shift (i (i edgeu_walkup (i shift (i shift H))) x)) (i (i faceu_walkup H) x))
(rule (i (i s_b_ (i (i analyticu_on f) s0)) (i (i analyticu_on f) t)) (i (i analyticu_on f) (i (i UNION s0) t)))
(rule (i (i realu_add (i (i realu_mul (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) mm1)) (i (i realu_add (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_div mm1) pi))) (i (i realu_add (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i dih2u_y y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i dih3u_y y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i dih4u_y y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i dih5u_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i dih6u_y y1) y2) y3) y4) y5) y6)))))))) (i (i realu_mul (i (i realu_mul (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) (i (i realu_div mm2) pi))) (i (i realu_add (i (i realu_mul (i f (i (i realu_div y1) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6))) (i (i realu_add (i (i realu_mul (i f (i (i realu_div y2) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dih2u_y y1) y2) y3) y4) y5) y6))) (i (i realu_add (i (i realu_mul (i f (i (i realu_div y3) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dih3u_y y1) y2) y3) y4) y5) y6))) (i (i realu_add (i (i realu_mul (i f (i (i realu_div y4) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dih4u_y y1) y2) y3) y4) y5) y6))) (i (i realu_add (i (i realu_mul (i f (i (i realu_div y5) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dih5u_y y1) y2) y3) y4) y5) y6))) (i (i realu_mul (i f (i (i realu_div y6) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dih6u_y y1) y2) y3) y4) y5) y6)))))))))) (i (i (i (i (i (i (i vol4f y1) y2) y3) y4) y5) y6) f))
(rule (i (i a_ (i (i realu_add (i (i realu_div a) (i (i realu_add a) b))) (i (i realu_div b) (i (i realu_add a) b)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i w_ (i (i a_ (i (i realu_add a) b)) (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i OUTL (i INL x)) x)
(rule (i (i (i COND (i (i a_ x) (i NUMERAL u_0))) (i (i a_a_g_ (i (i a_ m) (i NUMERAL u_0))) (i (i a_ n) (i NUMERAL u_0)))) (i (i b_s_ (i (i a_ x) (i NUMERAL (i BIT1 u_0)))) (i (i l_a_ m) n))) (i (i l_a_ (i (i EXP x) m)) (i (i EXP x) n)))
(rule (i (i a_ (i (i hrealu_add m) n)) (i (i hrealu_add m) p)) (i (i a_ n) p))
(rule (i (i b_s_ (i EVEN m)) (i EVEN n)) (i EVEN (i (i t_ m) n)))
(rule (i (i (i iterate op) (i (i (i support op) f) s0)) f) (i (i (i iterate op) s0) f))
(rule (i Re (i Cx x)) x)
(rule (i (i a_ (i cnj w)) (i cnj z)) (i (i a_ w) z))
(rule (i (i closedu_in euclidean) s0) (i closed s0))
(rule (i FST (i SND (i destu_bnu_graph g))) (i bnu_countVertices g))
(rule (i CARD (i setu_ofu_cube (i (i intu_ball x) r))) (i CARD (i (i intu_ball x) r)))
(rule (i (i INTER (i (i normball v0) r)) (i (i cone0 v0) S)) (i (i (i solidu_triangle v0) S) r))
(rule (i collinear (i (i INSERT (i vec (i NUMERAL u_0))) (i (i INSERT (i (i vectoru_sub b) a)) (i (i INSERT (i (i vectoru_sub c) a)) EMPTY)))) (i collinear (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY)))))
(rule (i (i permutes p) (i (i INSERT a) EMPTY)) (i (i a_ p) I))
(rule (i (i t_ (i (i m_ (i (i p_ n) (i NUMERAL (i BIT1 u_0)))) k)) (i binom (i (i c_ (i (i p_ n) (i NUMERAL (i BIT1 u_0)))) k))) (i (i t_ (i (i p_ n) (i NUMERAL (i BIT1 u_0)))) (i binom (i (i c_ n) k))))
(rule (i (i add6 (i (i (i (i (i (i (i compose6 (i gamma3u_x m1)) dummy6) dummy6) dummy6) proju_x1) proju_x3) proju_x5)) (i (i scalar6 (i (i sub6 dihu_x) (i mku_135 dihu_x))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))))))) (i gamma23u_keep135u_x m1))
(rule (i intu_coprime (i (i c_ (i intu_ofu_num a)) (i intu_ofu_num b))) (i numu_coprime (i (i c_ a) b)))
(rule (i (i INSERT (i vec (i NUMERAL u_0))) EMPTY) (i span EMPTY))
(rule (i (i intu_sub (i (i intu_add x) y)) x) y)
(rule (i (i realu_sub (i Im x)) (i Im y)) (i Im (i (i vectoru_sub x) y)))
(rule (i (i realu_mul (i lfun (i (i realu_div (i sqrt x1)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dihu_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i ldihu_x x1) x2) x3) x4) x5) x6))
(rule (i (i realu_le (i (i realu_add x) z)) (i (i realu_add y) z)) (i (i realu_le x) y))
(rule (i (i vectoru_sub (i (i r_ (i (i dot x) z)) y)) (i (i r_ (i (i dot x) y)) z)) (i (i cross x) (i (i cross y) z)))
(rule (i (i EL v) (i bnu_faceListAt g)) (i (i bnu_facesAt g) v))
(rule (i (i realu_add (i (i (i (i (i (i rhazimu_x x1) x2) x3) x4) x5) x6)) (i (i realu_add (i (i (i (i (i (i rhazim2u_x x1) x2) x3) x4) x5) x6)) (i (i realu_sub (i (i (i (i (i (i rhazim3u_x x1) x2) x3) x4) x5) x6)) (i (i realu_mul (i (i realu_add (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) const1)) pi)))) (i (i (i (i (i (i taumu_x x1) x2) x3) x4) x5) x6))
(rule (i (i realu_le (i mku_real (i trealu_eq x1))) (i mku_real (i trealu_eq y1))) (i (i trealu_le x1) y1))
(rule (i (i s_b_ (i (i SUBSET s0) (i topspace top))) (i (i closedu_in top) (i (i DIFF (i topspace top)) s0))) (i (i openu_in top) s0))
(rule (i realu_abs (i realu_ofu_num n)) (i realu_ofu_num n))
(rule (i (i realu_sub (i trace A0)) (i trace B0)) (i trace (i (i matrixu_sub A0) B0)))
(rule (i (i b_s_ (i (i a_ a) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ x) (i vec (i NUMERAL u_0)))) (i (i a_ (i (i r_ a) x)) (i vec (i NUMERAL u_0))))
(rule (i RC (i TC (i SC R))) (i RSTC R))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y4) sqrt8))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i apexu_flat y1) y2) y3) y4) y5) y6))
(rule (i (i (i (i (i (i sqrtu_x6 x1) x2) x3) x4) x5) x6) (i sqrt x6))
(rule (i (i (i (i (i (i sqrtu_x5 x1) x2) x3) x4) x5) x6) (i sqrt x5))
(rule (i (i (i COND a) (i (i realu_mul b) d)) (i (i realu_mul c) d)) (i (i realu_mul (i (i (i COND a) b) c)) d))
(rule (i (i (i (i (i (i sqrtu_x4 x1) x2) x3) x4) x5) x6) (i sqrt x4))
(rule (i (i (i (i (i (i sqrtu_x3 x1) x2) x3) x4) x5) x6) (i sqrt x3))
(rule (i (i (i (i (i (i sqrtu_x2 x1) x2) x3) x4) x5) x6) (i sqrt x2))
(rule (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0))))))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))))) t0)
(rule (i (i (i (i (i (i sqrtu_x1 x1) x2) x3) x4) x5) x6) (i sqrt x1))
(rule (i (i intu_add (i (i intu_mul x) y)) (i (i intu_mul x) z)) (i (i intu_mul x) (i (i intu_add y) z)))
(rule (i (i a_ (i (i realu_add (i (i realu_pow (i Re z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i Im z)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ z) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i b_s_ (i (i between a) (i (i c_ b) c))) (i (i b_s_ (i (i between b) (i (i c_ c) a))) (i (i between c) (i (i c_ a) b)))) (i collinear (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY)))))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i dot v) (i normalize u))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i dot v) u)))
(rule (i (i realu_mul (i (i realu_pow x) m)) (i (i realu_pow x) n)) (i (i realu_pow x) (i (i p_ m) n)))
(rule (i isu_interval (i (i IMAGE lift) s0)) (i isu_realinterval s0))
(rule (i (i a_ (i (i dot x) y)) (i realu_ofu_num (i NUMERAL u_0))) (i (i orthogonal x) y))
(rule (i (i (i subpath (i vec (i NUMERAL (i BIT1 u_0)))) (i vec (i NUMERAL u_0))) g) (i reversepath g))
(rule (i (i setu_ofu_faceu_meetingu_node (i oppositeu_hypermap H)) x) (i (i setu_ofu_faceu_meetingu_node H) x))
(rule (i (i r_ (i realu_inv (i vectoru_norm (i (i cross (i (i (i e3u_fan x) v) u)) (i (i vectoru_sub u) x))))) (i (i cross (i (i (i e3u_fan x) v) u)) (i (i vectoru_sub u) x))) (i (i (i e2u_fan x) v) u))
(rule (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i csin (i (i complexu_div (i (i vectoru_add w) z)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i ccos (i (i complexu_div (i (i vectoru_sub w) z)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i (i vectoru_add (i csin w)) (i csin z)))
(rule (i (i s_b_ (i (i realu_le x) a)) (i (i s_b_ (i (i realu_le y) a)) (i (i realu_le z) a))) (i (i realu_le (i (i (i maxu_real3 x) y) z)) a))
(rule (i (i realu_sub pi) (i (i vectoru_angle x) y)) (i (i vectoru_angle (i vectoru_neg x)) y))
(rule (i (i (i POWER (i edgeu_map H)) (i CARD (i (i edge H) x))) x) x)
(rule (i (i realu_mul (i sqn (i (i (i (i (i (i deltau_y y1) y2) y3) y4) y5) y6))) (i (i realu_sub (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))) (i (i realu_sub (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi))) (i (i realu_add (i (i (i (i (i (i (i yu_ofu_x solu_euleru_xu_divu_sqrtdelta) y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i (i yu_ofu_x solu_euler246u_xu_divu_sqrtdelta) y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i (i yu_ofu_x solu_euler156u_xu_divu_sqrtdelta) y1) y2) y3) y4) y5) y6))))) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) pi))) (i (i realu_add (i (i (i (i (i (i (i yu_ofu_x lmdihu_xu_divu_sqrtdeltau_posbranch) y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i (i yu_ofu_x lmdih2u_xu_divu_sqrtdeltau_posbranch) y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i (i yu_ofu_x lmdih6u_xu_divu_sqrtdeltau_posbranch) y1) y2) y3) y4) y5) y6))))))) (i (i (i (i (i (i gamma3fu_126u_n y1) y2) y3) y4) y5) y6))
(rule (i (i s_b_ (i w_ (i (i a_ (i (i edgeu_map H) x)) x))) (i (i s_b_ (i (i a_ (i (i nodeu_map H) x)) x)) (i w_ (i (i a_ (i (i faceu_map H) x)) x)))) (i (i isu_nodeu_degenerate H) x))
(rule (i (i realu_mul (i sqn (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6))) (i (i (i (i (i (i lmdih2u_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i lmdih2u_xu_n x1) x2) x3) x4) x5) x6))
(rule (i tan (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i matrixu_mul A0) (i mat (i NUMERAL u_0))) (i mat (i NUMERAL u_0)))
(rule (i (i a_ (i interior s0)) s0) (i open s0))
(rule (i bnu_concat (i (i MAP r) xs)) (i (i cu_union xs) r))
(rule (i (i p_ p) (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i bnu_maxGon p))
(rule (i (i (i (i (i (i gamma3fu_vLRu_lfun (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i gamma3fu_xu_vLRu_lfun x1) x2) x3) x4) x5) x6))
(rule (i (i a_ (i transp A0)) (i transp B0)) (i (i a_ A0) B0))
(rule (i (i (i COND b) t) t) t)
(rule (i (i (i (i (i (i dih6u_y (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i dih6u_x x1) x2) x3) x4) x5) x6))
(rule (i (i realu_le (i distance (i (i c_ x) y))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) y))
(rule (i (i a_a_g_ p) (i (i s_b_ (i w_ (i (i a_ b) (i realu_ofu_num (i NUMERAL u_0))))) (i (i a_ r) (i (i realu_div a) b)))) (i (i (i (i ratform p) r) a) b))
(rule (i (i realu_div (i (i realu_mul (i (i realu_pow (i distance (i (i c_ v1) v2))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i (i realu_pow (i distance (i (i c_ v1) v3))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ v2) v3))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i upsu_x (i (i realu_pow (i distance (i (i c_ v1) v2))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ v1) v3))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ v2) v3))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_pow (i (i (i etau_y (i (i d3 v2) v3)) (i (i d3 v1) v3)) (i (i d3 v1) v2))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i realu_add (i (i dot x) y)) (i (i dot x) z)) (i (i dot x) (i (i vectoru_add y) z)))
(rule (i (i (i COND (i (i a_ a) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i (i COND (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) a)) (i (i vectoru_angle x) y)) (i (i realu_sub pi) (i (i vectoru_angle x) y)))) (i (i vectoru_angle (i (i r_ a) x)) y))
(rule (i (i faceu_walkup (i (i faceu_walkup H) x)) y) (i (i (i doubleu_faceu_walkup H) x) y))
(rule (i (i (i POWER p) m) (i (i (i POWER p) n) x)) (i (i (i POWER p) (i (i p_ m) n)) x))
(rule (i iterate realu_add) sum)
(rule (i SND (i SND (i SND (i tupleu_hypermap H)))) (i faceu_map H))
(rule (i (i realu_add (i (i realu_pow (i (i (i (i (i bu_coef x12) x13) x14) x23) x24)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul x12) (i (i (i (i (i cu_coef x12) x13) x14) x23) x24)))) (i (i realu_mul (i (i (i upsu_x x12) x23) x13)) (i (i (i upsu_x x12) x24) x14)))
(rule (i FST (i SND (i SND (i tupleu_hypermap H)))) (i nodeu_map H))
(rule (i (i realu_div (i sin x)) (i cos x)) (i tan x))
(rule (i (i res (i (i (i (i sigmau_fan x) V) E) v)) (i (i (i setu_ofu_edge v) V) E)) (i (i (i (i extensionu_sigmau_fan x) V) E) v))
(rule (i (i realu_add (i (i realu_pow (i (i realu_sub (i (i realu_sub y1) hminus)) hplus)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_add (i (i realu_pow (i (i realu_sub y2) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_add (i (i realu_pow (i (i realu_sub y3) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_add (i (i realu_pow (i (i realu_sub y4) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_add (i (i realu_pow (i (i realu_sub y5) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i realu_sub y6) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i (i (i (i (i (i norm2hh y1) y2) y3) y4) y5) y6))
(rule (i (i b_s_ (i (i a_ xl) NIL)) (i (i a_ xl) (i (i CONS v) NIL))) (i (i initialu_sublist xl) (i (i CONS v) NIL)))
(rule (i flatu_term (i sqrt x)) (i flatu_termu_x x))
(rule (i (i a_ (i content (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ (i interior (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL)))) EMPTY))
(rule (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL u_0)))) x) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i (i nodeu_map H) x)) (i (i inverse (i edgeu_map H)) x)) (i (i a_ (i (i faceu_map H) x)) x))
(rule (i mapu_tou_nuau_kg (i (i c_ x) y)) (i (i nuau_kg x) y))
(rule (i (i realu_mul (i (i realu_pow y1) n10)) (i (i realu_mul (i (i realu_pow y2) n20)) (i (i realu_mul (i (i realu_pow y3) n30)) (i (i realu_mul (i (i realu_pow y4) n4)) (i (i realu_mul (i (i realu_pow y5) n5)) (i (i realu_pow y6) n6)))))) (i (i (i (i (i (i (i (i (i (i (i (i monomial n10) n20) n30) n4) n5) n6) y1) y2) y3) y4) y5) y6))
(rule (i fstcart (i (i pastecart x) y)) x)
(rule (i (i UNION (i UNIONS s0)) (i UNIONS t)) (i UNIONS (i (i UNION s0) t)))
(rule (i (i b_s_ (i (i a_ x) (i intu_ofu_num (i NUMERAL u_0)))) (i (i a_ y) (i intu_ofu_num (i NUMERAL u_0)))) (i (i a_ (i (i intu_mul x) y)) (i intu_ofu_num (i NUMERAL u_0))))
(rule (i rotate4 halfbumpu_x1) halfbumpu_x4)
(rule (i (i (i (i azimu_cycle (i (i INSERT a) (i (i INSERT b) EMPTY))) v) w) a) b)
(rule (i promote1u_tou_6 halfbumpu_x) halfbumpu_x1)
(rule (i (i (i (i (i (i (i rotate2 lmdihu_xu_divu_sqrtdeltau_posbranch) x1) x2) x3) x4) x5) x6) (i (i (i (i (i (i lmdih2u_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6))
(rule (i (i s_b_ (i FINITE s0)) (i (i a_ (i affu_dim s0)) (i (i intu_sub (i intu_ofu_num (i CARD s0))) (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i w_ (i affineu_dependent s0)))
(rule (i (i realu_lt (i exp x)) (i exp y)) (i (i realu_lt x) y))
(rule (i LENGTH (i (i REPLICATE n) x)) n)
(rule (i ball (i (i c_ x) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i mapu_tou_ball x))
(rule (i (i realu_mul (i (i realu_sub (i (i realu_sub (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i dihu_y y1) y2) sqrt2) sqrt2) sqrt2) y6))) (i (i (i (i (i (i dihu_y y1) y3) sqrt2) sqrt2) sqrt2) y5))) (i (i realu_div (i (i realu_sub (i (i vol2r y1) sqrt2)) (i (i (i vol2f y1) sqrt2) f))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) (i (i (i (i (i (i (i gamma3fu_vLR y1) y2) y3) y4) y5) y6) f))
(rule (i (i r_ (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i vectoru_norm v))) v) (i normize v))
(rule (i (i l_ (i SUC m)) (i SUC n)) (i (i l_ m) n))
(rule (i (i (i COND (i (i a_ l) NIL)) (i HD m)) (i HD l)) (i HD (i (i APPEND l) m)))
(rule (i (i realu_le (i exp x)) (i exp y)) (i (i realu_le x) y))
(rule (i (i (i COND (i (i g_ (i (i p_ r) (i (i t_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) s0))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i realu_add (i (i realu_mul (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))))))))) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num s0)))) (i (i realu_mul (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0))))))))))))))))) (i (i realu_add (i realu_ofu_num r)) (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num s0))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))))))) (i (i DECIMAL (i NUMERAL u_0)) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i tameu_tableu_d r) s0))
(rule (i (i t_ (i (i EXP m) n)) (i (i EXP m) p)) (i (i EXP m) (i (i p_ n) p)))
(rule (i w_ (i (i a_ z) (i Cx (i realu_ofu_num (i NUMERAL u_0))))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i vectoru_norm z)))
(rule (i (i b_s_ (i (i realu_lt a) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_gt (i (i dot x) x)) (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_gt (i vectoru_norm x)) a))
(rule (i (i orthogonal (i vectoru_neg x)) y) (i (i orthogonal x) y))
(rule (i (i s_b_ (i (i a_ (i FST X)) D0)) (i (i s_b_ (i (i a_ (i FST (i SND X))) e)) (i (i s_b_ (i (i a_ (i FST (i SND (i SND X)))) n)) (i (i a_ (i SND (i SND (i SND X)))) f)))) (i (i a_ X) (i (i c_ D0) (i (i c_ e) (i (i c_ n) f)))))
(rule (i (i l_u_c s0) UNIV) (i FINITE s0))
(rule (i (i realu_mul (i (i realu_sub (i (i realu_sub (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i dihu_y y1) y2) sqrt2) sqrt2) sqrt2) y6))) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))))) (i (i realu_div (i (i realu_sub (i (i vol2r y1) sqrt2)) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul pi) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_div y1) (i (i realu_mul sqrt2) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) (i (i (i (i (i (i gamma3fu_vL0 y1) y2) y3) y4) y5) y6))
(rule (i (i a_ (i planaru_ind H)) (i realu_ofu_num (i NUMERAL u_0))) (i planaru_hypermap H))
(rule (i (i add6 (i (i (i (i (i (i (i compose6 (i gamma3u_x m1)) dummy6) dummy6) dummy6) proju_x1) proju_x2) proju_x6)) (i (i add6 (i (i (i (i (i (i (i compose6 (i gamma3u_x m1)) dummy6) dummy6) dummy6) proju_x1) proju_x3) proju_x5)) (i (i scalar6 (i (i sub6 dihu_x) (i (i add6 (i mku_126 dihu_x)) (i mku_135 dihu_x)))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))))))))))) (i gamma23u_full8u_x m1))
(rule (i cos (i (i realu_add x) (i (i realu_mul (i realu_ofu_num n)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi)))) (i cos x))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i (i upsu_x (i (i realu_pow (i distance (i (i c_ v1) v2))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ v1) v3))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ v2) v3))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i w_ (i collinear (i (i INSERT v1) (i (i INSERT v2) (i (i INSERT v3) EMPTY))))))
(rule (i realu_abs (i realu_neg x)) (i realu_abs x))
(rule (i ctan (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i (i COND (i (i s_b_ (i (i realu_lt (i hl (i (i truncateu_simplex (i NUMERAL (i BIT0 (i BIT1 u_0)))) ul))) (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_le (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i hl ul)))) (i (i hull convex) (i (i UNION (i setu_ofu_list (i (i truncateu_simplex (i NUMERAL (i BIT0 (i BIT1 u_0)))) ul))) (i (i INSERT (i (i mxi V) ul)) EMPTY)))) EMPTY) (i (i mcell3 V) ul))
(rule (i rank (i mat (i NUMERAL u_0))) (i NUMERAL u_0))
(rule (i (i (i COND (i (i realu_le (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i hl ul))) (i (i DIFF (i (i INTER (i (i rogers V) ul)) (i cball (i (i c_ (i HD ul)) (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i (i (i rconeu_gt (i HD ul)) (i HD (i TL ul))) (i (i realu_div (i hl (i (i truncateu_simplex (i NUMERAL (i BIT1 u_0))) ul))) (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) EMPTY) (i (i mcell1 V) ul))
(rule (i (i DIFF (i (i rogers V) ul)) (i ball (i (i c_ (i HD ul)) (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i mcell0 V) ul))
(rule (i w_ (i FINITE s0)) (i INFINITE s0))
(rule (i (i (i (i (i (i (i yu_ofu_x rad2u_x) y1) y2) y3) y4) y5) y6) (i (i (i (i (i (i rad2u_y y1) y2) y3) y4) y5) y6))
(rule (i (i a_ (i shift H)) (i shift Hi_)) (i (i a_ H) Hi_))
(rule (i (i (i m_m_m_g_ (i (i o f) drop)) a) (i (i within (i at (i lift x))) (i (i IMAGE lift) s0))) (i (i (i m_m_m_g_ f) a) (i (i within (i atreal x)) s0)))
(rule (i (i a_ (i (i dot x) x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i a_ (i vectoru_norm x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i s_b_ (i (i IN x) s0)) (i (i IN x) t)) (i (i IN x) (i (i INTER s0) t)))
(rule (i (i a_ (i vectoru_norm x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i vec (i NUMERAL u_0))))
(rule (i (i realu_sub (i (i realu_pow (i Re z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i Im z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i Re (i (i complexu_pow z) (i NUMERAL (i BIT0 (i BIT1 u_0))))))
(rule (i (i realu_mul (i lfun (i (i realu_div (i sqrt x1)) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) (i (i (i (i (i (i dihu_xu_126u_s2 x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i ldihu_xu_126u_s2 x1) x2) x3) x4) x5) x6))
(rule (i (i hasu_realu_measure s0) (i realu_measure s0)) (i realu_measurable s0))
(rule (i (i vectoru_sub (i vectoru_neg x)) (i vectoru_neg y)) (i (i vectoru_sub y) x))
(rule (i intu_ofu_real (i (i realu_add (i realu_ofu_int x)) (i realu_ofu_int y))) (i (i intu_add x) y))
(rule (i (i POWER f) (i NUMERAL (i BIT1 u_0))) f)
(rule (i (i POWER f) (i NUMERAL u_0)) I)
(rule (i (i a_ (i det A0)) (i realu_ofu_num (i NUMERAL u_0))) (i w_ (i invertible A0)))
(rule (i (i vectoru_add (i (i dropout k) x)) (i (i dropout k) y)) (i (i dropout k) (i (i vectoru_add x) y)))
(rule (i (i a_ (i sin (i (i realu_mul n) pi))) (i realu_ofu_num (i NUMERAL u_0))) (i integer n))
(rule (i (i matrixu_add (i (i matrixu_mul A0) C)) (i (i matrixu_mul B0) C)) (i (i matrixu_mul (i (i matrixu_add A0) B0)) C))
(rule (i w_ (i (i realu_lt x) y)) (i (i realu_le y) x))
(rule (i (i vectoru_sub x) (i (i vectoru_sub x) y)) y)
(rule (i intu_ofu_real (i realu_abs (i realu_ofu_int x))) (i intu_abs x))
(rule (i (i s_b_ (i (i integrableu_on f) s0)) (i (i a_ (i (i integral s0) f)) i0)) (i (i (i hasu_integral f) i0) s0))
(rule (i CARD (i edgeu_set H)) (i numberu_ofu_edges H))
(rule (i (i realu_add (i (i realu_mul (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) mm1)) (i (i realu_add (i (i realu_mul (i gcy y1)) (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6))) (i (i realu_add (i (i realu_mul (i gcy y2)) (i (i (i (i (i (i dih2u_y y1) y2) y3) y4) y5) y6))) (i (i realu_add (i (i realu_mul (i gcy y3)) (i (i (i (i (i (i dih3u_y y1) y2) y3) y4) y5) y6))) (i (i realu_add (i (i realu_mul (i gcy y4)) (i (i (i (i (i (i dih4u_y y1) y2) y3) y4) y5) y6))) (i (i realu_add (i (i realu_mul (i gcy y5)) (i (i (i (i (i (i dih5u_y y1) y2) y3) y4) y5) y6))) (i (i realu_mul (i gcy y6)) (i (i (i (i (i (i dih6u_y y1) y2) y3) y4) y5) y6)))))))) (i (i (i (i (i (i (i vol4f y1) y2) y3) y4) y5) y6) lmfun))
(rule (i oppositeu_hypermap (i oppositeu_hypermap H)) H)
(rule (i CARD (i (i o_o_ (i NUMERAL (i BIT1 u_0))) n)) n)
(rule (i realu_ofu_num (i NUMERAL (i BIT1 u_0))) (i vectoru_norm ii))
(rule (i NUMERAL n) n)
(rule (i (i s_b_ (i (i a_ (i (i edgeu_map H) x)) x)) (i (i s_b_ (i w_ (i (i a_ (i (i nodeu_map H) x)) x))) (i w_ (i (i a_ (i (i faceu_map H) x)) x)))) (i (i isu_edgeu_degenerate H) x))
(rule (i (i complexu_pow ii) (i (i p_ n) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i vectoru_neg (i (i complexu_pow ii) n)))
(rule (i (i vectoru_angle (i (i vectoru_sub a) b)) (i (i vectoru_sub c) b)) (i angle (i (i c_ a) (i (i c_ b) c))))
(rule (i (i INTER (i interior s0)) (i interior t)) (i interior (i (i INTER s0) t)))
(rule (i Re (i csin (i Cx x))) (i sin x))
(rule (i (i (i COND (i (i a_ k) i0)) j) (i (i (i COND (i (i a_ k) j)) i0) k)) (i (i swap (i (i c_ i0) j)) k))
(rule (i (i cross (i (i (i e2u_fan x) v) u)) (i (i (i e3u_fan x) v) u)) (i (i (i e1u_fan x) v) u))
(rule (i (i a_ (i (i edgeu_map H) x)) (i (i edgeu_map H) y)) (i (i a_ x) y))
(rule (i (i complexu_mul (i vectoru_neg x)) (i vectoru_neg y)) (i (i complexu_mul x) y))
(rule (i (i a_ (i intu_neg x)) (i intu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i intu_ofu_num (i NUMERAL u_0))))
(rule (i (i s_b_ (i (i (i m_m_g_ f) l) (i (i within (i at x)) s0))) (i (i (i m_m_g_ f) l) (i (i within (i at x)) t))) (i (i (i m_m_g_ f) l) (i (i within (i at x)) (i (i UNION s0) t))))
(rule (i measure (i cball (i (i c_ (i vec (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) pi)
(rule (i complexu_inv (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i b_s_ (i (i IN x) s0)) (i (i IN x) t)) (i (i IN x) (i (i UNION s0) t)))
(rule (i (i c_ (i FST x)) (i SND x)) x)
(rule (i complexu_inv (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i intu_lt (i intu_neg x)) (i intu_neg y)) (i (i intu_lt y) x))
(rule (i (i (i glue (i (i loopu_path L) (i (i inverse (i nodeu_map H)) (i (i (i (i heading H) NF) L) x)))) (i (i complement H) (i (i (i (i attach H) NF) L) x))) (i (i (i index L) (i (i inverse (i nodeu_map H)) (i (i (i (i heading H) NF) L) x))) (i (i nodeu_map H) (i (i (i (i attach H) NF) L) x)))) (i (i (i (i geney H) NF) L) x))
(rule (i (i (i glue (i (i loopu_path L) (i (i (i (i attach H) NF) L) x))) (i (i faceu_contour H) (i (i (i (i heading H) NF) L) x))) (i (i (i index L) (i (i (i (i attach H) NF) L) x)) (i (i (i (i heading H) NF) L) x))) (i (i (i (i genex H) NF) L) x))
(rule (i (i a_ (i (i hull convex) s0)) (i (i INSERT a) EMPTY)) (i (i a_ s0) (i (i INSERT a) EMPTY)))
(rule (i (i (i COND x) (i f y)) (i f z)) (i f (i (i (i COND x) y) z)))
(rule (i mku_456 (i truncateu_volu_x c)) (i truncateu_vol3ru_456 c))
(rule (i (i intu_add (i intu_ofu_num m)) (i intu_ofu_num n)) (i intu_ofu_num (i (i p_ m) n)))
(rule (i affu_dim (i (i hull convex) s0)) (i affu_dim s0))
(rule (i (i s_b_ (i linear f)) (i orthogonalu_matrix (i matrix f))) (i orthogonalu_transformation f))
(rule (i uni (i (i c_ pow2) deltau_x4)) delta4u_squaredu_x)
(rule (i vectoru_norm (i Cx x)) (i realu_abs x))
(rule (i (i realu_mul (i (i bu_tame p) q)) tableu_multiplier) (i realu_ofu_num (i (i bnu_squanderVertex p) q)))
(rule (i intu_neg (i (i intu_max (i intu_neg x)) (i intu_neg y))) (i (i intu_min x) y))
(rule (i (i realu_pow (i realu_abs x)) (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i a_ (i infnorm x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i vec (i NUMERAL u_0))))
(rule (i (i realu_mul (i twopow (i intu_ofu_num m))) (i twopow (i intu_ofu_num n))) (i twopow (i (i intu_add (i intu_ofu_num m)) (i intu_ofu_num n))))
(rule (i (i b_s_ (i (i realu_lt x) y)) (i (i realu_lt y) x)) (i w_ (i (i a_ x) y)))
(rule (i (i s_b_ (i (i a_ (i vectoru_norm e1)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i a_ (i vectoru_norm e2)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i a_ (i vectoru_norm e3)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i a_ (i (i dot e1) e2)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i s_b_ (i (i a_ (i (i dot e1) e3)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i s_b_ (i (i a_ (i (i dot e2) e3)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i dot (i (i cross e1) e2)) e3)))))))) (i (i (i orthonormal e1) e2) e3))
(rule (i (i (i (i (i (i dih5u_y (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i dih5u_x x1) x2) x3) x4) x5) x6))
(rule (i (i b_s_ (i (i l_ n) p)) (i (i b_s_ (i (i l_ q) m)) (i (i b_s_ (i (i l_ n) m)) (i (i l_ q) p)))) (i (i DISJOINT (i (i o_o_ m) n)) (i (i o_o_ p) q)))
(rule (i (i m_ (i (i p_ m) p)) (i (i p_ n) p)) (i (i m_ m) n))
(rule (i (i s_b_ (i orthogonalu_matrix Q)) (i (i a_ (i det Q)) (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i rotoinversionu_matrix Q))
(rule (i (i realu_add (i (i realu_mul (i sqrt x1)) (i (i realu_mul (i sqrt x2)) (i sqrt x3)))) (i (i realu_add (i (i realu_mul (i sqrt x1)) (i (i realu_div (i (i realu_add x2) (i (i realu_sub x3) x4))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_add (i (i realu_mul (i sqrt x2)) (i (i realu_div (i (i realu_add x1) (i (i realu_sub x3) x5))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i sqrt x3)) (i (i realu_div (i (i realu_add x1) (i (i realu_sub x2) x6))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i (i (i (i (i (i eulerAu_x x1) x2) x3) x4) x5) x6))
(rule (i (i realu_add (i (i realu_div (i (i (i (i (i (i gamma3fu_126u_n y1) y2) sqrt2) sqrt2) sqrt2) y6)) (i realu_ofu_num w1))) (i (i (i (i (i (i (i gamma3fu_vLu_n y1) y2) y3) y4) y5) y6) f)) (i (i (i (i (i (i (i (i (i gamma23fu_126u_03u_n y1) y2) y3) y4) y5) y6) w1) sqrt2) f))
(rule (i (i a_ (i relativeu_interior s0)) (i closure s0)) (i affine s0))
(rule (i rotate4 solu_euleru_xu_divu_sqrtdelta) solu_euler246u_xu_divu_sqrtdelta)
(rule (i (i intu_add x) (i intu_ofu_num (i NUMERAL u_0))) x)
(rule (i (i poweru_list (i next L)) x) (i (i loopu_path L) x))
(rule (i (i orbitu_map (i edgeu_map H)) x) (i (i edge H) x))
(rule (i (i INTER (i ball (i (i c_ a) r))) (i ball (i (i c_ a) s0))) (i ball (i (i c_ a) (i (i realu_min r) s0))))
(rule (i (i realu_add (i (i (i (i (i (i (i truncateu_dihu_x c) x1) x2) x3) x4) x5) x6)) (i (i realu_add (i (i (i (i (i (i (i truncateu_dihu_x c) x2) x3) x1) x5) x6) x4)) (i (i realu_sub (i (i (i (i (i (i (i truncateu_dihu_x c) x3) x1) x2) x6) x4) x5)) pi))) (i (i (i (i (i (i (i truncateu_solu_x c) x1) x2) x3) x4) x5) x6))
(rule (i (i (i hasu_realu_derivative f) (i (i realu_derivative f) x)) (i atreal x)) (i (i realu_differentiable f) (i atreal x)))
(rule (i measure (i (i INTER (i ball (i (i c_ (i vec (i NUMERAL u_0))) r))) (i (i affu_gt (i (i INSERT (i vec (i NUMERAL u_0))) EMPTY)) (i (i INSERT (i vectoru_neg v1)) (i (i INSERT (i vectoru_neg v2)) (i (i INSERT (i vectoru_neg v3)) EMPTY)))))) (i measure (i (i INTER (i ball (i (i c_ (i vec (i NUMERAL u_0))) r))) (i (i affu_gt (i (i INSERT (i vec (i NUMERAL u_0))) EMPTY)) (i (i INSERT v1) (i (i INSERT v2) (i (i INSERT v3) EMPTY)))))))
(rule (i (i realu_add (i (i realu_sub (i (i realu_sub (i (i realu_sub (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))))) (i (i realu_mul x1) x4))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))))) (i (i realu_mul x2) x4)))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))))) (i (i realu_mul x3) x4)))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul x1) (i (i realu_pow x4) (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))))) (i (i realu_mul x2) x5)))) (i (i realu_add (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))))) (i (i realu_mul x3) x5))) (i (i realu_add (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul x2) (i (i realu_mul x4) x5)))) (i (i realu_add (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))))) (i (i realu_mul x2) x6))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))))) (i (i realu_mul x3) x6)))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul x3) (i (i realu_mul x4) x6))))))) (i (i (i (i (i (i num1 x1) x2) x3) x4) x5) x6))
(rule (i (i HASu_SIZE s0) (i CARD s0)) (i FINITE s0))
(rule (i pathstart (i reversepath g)) (i pathfinish g))
(rule (i (i s_b_ (i convexu_localu_fan (i (i c_ V) (i (i c_ E) f)))) (i (i s_b_ (i packing V)) (i (i s_b_ (i (i SUBSET V) ballu_annulus)) (i (i s_b_ (i diagonal1 (i (i c_ V) E))) (i (i s_b_ (i (i a_ (i CARD E)) (i CARD f))) (i (i s_b_ (i (i l_a_ (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i CARD E))) (i (i l_a_ (i CARD E)) (i NUMERAL (i BIT0 (i BIT1 (i BIT1 u_0))))))))))) (i mainu_estimate (i (i c_ V) (i (i c_ E) f))))
(rule (i (i matrixu_sub (i (i matrixu_mul A0) B0)) (i (i matrixu_mul A0) C)) (i (i matrixu_mul A0) (i (i matrixu_sub B0) C)))
(rule (i realu_ofu_num (i NUMERAL u_0)) (i realu_measure EMPTY))
(rule (i (i s_b_ P) (i (i a_ v) t)) (i (i (i SETSPEC v) P) t))
(rule (i (i (i (i (i (i gamma3fu_vLu_lfun (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i gamma3fu_xu_vLu_lfun x1) x2) x3) x4) x5) x6))
(rule (i rotate6 proju_y1) proju_y6)
(rule (i rotate5 proju_y1) proju_y5)
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i floor x)) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i rotate4 proju_y1) proju_y4)
(rule (i rotate3 proju_y1) proju_y3)
(rule (i rotate2 proju_y1) proju_y2)
(rule (i promote1u_tou_6 sqrt) proju_y1)
(rule (i (i (i m_m_g_ (i (i o f) drop)) a) (i at (i lift x))) (i (i (i m_m_g_ f) a) (i atreal x)))
(rule (i (i (i negligibleu_funu_p f) S) (i vec (i NUMERAL u_0))) (i (i negligibleu_funu_0 f) S))
(rule (i STC (i STC R)) (i STC R))
(rule (i (i MEM (i (i c_ x) (i (i ASSOC x) l))) l) (i (i MEM x) (i (i MAP FST) l)))
(rule (i acs (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) pi)
(rule (i rotate6 proju_x1) proju_x6)
(rule (i rotate5 proju_x1) proju_x5)
(rule (i cacs (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i rotate4 proju_x1) proju_x4)
(rule (i Cx (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i cacs (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i rotate3 proju_x1) proju_x3)
(rule (i rotate2 proju_x1) proju_x2)
(rule (i promote1u_tou_6 I) proju_x1)
(rule (i bnu_minimal (i (i o LENGTH) bnu_verticesu_face)) bnu_minimalFace)
(rule (i (i vectoru_sub (i (i projection d) v)) (i (i projection d) w)) (i (i projection d) (i (i vectoru_sub v) w)))
(rule (i (i a_ (i cnj z)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ z) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i (i COND (i (i b_s_ (i w_ (i (i IN y) (i (i dartsu_ofu_hyp E) V)))) (i (i IN y) (i (i selfu_pairs E) V)))) y) (i (i c_ (i FST y)) (i (i (i (i azimu_cycle (i (i EE (i FST y)) E)) x) (i FST y)) (i SND y)))) (i (i nnu_ofu_hyp (i (i c_ x) (i (i c_ V) E))) y))
(rule (i (i (i COND (i (i IN u) (i (i dartsu_ofu_hyp E) V))) (i (i c_ (i FST u)) (i (i (i (i azimu_cycle (i (i EE (i FST u)) E)) x) (i FST u)) (i SND u)))) u) (i (i nnu_ofu_hyp (i (i c_ x) (i (i c_ V) E))) u))
(rule (i (i a_ (i cos (i (i (i arcV x) y) z))) (i cos (i (i (i arcV xx) yy) zz))) (i (i a_ (i (i (i arcV x) y) z)) (i (i (i arcV xx) yy) zz)))
(rule (i (i realu_add (i (i realu_div (i (i (i (i (i (i (i gamma3fu_126 y1) y2) y3) y4) y5) y6) f)) (i realu_ofu_num w1))) (i (i realu_add (i (i realu_div (i (i (i (i (i (i (i gamma3fu_135 y1) y2) y3) y4) y5) y6) f)) (i realu_ofu_num w2))) (i (i (i (i (i (i (i gamma3fu_vLR y1) y2) y3) y4) y5) y6) f))) (i (i (i (i (i (i (i (i (i (i gamma23f y1) y2) y3) y4) y5) y6) w1) w2) sqrt2) f))
(rule (i diameter (i (i hull convex) s0)) (i diameter s0))
(rule (i (i realu_div (i (i (i (i (i (i solu_y (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) pi) const1)
(rule (i (i s_b_ (i (i dartu_nondegenerate H) x)) (i (i IN (i (i nodeu_map H) x)) (i (i edge H) x))) (i (i isu_edgeu_split H) x))
(rule (i (i a_ (i det (i vector (i (i CONS (i (i vectoru_sub v1) v0)) (i (i CONS (i (i vectoru_sub v2) v0)) (i (i CONS (i (i vectoru_sub v3) v0)) NIL)))))) (i realu_ofu_num (i NUMERAL u_0))) (i coplanar (i (i INSERT v0) (i (i INSERT v1) (i (i INSERT v2) (i (i INSERT v3) EMPTY))))))
(rule (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i csin (i (i complexu_div (i (i vectoru_sub w) z)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i ccos (i (i complexu_div (i (i vectoru_add w) z)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i (i vectoru_sub (i csin w)) (i csin z)))
(rule (i intu_ofu_num (i dimindex UNIV)) (i affu_dim UNIV))
(rule (i (i s_b_ (i (i a_ (i (i realu_pow (i distance (i (i c_ v) w))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow d) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) d)) (i (i a_ (i distance (i (i c_ v) w))) d))
(rule (i (i intu_le (i affu_dim s0)) (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i collinear s0))
(rule (i (i s_b_ (i (i intu_le x) y)) (i w_ (i (i a_ x) y))) (i (i intu_lt x) y))
(rule (i (i affu_ge (i (i INSERT x) EMPTY)) (i (i INSERT x) EMPTY)) (i (i INSERT x) EMPTY))
(rule (i (i s_b_ (i (i intu_lt z) x)) (i (i intu_lt z) y)) (i (i intu_lt z) (i (i intu_min x) y)))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ sqrt8) (i (i c_ y4) sqrt8))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i dartY y1) y2) y3) y4) y5) y6))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i dartX y1) y2) y3) y4) y5) y6))
(rule (i (i INTER (i closure s0)) (i closure (i (i DIFF UNIV) s0))) (i frontier s0))
(rule (i (i a_ (i cnj z)) (i Cx x)) (i (i a_ z) (i Cx x)))
(rule (i (i realu_add (i (i realu_mul (i sin x)) (i cos y))) (i (i realu_mul (i cos x)) (i sin y))) (i sin (i (i realu_add x) y)))
(rule (i (i s_b_ (i negligible s0)) (i negligible t)) (i negligible (i (i UNION s0) t)))
(rule (i (i voronoiu_set V) (i (i INSERT u) EMPTY)) (i (i voronoiu_closed V) u))
(rule (i (i realu_mul (i (i realu_div (i (i realu_sub (i exp (i Im z))) (i exp (i realu_neg (i Im z))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i cos (i Re z))) (i Im (i csin z)))
(rule (i (i hrealu_le (i (i hrealu_add m) n)) (i (i hrealu_add m) p)) (i (i hrealu_le n) p))
(rule (i (i (i lunaru_deform (i (i c_ e1) (i (i c_ e2) e3))) t) (i vec (i NUMERAL u_0))) (i vec (i NUMERAL u_0)))
(rule (i (i realu_div (i (i realu_add (i cos (i (i realu_sub x) y))) (i cos (i (i realu_add x) y)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i cos x)) (i cos y)))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i apexu_std3u_hll y1) y2) y3) y4) y5) y6))
(rule (i infnorm (i vectoru_neg x)) (i infnorm x))
(rule (i realu_neg (i (i realu_min (i realu_neg x)) (i realu_neg y))) (i (i realu_max x) y))
(rule (i (i realu_mul (i rho (i sqrt x1))) (i (i (i (i (i (i dihu_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i rhazimu_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6))
(rule (i realu_ofu_num (i NUMERAL u_0)) (i tan pi))
(rule (i (i realu_div (i (i realu_sub (i (i realu_add (i (i realu_pow (i vectoru_norm x)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i vectoru_norm y)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_pow (i vectoru_norm (i (i vectoru_sub x) y))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i dot x) y))
(rule (i content (i closedu_interval (i (i CONS (i (i c_ (i vec (i NUMERAL u_0))) (i vec (i NUMERAL (i BIT1 u_0))))) NIL))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i (i COND (i (i naddu_eq x) (i naddu_ofu_num (i NUMERAL u_0)))) (i naddu_ofu_num (i NUMERAL u_0))) (i mku_nadd (i naddu_rinv x))) (i naddu_inv x))
(rule (i constant6 (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) two6)
(rule (i (i (i (i affsign sgn) (i (i DIFF S) (i (i INSERT v) EMPTY))) (i (i INSERT v) EMPTY)) (i circumcenter S)) (i (i (i orientation S) v) sgn))
(rule (i (i p_ (i (i (i index L) (i (i inverse (i nodeu_map H)) (i (i (i (i heading H) NF) L) x))) (i (i nodeu_map H) (i (i (i (i attach H) NF) L) x)))) (i (i (i ind0 H) (i (i (i (i attach H) NF) L) x)) (i (i (i (i mAdd H) NF) L) x))) (i (i (i (i tpy H) NF) L) x))
(rule (i (i p_ (i (i (i index L) (i (i (i (i attach H) NF) L) x)) (i (i (i (i heading H) NF) L) x))) (i (i (i (i mAdd H) NF) L) x)) (i (i (i (i tpx H) NF) L) x))
(rule (i (i vectoru_add (i (i matrixu_vectoru_mul A0) x)) (i (i matrixu_vectoru_mul B0) x)) (i (i matrixu_vectoru_mul (i (i matrixu_add A0) B0)) x))
(rule (i (i vectoru_add (i (i projection d) v)) (i (i r_ (i (i realu_div (i (i dot v) d)) (i (i dot d) d))) d)) v)
(rule (i (i realu_sub (i (i realu_pow (i (i (i (i (i (i (i (i (i (i cayleytr x12) x13) x14) x15) x23) x24) x25) x34) x35) (i realu_ofu_num (i NUMERAL u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i (i upsu_x x12) x13) x23)) (i (i (i (i (i (i (i (i (i (i cayleyR x12) x13) x14) x15) x23) x24) x25) x34) x35) (i realu_ofu_num (i NUMERAL u_0)))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) (i (i realu_mul (i (i (i (i (i (i delta x12) x13) x14) x23) x24) x34)) (i (i (i (i (i (i delta x12) x13) x15) x23) x25) x35))))
(rule (i (i realu_mul (i realu_abs a)) (i infnorm x)) (i infnorm (i (i r_ a) x)))
(rule (i (i complexu_mul w) (i complexu_inv z)) (i (i complexu_div w) z))
(rule (i (i realu_add (i (i realu_mul x) y)) (i (i realu_mul x) z)) (i (i realu_mul x) (i (i realu_add y) z)))
(rule (i PRE (i CARD (i dartu_of L))) (i top0 L))
(rule (i (i b_s_ (i (i intu_lt z) x)) (i (i intu_lt z) y)) (i (i intu_lt z) (i (i intu_max x) y)))
(rule (i (i setu_partu_components H) (i dart H)) (i setu_ofu_components H))
(rule (i (i DIFF (i (i hull convex) (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY))))) (i (i UNION (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i (i UNION (i closedu_segment (i (i CONS (i (i c_ b) c)) NIL))) (i closedu_segment (i (i CONS (i (i c_ c) a)) NIL))))) (i interior (i (i hull convex) (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY))))))
(rule (i (i c_ (i (i vu_prime V) FF)) (i (i eu_prime E) FF)) (i (i localization (i (i c_ V) E)) FF))
(rule (i UNIONS (i (i IMAGE UNIONS) X)) (i UNIONS (i UNIONS X)))
(rule (i (i a_ (i cball (i (i c_ x) e))) EMPTY) (i (i realu_lt e) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_div (i (i realu_add (i realu_neg b)) (i sqrt (i (i realu_sub (i (i realu_pow b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul a) c)))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) a)) (i (i (i quadraticu_rootu_plusu_curry a) b) c))
(rule (i (i LET f) x) (i f x))
(rule (i (i s_b_ (i (i intu_lt (i intu_neg k)) x)) (i (i intu_lt x) k)) (i (i intu_lt (i intu_abs x)) k))
(rule (i (i (i (i (i (i dih4u_y (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i dih4u_x x1) x2) x3) x4) x5) x6))
(rule (i hypermap0 (i (i c_ (i (i DELETE (i dart H)) x)) (i (i c_ (i (i o (i inverse (i (i o (i swap (i (i c_ x) (i (i faceu_map H) x)))) (i faceu_map H)))) (i inverse (i (i o (i swap (i (i c_ x) (i (i nodeu_map H) x)))) (i nodeu_map H))))) (i (i c_ (i (i o (i swap (i (i c_ x) (i (i nodeu_map H) x)))) (i nodeu_map H))) (i (i o (i swap (i (i c_ x) (i (i faceu_map H) x)))) (i faceu_map H)))))) (i (i edgeu_walkup H) x))
(rule (i (i res (i nu_fanu_pair (i (i c_ V) E))) (i dart1u_ofu_fan (i (i c_ V) E))) (i nu_fanu_pairu_ext (i (i c_ V) E)))
(rule (i (i s_b_ (i (i intu_le (i intu_neg k)) x)) (i (i intu_le x) k)) (i (i intu_le (i intu_abs x)) k))
(rule (i setu_ofu_list (i bnu_faces g)) (i bnu_Faces g))
(rule (i (i a_ (i Im (i complexu_inv z))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ (i Im z)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i s_b_ (i (i a_ (i (i dot x) y)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ (i (i cross x) y)) (i vec (i NUMERAL u_0)))) (i (i b_s_ (i (i a_ x) (i vec (i NUMERAL u_0)))) (i (i a_ y) (i vec (i NUMERAL u_0)))))
(rule (i FST (i tupleu_stableu_sy s0)) (i ku_sy s0))
(rule (i bnu_finalu_face (i (i c_ vs) f)) f)
(rule (i (i s_b_ (i realu_measurable s0)) (i (i a_ (i realu_measure s0)) m)) (i (i hasu_realu_measure s0) m))
(rule (i (i c_ (i dart H)) (i (i c_ (i (i o (i faceu_map H)) (i nodeu_map H))) (i (i c_ (i inverse (i nodeu_map H))) (i inverse (i faceu_map H))))) (i tupleu_hypermap (i oppositeu_hypermap H)))
(rule (i (i a_ (i Re (i (i complexu_mul a) (i cnj b)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ (i Re (i (i complexu_div a) b))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i (i (i (i (i lfunu_y1 y1) y2) y3) y4) y5) y6) (i lfun y1))
(rule (i (i t_ (i (i EXP (i NUMERAL (i BIT0 (i BIT1 u_0)))) x)) (i (i p_ (i (i t_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) y)) (i NUMERAL (i BIT1 u_0)))) (i (i NUMPAIR x) y))
(rule (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))))) tgt)
(rule (i (i UNION (i ordu_pairs E)) (i (i selfu_pairs E) V)) (i (i dartsu_ofu_hyp E) V))
(rule (i (i realu_add (i (i realu_mul x1) (i (i realu_pow x4) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_add (i (i realu_mul (i (i realu_add (i (i realu_mul x1) x1)) (i (i realu_sub (i (i realu_mul (i (i realu_sub x3) x5)) (i (i realu_sub x2) x6))) (i (i realu_mul x1) (i (i realu_add x2) (i (i realu_add x3) (i (i realu_add x5) x6))))))) x4)) (i (i realu_add (i (i realu_mul x1) (i (i realu_mul x3) x5))) (i (i realu_sub (i (i realu_sub (i (i realu_mul x1) (i (i realu_mul x2) x6))) (i (i realu_mul x3) (i (i realu_mul (i (i realu_add x1) (i (i realu_add (i (i realu_sub x2) x3)) (i (i realu_sub x5) x6)))) x6)))) (i (i realu_mul x2) (i (i realu_mul x5) (i (i realu_add (i (i realu_sub x1) x2)) (i (i realu_add (i (i realu_sub x3) x5)) x6)))))))) (i realu_neg (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6)))
(rule (i vec (i NUMERAL u_0)) (i neutral vectoru_add))
(rule (i topology0 open) euclidean)
(rule (i (i s_b_ (i (i a_ (i FST x)) i0)) (i (i a_ (i SND x)) j)) (i (i a_ x) (i (i c_ i0) j)))
(rule (i dist (i (i c_ (i (i p_ m) p)) (i (i p_ n) p))) (i dist (i (i c_ m) n)))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i Re z)) (i Im z))) (i Im (i (i complexu_pow z) (i NUMERAL (i BIT0 (i BIT1 u_0))))))
(rule (i (i d_ (i vec k)) i0) (i realu_ofu_num k))
(rule (i (i s_b_ (i (i SUBSET s0) (i span t))) (i (i SUBSET t) (i span s0))) (i (i a_ (i span s0)) (i span t)))
(rule (i (i a_ (i vectoru_norm (i (i r_ (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i vectoru_norm u))) u))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i w_ (i (i a_ u) (i vec (i NUMERAL u_0)))))
(rule (i (i dot x) (i vec (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i UNIONS (i (i IMAGE bnu_planeGraphsP) UNIV)) bnu_PlaneGraphs)
(rule (i contractedu_dart (i (i c_ x) (i (i c_ v) (i (i c_ w) w1)))) (i (i c_ v) w))
(rule (i (i (i (i (i frustum v0) v0) h1) h2) a) EMPTY)
(rule (i bnu_sub1 (i (i c_ a) n)) (i (i bnu_sub a) n))
(rule (i numu_ofu_int (i intu_ofu_num n)) n)
(rule (i (i t_ (i dimindex UNIV)) (i dimindex UNIV)) (i dimindex UNIV))
(rule (i (i a_ (i (i orbitu_map f) x)) (i (i INSERT x) EMPTY)) (i (i a_ (i f x)) x))
(rule (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))) au_tame)
(rule (i (i complexu_mul (i Cx (i exp (i Re z)))) (i (i vectoru_add (i Cx (i cos (i Im z)))) (i (i complexu_mul ii) (i Cx (i sin (i Im z)))))) (i cexp z))
(rule (i (i MAP bnu_verticesu_face) (i bnu_faces g)) (i bnu_fgraph g))
(rule (i (i UNION (i ball (i (i c_ a) r))) (i ball (i (i c_ a) s0))) (i ball (i (i c_ a) (i (i realu_max r) s0))))
(rule (i (i add6 (i uni (i (i c_ pow2) (i (i sub6 proju_y1) (i constant6 (i (i realu_add hminus) hplus)))))) (i (i add6 (i uni (i (i c_ pow2) (i (i sub6 proju_y2) two6)))) (i (i add6 (i uni (i (i c_ pow2) (i (i sub6 proju_y3) two6)))) (i (i add6 (i uni (i (i c_ pow2) (i (i sub6 proju_y4) two6)))) (i (i add6 (i uni (i (i c_ pow2) (i (i sub6 proju_y5) two6)))) (i uni (i (i c_ pow2) (i (i sub6 proju_y6) two6)))))))) norm2hhu_x)
(rule (i (i b_s_ (i (i polaru_lt a) b)) (i (i a_ a) b)) (i (i polaru_le a) b))
(rule (i (i (i support op) f) (i (i (i support op) f) s0)) (i (i (i support op) f) s0))
(rule (i (i (i (i azim x) v) (i (i (i (i (i (i (i poweru_mapu_points sigmau_fan) x) V) E) v) u) i0)) (i (i (i (i (i (i (i poweru_mapu_points sigmau_fan) x) V) E) v) u) (i SUC i0))) (i (i (i (i (i (i azimu_iu_fan x) V) E) v) u) i0))
(rule (i (i s_b_ (i (i realu_le x) a)) (i (i realu_le y) a)) (i (i realu_le (i (i maxu_real x) y)) a))
(rule (i FST (i destu_bnu_graph g)) (i bnu_faces g))
(rule (i realu_sgn (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i complexu_pow x) (i NUMERAL (i BIT1 u_0))) x)
(rule (i (i intu_pow (i intu_abs x)) (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i (i intu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i b_s_ (i (i l_a_ m) n)) (i (i a_ (i EVEN m)) (i EVEN n))) (i EVEN (i (i m_ m) n)))
(rule (i (i a_a_g_ (i w_ t1)) (i w_ t2)) (i (i a_a_g_ t2) t1))
(rule (i (i realu_sub (i (i realu_sub x) y)) x) (i realu_neg y))
(rule (i (i destu_cart x) (i finiteu_index i0)) (i (i d_ x) i0))
(rule (i SUC (i (i p_ (i NUMERAL n)) (i NUMERAL n))) (i NUMERAL (i BIT1 n)))
(rule (i (i b_s_ (i (i s_b_ (i w_ (i (i IN x) s0))) (i w_ (i (i IN y) s0)))) (i (i s_b_ (i (i IN x) s0)) (i (i s_b_ (i (i IN y) s0)) (i (i (i connectedu_component s0) x) y)))) (i (i a_ (i (i connectedu_component s0) x)) (i (i connectedu_component s0) y)))
(rule (i (i INTER (i outside s0)) s0) EMPTY)
(rule (i (i (i (i (i (i (i rotate5 lmdihu_xu_divu_sqrtdeltau_posbranch) x1) x2) x3) x4) x5) x6) (i (i (i (i (i (i lmdih5u_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6))
(rule (i (i b_s_ (i (i realu_lt x) y)) (i (i a_ x) y)) (i (i realu_le x) y))
(rule (i (i a_ (i (i IN x) (i (i DELETE s0) xi_))) (i (i IN xi_) (i (i DELETE s0) x))) (i (i a_ (i (i IN x) s0)) (i (i IN xi_) s0)))
(rule (i CARD (i (i INSERT a) EMPTY)) (i NUMERAL (i BIT1 u_0)))
(rule (i (i realu_sub (i (i realu_add x) y)) x) y)
(rule (i (i intu_mul (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) x) x)
(rule (i intu_ofu_real (i realu_ofu_int i0)) i0)
(rule (i (i realu_le (i (i realu_add x) y)) (i (i realu_add x) z)) (i (i realu_le y) z))
(rule (i yu_ofu_x volu_x) volu_y)
(rule (i (i realu_div (i sqrt (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))) (i (i (i (i (i (i volu_x x1) x2) x3) x4) x5) x6))
(rule (i collinear (i (i hull convex) s0)) (i collinear s0))
(rule (i FST (i SND (i tupleu_hypermap H))) (i edgeu_map H))
(rule (i (i realu_max (i realu_abs (i (i d_ x) (i NUMERAL (i BIT1 u_0))))) (i realu_abs (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i infnorm x))
(rule (i infnorm (i vec (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i s_b_ (i (i a_ (i CARD (i Iu_SY s0))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i s_b_ (i (i a_ (i du_sy s0)) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))))) (i (i s_b_ (i (i a_ (i CARD (i Ju_SY s0))) (i NUMERAL (i BIT1 u_0)))) (i (i s_b_ (i (i a_ (i au_sy s0)) (i au_ear0 (i Ju_SY s0)))) (i (i a_ (i bu_sy s0)) (i bu_ear0 (i Ju_SY s0))))))) (i earu_sy s0))
(rule (i (i (i COND (i (i b_s_ (i (i a_ a) b)) (i (i a_ c) b))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i sqrt (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_pow (i (i realu_div (i (i dot (i (i vectoru_sub a) b)) (i (i vectoru_sub c) b))) (i (i realu_mul (i vectoru_norm (i (i vectoru_sub a) b))) (i vectoru_norm (i (i vectoru_sub c) b))))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i sin (i angle (i (i c_ a) (i (i c_ b) c)))))
(rule (i (i matrixu_add A0) (i mat (i NUMERAL u_0))) A0)
(rule (i (i realu_ge (i vectoru_norm x)) (i vectoru_norm y)) (i (i (i netord atu_infinity) x) y))
(rule (i (i a_ (i (i faceu_map H) x)) (i (i inverse (i nodeu_map H)) x)) (i (i a_ (i (i edgeu_map H) x)) x))
(rule (i (i realu_add (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i atn2 (i (i c_ (i sqrt (i (i (i upsu_x (i (i realu_mul a) a)) (i (i realu_mul b) b)) (i (i realu_mul c) c)))) (i (i realu_sub (i (i realu_sub (i (i realu_mul c) c)) (i (i realu_mul a) a))) (i (i realu_mul b) b))))) (i (i (i arclength a) b) c))
(rule (i (i b_s_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ y) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ (i (i realu_mul x) y)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i (i COND (i (i IN x) s0)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL u_0))) (i drop (i (i indicator s0) x)))
(rule (i (i s_b_ (i (i IN x) (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL)))) (i (i s_b_ (i w_ (i (i a_ x) a))) (i (i s_b_ (i w_ (i (i a_ x) b))) (i w_ (i (i a_ a) b))))) (i (i IN x) (i openu_segment (i (i c_ a) b))))
(rule (i (i edgeu_walkup (i (i edgeu_walkup H) x)) y) (i (i (i doubleu_edgeu_walkup H) x) y))
(rule (i (i s_b_ (i (i IN x) (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL)))) (i (i s_b_ (i w_ (i (i a_ x) a))) (i w_ (i (i a_ x) b)))) (i (i IN x) (i openu_segment (i (i c_ a) b))))
(rule (i (i (i COND (i (i b_s_ (i (i a_ x) (i vec (i NUMERAL u_0)))) (i (i a_ y) (i vec (i NUMERAL u_0))))) (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i acs (i (i realu_div (i (i dot x) y)) (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y))))) (i (i vectoru_angle x) y))
(rule (i (i intu_add (i (i intu_sub x) y)) y) x)
(rule (i (i mul6 proju_x1) deltau_x) x1u_deltau_x)
(rule (i (i realu_lt (i realu_ofu_num m)) (i realu_ofu_num n)) (i (i l_ m) n))
(rule (i (i s_b_ (i (i isolatedu_qua q1) s0)) (i (i s_b_ (i (i isolatedu_qua q2) s0)) (i w_ (i (i a_ (i (i INTER (i conv0 q1)) (i conv0 q2))) EMPTY)))) (i (i (i isolatedu_pai q1) q2) s0))
(rule (i realu_neg (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0))))))))))))))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0))))))))))))))))))))))))))) bu_spine5)
(rule (i LENGTH (i (i TABLE f) n)) n)
(rule (i (i complexu_div (i csin z)) (i ccos z)) (i ctan z))
(rule (i (i realu_le (i realu_ofu_num m)) (i realu_ofu_num n)) (i (i l_a_ m) n))
(rule (i g (i vec (i NUMERAL u_0))) (i pathstart g))
(rule (i (i s_b_ (i (i (i kle n) x) y)) (i (i (i kle n) y) x)) (i (i a_ x) y))
(rule (i (i o (i edgeu_map H)) (i nodeu_map H)) (i inverse (i faceu_map H)))
(rule (i cos (i (i realu_sub (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) x)) (i sin x))
(rule (i uni (i (i c_ acs) (i (i scalar6 proju_y2) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) acsu_sqrtu_x2u_d4)
(rule (i (i p_ m) (i NUMERAL u_0)) m)
(rule (i UNIONS (i (i DELETE s0) EMPTY)) (i UNIONS s0))
(rule (i (i c_ (i FST S)) (i (i c_ (i FST (i SND S))) (i (i c_ (i FST (i SND (i SND S)))) (i SND (i SND (i SND S)))))) S)
(rule (i (i a_ (i (i p_ m) n)) (i (i p_ m) p)) (i (i a_ n) p))
(rule (i vectoru_norm (i vec (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul k) (i asn (i (i realu_mul ca) (i sin (i (i realu_div pi) k))))))) (i (i regularu_sphericalu_polygonu_area ca) k))
(rule (i (i (i COND (i (i a_ a) b)) (i intu_ofu_num (i NUMERAL u_0))) (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i affu_dim (i (i INSERT a) (i (i INSERT b) EMPTY))))
(rule (i (i mul6 (i (i scalar6 (i (i sub6 (i constant6 h0)) (i (i scalar6 proju_y1) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) rh0)) dihu_xu_divu_sqrtdeltau_posbranch) ldihu_xu_divu_sqrtdeltau_posbranch)
(rule (i (i vectoru_add (i lift x)) (i lift y)) (i lift (i (i realu_add x) y)))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Re (i (i complexu_div (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))) (i (i vectoru_add (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_mul ii) z))))) (i (i realu_lt (i vectoru_norm z)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i interior (i cball (i (i c_ x) e))) (i ball (i (i c_ x) e)))
(rule (i (i r_ x) (i vec (i NUMERAL (i BIT1 u_0)))) (i lift x))
(rule (i intu_neg (i intu_ofu_num (i NUMERAL u_0))) (i intu_ofu_num (i NUMERAL u_0)))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i sin (i (i realu_div (i (i realu_sub x) y)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i cos (i (i realu_div (i (i realu_add x) y)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_sub (i sin x)) (i sin y)))
(rule (i (i EE v) (i (i INSERT (i (i INSERT v) (i (i INSERT w) EMPTY))) EMPTY)) (i (i INSERT w) EMPTY))
(rule (i constant6 (i realu_ofu_num (i NUMERAL u_0))) zero6)
(rule (i TC (i TC R)) (i TC R))
(rule (i (i a_ (i realu_ofu_int a)) (i realu_ofu_num n)) (i (i a_ a) (i intu_ofu_num n)))
(rule (i (i realu_gt (i realu_ofu_num m)) (i realu_ofu_num n)) (i (i g_ m) n))
(rule (i (i (i hasu_vectoru_derivative (i (i o lift) (i (i o f) drop))) (i lift fi_)) (i (i within (i at (i lift x))) (i (i IMAGE lift) s0))) (i (i (i hasu_realu_derivative f) fi_) (i (i within (i atreal x)) s0)))
(rule (i (i (i (i (i (i (i compose6 taumu_x) proju_x1) (i constant6 a)) proju_x3) (i constant6 b)) proju_x5) (i constant6 c)) (i (i (i taumu_sub246u_x a) b) c))
(rule (i (i IN x) (i dartu_of L)) (i (i belong x) L))
(rule (i (i a_ (i (i UNION s0) t)) t) (i (i SUBSET s0) t))
(rule (i (i realu_add (i (i dot x) z)) (i (i dot y) z)) (i (i dot (i (i vectoru_add x) y)) z))
(rule (i (i summable s0) (i (i o Cx) f)) (i (i realu_summable s0) f))
(rule (i (i s_b_ (i (i (i (i (i COVER1u_SY p) q) s0) s1) s2)) (i (i s_b_ (i (i (i COVER2u_SY s0) s1) s2)) (i (i s_b_ (i (i (i (i (i COVER3u_SY p) q) s0) s1) s2)) (i (i s_b_ (i (i (i (i (i COVER4u_SY p) q) s0) s1) s2)) (i (i s_b_ (i (i (i (i (i COVER5u_SY p) q) s0) s1) s2)) (i (i (i (i (i COVER6u_SY p) q) s0) s1) s2)))))) (i (i (i (i (i COVERu_SY p) q) s0) s1) s2))
(rule (i (i a_ (i (i float a) b)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ a) (i intu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_ge (i realu_ofu_num m)) (i realu_ofu_num n)) (i (i g_a_ m) n))
(rule (i (i a_ (i (i dot (i (i cross (i (i vectoru_sub y) x)) (i (i vectoru_sub z) x))) (i (i vectoru_sub t) x))) (i realu_ofu_num (i NUMERAL u_0))) (i coplanar (i (i INSERT x) (i (i INSERT y) (i (i INSERT z) (i (i INSERT t) EMPTY))))))
(rule (i log (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i s_b_ (i (i continuousu_on f) X)) (i (i s_b_ (i (i SUBSET (i (i IMAGE f) X)) Y)) (i P f))) (i (i (i (i homotopicu_with P) (i (i c_ X) Y)) f) f))
(rule (i (i s_b_ (i (i ALL P) l1)) (i (i ALL P) l2)) (i (i ALL P) (i (i APPEND l1) l2)))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i sin (i (i realu_div (i (i realu_add x) y)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i cos (i (i realu_div (i (i realu_sub x) y)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_add (i sin x)) (i sin y)))
(rule (i (i a_ (i (i INSERT x) s0)) s0) (i (i IN x) s0))
(rule (i (i a_ (i realu_ofu_num m)) (i realu_ofu_num n)) (i (i a_ m) n))
(rule (i (i (i COND (i (i a_ a) b)) (i NUMERAL u_0)) (i (i p_ (i LENGTH (i (i (i bnu_between (i bnu_verticesu_face f)) a) b))) (i NUMERAL (i BIT1 u_0)))) (i (i (i bnu_directedLength f) a) b))
(rule (i (i a_ (i INJF f1)) (i INJF f2)) (i (i a_ f1) f2))
(rule (i (i realu_add (i drop x)) (i drop y)) (i drop (i (i vectoru_add x) y)))
(rule (i (i complexu_pow (i vectoru_neg ii)) (i (i p_ n) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i vectoru_neg (i (i complexu_pow (i vectoru_neg ii)) n)))
(rule (i (i (i (i (i (i (i (i gamma23fu_redu_03 y1) y2) y3) y4) y5) y6) sqrt2) f) (i (i (i (i (i (i (i gamma3fu_v y1) y2) y3) y4) y5) y6) f))
(rule (i w_ (i (i l_ m) n)) (i (i l_a_ n) m))
(rule (i (i (i (i (i (i (i compose6 taumu_x) proju_x1) proju_x2) (i constant6 a)) (i constant6 b)) (i constant6 c)) proju_x6) (i (i (i taumu_sub345u_x a) b) c))
(rule (i realu_inv (i realu_inv x)) x)
(rule (i (i (i POWER (i inverse (i nodeu_map H))) i0) x) (i (i (i nodeu_contour H) x) i0))
(rule (i (i s_b_ (i (i naddu_le x) y)) (i (i naddu_le y) x)) (i (i naddu_eq x) y))
(rule (i w_ (i (i l_a_ m) n)) (i (i l_ n) m))
(rule (i (i DIFF s0) s0) EMPTY)
(rule (i (i p_ (i NUMERAL n)) (i NUMERAL n)) (i NUMERAL (i BIT0 n)))
(rule (i (i realu_add x) (i realu_neg y)) (i (i realu_sub x) y))
(rule (i (i (i (i (i (i (i compose6 deltau_x) (i constant6 a)) proju_x2) proju_x3) proju_x4) proju_x5) proju_x6) (i deltau_sub1u_x a))
(rule (i (i dartu_nondegenerate (i shift H)) x) (i (i dartu_nondegenerate H) x))
(rule (i (i (i COND (i (i l_ m) k)) (i (i o_o_ k) n)) (i (i o_o_ m) n)) (i (i INTER (i from k)) (i (i o_o_ m) n)))
(rule (i (i between x) (i (i c_ a) a)) (i (i a_ x) a))
(rule (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0)))))))))))))))) tableu_multiplier)
(rule (i (i complexu_div (i (i vectoru_sub (i cexp (i (i complexu_mul ii) z))) (i cexp (i (i complexu_mul (i vectoru_neg ii)) z)))) (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) ii)) (i csin z))
(rule (i (i (i hasu_vectoru_derivative f) (i (i vectoru_derivative f) net0)) net0) (i (i differentiable f) net0))
(rule (i (i (i (i (i (i (i gamma2u_x1u_divu_a m) x1) x2) x3) x4) x5) x6) (i (i gamma2u_xu_divu_azim m) x1))
(rule (i (i realu_mul (i realu_sgn x)) (i realu_sgn y)) (i realu_sgn (i (i realu_mul x) y)))
(rule (i (i realu_sub (i (i (i (i (i (i volu_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i (i vol4f y1) y2) y3) y4) y5) y6) f)) (i (i (i (i (i (i (i gamma4f y1) y2) y3) y4) y5) y6) f))
(rule (i (i c_ v) (i (i (i (i (i sigmau_fan (i vec (i NUMERAL u_0))) V) E) v) w)) (i (i nu_fanu_pair (i (i c_ V) E)) (i (i c_ v) w)))
(rule (i realu_inv (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i b_s_ (i w_ (i (i a_ x) (i realu_ofu_num (i NUMERAL u_0))))) (i (i a_ n) (i NUMERAL u_0))) (i w_ (i (i a_ (i (i realu_pow x) n)) (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i realu_sub (i (i (i (i vol3r y1) y2) y3) r)) (i (i (i (i (i vol3f y1) y2) y3) r) f)) (i (i (i (i (i gamma3f y1) y2) y3) r) f))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Im (i (i complexu_mul a) (i cnj b)))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Im (i (i complexu_div a) b))))
(rule (i (i continuous (i (i o lift) (i (i o f) drop))) (i at (i lift x))) (i (i realu_continuous f) (i atreal x)))
(rule (i (i c_ (i distance (i (i c_ w0) w1))) (i (i c_ (i distance (i (i c_ w0) w2))) (i (i c_ (i distance (i (i c_ w0) w3))) (i (i c_ (i distance (i (i c_ w2) w3))) (i (i c_ (i distance (i (i c_ w1) w3))) (i distance (i (i c_ w1) w2))))))) (i (i (i (i ylist w0) w1) w2) w3))
(rule (i (i hasu_measure (i (i IMAGE lift) s0)) m) (i (i hasu_realu_measure s0) m))
(rule (i (i DIFF UNIV) (i xfan (i (i c_ x) (i (i c_ V) E)))) (i yfan (i (i c_ x) (i (i c_ V) E))))
(rule (i (i b_s_ (i (i s_b_ p) r)) (i (i s_b_ q) r)) (i (i s_b_ (i (i b_s_ p) q)) r))
(rule (i CARD (i (i setu_ofu_orbits D0) f)) (i (i numberu_ofu_orbits D0) f))
(rule (i dim (i span s0)) (i dim s0))
(rule (i (i (i (i (i (i vol3fu_sqrt2u_lmplus (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i vol3fu_xu_sqrt2u_lmplus x1) x2) x3) x4) x5) x6))
(rule (i rotate3 ldihu_xu_divu_sqrtdeltau_posbranch) ldih3u_xu_divu_sqrtdeltau_posbranch)
(rule (i (i (i COND (i (i IN a) s0)) (i independent s0)) (i (i s_b_ (i independent s0)) (i w_ (i (i IN a) (i span s0))))) (i independent (i (i INSERT a) s0)))
(rule (i reversepath (i (i (i subpath u) v) g)) (i (i (i subpath v) u) g))
(rule (i (i IMAGE drop) UNIV) UNIV)
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Im (i complexu_inv z))) (i (i realu_le (i Im z)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i UNIONS (i (i node (i (i quotient H) NF)) atm)) (i (i (i supportu_node H) NF) atm))
(rule (i w_ (i (i IN i0) (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i dimindex UNIV)))) (i (i a_ (i basis i0)) (i vec (i NUMERAL u_0))))
(rule (i (i r_ (i realu_ofu_num (i NUMERAL u_0))) x) (i vec (i NUMERAL u_0)))
(rule (i radV (i setu_ofu_list ul)) (i hl ul))
(rule (i bnu_setFinal (i (i c_ vs) f)) (i (i c_ vs) T))
(rule (i (i a_ (i affu_dim s0)) (i intu_ofu_num (i dimindex UNIV))) (i (i a_ (i (i hull affine) s0)) UNIV))
(rule (i (i vectoru_sub (i (i complexu_mul (i ccos w)) (i ccos z))) (i (i complexu_mul (i csin w)) (i csin z))) (i ccos (i (i vectoru_add w) z)))
(rule (i (i s_b_ (i isu_restricted H)) (i (i s_b_ (i (i isu_normal H) NF)) (i (i s_b_ (i (i IN L) NF)) (i (i s_b_ (i w_ (i (i IN L) (i (i canon H) NF)))) (i (i s_b_ (i (i belong x) L)) (i (i a_ (i (i (i head H) NF) x)) x)))))) (i (i (i (i isu_splitu_condition H) NF) L) x))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Re (i (i complexu_mul a) (i cnj b)))) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Re (i (i complexu_div a) b))))
(rule (i intu_abs (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i intu_abs (i intu_ofu_num (i NUMERAL u_0))) (i intu_ofu_num (i NUMERAL u_0)))
(rule (i (i (i m_m_g_ f) (i f x)) (i (i within (i at x)) s0)) (i (i continuous f) (i (i within (i at x)) s0)))
(rule (i (i s_b_ (i (i hrealu_le x) y)) (i (i hrealu_le y) x)) (i (i a_ x) y))
(rule (i (i maxu_real (i (i maxu_real x) y)) z) (i (i (i maxu_real3 x) y) z))
(rule (i (i pairwise r) EMPTY) T)
(rule (i w_ (i (i realu_lt (i distance (i (i c_ v1) v2))) (i (i realu_add (i distance (i (i c_ v1) v))) (i distance (i (i c_ v) v2))))) (i (i a_ (i (i realu_add (i distance (i (i c_ v1) v))) (i distance (i (i c_ v) v2)))) (i distance (i (i c_ v1) v2))))
(rule (i (i b_s_ (i (i l_ m) n)) (i (i a_ m) n)) (i (i l_a_ m) n))
(rule (i (i uniformlyu_continuousu_on (i (i o lift) (i (i o f) drop))) (i (i IMAGE lift) s0)) (i (i realu_uniformlyu_continuousu_on f) s0))
(rule (i (i s_b_ (i (i a_ (i (i realu_add (i (i realu_pow (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i a_ (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i a_ (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_neg (i (i d_ (i (i d_ A0) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT1 u_0))))))) (i rotationu_matrix A0))
(rule (i (i (i m_m_m_g_ f) (i f (i netlimit net0))) net0) (i (i realu_continuous f) net0))
(rule (i (i realu_integrableu_on f) (i closedu_realu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i realu_integrableu_on f) (i openu_realu_interval (i (i c_ a) b))))
(rule (i (i vectoru_sub x) (i vec (i NUMERAL u_0))) x)
(rule (i (i realu_lt (i realu_neg x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i realu_add (i (i realu_sub (i (i realu_sub (i realu_neg (i (i realu_mul x14) (i (i realu_mul x14) (i (i realu_mul x23) x23))))) (i (i realu_mul x13) (i (i realu_mul x13) (i (i realu_mul x24) x24))))) (i (i realu_mul x12) (i (i realu_mul x12) (i (i realu_mul x34) x34))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_add (i (i realu_mul x12) (i (i realu_mul x14) (i (i realu_mul x23) x34)))) (i (i realu_add (i (i realu_mul x12) (i (i realu_mul x13) (i (i realu_mul x24) x34)))) (i (i realu_mul x13) (i (i realu_mul x14) (i (i realu_mul x23) x24))))))) (i (i (i (i (i (i rhou_ij x12) x13) x14) x23) x24) x34))
(rule (i (i DIFF (i closure s0)) (i interior s0)) (i frontier s0))
(rule (i (i vectoru_add (i ccos z)) (i (i complexu_mul ii) (i csin z))) (i cexp (i (i complexu_mul ii) z)))
(rule (i closedu_interval (i (i CONS (i (i c_ (i vec (i NUMERAL (i BIT1 u_0)))) (i vec (i NUMERAL u_0)))) NIL)) EMPTY)
(rule (i vector (i (i CONS (i vector (i (i CONS (i cos t)) (i (i CONS (i realu_neg (i sin t))) NIL)))) (i (i CONS (i vector (i (i CONS (i sin t)) (i (i CONS (i cos t)) NIL)))) NIL))) (i matrix (i rotate2d t)))
(rule (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i distance (i (i c_ u) v)))) (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i distance (i (i c_ u) w)))) (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i distance (i (i c_ v) w)))) (i (i s_b_ (i (i realu_le (i distance (i (i c_ v) w))) (i (i realu_add (i distance (i (i c_ u) v))) (i distance (i (i c_ u) w))))) (i (i s_b_ (i (i realu_le (i distance (i (i c_ u) v))) (i (i realu_add (i distance (i (i c_ u) w))) (i distance (i (i c_ v) w))))) (i (i realu_le (i distance (i (i c_ u) w))) (i (i realu_add (i distance (i (i c_ v) w))) (i distance (i (i c_ u) v))))))))) (i (i s_b_ (i w_ (i (i a_ u) v))) (i w_ (i (i a_ u) w))))
(rule (i (i DISJOINT (i (i INSERT a) EMPTY)) (i (i INSERT b) EMPTY)) (i w_ (i (i a_ a) b)))
(rule (i (i s_b_ (i (i realu_lt z) x)) (i (i realu_lt z) y)) (i (i realu_lt z) (i (i realu_min x) y)))
(rule (i (i (i COND (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i (i COND (i (i realu_lt x) (i realu_ofu_num (i NUMERAL u_0)))) (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL u_0)))) (i realu_sgn x))
(rule (i (i (i (i glue p) q) n) (i NUMERAL u_0)) (i p (i NUMERAL u_0)))
(rule (i (i realu_sub (i (i realu_mul x) y)) (i (i realu_mul x) z)) (i (i realu_mul x) (i (i realu_sub y) z)))
(rule (i SND (i SND (i SND (i destu_bnu_graph g)))) (i bnu_heights g))
(rule (i (i (i COND (i (i IN x) (i dart1u_ofu_fan (i (i c_ V) E)))) (i (i eu_fanu_pair (i (i c_ V) E)) x)) x) (i (i eu_fanu_pairu_ext (i (i c_ V) E)) x))
(rule (i (i realu_mul au_tame) tableu_multiplier) (i realu_ofu_num bnu_excessTCount))
(rule (i (i s_b_ (i (i a_ (i Iu_SY s1)) (i (i (i ISu_SY s0) p) q))) (i (i s_b_ (i (i a_ (i Iu_SY s2)) (i (i (i ISu_SY s0) q) p))) (i (i s_b_ (i (i a_ (i fu_sy s1)) (i (i (i flu_sy s0) p) q))) (i (i a_ (i fu_sy s2)) (i (i (i flu_sy s0) q) p))))) (i (i (i (i (i COVER1u_SY p) q) s0) s1) s2))
(rule (i (i (i COND b) (i SUC (i (i t_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) x))) (i (i t_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) x)) (i (i NUMSUM b) x))
(rule (i (i vectoru_sub (i Cx x)) (i Cx y)) (i Cx (i (i realu_sub x) y)))
(rule (i (i (i m_m_g_ f) (i f x)) (i at x)) (i (i continuous f) (i at x)))
(rule (i (i realu_add x) (i realu_ofu_num (i NUMERAL u_0))) x)
(rule (i (i s_b_ (i (i IN x) s0)) (i w_ (i (i IN x) t))) (i (i IN x) (i (i DIFF s0) t)))
(rule (i (i complexu_mul (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) x) x)
(rule (i (i matrixu_mul (i mat (i NUMERAL (i BIT1 u_0)))) A0) A0)
(rule (i (i s_b_ (i (i a_ (i dart H)) (i dart Hi_))) (i (i s_b_ (i (i a_ (i edgeu_map H)) (i edgeu_map Hi_))) (i (i s_b_ (i (i a_ (i nodeu_map H)) (i nodeu_map Hi_))) (i (i a_ (i faceu_map H)) (i faceu_map Hi_))))) (i (i a_ H) Hi_))
(rule (i (i realu_mul (i exp (i Re z))) (i cos (i Im z))) (i Re (i cexp z)))
(rule (i (i realu_add (i (i realu_mul (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul x12) x34))) (i (i realu_add (i (i realu_mul (i realu_neg x13)) x14)) (i (i realu_add (i (i realu_mul (i realu_neg x23)) x24)) (i (i realu_add (i (i realu_mul x13) x24)) (i (i realu_add (i (i realu_mul x14) x23)) (i (i realu_add (i (i realu_mul (i realu_neg x12)) x12)) (i (i realu_add (i (i realu_mul x12) x14)) (i (i realu_add (i (i realu_mul x12) x24)) (i (i realu_add (i (i realu_mul x12) x13)) (i (i realu_mul x12) x23)))))))))) (i (i (i (i (i (i deltau_x34 x12) x13) x14) x23) x24) x34))
(rule (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i c_ y4) (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y7) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y8) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y9) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL))))))))) (i (i (i (i (i (i (i (i (i dart4u_diag3u_b y1) y2) y3) y4) y5) y6) y7) y8) y9))
(rule (i (i b_s_ (i w_ (i (i IN a) s0))) (i (i b_s_ (i w_ (i (i IN b) s0))) (i w_ (i (i a_ (i (i connectedu_component s0) a)) (i (i connectedu_component s0) b))))) (i (i a_ (i (i INTER (i (i connectedu_component s0) a)) (i (i connectedu_component s0) b))) EMPTY))
(rule (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x)) (i (i realu_lt x) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_ (i floor x)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i vectoru_add (i matvec x)) (i matvec y)) (i matvec (i (i matrixu_add x) y)))
(rule (i (i (i COND (i (i IN x) s0)) (i f x)) x) (i (i (i res f) s0) x))
(rule (i (i (i COND (i (i a_ (i Im z)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i (i COND (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i Re z))) (i complex (i (i c_ (i sqrt (i Re z))) (i realu_ofu_num (i NUMERAL u_0))))) (i complex (i (i c_ (i realu_ofu_num (i NUMERAL u_0))) (i sqrt (i realu_neg (i Re z))))))) (i complex (i (i c_ (i sqrt (i (i realu_div (i (i realu_add (i vectoru_norm z)) (i Re z))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i (i realu_div (i Im z)) (i realu_abs (i Im z)))) (i sqrt (i (i realu_div (i (i realu_sub (i vectoru_norm z)) (i Re z))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))))) (i csqrt z))
(rule (i (i b_s_ (i (i a_ a) b)) (i (i SUBSET (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i closedu_segment (i (i CONS (i (i c_ c) d)) NIL)))) (i (i SUBSET (i openu_segment (i (i c_ a) b))) (i openu_segment (i (i c_ c) d))))
(rule (i (i intu_sub x) (i intu_ofu_num (i NUMERAL u_0))) x)
(rule (i (i IN (i vectoru_neg x)) (i span s0)) (i (i IN x) (i span s0)))
(rule (i (i p_ m) (i (i t_ m) n)) (i (i t_ m) (i SUC n)))
(rule (i (i realu_add (i (i realu_mul (i realu_neg x12)) x24)) (i (i realu_add (i (i realu_mul (i realu_neg x13)) x34)) (i (i realu_add (i (i realu_mul x12) x34)) (i (i realu_add (i (i realu_mul x13) x24)) (i (i realu_add (i (i realu_mul x23) (i (i realu_add x12) (i (i realu_add x13) (i (i realu_add (i realu_neg x14)) (i (i realu_add (i realu_neg x23)) (i (i realu_add x24) x34))))))) (i (i realu_mul (i realu_neg x14)) x23)))))) (i (i (i (i (i (i deltau_x14 x12) x13) x14) x23) x24) x34))
(rule (i (i realu_add (i (i realu_mul (i realu_neg x12)) x23)) (i (i realu_add (i (i realu_mul (i realu_neg x14)) x34)) (i (i realu_add (i (i realu_mul x12) x34)) (i (i realu_add (i (i realu_mul x24) (i (i realu_add x12) (i (i realu_add (i realu_neg x13)) (i (i realu_add x14) (i (i realu_add x23) (i (i realu_add (i realu_neg x24)) x34))))))) (i (i realu_add (i (i realu_mul (i realu_neg x13)) x24)) (i (i realu_mul x14) x23)))))) (i (i (i (i (i (i deltau_x13 x12) x13) x14) x23) x24) x34))
(rule (i (i realu_add (i (i realu_mul (i realu_neg x13)) x23)) (i (i realu_add (i (i realu_mul (i realu_neg x14)) x24)) (i (i realu_add (i (i realu_mul x34) (i (i realu_add (i realu_neg x12)) (i (i realu_add x13) (i (i realu_add x14) (i (i realu_add x23) (i (i realu_add x24) (i realu_neg x34)))))))) (i (i realu_add (i (i realu_mul (i realu_neg x12)) x34)) (i (i realu_add (i (i realu_mul x13) x24)) (i (i realu_mul x14) x23)))))) (i (i (i (i (i (i deltau_x12 x12) x13) x14) x23) x24) x34))
(rule (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_sub x) y)) (i (i intu_lt y) x))
(rule (i (i realu_div pi) (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0))))))))) piu_rt18)
(rule (i (i c_ (i (i dartsu_ofu_hyp E) V)) (i (i c_ (i eeu_ofu_hyp (i (i c_ x) (i (i c_ V) E)))) (i (i c_ (i nnu_ofu_hyp (i (i c_ x) (i (i c_ V) E)))) (i ffu_ofu_hyp (i (i c_ x) (i (i c_ V) E)))))) (i HYP (i (i c_ x) (i (i c_ V) E))))
(rule (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) (i (i intu_sub x) y)) (i (i intu_le y) x))
(rule (i (i complexu_div (i cnj w)) (i cnj z)) (i cnj (i (i complexu_div w) z)))
(rule (i (i b_s_ (i (i realu_lt z) x)) (i (i realu_lt z) y)) (i (i realu_lt z) (i (i realu_max x) y)))
(rule (i (i b_s_ (i (i l_ n) m)) (i (i s_b_ (i (i l_a_ p) m)) (i (i l_a_ n) q))) (i (i SUBSET (i (i o_o_ m) n)) (i (i o_o_ p) q)))
(rule (i (i realu_mul (i realu_inv (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i distance (i (i c_ u) v))) (i hl (i (i CONS u) (i (i CONS v) NIL))))
(rule (i (i realu_lt (i Im (i complexu_inv z))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Im z)))
(rule (i (i s_b_ (i FINITE s0)) (i (i a_ (i CARD s0)) n)) (i (i HASu_SIZE s0) n))
(rule (i (i s_b_ (i (i realu_le (i realu_abs (i (i d_ x) (i NUMERAL (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i s_b_ (i (i realu_le (i realu_abs (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i b_s_ (i (i a_ (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i (i b_s_ (i (i a_ (i (i d_ x) (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i b_s_ (i (i a_ (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i (i a_ (i (i d_ x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))))))) (i (i a_ (i infnorm x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i arc (i linepath (i (i c_ a) b))) (i w_ (i (i a_ a) b)))
(rule (i (i voronoiu_list V) (i (i CONS u) NIL)) (i (i voronoiu_closed V) u))
(rule (i (i a_ (i (i intu_sub x) y)) (i intu_ofu_num (i NUMERAL u_0))) (i (i a_ x) y))
(rule (i (i realu_lt (i Re (i (i complexu_mul a) (i cnj b)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_lt (i Re (i (i complexu_div a) b))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_mul (i rho y1)) (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i rhazim y1) y2) y3) y4) y5) y6))
(rule (i (i (i m_m_g_ f) (i f x)) (i atreal x)) (i (i continuous f) (i atreal x)))
(rule (i (i s_b_ (i (i realu_le (i (i realu_sub a) e)) x)) (i (i realu_le x) (i (i realu_add a) e))) (i (i realu_le (i realu_abs (i (i realu_sub x) a))) e))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0)))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y4) sqrt8))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i apexu_flatu_l y1) y2) y3) y4) y5) y6))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y4) sqrt8))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i apexu_flatu_h y1) y2) y3) y4) y5) y6))
(rule (i (i realu_div x) (i sqrt (i (i realu_add (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i sin (i atn x)))
(rule (i (i (i subpath (i vec (i NUMERAL u_0))) (i vec (i NUMERAL (i BIT1 u_0)))) g) g)
(rule (i (i (i (i dihV (i vectoru_neg v0)) (i vectoru_neg v1)) (i vectoru_neg v2)) (i vectoru_neg v3)) (i (i (i (i dihV v0) v1) v2) v3))
(rule (i (i realu_le (i realu_neg x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x))
(rule (i (i complexu_mul (i cexp w)) (i cexp z)) (i cexp (i (i vectoru_add w) z)))
(rule (i vector (i (i CONS a) (i (i CONS b) (i (i CONS c) NIL)))) (i (i (i mku_vec3 a) b) c))
(rule (i (i realu_mul (i distance (i (i c_ A0) C))) (i (i realu_mul (i distance (i (i c_ B0) C))) (i cos (i angle (i (i c_ A0) (i (i c_ C) B0)))))) (i (i dot (i (i vectoru_sub A0) C)) (i (i vectoru_sub B0) C)))
(rule (i (i IMAGE lift) UNIV) UNIV)
(rule (i (i a_ (i (i realu_add x) y)) (i (i realu_add x) z)) (i (i a_ y) z))
(rule (i complex (i (i c_ (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) ii)
(rule (i (i (i bnu_replace f) (i (i CONS (i bnu_setFinal f)) NIL)) fs) (i (i bnu_makeFaceFinalFaceList f) fs))
(rule (i (i a_ (i (i (i upsu_x (i (i realu_pow (i distance (i (i c_ v1) v2))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ v1) v3))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ v2) v3))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL u_0))) (i collinear (i (i INSERT v1) (i (i INSERT v2) (i (i INSERT v3) EMPTY)))))
(rule (i (i realu_add (i (i realu_sub (i (i realu_sub (i (i realu_sub (i realu_neg (i (i realu_mul x12) (i (i realu_mul x13) x23)))) (i (i realu_mul x12) (i (i realu_mul x14) x24)))) (i (i realu_mul x13) (i (i realu_mul x14) x34)))) (i (i realu_mul x23) (i (i realu_mul x24) x34)))) (i (i realu_add (i (i realu_mul x12) (i (i realu_mul x34) (i (i realu_add (i realu_neg x12)) (i (i realu_add x13) (i (i realu_add x14) (i (i realu_add x23) (i (i realu_sub x24) x34)))))))) (i (i realu_add (i (i realu_mul x13) (i (i realu_mul x24) (i (i realu_add (i (i realu_sub x12) x13)) (i (i realu_add x14) (i (i realu_add (i (i realu_sub x23) x24)) x34)))))) (i (i realu_mul x14) (i (i realu_mul x23) (i (i realu_add x12) (i (i realu_add (i (i realu_sub (i (i realu_sub x13) x14)) x23)) (i (i realu_add x24) x34)))))))) (i (i (i (i (i (i delta x12) x13) x14) x23) x24) x34))
(rule (i (i rpow x) (i realu_ofu_num n)) (i (i realu_pow x) n))
(rule (i (i a_ (i drop x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i vec (i NUMERAL u_0))))
(rule (i (i IMAGE (i vectoru_add x)) (i (i normball (i vec (i NUMERAL u_0))) r)) (i (i normball x) r))
(rule (i (i a_a_g_ (i (i exceptionalu_face H) x)) (i (i l_a_ (i CARD (i (i node H) x))) (i NUMERAL (i BIT0 (i BIT1 (i BIT1 u_0)))))) (i (i nodeu_exceptionalu_face H) x))
(rule (i (i (i POWER (i faceu_map H)) i0) x) (i (i (i faceu_contour H) x) i0))
(rule (i (i a_ (i complexu_inv x)) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_ x) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))))
(rule (i (i CONS v) (i (i APPEND (i SND (i (i bnu_splitAt v) vs))) (i FST (i (i bnu_splitAt v) vs)))) (i (i bnu_rotateu_to vs) v))
(rule (i (i a_ (i complexu_inv x)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ x) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i mku_126 dih6u_x) dih6u_xu_126u_s2)
(rule (i (i realu_sub (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi))) (i (i realu_add (i (i (i (i (i (i solu_y y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i solu_y y1) y5) y6) y4) y2) y3)) (i (i realu_add (i (i (i (i (i (i solu_y y4) y5) y3) y1) y2) y6)) (i (i (i (i (i (i solu_y y4) y2) y6) y1) y5) y3)))))) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) pi))) (i (i realu_add (i (i realu_mul (i f (i (i realu_div y1) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6))) (i (i realu_add (i (i realu_mul (i f (i (i realu_div y2) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dihu_y y2) y3) y1) y5) y6) y4))) (i (i realu_add (i (i realu_mul (i f (i (i realu_div y3) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dihu_y y3) y1) y2) y6) y4) y5))) (i (i realu_add (i (i realu_mul (i f (i (i realu_div y4) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dihu_y y4) y3) y5) y1) y6) y2))) (i (i realu_add (i (i realu_mul (i f (i (i realu_div y5) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dihu_y y5) y1) y6) y2) y4) y3))) (i (i realu_mul (i f (i (i realu_div y6) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dihu_y y6) y1) y5) y3) y4) y2))))))))) (i (i (i (i (i (i (i vol4f y1) y2) y3) y4) y5) y6) f))
(rule (i (i realu_mul (i (i realu_sub (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) h)) (i (i realu_mul (i (i realu_sub h) hplus)) (i (i realu_div (i (i realu_add (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_pow h) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) h))) (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i realu_mul (i (i realu_sub (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0)))))) (i (i realu_sub hplus) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))))))) (i marchalu_quartic h))
(rule (i span UNIV) UNIV)
(rule (i (i (i (i (i (i volu_y r) r) r) y1) y2) y3) (i (i (i (i vol3r y1) y2) y3) r))
(rule (i (i a_ (i affu_dim s0)) (i intu_neg (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_ s0) EMPTY))
(rule (i (i openu_in (i (i subtopology euclidean) (i (i hull affine) s0))) s0) (i (i a_ (i relativeu_interior s0)) s0))
(rule (i (i INSERT x) (i (i INSERT x) s0)) (i (i INSERT x) s0))
(rule (i (i matrixu_mul (i mat (i NUMERAL u_0))) A0) (i mat (i NUMERAL u_0)))
(rule (i (i s_b_ (i reflexive f)) (i (i s_b_ (i symmetric f)) (i transitive f))) (i equivalenceu_relation f))
(rule (i (i a_ (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ a) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_sub (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi))) (i (i realu_add (i (i (i (i (i (i solu_y y1) y2) r) r) r) y3)) (i (i realu_add (i (i (i (i (i (i solu_y y2) y3) r) r) r) y1)) (i (i (i (i (i (i solu_y y3) y1) r) r) r) y2))))) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) pi))) (i (i realu_add (i (i realu_mul (i f (i (i realu_div y1) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dihu_y y1) y2) r) r) r) y3))) (i (i realu_add (i (i realu_mul (i f (i (i realu_div y2) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dihu_y y2) y3) r) r) r) y1))) (i (i realu_mul (i f (i (i realu_div y3) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dihu_y y3) y1) r) r) r) y2)))))) (i (i (i (i (i vol3f y1) y2) y3) r) f))
(rule (i (i b_s_ (i (i a_ x) y)) (i (i IN x) s0)) (i (i IN x) (i (i INSERT y) s0)))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul pi) (i (i realu_div (i (i realu_sub (i (i realu_mul r) r)) (i (i realu_pow (i (i realu_div y) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))))) (i (i vol2r y) r))
(rule (i (i IN v) (i cball (i (i c_ (i Cx (i realu_ofu_num (i NUMERAL u_0)))) r))) (i (i realu_le (i vectoru_norm v)) r))
(rule (i (i s_b_ (i path p)) (i (i s_b_ (i (i SUBSET (i pathu_image p)) s0)) (i (i a_ (i pathfinish p)) (i pathstart p)))) (i (i (i homotopicu_loops s0) p) p))
(rule (i (i s_b_ (i (i IN x) s0)) (i w_ (i (i a_ x) y))) (i (i IN x) (i (i DELETE s0) y)))
(rule (i (i realu_sub (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul pi) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_div y) (i (i realu_mul r) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))))) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) pi))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul pi) (i f (i (i realu_div y) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))))) (i (i (i vol2f y) r) f))
(rule (i (i realu_add (i (i realu_mul x13) (i (i realu_mul x23) x24))) (i (i realu_add (i (i realu_mul x14) (i (i realu_mul x23) x24))) (i (i realu_add (i (i realu_mul x12) (i (i realu_mul x23) x34))) (i (i realu_add (i (i realu_mul x14) (i (i realu_mul x23) x34))) (i (i realu_add (i (i realu_mul x12) (i (i realu_mul x24) x34))) (i (i realu_sub (i (i realu_sub (i (i realu_sub (i (i realu_sub (i (i realu_mul x13) (i (i realu_mul x24) x34))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul x23) (i (i realu_mul x24) x34))))) (i (i realu_mul x12) (i (i realu_mul x34) x34)))) (i (i realu_mul x14) (i (i realu_mul x23) x23)))) (i (i realu_mul x13) (i (i realu_mul x24) x24)))))))) (i (i (i (i (i (i chi x12) x13) x14) x23) x24) x34))
(rule (i complex (i (i c_ (i (i realu_add (i Re w)) (i Re z))) (i (i realu_add (i Im w)) (i Im z)))) (i (i vectoru_add w) z))
(rule (i (i hrealu_mul (i hrealu_ofu_num m)) (i hrealu_ofu_num n)) (i hrealu_ofu_num (i (i t_ m) n)))
(rule (i (i b_s_ (i (i a_ (i Arg z)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ (i Arg z)) pi)) (i real0 z))
(rule (i negligible (i (i INSERT a) s0)) (i negligible s0))
(rule (i (i s_b_ (i w_ (i (i a_ (i (i edgeu_map H) x)) x))) (i (i a_ (i (i edgeu_map H) (i (i edgeu_map H) x))) x)) (i (i a_ (i CARD (i (i edge H) x))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i IN (i (i c_ (i SND x)) (i FST x))) (i ordu_pairs E)) (i (i IN x) (i ordu_pairs E)))
(rule (i (i realu_add (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i dihu_y y2) y3) y1) y5) y6) y4)) (i (i realu_sub (i (i (i (i (i (i dihu_y y3) y1) y2) y6) y4) y5)) pi))) (i (i (i (i (i (i solu_y y1) y2) y3) y4) y5) y6))
(rule (i (i realu_add (i (i (i (i (i (i dihu_x x1) x2) x3) x4) x5) x6)) (i (i realu_add (i (i (i (i (i (i dihu_x x2) x3) x1) x5) x6) x4)) (i (i realu_sub (i (i (i (i (i (i dihu_x x3) x1) x2) x6) x4) x5)) pi))) (i (i (i (i (i (i solu_x x1) x2) x3) x4) x5) x6))
(rule (i rational (i realu_neg x)) (i rational x))
(rule (i (i (i (i (i (i delta x12) (i (i realu_add x12) x23)) (i (i realu_add x12) x24)) x23) x24) x34) (i (i realu_mul x12) (i (i (i upsu_x x23) x24) x34)))
(rule (i (i b_s_ (i (i a_ x) a)) (i (i b_s_ (i (i a_ x) b)) (i (i a_ (i angle (i (i c_ a) (i (i c_ x) b)))) pi))) (i (i between x) (i (i c_ a) b)))
(rule (i (i hasu_measure s0) (i realu_ofu_num (i NUMERAL u_0))) (i negligible s0))
(rule (i cnj (i cnj z)) z)
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL u_0))) x) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i (i (i (i (i (i compose6 deltau_x) proju_x1) (i constant6 a)) proju_x3) (i constant6 b)) proju_x5) (i constant6 c)) (i (i (i deltau_135u_x a) b) c))
(rule (i (i IN (i numberu_ofu_nodes H)) (i (i INSERT (i NUMERAL (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))) (i (i INSERT (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))) (i (i INSERT (i NUMERAL (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))) EMPTY)))) (i tameu_10 H))
(rule (i (i IMAGE finiteu_index) (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i dimindex UNIV))) UNIV)
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i dartu_mllu_w y1) y2) y3) y4) y5) y6))
(rule (i atn2 (i (i c_ (i sqrt (i (i realu_sub (i (i realu_mul b) b)) (i (i realu_mul a) a)))) (i sqrt (i (i realu_sub (i (i realu_mul c) c)) (i (i realu_mul b) b))))) (i (i (i dihR a) b) c))
(rule (i (i continuous (i (i o Cx) f)) net0) (i (i realu_continuous f) net0))
(rule (i CARD (i faceu_set H)) (i numberu_ofu_faces H))
(rule (i (i (i (i (i (i eulerAu_x x1) x2) x3) (i (i (i (i (i (i edgeu_flat2u_x x23) x2) x3) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i edgeu_flat2u_x x13) x1) x3) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i edgeu_flat2u_x x12) x1) x2) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i euleru_3flatu_x x1) x2) x3) x23) x13) x12))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i dartu_mllu_n y1) y2) y3) y4) y5) y6))
(rule (i (i integrableu_on f) (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i integrableu_on f) (i openu_interval (i (i c_ a) b))))
(rule (i dist (i (i c_ (i (i p_ m) n)) (i (i p_ m) p))) (i dist (i (i c_ n) p)))
(rule (i (i MOD n) (i NUMERAL (i BIT1 u_0))) (i NUMERAL u_0))
(rule (i (i (i arcV (i vec (i NUMERAL u_0))) (i (i vectoru_sub u) v0)) (i (i vectoru_sub v) v0)) (i (i (i arcV v0) u) v))
(rule (i (i a_ (i (i vectoru_add x) y)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ y) (i vectoru_neg x)))
(rule (i (i l_a_ (i (i p_ m) n)) (i (i p_ m) p)) (i (i l_a_ n) p))
(rule (i (i (i (i (i (i (i compose6 deltau_x) (i constant6 a)) proju_x2) proju_x3) proju_x4) (i constant6 b)) (i constant6 c)) (i (i (i deltau_234u_x a) b) c))
(rule (i (i faceu_of s0) s0) (i convex s0))
(rule (i (i b_s_ (i (i l_u_c s0) t)) (i (i a_u_c s0) t)) (i (i l_a_u_c s0) t))
(rule (i (i s_b_ (i (i intu_lt x) z)) (i (i intu_lt y) z)) (i (i intu_lt (i (i intu_max x) y)) z))
(rule (i (i (i hasu_integral f) (i (i integral s0) f)) s0) (i (i integrableu_on f) s0))
(rule (i realu_ofu_num (i NUMERAL u_0)) machineu_eps)
(rule (i (i s_b_ (i (i intu_le x) z)) (i (i intu_le y) z)) (i (i intu_le (i (i intu_max x) y)) z))
(rule (i (i realu_le (i (i realu_div (i realu_ofu_num p)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_div (i realu_ofu_num n)) (i realu_ofu_num m))) (i (i realu_le (i realu_ofu_num p)) (i (i realu_div (i realu_ofu_num n)) (i realu_ofu_num m))))
(rule (i sin (i (i realu_add x) (i (i realu_mul (i realu_ofu_int n)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi)))) (i sin x))
(rule (i (i realu_le (i (i realu_div (i realu_ofu_num p)) (i realu_ofu_num m))) (i (i realu_div (i realu_ofu_num n)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_le (i (i realu_div (i realu_ofu_num p)) (i realu_ofu_num m))) (i realu_ofu_num n)))
(rule (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_pow (i sin x)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i cos x)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i a_ (i closure s0)) s0) (i closed s0))
(rule (i PRE (i (i m_ (i SUC m)) n)) (i (i m_ m) n))
(rule (i (i INTER (i r1u_leu_fan (i realu_ofu_num (i NUMERAL u_0)))) (i (i INTER (i r2u_leu_fan a)) (i (i INTER (i r2u_geu_fan b)) (i (i INTER (i r3u_leu_fan (i realu_ofu_num (i NUMERAL u_0)))) (i r3u_geu_fan c))))) (i (i (i ru_fan a) b) c))
(rule (i mku_135 dih4u_x) dih4u_xu_135u_s2)
(rule (i (i realu_sub (i (i d_ (i (i d_ A0) i0)) j)) (i (i d_ (i (i d_ B0) i0)) j)) (i (i d_ (i (i d_ (i (i matrixu_sub A0) B0)) i0)) j))
(rule (i (i realu_lt (i (i realu_add x) z)) (i (i realu_add y) z)) (i (i realu_lt x) y))
(rule (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Arg z))) (i (i realu_lt (i Arg z)) pi)) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Im z)))
(rule (i (i realu_mul (i (i realu_sub (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i realu_div (i (i realu_sub (i (i vol2r y1) r)) (i (i (i vol2f y1) r) f))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) (i (i (i (i (i (i (i (i gamma23fu_redu_03 y1) y2) y3) y4) y5) y6) r) f))
(rule (i realu_abs (i infnorm x)) (i infnorm x))
(rule (i (i IN x) (i ball (i (i c_ (i vec (i NUMERAL u_0))) e))) (i (i realu_lt (i vectoru_norm x)) e))
(rule (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) x)) (i (i realu_lt x) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i a_ (i frac x)) x))
(rule (i (i matrixu_add (i (i matrixu_mul A0) B0)) (i (i matrixu_mul A0) C)) (i (i matrixu_mul A0) (i (i matrixu_add B0) C)))
(rule (i w_ (i (i a_ (i Arg z)) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i Arg z)))
(rule (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i neutral complexu_mul))
(rule (i (i a_ x) (i (i inverse (i edgeu_map H)) y)) (i (i a_ y) (i (i edgeu_map H) x)))
(rule (i (i (i hasu_complexu_derivative f) (i (i complexu_derivative f) x)) (i at x)) (i (i complexu_differentiable f) (i at x)))
(rule (i (i (i COND (i (i a_ z) (i Cx (i realu_ofu_num (i NUMERAL u_0))))) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i complexu_pow z) n)) (i (i cpow z) (i Cx (i realu_ofu_num n))))
(rule (i (i realu_sub (i (i realu_pow (i (i (i (i (i (i num1 x1) x2) x3) x4) x5) x6)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i (i DECIMAL (i NUMERAL (i BIT1 u_0))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i (i (i (i (i num2 x1) x2) x3) x4) x5) x6))) (i (i (i (i (i (i numu_combo1 x1) x2) x3) x4) x5) x6))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i apexu_std3u_smallu_hll y1) y2) y3) y4) y5) y6))
(rule (i (i (i COND (i (i realu_ge x) (i realu_ofu_num (i NUMERAL u_0)))) (i sqrt x)) (i realu_ofu_num (i NUMERAL u_0))) (i safesqrt x))
(rule (i (i a_ (i SUC m)) (i SUC n)) (i (i a_ m) n))
(rule (i (i (i COND (i (i realu_le (i (i vectoru_angle x) y)) (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i vectoru_angle x) y)) (i (i realu_sub pi) (i (i vectoru_angle x) y))) (i asn (i sin (i (i vectoru_angle x) y))))
(rule (i (i realu_div (i (i realu_sub (i (i realu_sub (i (i realu_pow (i vectoru_norm (i (i vectoru_add x) y))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i vectoru_norm x)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_pow (i vectoru_norm y)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i dot x) y))
(rule (i (i cpow (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) z) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i cpow (i Cx (i realu_ofu_num (i NUMERAL u_0)))) z) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i s_b_ (i path p)) (i (i SUBSET (i pathu_image p)) s0)) (i (i (i homotopicu_paths s0) p) p))
(rule (i (i absolutelyu_integrableu_on (i (i o lift) (i (i o f) drop))) (i (i IMAGE lift) s0)) (i (i absolutelyu_realu_integrableu_on f) s0))
(rule (i inverse (i SND (i tupleu_loop L))) (i back L))
(rule (i (i dartu_nondegenerate (i shift (i shift H))) x) (i (i dartu_nondegenerate H) x))
(rule (i (i a_ (i dimindex UNIV)) (i dimindex UNIV)) (i (i homeomorphic UNIV) UNIV))
(rule (i (i realu_mul (i vectoru_norm u)) (i (i realu_mul (i vectoru_norm v)) (i cos (i (i (i arcV (i vec (i NUMERAL u_0))) u) v)))) (i (i dot u) v))
(rule (i setu_ofu_components (i shift H)) (i setu_ofu_components H))
(rule (i f (i (i inverse f) (i f x))) (i f x))
(rule (i (i INSERT (i NUMERAL u_0)) (i (i INSERT (i NUMERAL (i BIT1 u_0))) (i (i INSERT (i NUMERAL (i BIT0 (i BIT1 u_0)))) EMPTY))) (i (i o_o_ (i NUMERAL u_0)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i a_ (i (i hull P) (i (i INSERT a) s0))) (i (i hull P) s0)) (i (i IN a) (i (i hull P) s0)))
(rule (i (i s_b_ (i isu_restricted H)) (i (i s_b_ (i (i isu_normal H) NF)) (i (i s_b_ (i (i IN L) NF)) (i (i s_b_ (i (i belong x) L)) (i (i s_b_ (i (i a_ (i (i next L) x)) (i (i faceu_map H) x))) (i (i s_b_ (i simpleu_hypermap (i (i quotient H) NF))) (i (i s_b_ (i isu_nodeu_nondegenerate (i (i quotient H) NF))) (i (i s_b_ (i (i IN (i (i edgeu_map H) x)) (i (i canonu_darts H) NF))) (i (i s_b_ (i (i a_a_g_ (i (i IN L) (i (i canon H) NF))) (i (i canonu_flag H) NF))) (i (i a_a_g_ (i w_ (i (i IN L) (i (i canon H) NF)))) (i (i (i (i flag H) NF) L) x))))))))))) (i (i (i (i isu_marked H) NF) L) x))
(rule (i tan (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i rpow (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) z) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i a_ (i (i connectedu_component s0) x)) UNIV) (i (i a_ s0) UNIV))
(rule (i (i realu_mul (i lfun (i (i realu_div (i sqrt x5)) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) (i (i (i (i (i (i dih5u_xu_135u_s2 x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i ldih5u_xu_135u_s2 x1) x2) x3) x4) x5) x6))
(rule (i (i p_ m) (i NUMERAL (i BIT1 u_0))) (i SUC m))
(rule (i TL (i (i CONS h) t)) t)
(rule (i intu_neg (i (i intu_sub x) y)) (i (i intu_sub y) x))
(rule (i (i SUBSET (i (i INSERT x) EMPTY)) s0) (i (i IN x) s0))
(rule (i (i (i smallestu_angleu_set (i (i hull convex) (i (i INSERT a) (i (i INSERT b) EMPTY)))) c) d) (i (i (i (i smallestu_angleu_line a) b) c) d))
(rule (i CARD (i dartu_of L)) (i size L))
(rule (i (i realu_div (i realu_abs (i (i realu_sub (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0))))) (i (i realu_sub (i (i d_ c) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i (i realu_sub (i (i d_ b) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ a) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_sub (i (i d_ c) (i NUMERAL (i BIT1 u_0)))) (i (i d_ a) (i NUMERAL (i BIT1 u_0)))))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i measure (i (i hull convex) (i (i INSERT a) (i (i INSERT b) (i (i INSERT c) EMPTY))))))
(rule (i (i s_b_ (i (i (i (i (i (i adjacentu_pai v) v1) v3) v2) v4) s0)) (i (i (i (i (i (i adjacentu_pai v) v2) v4) v1) v3) s0)) (i (i (i (i (i (i conflictingu_dia v) v1) v3) v2) v4) s0))
(rule (i (i realu_mul (i (i realu_div (i (i realu_sub (i realu_ofu_num n)) (i realu_ofu_num k))) (i (i realu_add (i realu_ofu_num k)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i realu_ofu_num (i binom (i (i c_ n) k)))) (i realu_ofu_num (i binom (i (i c_ n) (i (i p_ k) (i NUMERAL (i BIT1 u_0)))))))
(rule (i (i (i COND (i (i a_ w) (i Cx (i realu_ofu_num (i NUMERAL u_0))))) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i cexp (i (i complexu_mul z) (i clog w)))) (i (i cpow w) z))
(rule (i Re (i complex (i (i c_ x) y))) x)
(rule (i TC (i SC R)) (i STC R))
(rule (i (i s_b_ (i w_ (i (i a_ A0) B0))) (i (i s_b_ (i w_ (i (i a_ C) B0))) (i (i a_ (i distance (i (i c_ A0) C))) (i realu_abs (i (i realu_sub (i distance (i (i c_ A0) B0))) (i distance (i (i c_ C) B0))))))) (i (i a_ (i angle (i (i c_ A0) (i (i c_ B0) C)))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i s_b_ (i (i l_ n) m)) (i w_ (i (i a_ (i ODD m)) (i ODD n)))) (i ODD (i (i m_ m) n)))
(rule (i trace (i mat (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i dimindex UNIV)))
(rule (i (i s_b_ (i (i dartu_nondegenerate H) x)) (i w_ (i (i IN (i (i faceu_map H) x)) (i (i node H) x)))) (i (i isu_nodeu_merge H) x))
(rule (i (i realu_mul (i vectoru_norm x)) (i (i realu_mul (i vectoru_norm y)) (i cos (i (i vectoru_angle x) y)))) (i (i dot x) y))
(rule (i (i (i COND (i (i b_s_ (i (i a_ x) (i vec (i NUMERAL u_0)))) (i (i a_ y) (i vec (i NUMERAL u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i sqrt (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_pow (i (i realu_div (i (i dot x) y)) (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y)))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i sin (i (i vectoru_angle x) y)))
(rule (i (i realu_mul (i twopow a)) (i twopow b)) (i twopow (i (i intu_add a) b)))
(rule (i (i b_s_ (i affineu_dependent s0)) (i (i IN (i vec (i NUMERAL u_0))) (i (i hull affine) s0))) (i dependent s0))
(rule (i conv0 (i (i INSERT x) (i (i INSERT (i (i vectoru_add x) v1)) (i (i INSERT (i (i vectoru_add x) (i (i vectoru_add v1) v2))) (i (i INSERT (i (i vectoru_add x) (i (i vectoru_add v1) (i (i vectoru_add v2) v3)))) EMPTY))))) (i (i (i (i ortho0 x) v1) v2) v3))
(rule (i trace (i mat (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i lebesgueu_measurable (i (i DIFF UNIV) s0)) (i lebesgueu_measurable s0))
(rule (i (i UNION (i d1u_fan (i (i c_ x) (i (i c_ V) E)))) (i d20u_fan (i (i c_ x) (i (i c_ V) E)))) (i du_fan (i (i c_ x) (i (i c_ V) E))))
(rule (i SC (i INV R)) (i SC R))
(rule (i (i d_ (i (i d_ (i (i matrixu_mul (i rowvector x)) (i columnvector y))) (i NUMERAL (i BIT1 u_0)))) (i NUMERAL (i BIT1 u_0))) (i (i dot x) y))
(rule (i vectoru_norm (i pad2d3d x)) (i vectoru_norm x))
(rule (i (i realu_add (i (i realu_mul (i (i (i (i (i (i (i (i (i (i truncateu_gamma3fu_x (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) m1) m2) m6) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) x1) x2) x6)) iw1)) (i (i realu_add (i (i realu_mul (i (i (i (i (i (i (i (i (i (i truncateu_gamma3fu_x (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) m1) m3) m5) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) x1) x3) x5)) iw2)) (i (i realu_mul (i (i realu_sub (i (i (i (i (i (i dihu_x x1) x2) x3) x4) x5) x6)) (i (i realu_add (i (i (i (i (i (i (i truncateu_dihu_x (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) x1) x2) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x6)) (i (i (i (i (i (i (i truncateu_dihu_x (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) x1) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x3) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x5) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i truncateu_gamma2u_x m1) x1)))) (i (i (i (i (i (i (i (i (i (i (i (i (i truncateu_gamma23u_x iw1) iw2) m1) m2) m3) m5) m6) x1) x2) x3) x4) x5) x6))
(rule (i setu_ofu_list (i bnu_verticesu_face fs)) (i bnu_verticesu_set fs))
(rule (i (i realu_add (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_mul const1) (i (i realu_div (i (i realu_sub (i sqrt x)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i rho (i sqrt x)))
(rule (i (i s_b_ (i (i hasu_orders (i edgeu_map H)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i s_b_ (i (i IN x) (i dart H))) (i (i s_b_ (i simpleu_hypermap H)) (i (i s_b_ (i (i a_ (i (i INTER (i (i face H) x)) (i (i IMAGE (i nodeu_map H)) (i (i face H) x)))) EMPTY)) (i (i a_ (i dart H)) (i (i UNION (i (i face H) x)) (i (i IMAGE (i nodeu_map H)) (i (i face H) x)))))))) (i (i s_b_ (i (i dih2k H) (i CARD (i (i face H) x)))) (i (i IN x) (i dart H))))
(rule (i (i realu_mul (i exp x)) (i exp y)) (i exp (i (i realu_add x) y)))
(rule (i mku_135 (i rotate5 ldihu_xu_n)) ldih5u_xu_135u_n)
(rule (i SND (i (i c_ x) y)) y)
(rule (i w_ (i (i a_ (i realu_abs (i (i dot x) y))) (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y)))) (i (i realu_lt (i realu_abs (i (i dot x) y))) (i (i realu_mul (i vectoru_norm x)) (i vectoru_norm y))))
(rule (i (i (i omegau_listu_n V) (i (i CONS u0) (i (i CONS u1) (i (i CONS u2) (i (i CONS u3) NIL))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i (i omegau_list V) (i (i CONS u0) (i (i CONS u1) (i (i CONS u2) NIL)))))
(rule (i (i complexu_div (i (i vectoru_add z) (i cnj z))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i Cx (i Re z)))
(rule (i (i (i omegau_listu_n V) (i (i CONS u0) (i (i CONS u1) (i (i CONS u2) (i (i CONS u3) NIL))))) (i NUMERAL (i BIT1 u_0))) (i (i omegau_list V) (i (i CONS u0) (i (i CONS u1) NIL))))
(rule (i atn2 (i (i c_ (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))
(rule (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i cos pi))
(rule (i (i (i omegau_listu_n V) (i (i CONS u0) (i (i CONS u1) (i (i CONS u2) (i (i CONS u3) NIL))))) (i NUMERAL u_0)) (i (i omegau_list V) (i (i CONS u0) NIL)))
(rule (i (i bnu_minimal (i bnu_height g)) (i bnu_verticesu_face f)) (i (i bnu_minimalVertex g) f))
(rule (i (i (i COND (i (i realu_lt x) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_add (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) (i (i realu_add (i (i realu_mul (i (i realu_pow (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) x)) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i realu_add (i realu_neg (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))))) (i (i realu_mul (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) x)))) (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i realu_div x) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))))) (i (i realu_mul x) (i (i realu_div x) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))))))) (i sqrt x)) (i sqp x))
(rule (i (i (i COND (i (i realu_lt x) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_add (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT1 u_0))))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))))))))) (i (i realu_add (i (i realu_sub (i (i realu_sub (i (i realu_div (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT1 u_0))))) x)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))))) (i (i realu_mul (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i (i realu_pow (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) x)) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i realu_mul (i (i realu_pow (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) x)) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i realu_add (i realu_neg (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT1 u_0))))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))))))) (i (i realu_mul (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) x)) x))))))) (i sqrt x)) (i sqn x))
(rule (i integer (i realu_neg x)) (i integer x))
(rule (i realu_ofu_num (i NUMERAL (i BIT1 u_0))) (i neutral realu_mul))
(rule (i Im (i complex (i (i c_ x) y))) y)
(rule (i (i (i COND (i (i b_s_ (i (i a_ a) b)) (i (i a_ c) b))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_div (i (i dot (i (i vectoru_sub a) b)) (i (i vectoru_sub c) b))) (i (i realu_mul (i vectoru_norm (i (i vectoru_sub a) b))) (i vectoru_norm (i (i vectoru_sub c) b))))) (i cos (i angle (i (i c_ a) (i (i c_ b) c)))))
(rule (i (i pastecart (i vec n)) (i vec n)) (i vec n))
(rule (i (i realu_mul pi) const1) sol0)
(rule (i (i realu_pow (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))
(rule (i (i pathu_component UNIV) x) UNIV)
(rule (i (i (i POWER (i faceu_map H)) i0) x) (i (i (i faceu_path H) x) i0))
(rule (i (i (i COND (i (i a_ (i openu_interval (i (i c_ a) b))) EMPTY)) EMPTY) (i (i DIFF (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i openu_interval (i (i c_ a) b)))) (i frontier (i openu_interval (i (i c_ a) b))))
(rule (i mku_135 dih5u_x) dih5u_xu_135u_s2)
(rule (i HD (i (i CONS h) t)) h)
(rule (i realu_abs (i vectoru_norm x)) (i vectoru_norm x))
(rule (i (i complexu_div (i (i complexu_mul a) (i cnj b))) (i (i complexu_pow (i Cx (i vectoru_norm b))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i complexu_div a) b))
(rule (i (i a_ (i (i connectedu_component s0) x)) EMPTY) (i w_ (i (i IN x) s0)))
(rule (i (i realu_le (i Im (i (i complexu_mul a) (i cnj b)))) (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_le (i Im (i (i complexu_div a) b))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) (i (i realu_mul (i (i realu_div (i (i realu_add x) (i (i realu_add y) z))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i realu_mul (i (i realu_sub (i (i realu_div (i (i realu_add x) (i (i realu_add y) z))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) x)) (i (i realu_mul (i (i realu_sub (i (i realu_div (i (i realu_add x) (i (i realu_add y) z))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) y)) (i (i realu_sub (i (i realu_div (i (i realu_add x) (i (i realu_add y) z))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) z))))) (i (i (i upsu_xu_pow2 x) y) z))
(rule (i (i realu_mul (i (i realu_div (i (i realu_add (i exp (i Im z))) (i exp (i realu_neg (i Im z))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i cos (i Re z))) (i Re (i ccos z)))
(rule (i LENGTH (i REVERSE ul)) (i LENGTH ul))
(rule (i (i intu_mul (i intu_neg (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) x) (i intu_neg x))
(rule (i FST (i SND (i SND (i SND (i SND (i tupleu_stableu_sy s0)))))) (i bu_sy s0))
(rule (i conv0 (i (i INSERT x) EMPTY)) (i (i INSERT x) EMPTY))
(rule (i (i vectoru_add (i t (i NUMERAL (i BIT1 u_0)))) (i (i vectoru_add (i t (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i t (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i (i vsum (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i NUMERAL (i BIT1 (i BIT1 u_0))))) t))
(rule (i (i (i (i (i (i gamma3fu_v0 (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i gamma3fu_xu_v0 x1) x2) x3) x4) x5) x6))
(rule (i (i realu_mul (i rho y6)) (i (i (i (i (i (i dih6u_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i rhazim6 y1) y2) y3) y4) y5) y6))
(rule (i (i vsum (i (i o_o_ (i NUMERAL (i BIT1 u_0))) (i NUMERAL (i BIT1 u_0)))) f) (i f (i NUMERAL (i BIT1 u_0))))
(rule (i (i realu_mul (i rho y5)) (i (i (i (i (i (i dih5u_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i rhazim5 y1) y2) y3) y4) y5) y6))
(rule (i (i realu_mul (i rho y4)) (i (i (i (i (i (i dih4u_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i rhazim4 y1) y2) y3) y4) y5) y6))
(rule (i node3u_y rhazim) rhazim3)
(rule (i (i complexu_div (i (i cpow w) z1)) (i (i cpow w) z2)) (i (i cpow w) (i (i vectoru_sub z1) z2)))
(rule (i node2u_y rhazim) rhazim2)
(rule (i (i (i COND (i (i a_ n) (i NUMERAL u_0))) h) (i (i EL (i (i m_ n) (i NUMERAL (i BIT1 u_0)))) t)) (i (i EL n) (i (i CONS h) t)))
(rule (i (i continuousu_on (i (i o lift) (i (i o f) drop))) (i (i IMAGE lift) s0)) (i (i realu_continuousu_on f) s0))
(rule (i distance (i (i c_ (i (i r_ c) x)) (i (i r_ c) y))) (i (i realu_mul (i realu_abs c)) (i distance (i (i c_ x) y))))
(rule (i bounded (i (i IMAGE lift) s0)) (i realu_bounded s0))
(rule (i (i realu_mul (i content (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL)))) (i content (i closedu_interval (i (i CONS (i (i c_ c) d)) NIL)))) (i content (i closedu_interval (i (i CONS (i (i c_ (i (i pastecart a) c)) (i (i pastecart b) d))) NIL))))
(rule (i (i realu_add (i (i (i (i surfRy y1) y2) y6) (i sqrt c2))) (i (i (i (i surfRy y2) y1) y6) (i sqrt c2))) (i (i (i (i surfRdyc2 y1) y2) y6) c2))
(rule (i GSPEC p) p)
(rule (i FST (i tupleu_loop L)) (i dartu_of L))
(rule (i (i c_ (i (i d_ v) (i NUMERAL (i BIT1 u_0)))) (i (i c_ (i (i d_ v) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i d_ v) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i tripleu_ofu_real3 v))
(rule (i yu_ofu_x upperu_dihu_x) upperu_dihu_y)
(rule (i (i vectoru_add (i (i matrixu_vectoru_mul A0) x)) (i (i matrixu_vectoru_mul A0) y)) (i (i matrixu_vectoru_mul A0) (i (i vectoru_add x) y)))
(rule (i pathfinish (i (i p_p_ g1) g2)) (i pathfinish g2))
(rule (i acs (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i realu_add (i (i realu_div (i (i (i (i (i (i gamma3fu_126u_n y1) y2) sqrt2) sqrt2) sqrt2) y6)) (i realu_ofu_num w1))) (i (i realu_add (i (i realu_div (i (i (i (i (i (i gamma3fu_135u_n y1) sqrt2) y3) sqrt2) y5) sqrt2)) (i realu_ofu_num w2))) (i (i (i (i (i (i (i gamma3fu_vLRu_n y1) y2) y3) y4) y5) y6) f))) (i (i (i (i (i (i (i (i (i (i gamma23fu_n y1) y2) y3) y4) y5) y6) w1) w2) sqrt2) f))
(rule (i bnu_graph (i bnu_maxGon p)) (i bnu_Seed p))
(rule (i (i r_r_ c) (i mat (i NUMERAL u_0))) (i mat (i NUMERAL u_0)))
(rule (i (i realu_mul (i mku_real (i trealu_eq x1))) (i mku_real (i trealu_eq y1))) (i mku_real (i trealu_eq (i (i trealu_mul x1) y1))))
(rule (i (i hull closed) s0) (i closure s0))
(rule (i (i b_s_ (i (i a_ x) a)) (i (i b_s_ (i (i a_ x) b)) (i (i IN x) (i conv0 (i (i INSERT a) (i (i INSERT b) EMPTY)))))) (i (i IN x) (i conv (i (i INSERT a) (i (i INSERT b) EMPTY)))))
(rule (i (i hull convexu_cone) (i (i UNION s0) (i (i IMAGE vectoru_neg) s0))) (i span s0))
(rule (i (i realu_mul (i lfun (i (i realu_div (i sqrt x6)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dih6u_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i ldih6u_x x1) x2) x3) x4) x5) x6))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i distance (i (i c_ x) y))) (i w_ (i (i a_ x) y)))
(rule (i (i s_b_ (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i distance (i (i c_ x) a)))) (i (i realu_le (i distance (i (i c_ x) a))) (i distance (i (i c_ y) a)))) (i (i (i netord (i at a)) x) y))
(rule (i (i (i hasu_realu_integral f) y) (i closedu_realu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i (i (i hasu_realu_integral f) y) (i openu_realu_interval (i (i c_ a) b))))
(rule (i Cx (i (i realu_div pi) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i casn (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))))
(rule (i casn (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i a_ (i numberu_ofu_components H)) (i NUMERAL (i BIT1 u_0))) (i connectedu_hypermap H))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_sub x) y)) (i (i realu_lt y) x))
(rule (i (i UNION (i (i DELETE NF) L)) (i (i INSERT (i (i (i (i dnax H) NF) L) x)) (i (i INSERT (i (i (i (i dnay H) NF) L) x)) EMPTY))) (i (i (i (i genesis H) NF) L) x))
(rule (i (i intu_add (i intu_ofu_num (i NUMERAL u_0))) x) x)
(rule (i (i complexu_mul (i vectoru_neg ii)) (i (i complexu_div (i (i vectoru_sub z) (i cnj z))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i Cx (i Im z)))
(rule (i (i hull convex) (i (i INSERT a) EMPTY)) (i (i INSERT a) EMPTY))
(rule (i (i s_b_ (i (i trealu_le x) y)) (i (i trealu_le y) x)) (i (i trealu_eq x) y))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_sub x) y)) (i (i realu_le y) x))
(rule (i (i realu_sub (i (i d_ x) i0)) (i (i d_ y) i0)) (i (i d_ (i (i vectoru_sub x) y)) i0))
(rule (i (i (i COND (i (i IN x) t)) (i (i DIFF s0) t)) (i (i INSERT x) (i (i DIFF s0) t))) (i (i DIFF (i (i INSERT x) s0)) t))
(rule (i (i s_b_ (i (i dartu_nondegenerate H) x)) (i w_ (i (i IN (i (i edgeu_map H) x)) (i (i face H) x)))) (i (i isu_faceu_merge H) x))
(rule (i RC (i TC R)) (i RTC R))
(rule (i LENGTH (i (i leftu_actionu_list p) ul)) (i LENGTH ul))
(rule (i (i (i (i (i (i (i compose6 f) proju_x3) proju_x4) proju_x5) unit6) unit6) unit6) (i rotate345 f))
(rule (i RC (i SC R)) (i RSC R))
(rule (i (i (i (i (i (i surfy (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i surfu_x x1) x2) x3) x4) x5) x6))
(rule (i (i (i a_a_ x) y) rel) (i (i rel x) y))
(rule (i (i b_s_ (i (i a_ (i angle (i (i c_ A0) (i (i c_ B0) C)))) (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ (i angle (i (i c_ A0) (i (i c_ B0) C)))) pi)) (i (i a_ (i sin (i angle (i (i c_ A0) (i (i c_ B0) C))))) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i realu_mul (i realu_ofu_int x)) (i twopow n)) (i (i float x) n))
(rule (i (i a_ (i (i rotate2d t) z)) (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i (i a_ z) (i Cx (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i dot (i vec (i NUMERAL u_0))) x) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i openu_interval (i (i c_ (i vectoru_neg (i lift e))) (i lift e))) (i ball (i (i c_ (i vec (i NUMERAL u_0))) e)))
(rule (i (i vectoru_add (i (i complexu_pow (i csin z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i complexu_pow (i ccos z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i s_b_ (i COUNTABLE s0)) (i COUNTABLE t)) (i COUNTABLE (i (i UNION s0) t)))
(rule (i (i a_a_g_ (i (i s_b_ (i (i realu_le a1) y1)) (i (i realu_le y1) b1))) (i (i a_a_g_ (i (i s_b_ (i (i realu_le a2) y2)) (i (i realu_le y2) b2))) (i (i a_a_g_ (i (i s_b_ (i (i realu_le a3) y3)) (i (i realu_le y3) b3))) (i (i a_a_g_ (i (i s_b_ (i (i realu_le a4) y4)) (i (i realu_le y4) b4))) (i (i a_a_g_ (i (i s_b_ (i (i realu_le a5) y5)) (i (i realu_le y5) b5))) (i (i a_a_g_ (i (i s_b_ (i (i realu_le a6) y6)) (i (i realu_le y6) b6))) (i (i a_a_g_ (i (i s_b_ (i (i realu_le a7) y7)) (i (i realu_le y7) b7))) (i (i a_a_g_ (i (i s_b_ (i (i realu_le a8) y8)) (i (i realu_le y8) b8))) (i (i a_a_g_ (i (i s_b_ (i (i realu_le a9) y9)) (i (i realu_le y9) b9))) P))))))))) (i (i ineq (i (i CONS (i (i c_ a1) (i (i c_ y1) b1))) (i (i CONS (i (i c_ a2) (i (i c_ y2) b2))) (i (i CONS (i (i c_ a3) (i (i c_ y3) b3))) (i (i CONS (i (i c_ a4) (i (i c_ y4) b4))) (i (i CONS (i (i c_ a5) (i (i c_ y5) b5))) (i (i CONS (i (i c_ a6) (i (i c_ y6) b6))) (i (i CONS (i (i c_ a7) (i (i c_ y7) b7))) (i (i CONS (i (i c_ a8) (i (i c_ y8) b8))) (i (i CONS (i (i c_ a9) (i (i c_ y9) b9))) NIL)))))))))) P))
(rule (i (i b_s_ (i (i R x) y)) (i (i R y) x)) (i (i (i SC R) x) y))
(rule (i (i a_a_g_ (i (i s_b_ (i (i realu_le a1) y1)) (i (i realu_le y1) b1))) (i (i a_a_g_ (i (i s_b_ (i (i realu_le a2) y2)) (i (i realu_le y2) b2))) (i (i a_a_g_ (i (i s_b_ (i (i realu_le a3) y3)) (i (i realu_le y3) b3))) (i (i a_a_g_ (i (i s_b_ (i (i realu_le a4) y4)) (i (i realu_le y4) b4))) (i (i a_a_g_ (i (i s_b_ (i (i realu_le a5) y5)) (i (i realu_le y5) b5))) (i (i a_a_g_ (i (i s_b_ (i (i realu_le a6) y6)) (i (i realu_le y6) b6))) P)))))) (i (i ineq (i (i CONS (i (i c_ a1) (i (i c_ y1) b1))) (i (i CONS (i (i c_ a2) (i (i c_ y2) b2))) (i (i CONS (i (i c_ a3) (i (i c_ y3) b3))) (i (i CONS (i (i c_ a4) (i (i c_ y4) b4))) (i (i CONS (i (i c_ a5) (i (i c_ y5) b5))) (i (i CONS (i (i c_ a6) (i (i c_ y6) b6))) NIL))))))) P))
(rule (i (i realu_mul (i (i realu_pow (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) j)) (i (i realu_div (i (i realu_pow (i halfatn4 x)) (i (i p_ (i (i t_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) j)) (i NUMERAL (i BIT1 u_0))))) (i realu_ofu_num (i (i p_ (i (i t_ (i NUMERAL (i BIT0 (i BIT1 u_0)))) j)) (i NUMERAL (i BIT1 u_0)))))) (i (i halfatn4u_co x) j))
(rule (i (i realu_add (i (i float a) n)) (i (i float (i intu_neg b)) m)) (i (i realu_sub (i (i float a) n)) (i (i float b) m)))
(rule (i Re (i (i complexu_div z) (i Cx x))) (i (i realu_div (i Re z)) x))
(rule (i (i mul6 (i uni (i (i c_ lfun) (i (i div6 proju_y1) two6)))) dihu_xu_126u_s2) ldihu_xu_126u_s2)
(rule (i (i APPEND (i (i FILTER P) l1)) (i (i FILTER P) l2)) (i (i FILTER P) (i (i APPEND l1) l2)))
(rule (i LENGTH (i (i bnu_facesAt g) v)) (i (i bnu_degree g) v))
(rule (i (i realu_mul (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) x) (i realu_neg x))
(rule (i (i s_b_ (i w_ (i (i a_ (i (i nodeu_map H) x)) x))) (i (i a_ (i (i nodeu_map H) (i (i nodeu_map H) x))) x)) (i (i a_ (i CARD (i (i node H) x))) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i dist (i (i c_ m) (i (i p_ m) n))) n)
(rule (i (i measurableu_on (i indicator s0)) UNIV) (i lebesgueu_measurable s0))
(rule (i (i realu_add (i (i realu_div (i (i (i (i (i (i gamma3fu_126u_n y1) y2) sqrt2) sqrt2) sqrt2) y6)) (i realu_ofu_num w1))) (i (i realu_mul (i (i realu_sub (i (i realu_sub (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i upperu_dihu_y y1) y2) r) r) r) y6))) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))))) (i (i realu_div (i (i realu_sub (i (i vol2r y1) r)) (i (i (i vol2f y1) r) f))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi)))) (i (i (i (i (i (i (i (i (i gamma23fu_126u_03u_n y1) y2) y3) y4) y5) y6) w1) r) f))
(rule (i (i (i COND (i (i intu_le (i intu_ofu_num (i NUMERAL u_0))) x)) x) (i intu_neg x)) (i intu_abs x))
(rule (i (i (i m_m_g_ (i (i o f) Re)) a) (i (i within (i at (i Cx x))) real0)) (i (i (i m_m_g_ f) a) (i atreal x)))
(rule (i (i a_ (i (i realu_pow (i distance (i (i c_ w) x))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i distance (i (i c_ y) z))) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i a_ (i distance (i (i c_ w) x))) (i distance (i (i c_ y) z))))
(rule (i tan (i (i realu_mul (i realu_ofu_num n)) pi)) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i a_ (i INJA a1)) (i INJA a2)) (i (i a_ a1) a2))
(rule (i (i (i m_m_m_g_ f) (i f x)) (i at x)) (i (i realu_continuous f) (i at x)))
(rule (i (i realu_mul (i (i rpow x) z)) (i (i rpow y) z)) (i (i rpow (i (i realu_mul x) y)) z))
(rule (i dim (i closure s0)) (i dim s0))
(rule (i (i realu_div (i (i realu_sub (i cos (i (i realu_sub x) y))) (i cos (i (i realu_add x) y)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i sin x)) (i sin y)))
(rule (i relativeu_interior (i (i INSERT a) EMPTY)) (i (i INSERT a) EMPTY))
(rule (i (i hull subspace) s0) (i span s0))
(rule (i UNIONS (i topologicalu_componentu_yfan (i (i c_ x) (i (i c_ V) E)))) (i yfan (i (i c_ x) (i (i c_ V) E))))
(rule (i (i s_b_ (i fullyu_surrounded (i (i c_ V) E))) (i (i s_b_ (i conformingu_bijection (i (i c_ V) E))) (i (i s_b_ (i conformingu_halfu_space (i (i c_ V) E))) (i (i s_b_ (i conformingu_solidu_angle (i (i c_ V) E))) (i conformingu_diagonal (i (i c_ V) E)))))) (i conforming (i (i c_ V) E)))
(rule (i (i (i ITER n) f) (i (i (i ITER m) f) x)) (i (i (i ITER (i (i p_ n) m)) f) x))
(rule (i (i (i POWER (i faceu_map H)) (i SUC (i (i (i (i mAdd H) NF) L) x))) (i (i (i (i heading H) NF) L) x)) (i (i (i (i attach H) NF) L) x))
(rule (i (i (i m_m_m_g_ f) (i f x)) (i (i within (i at x)) s0)) (i (i realu_continuous f) (i (i within (i at x)) s0)))
(rule (i bnu_tabulate0 (i (i c_ n) f)) (i (i bnu_tabulate n) f))
(rule (i (i realu_add (i (i realu_pow (i Re z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i Im z)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i vectoru_norm z)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i matrixu_neg (i (i matrixu_sub A0) B0)) (i (i matrixu_sub B0) A0))
(rule (i (i dot b) (i (i vectoru_sub x) (i (i r_ (i (i realu_div (i (i dot b) x)) (i (i dot b) b))) b))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i a_ (i (i dot x) x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ (i vectoru_norm x)) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i closure EMPTY) EMPTY)
(rule (i (i realu_add (i (i (i (i (i (i (i gamma3u_x m1) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) x1) x2) x6)) (i (i realu_add (i (i (i (i (i (i (i gamma3u_x m1) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) x1) x3) x5)) (i (i realu_mul (i (i realu_sub (i (i (i (i (i (i dihu_x x1) x2) x3) x4) x5) x6)) (i (i realu_add (i (i (i (i (i (i dihu_x x1) x2) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x6)) (i (i (i (i (i (i dihu_x x1) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x3) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x5) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))))))))))) (i (i (i (i (i (i (i gamma23u_full8u_x m1) x1) x2) x3) x4) x5) x6))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i frac x)) (i w_ (i integer x)))
(rule (i (i realu_div x) (i (i realu_add (i sqrt (i (i realu_add (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i halfatn x))
(rule (i (i INJP (i INJN (i SUC c))) (i (i INJP (i INJA i0)) (i INJF r))) (i (i (i ZCONSTR c) i0) r))
(rule (i (i vectoru_add (i cnj w)) (i cnj z)) (i cnj (i (i vectoru_add w) z)))
(rule (i (i realu_add (i mku_real (i trealu_eq x1))) (i mku_real (i trealu_eq y1))) (i mku_real (i trealu_eq (i (i trealu_add x1) y1))))
(rule (i (i a_ (i (i vectoru_add x) y)) (i (i vectoru_add x) z)) (i (i a_ y) z))
(rule (i (i exposedu_faceu_of s0) s0) (i convex s0))
(rule (i span (i (i INSERT (i vec (i NUMERAL u_0))) s0)) (i span s0))
(rule (i realu_sgn (i realu_inv x)) (i realu_sgn x))
(rule (i (i complexu_div (i (i vectoru_add (i ccos (i (i vectoru_sub w) z))) (i ccos (i (i vectoru_add w) z)))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i ccos w)) (i ccos z)))
(rule (i (i (i surfR (i (i realu_div y1) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i (i etau_y y1) y2) y6)) c) (i (i (i (i surfRy y1) y2) y6) c))
(rule (i (i (i (i (i (i deltau_x (i (i realu_mul y1) y1)) (i (i realu_mul y2) y2)) (i (i realu_mul y3) y3)) (i (i realu_mul y4) y4)) (i (i realu_mul y5) y5)) (i (i realu_mul y6) y6)) (i (i (i (i (i (i deltau_y y1) y2) y3) y4) y5) y6))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y1) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0)))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0)))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0)))) (i (i CONS (i (i c_ (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0)) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0))))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y5) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0)))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y6) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0)))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y7) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0)))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y8) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0)))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y9) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0)))) NIL))))))))) (i (i (i (i (i (i (i (i (i dartu_std4 y1) y2) y3) y4) y5) y6) y7) y8) y9))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i dartu_std3 y1) y2) y3) y4) y5) y6))
(rule (i (i a_ (i (i dot x) x)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) (i vec (i NUMERAL u_0))))
(rule (i (i (i COND (i (i l_ k) (i LENGTH l))) (i (i EL k) l)) (i (i EL (i (i m_ k) (i LENGTH l))) m)) (i (i EL k) (i (i APPEND l) m)))
(rule (i (i mul6 (i (i scalar6 (i (i sub6 (i (i scalar6 unit6) h0)) (i (i scalar6 proju_y1) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) rh0)) dihu_x) ldihu_x)
(rule (i (i add6 rhazimu_x) (i (i add6 rhazim2u_x) (i (i sub6 rhazim3u_x) (i constant6 (i (i realu_mul (i (i realu_add (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) const1)) pi))))) taumu_x)
(rule (i pathfinish (i linepath (i (i c_ a) b))) b)
(rule (i (i realu_add (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_sub const1) (i (i realu_mul const1) (i ly y)))) (i rho y))
(rule (i LETu_END t) t)
(rule (i (i (i netord atu_neginfinity) x) y) (i (i realu_le x) y))
(rule (i (i s_b_ (i (i IN x) t)) (i (i SUBSET s0) t)) (i (i SUBSET (i (i INSERT x) s0)) t))
(rule (i (i s_b_ (i (i realu_lt x) z)) (i (i realu_lt y) z)) (i (i realu_lt (i (i realu_max x) y)) z))
(rule (i realu_sgn (i Im (i (i complexu_mul w) (i cnj z)))) (i realu_sgn (i Im (i (i complexu_div w) z))))
(rule (i (i complexu_mul (i Cx (i exp r))) (i complex (i (i c_ (i cos t)) (i sin t)))) (i cexp (i complex (i (i c_ r) t))))
(rule (i sqrt (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_abs x))
(rule (i (i hrealu_add n) (i hrealu_ofu_num (i NUMERAL u_0))) n)
(rule (i (i (i (i (i (i gamma3fu_vLR0 (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i gamma3fu_xu_vLR0 x1) x2) x3) x4) x5) x6))
(rule (i (i realu_mul (i sqn (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6))) (i (i (i (i (i (i ldihu_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i ldihu_xu_n x1) x2) x3) x4) x5) x6))
(rule (i (i s_b_ (i (i realu_le x) z)) (i (i realu_le y) z)) (i (i realu_le (i (i realu_max x) y)) z))
(rule (i (i b_s_ (i (i isolatedu_dart H) x)) (i (i b_s_ (i (i isu_edgeu_degenerate H) x)) (i (i b_s_ (i (i isu_nodeu_degenerate H) x)) (i (i isu_faceu_degenerate H) x)))) (i (i dartu_degenerate H) x))
(rule (i (i realu_min (i realu_ofu_int x)) (i realu_ofu_int y)) (i realu_ofu_int (i (i intu_min x) y)))
(rule (i (i s_b_ (i realu_bounded s0)) (i realu_closed s0)) (i realu_compact s0))
(rule (i vector (i (i CONS x) (i (i CONS y) NIL))) (i complex (i (i c_ x) y)))
(rule (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) (i intu_ofu_num n)) (i w_ (i (i a_ n) (i NUMERAL u_0))))
(rule (i (i realu_mul (i realu_ofu_int x)) (i realu_ofu_int y)) (i realu_ofu_int (i (i intu_mul x) y)))
(rule (i (i (i (i (i (i (i compose6 f) proju_x2) proju_x3) proju_x4) unit6) unit6) unit6) (i rotate234 f))
(rule (i marku_term u) u)
(rule (i FST (i SND (i SND (i destu_bnu_graph g)))) (i bnu_faceListAt g))
(rule (i vectoru_norm (i Cx (i realu_ofu_num n))) (i realu_ofu_num n))
(rule (i measure (i (i INTER (i aff (i (i INSERT x) (i (i INSERT v) (i (i INSERT u) EMPTY))))) (i (i normball x) r))) (i realu_ofu_num (i NUMERAL u_0)))
(rule (i (i realu_le (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_le (i realu_abs x)) (i realu_abs y)))
(rule (i (i realu_sub x) (i realu_neg y)) (i (i realu_add x) y))
(rule (i (i (i (i (i (i (i gamma3fu_vLRu_n y1) y2) y3) y4) y5) y6) lfun) (i (i (i (i (i (i gamma3fu_vLRu_nlfun y1) y2) y3) y4) y5) y6))
(rule (i tameu_hypermap (i oppositeu_hypermap H)) (i tameu_hypermap H))
(rule (i RSTC (i RSTC R)) (i RSTC R))
(rule (i realu_abs (i exp x)) (i exp x))
(rule (i (i complexu_pow (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) n) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i scalar6 (i uni (i (i c_ (i truncateu_sqrt c)) deltau_x))) (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))) (i truncateu_volu_x c))
(rule (i planaru_ind (i shift H)) (i planaru_ind H))
(rule (i (i sub6 (i truncateu_vol3ru_456 d)) (i (i (i (i truncateu_vol3f d) m4) m5) m6)) (i (i (i (i truncateu_gamma3fu_x d) m4) m5) m6))
(rule (i (i integral (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) f) (i (i integral (i openu_interval (i (i c_ a) b))) f))
(rule (i iterate realu_mul) product)
(rule (i (i realu_mul (i (i realu_div (i (i realu_add (i realu_ofu_num p)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i realu_add (i realu_ofu_num k)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))) (i realu_ofu_num (i binom (i (i c_ p) k)))) (i realu_ofu_num (i binom (i (i c_ (i (i p_ p) (i NUMERAL (i BIT1 u_0)))) (i (i p_ k) (i NUMERAL (i BIT1 u_0)))))))
(rule (i (i realu_add (i (i realu_mul (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) mm1)) (i (i realu_add (i (i realu_mul (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_div mm1) pi))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_mul mm2) (i (i realu_div (i (i realu_add (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) const1)) (i (i realu_mul pi) const1)))))) (i (i realu_add (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i dih2u_y y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i dih3u_y y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i dih4u_y y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i dih5u_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i dih6u_y y1) y2) y3) y4) y5) y6)))))))) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) (i (i realu_mul pi) const1)))) (i (i realu_add (i (i (i (i (i (i rhazim y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i rhazim2 y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i rhazim3 y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i rhazim4 y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i rhazim5 y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i rhazim6 y1) y2) y3) y4) y5) y6))))))))) (i (i (i (i (i (i (i vol4f y1) y2) y3) y4) y5) y6) lfun))
(rule (i (i mul6 (i uni (i (i c_ gchi) proju_y6))) dih6u_x) gchi6u_x)
(rule (i (i realu_lt (i (i realu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_lt (i realu_abs x)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i (i affu_gt EMPTY) s0) (i conv0 s0))
(rule (i (i realu_mul (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) sqrt8) sqrt2)
(rule (i realu_inv (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))
(rule (i (i realu_div (i realu_ofu_num x)) (i realu_ofu_num y)) (i (i DECIMAL x) y))
(rule (i (i hrealu_add (i (i hrealu_mul m) p)) (i (i hrealu_mul n) p)) (i (i hrealu_mul (i (i hrealu_add m) n)) p))
(rule (i (i DIFF (i interior s0)) (i closure t)) (i interior (i (i DIFF s0) t)))
(rule (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i (i realu_mul sqrt2) sqrt2))
(rule (i (i (i COND (i (i a_ (i FST h)) a)) (i SND h)) (i (i ASSOC a) t)) (i (i ASSOC a) (i (i CONS h) t)))
(rule (i (i (i COND (i earu_sy s0)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i sigmau_sy s0))
(rule (i (i (i m_m_m_g_ f) (i f x)) (i atreal x)) (i (i realu_continuous f) (i atreal x)))
(rule (i (i (i POWER (i (i res (i faceu_map H)) (i (i face H) x))) n) x) (i (i (i POWER (i faceu_map H)) n) x))
(rule (i CARD (i nodeu_set H)) (i numberu_ofu_nodes H))
(rule (i (i a_ (i vector (i (i CONS a1) (i (i CONS a2) NIL)))) (i vector (i (i CONS b1) (i (i CONS b2) NIL)))) (i (i s_b_ (i (i a_ a1) b1)) (i (i a_ a2) b2)))
(rule (i (i complexu_pow (i csqrt z)) (i NUMERAL (i BIT0 (i BIT1 u_0)))) z)
(rule (i realu_inv (i (i realu_div x) y)) (i (i realu_div y) x))
(rule (i Im (i clog (i (i vectoru_add (i (i complexu_mul ii) z)) (i csqrt (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_pow z) (i NUMERAL (i BIT0 (i BIT1 u_0))))))))) (i Re (i casn z)))
(rule (i (i r_r_ (i realu_neg (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) A0) (i matrixu_neg A0))
(rule (i UNIONS (i setu_ofu_cube (i (i intu_ball x) r))) (i (i unionu_ofu_intu_cube x) r))
(rule (i (i realu_mul (i (i realu_sub (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i realu_div (i (i realu_sub (i (i vol2r y1) sqrt2)) (i (i realu_sub (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul pi) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_div y1) (i (i realu_mul sqrt2) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))))))) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) pi))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul pi) (i lfun (i (i realu_div y1) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) (i (i (i (i (i (i gamma3fu_vu_lfun y1) y2) y3) y4) y5) y6))
(rule (i (i realu_add (i (i realu_mul (i (i (i (i (i (i (i (i (i (i truncateu_gamma3fu_x (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) m1) m2) m6) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL u_0))) x1) x2) x6)) iw1)) (i (i realu_mul (i (i realu_sub (i (i (i (i (i (i dihu_x x1) x2) x3) x4) x5) x6)) (i (i realu_add (i (i (i (i (i (i (i truncateu_dihu_x (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) x1) x2) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x6)) d))) (i (i truncateu_gamma2u_x m1) x1))) (i (i (i (i (i (i (i (i (i (i (i truncateu_gamma23u_xu_C d) iw1) m1) m2) m6) x1) x2) x3) x4) x5) x6))
(rule (i (i realu_mul (i (i realu_sub (i (i (i (i (i (i dihu_x x1) x2) x3) x4) x5) x6)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i truncateu_gamma2u_x m1) x1)) (i (i (i (i (i (i (i truncateu_gamma23u_xu_B m1) x1) x2) x3) x4) x5) x6))
(rule (i (i intu_le (i (i intu_add x) z)) (i (i intu_add y) z)) (i (i intu_le x) y))
(rule (i pathstart (i (i (i subpath u) v) g)) (i g u))
(rule (i (i realu_sub x) (i (i realu_add x) y)) (i realu_neg y))
(rule (i (i s_b_ (i (i a_ (i dart H)) D0)) (i (i s_b_ (i (i a_ (i edgeu_map H)) e)) (i (i s_b_ (i (i a_ (i nodeu_map H)) n)) (i (i a_ (i faceu_map H)) f)))) (i (i a_ (i tupleu_hypermap H)) (i (i c_ D0) (i (i c_ e) (i (i c_ n) f)))))
(rule (i (i realu_mul (i (i realu_sub (i (i realu_sub (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i dihu_y y1) y2) sqrt2) sqrt2) sqrt2) y6))) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))))) (i (i realu_div (i (i realu_sub (i (i vol2r y1) sqrt2)) (i (i (i vol2f y1) sqrt2) f))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) (i (i (i (i (i (i (i gamma3fu_vL y1) y2) y3) y4) y5) y6) f))
(rule (i (i (i COND (i (i l_a_ k) n)) (i (i DIV (i FACT n)) (i (i t_ (i FACT (i (i m_ n) k))) (i FACT k)))) (i NUMERAL u_0)) (i binom (i (i c_ n) k)))
(rule (i w_ (i (i a_ (i content (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL)))) (i realu_ofu_num (i NUMERAL u_0)))) (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i content (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL)))))
(rule (i REPu_prod (i ABSu_prod (i (i mku_pair x) y))) (i (i mku_pair x) y))
(rule (i (i matrixu_add (i mat (i NUMERAL u_0))) A0) A0)
(rule (i w_ (i (i (i obstructed x) y) s0)) (i (i (i unobstructed x) y) s0))
(rule (i (i rotate2d (i realu_ofu_num (i NUMERAL u_0))) z) z)
(rule (i (i realu_mul (i realu_ofu_num (i binom (i (i c_ n) k)))) (i (i realu_mul (i (i realu_pow x) k)) (i (i realu_pow (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) x)) (i (i m_ n) k)))) (i (i (i bernstein n) k) x))
(rule (i (i s_b_ (i (i a_ m) (i NUMERAL u_0))) (i (i a_ n) (i NUMERAL u_0))) (i (i a_ (i (i p_ m) n)) (i NUMERAL u_0)))
(rule (i (i DIFF EMPTY) s0) EMPTY)
(rule (i (i realu_mul (i (i realu_sub (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i realu_div (i (i realu_sub (i (i vol2r y1) sqrt2)) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul pi) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_div y1) (i (i realu_mul sqrt2) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) (i (i (i (i (i (i gamma3fu_v0 y1) y2) y3) y4) y5) y6))
(rule (i (i a_ (i (i MOD n) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i NUMERAL u_0)) (i EVEN n))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i sin (i (i (i (i azim x) y) u) v))) (i (i realu_le (i (i (i (i azim x) y) u) v)) pi))
(rule (i shift (i shift (i (i edgeu_walkup (i shift H)) x))) (i (i nodeu_walkup H) x))
(rule (i (i realu_sub (i (i dot x) y)) (i (i dot x) z)) (i (i dot x) (i (i vectoru_sub y) z)))
(rule (i (i s_b_ (i ODD m)) (i ODD n)) (i ODD (i (i t_ m) n)))
(rule (i (i realu_mul (i (i realu_sub (i sqrt y)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0))) (i (i realu_mul rh0) (i (i realu_mul sol0) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) (i flatu_termu_x y))
(rule (i (i realu_lt (i (i realu_add x) y)) (i (i realu_add x) z)) (i (i realu_lt y) z))
(rule (i (i realu_add (i (i (i (i (i (i gamma3fu_135u_su_n y1) y2) y3) y4) y5) y6)) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) pi))) (i (i realu_add (i (i (i (i (i (i (i yu_ofu_x lmdihu_xu_n) y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i (i yu_ofu_x lmdih3u_xu_n) y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i (i yu_ofu_x lmdih5u_xu_n) y1) y2) y3) y4) y5) y6))))) (i (i (i (i (i (i gamma3fu_135u_n y1) y2) y3) y4) y5) y6))
(rule (i (i intu_mul (i (i intu_pow x) m)) (i (i intu_pow x) n)) (i (i intu_pow x) (i (i p_ m) n)))
(rule (i SUC (i (i p_ n) n)) (i BIT1 n))
(rule (i (i p_ n) n) (i BIT0 n))
(rule (i (i matrixu_add (i transp A0)) (i transp B0)) (i transp (i (i matrixu_add A0) B0)))
(rule (i csqrt (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))))
(rule (i simpleu_path (i linepath (i (i c_ a) b))) (i w_ (i (i a_ a) b)))
(rule (i csqrt (i Cx (i realu_ofu_num (i NUMERAL u_0)))) (i Cx (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i s_b_ (i w_ (i (i a_ x) a))) (i (i s_b_ (i w_ (i (i a_ x) b))) (i (i between x) (i (i c_ a) b)))) (i (i a_ (i angle (i (i c_ a) (i (i c_ x) b)))) pi))
(rule (i (i (i (i (i (i (i compose6 taumu_x) (i constant6 a)) proju_x2) proju_x3) proju_x4) proju_x5) proju_x6) (i taumu_sub1u_x a))
(rule (i TAGB x) x)
(rule (i (i SUBSET (i closure s0)) s0) (i closed s0))
(rule (i UNIONS (i (i INSERT s0) (i (i INSERT t) EMPTY))) (i (i UNION s0) t))
(rule (i UNIONS (i (i INSERT s0) EMPTY)) s0)
(rule (i UNIONS EMPTY) EMPTY)
(rule (i (i mul6 (i uni (i (i c_ lfun) (i (i div6 proju_y3) two6)))) dih3u_xu_135u_s2) ldih3u_xu_135u_s2)
(rule (i (i s_b_ (i (i (i strictu_qua2 (i (i INSERT v) (i (i INSERT v1) (i (i INSERT v3) (i (i INSERT v2) EMPTY))))) (i (i INSERT v1) (i (i INSERT v3) EMPTY))) s0)) (i (i s_b_ (i (i (i strictu_qua2 (i (i INSERT v) (i (i INSERT v1) (i (i INSERT v3) (i (i INSERT v4) EMPTY))))) (i (i INSERT v1) (i (i INSERT v3) EMPTY))) s0)) (i (i a_ (i (i INTER (i conv0 (i (i INSERT v) (i (i INSERT v1) (i (i INSERT v3) (i (i INSERT v2) EMPTY)))))) (i conv0 (i (i INSERT v) (i (i INSERT v1) (i (i INSERT v3) (i (i INSERT v4) EMPTY))))))) EMPTY))) (i (i (i (i (i (i adjacentu_pai v) v1) v3) v2) v4) s0))
(rule (i rconesgn realu_lt) rconeu_lt)
(rule (i sqrt (i quadraticu_rootu_plus (i abcu_ofu_quadratic (i (i (i (i (i (i (i (i (i muR y1) y2) y3) y4) y5) y6) y7) y8) y9)))) (i (i (i (i (i (i (i (i (i enclosed y1) y2) y3) y4) y5) y6) y7) y8) y9))
(rule (i (i a_ (i (i intu_add x) y)) (i (i intu_add x) z)) (i (i a_ y) z))
(rule (i frontier (i (i DIFF UNIV) s0)) (i frontier s0))
(rule (i (i sub6 (i constant6 (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))) (i (i sub6 (i (i scalar6 (i (i add6 (i mku_456 (i rotate5 solu_euleru_xu_divu_sqrtdelta))) (i (i add6 (i mku_456 (i rotate6 solu_euleru_xu_divu_sqrtdelta))) (i mku_456 (i rotate4 solu_euleru_xu_divu_sqrtdelta))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi)))) (i (i scalar6 (i (i add6 (i (i mul6 (i (i scalar6 (i uni (i (i c_ lfun) (i (i scalar6 proju_y4) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))))) m4)) (i mku_456 (i rotate4 dihu_xu_divu_sqrtdeltau_posbranch)))) (i (i add6 (i (i mul6 (i (i scalar6 (i uni (i (i c_ lfun) (i (i scalar6 proju_y5) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))))) m5)) (i mku_456 (i rotate5 dihu_xu_divu_sqrtdeltau_posbranch)))) (i (i mul6 (i (i scalar6 (i uni (i (i c_ lfun) (i (i scalar6 proju_y6) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0)))))))))) m6)) (i mku_456 (i rotate6 dihu_xu_divu_sqrtdeltau_posbranch)))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) pi))))) (i (i (i gamma3fu_xu_divu_sqrtdelta m4) m5) m6))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i realu_neg x)) (i (i realu_lt x) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i vsum (i (i o_o_ n) n)) f) (i f n))
(rule (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))
(rule (i (i realu_add y) (i (i realu_sub x) y)) x)
(rule (i (i realu_mul (i gchi (i sqrt x6))) (i (i (i (i (i (i dih6u_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i gchi6u_x x1) x2) x3) x4) x5) x6))
(rule (i (i simplex (i intu_neg (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))) s0) (i (i a_ s0) EMPTY))
(rule (i (i (i COND (i (i a_ n) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i realu_ofu_num (i NUMERAL u_0))) (i (i (i COND (i (i a_ n) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))))))))) (i (i (i COND (i (i a_ n) (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0)))))) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0))))))))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT0 (i BIT0 (i BIT1 u_0))))))))))))))))) (i (i (i COND (i (i a_ n) (i NUMERAL (i BIT0 (i BIT1 (i BIT1 u_0)))))) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 u_0)))))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0))))))))))))) tgt)))) (i du_tame n))
(rule (i (i UNION (i openu_segment (i (i c_ a) b))) (i (i INSERT a) (i (i INSERT b) EMPTY))) (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL)))
(rule (i (i s_b_ (i (i realu_le (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i vectoru_norm v))) (i (i s_b_ (i (i realu_le (i vectoru_norm v)) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0))) (i w_ (i (i a_ v) (i vec (i NUMERAL u_0)))))) (i (i IN v) ballu_annulus))
(rule (i (i vectoru_sub (i vec (i NUMERAL u_0))) x) (i vectoru_neg x))
(rule (i mapu_tou_voronoi (i (i c_ x) S)) (i (i voronoiu_open S) x))
(rule (i (i realu_add (i realu_ofu_int x)) (i realu_ofu_int y)) (i realu_ofu_int (i (i intu_add x) y)))
(rule (i (i (i (i (i (i (i rotate6 f) x1) x2) x3) x4) x5) x6) (i (i (i (i (i (i f x6) x1) x5) x3) x4) x2))
(rule (i (i (i (i (i (i (i rotate5 f) x1) x2) x3) x4) x5) x6) (i (i (i (i (i (i f x5) x3) x4) x2) x6) x1))
(rule (i (i (i (i (i (i (i rotate4 f) x1) x2) x3) x4) x5) x6) (i (i (i (i (i (i f x4) x2) x6) x1) x5) x3))
(rule (i (i (i (i (i (i (i rotate3 f) x1) x2) x3) x4) x5) x6) (i (i (i (i (i (i f x3) x1) x2) x6) x4) x5))
(rule (i (i (i (i (i (i (i rotate2 f) x1) x2) x3) x4) x5) x6) (i (i (i (i (i (i f x2) x3) x1) x5) x6) x4))
(rule (i (i float (i (i intu_add (i (i intu_mul (i intu_ofu_num (i (i EXP (i NUMERAL (i BIT0 (i BIT1 u_0)))) (i (i p_ m) n)))) a)) b)) (i intu_neg (i intu_ofu_num n))) (i (i realu_add (i (i float a) (i intu_ofu_num m))) (i (i float b) (i intu_neg (i intu_ofu_num n)))))
(rule (i CARD (i setu_ofu_ccube (i (i intu_ball x) r))) (i CARD (i (i intu_ball x) r)))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i dartu_Hllu_w y1) y2) y3) y4) y5) y6))
(rule (i g (i vec (i NUMERAL (i BIT1 u_0)))) (i pathfinish g))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i dartu_Hllu_n y1) y2) y3) y4) y5) y6))
(rule (i pathfinish (i reversepath g)) (i pathstart g))
(rule (i open (i (i IMAGE lift) s0)) (i realu_open s0))
(rule (i (i (i (i (i (i rhazim (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i rhazimu_x x1) x2) x3) x4) x5) x6))
(rule (i (i (i affsign sgn) s0) EMPTY) (i (i hull affine) s0))
(rule (i (i sum (i faceu_set H)) w) (i (i totalu_weight H) w))
(rule (i w_ (i (i l_u_c s0) t)) (i (i l_a_u_c t) s0))
(rule (i intu_sgn (i intu_ofu_num (i NUMERAL u_0))) (i intu_ofu_num (i NUMERAL u_0)))
(rule (i (i DIFF (i closedu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i (i INSERT a) (i (i INSERT b) EMPTY))) (i openu_segment (i (i c_ a) b)))
(rule (i realu_ofu_num (i NUMERAL u_0)) (i diameter EMPTY))
(rule (i w_ (i (i l_a_u_c s0) t)) (i (i l_u_c t) s0))
(rule (i (i (i (i (i (i (i compose6 f) proju_x1) proju_x2) proju_x6) unit6) unit6) unit6) (i rotate126 f))
(rule (i (i realu_mul (i vectoru_norm w)) (i vectoru_norm z)) (i vectoru_norm (i (i complexu_mul w) z)))
(rule (i (i DIFF UNIV) (i closure (i (i DIFF UNIV) s0))) (i interior s0))
(rule (i rotate234 arclengthu_xu_123) arclengthu_xu_234)
(rule (i mat (i NUMERAL (i BIT1 u_0))) (i matrix I))
(rule (i (i realu_mul (i lfun (i (i realu_div (i sqrt x2)) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))) (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 u_0))))))))) (i (i (i (i (i (i dih2u_xu_126u_s2 x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i ldih2u_xu_126u_s2 x1) x2) x3) x4) x5) x6))
(rule (i intu_ofu_real (i (i realu_sub (i realu_ofu_int x)) (i realu_ofu_int y))) (i (i intu_sub x) y))
(rule (i (i vectoru_sub (i (i dropout k) x)) (i (i dropout k) y)) (i (i dropout k) (i (i vectoru_sub x) y)))
(rule (i (i vectoru_sub (i (i r_ a) x)) (i (i r_ b) x)) (i (i r_ (i (i realu_sub a) b)) x))
(rule (i Im (i clog (i (i vectoru_add z) (i (i complexu_mul ii) (i csqrt (i (i vectoru_sub (i Cx (i realu_ofu_num (i NUMERAL (i BIT1 u_0))))) (i (i complexu_pow z) (i NUMERAL (i BIT0 (i BIT1 u_0)))))))))) (i Re (i cacs z)))
(rule (i (i b_s_ (i (i intu_lt x) y)) (i (i a_ x) y)) (i (i intu_le x) y))
(rule (i transp (i columnvector v)) (i rowvector v))
(rule (i (i realu_mul (i (i realu_sub (i (i realu_sub (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i upperu_dihu_y y1) y2) sqrt2) sqrt2) sqrt2) y6))) (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT1 u_0)))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))))) (i (i realu_div (i (i realu_sub (i (i vol2r y1) sqrt2)) (i (i (i vol2f y1) sqrt2) f))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) (i (i (i (i (i (i (i gamma3fu_vLu_n y1) y2) y3) y4) y5) y6) f))
(rule (i (i mul6 (i uni (i (i c_ gchi) proju_y5))) dih5u_x) gchi5u_x)
(rule (i transp (i transp A0)) A0)
(rule (i (i product (i (i o_o_ n) n)) f) (i f n))
(rule (i baseu_pointu_fan (i (i c_ x) (i (i c_ V) E))) x)
(rule (i (i s_b_ (i (i faceu_of f) s0)) (i (i s_b_ (i w_ (i (i a_ f) EMPTY))) (i (i a_ (i affu_dim f)) (i (i intu_sub (i affu_dim s0)) (i intu_ofu_num (i NUMERAL (i BIT1 u_0))))))) (i (i facetu_of f) s0))
(rule (i (i (i (i (i (i (i rotate6 lmdihu_xu_divu_sqrtdeltau_posbranch) x1) x2) x3) x4) x5) x6) (i (i (i (i (i (i lmdih6u_xu_divu_sqrtdeltau_posbranch x1) x2) x3) x4) x5) x6))
(rule (i (i s_b_ (i tameu_1 H)) (i (i s_b_ (i tameu_2 H)) (i (i s_b_ (i tameu_3 H)) (i (i s_b_ (i tameu_4 H)) (i (i s_b_ (i tameu_5a H)) (i (i s_b_ (i tameu_8 H)) (i (i s_b_ (i tameu_9a H)) (i (i s_b_ (i tameu_10 H)) (i (i s_b_ (i tameu_11a H)) (i (i s_b_ (i tameu_11b H)) (i (i s_b_ (i tameu_12o H)) (i tameu_13a H)))))))))))) (i tameu_hypermap H))
(rule (i (i (i (i (i (i (i (i arclengthu_y2 a) b) y1) y2) y3) y4) y5) y6) (i (i (i arclength y2) a) b))
(rule (i (i (i (i (i (i (i (i arclengthu_y1 a) b) y1) y2) y3) y4) y5) y6) (i (i (i arclength y1) a) b))
(rule (i (i intu_sub (i intu_ofu_num (i NUMERAL u_0))) x) (i intu_neg x))
(rule (i (i (i (i (i poweru_maps nu_fan) x) V) E) n) (i (i (i (i poweru_nu_fan x) V) E) n))
(rule (i (i (i (i (i (i (i (i arclengthu_y2 a) b) (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i (i (i arclengthu_x2 a) b) x1) x2) x3) x4) x5) x6))
(rule (i (i (i (i (i (i (i (i arclengthu_y1 a) b) (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i (i (i arclengthu_x1 a) b) x1) x2) x3) x4) x5) x6))
(rule (i (i realu_mul (i sqn (i (i (i (i (i (i deltau_y y1) y2) y3) y4) y5) y6))) (i (i realu_sub (i (i realu_div (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))) (i (i realu_sub (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi))) (i (i realu_add (i (i (i (i (i (i (i yu_ofu_x solu_euleru_xu_divu_sqrtdelta) y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i (i yu_ofu_x solu_euler156u_xu_divu_sqrtdelta) y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i (i yu_ofu_x solu_euler345u_xu_divu_sqrtdelta) y1) y2) y3) y4) y5) y6))))) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i realu_div mm2) pi))) (i (i realu_add (i (i (i (i (i (i (i yu_ofu_x lmdihu_xu_divu_sqrtdeltau_posbranch) y1) y2) y3) y4) y5) y6)) (i (i realu_add (i (i (i (i (i (i (i yu_ofu_x lmdih3u_xu_divu_sqrtdeltau_posbranch) y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i (i yu_ofu_x lmdih5u_xu_divu_sqrtdeltau_posbranch) y1) y2) y3) y4) y5) y6))))))) (i (i (i (i (i (i gamma3fu_135u_n y1) y2) y3) y4) y5) y6))
(rule (i (i matrixu_vectoru_mul (i mat (i NUMERAL (i BIT1 u_0)))) x) x)
(rule (i (i (i (i (i (i (i promote3u_tou_6 f) x1) x2) x3) x4) x5) x6) (i (i (i f x1) x2) x3))
(rule (i (i within (i atreal x)) UNIV) (i atreal x))
(rule (i (i UNION (i (i affu_ge (i (i INSERT x) EMPTY)) (i (i INSERT y) EMPTY))) (i (i affu_lt (i (i INSERT x) EMPTY)) (i (i INSERT y) EMPTY))) (i aff (i (i INSERT x) (i (i INSERT y) EMPTY))))
(rule (i (i s_b_ (i (i a_ (i FST a)) (i FST b))) (i (i a_ (i SND a)) (i SND b))) (i (i a_ a) b))
(rule (i midpoint (i (i c_ x) x)) x)
(rule (i (i DIFF (i closedu_realu_segment (i (i CONS (i (i c_ a) b)) NIL))) (i (i INSERT a) (i (i INSERT b) EMPTY))) (i openu_realu_segment (i (i c_ a) b)))
(rule (i (i connectedu_component EMPTY) x) EMPTY)
(rule (i (i vectoru_sub (i (i matrixu_vectoru_mul A0) x)) (i (i matrixu_vectoru_mul B0) x)) (i (i matrixu_vectoru_mul (i (i matrixu_sub A0) B0)) x))
(rule (i (i realu_add (i (i realu_mul (i (i realu_mul x14) x23)) x12)) (i (i realu_add (i (i realu_mul (i (i realu_mul x14) x23)) x13)) (i (i realu_add (i (i realu_mul (i (i realu_mul (i realu_neg x14)) x23)) x14)) (i (i realu_add (i (i realu_mul (i (i realu_mul (i realu_neg x14)) x23)) x23)) (i (i realu_add (i (i realu_mul (i (i realu_mul x14) x23)) x24)) (i (i realu_add (i (i realu_mul (i (i realu_mul (i realu_neg x12)) x13)) x23)) (i (i realu_add (i (i realu_mul (i (i realu_mul (i realu_neg x12)) x14)) x24)) (i (i realu_add (i (i realu_mul (i (i realu_mul x13) x24)) x12)) (i (i realu_add (i (i realu_mul (i (i realu_mul (i realu_neg x13)) x24)) x13)) (i (i realu_add (i (i realu_mul (i (i realu_mul x13) x24)) x14)) (i (i realu_add (i (i realu_mul (i (i realu_mul x13) x24)) x23)) (i (i realu_mul (i (i realu_mul (i realu_neg x13)) x24)) x24)))))))))))) (i (i (i (i (i cu_coef x12) x13) x14) x23) x24))
(rule (i (i realu_add (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_div mm1) pi))) (i (i realu_div (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))))) (i (i realu_div mm2) pi))) (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0))))))))) (i (i realu_div (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0))))))))))) (i (i realu_mul y) (i (i realu_div mm2) pi)))) (i realu_ofu_num (i NUMERAL (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))) (i gchi y))
(rule (i (i intu_add (i intu_ofu_num n)) (i intu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i intu_ofu_num (i SUC n)))
(rule (i (i continuous (i (i o lift) (i (i o f) drop))) (i (i within (i at (i lift x))) (i (i IMAGE lift) s0))) (i (i realu_continuous f) (i (i within (i atreal x)) s0)))
(rule (i (i (i (i (i (i delta (i (i realu_pow (i (i d3 a) d)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d3 b) d)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d3 c) d)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d3 a) b)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d3 a) c)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i (i d3 b) c)) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i (i realu_pow (i (i (i detu_vec3 (i (i vectoru_sub a) d)) (i (i vectoru_sub b) d)) (i (i vectoru_sub c) d))) (i NUMERAL (i BIT0 (i BIT1 u_0))))))
(rule (i (i g_a_ (i CARD (i (i face H) x))) (i NUMERAL (i BIT1 (i BIT0 (i BIT1 u_0))))) (i (i exceptionalu_face H) x))
(rule (i (i realu_add (i (i float a) m)) (i (i float b) m)) (i (i float (i (i intu_add a) b)) m))
(rule (i (i hrealu_mul (i hrealu_ofu_num (i NUMERAL (i BIT1 u_0)))) x) x)
(rule (i (i vectoru_variation (i (i IMAGE lift) s0)) (i (i o lift) (i (i o f) drop))) (i (i realu_variation s0) f))
(rule (i (i INTER (i inside s0)) s0) EMPTY)
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i realu_pow a) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i w_ (i (i a_ a) (i realu_ofu_num (i NUMERAL u_0)))))
(rule (i (i realu_le (i realu_ofu_num (i NUMERAL u_0))) (i realu_neg x)) (i (i realu_le x) (i realu_ofu_num (i NUMERAL u_0))))
(rule (i (i (i COND (i (i a_ (i (i MOD i0) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i MOD j) (i NUMERAL (i BIT1 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL u_0))) (i (i (i COND (i (i IN (i (i INSERT (i (i MOD i0) (i NUMERAL (i BIT1 (i BIT1 u_0))))) (i (i INSERT (i (i MOD j) (i NUMERAL (i BIT1 (i BIT1 u_0))))) EMPTY))) J)) (i sqrt (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 u_0)))))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i au_ear0 J) (i (i c_ i0) j)))
(rule (i (i realu_sub (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_pow (i cos x)) (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i cos (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) x)))
(rule (i (i pathu_component EMPTY) x) EMPTY)
(rule (i (i complexu_mul (i complexu_inv w)) (i complexu_inv z)) (i complexu_inv (i (i complexu_mul w) z)))
(rule (i affu_dim (i (i hull affine) s0)) (i affu_dim s0))
(rule (i (i (i COND (i EVEN n)) (i (i complexu_pow x) n)) (i vectoru_neg (i (i complexu_pow x) n))) (i (i complexu_pow (i vectoru_neg x)) n))
(rule (i (i realu_lt (i realu_ofu_int x)) (i realu_ofu_int y)) (i (i intu_lt x) y))
(rule (i (i d_ (i (i d_ (i transp A0)) i0)) j) (i (i d_ (i (i d_ A0) j)) i0))
(rule (i (i realu_le (i realu_ofu_int x)) (i realu_ofu_int y)) (i (i intu_le x) y))
(rule (i (i intu_sub x) (i intu_neg y)) (i (i intu_add x) y))
(rule (i (i (i COND (i (i IN x) (i span s0))) (i dim s0)) (i (i p_ (i dim s0)) (i NUMERAL (i BIT1 u_0)))) (i dim (i (i INSERT x) s0)))
(rule (i (i (i hasu_derivative f) (i (i frechetu_derivative f) net0)) net0) (i (i differentiable f) net0))
(rule (i (i vectoru_matrixu_mul x) (i transp A0)) (i (i matrixu_vectoru_mul A0) x))
(rule (i rotate4 eta2u_135) eta2u_456)
(rule (i (i nsum (i (i (i support p_) f) s0)) f) (i (i nsum s0) f))
(rule (i (i b_s_ (i (i IN x) (i conv (i (i INSERT y) (i (i INSERT z) EMPTY))))) (i (i b_s_ (i (i IN y) (i conv (i (i INSERT z) (i (i INSERT x) EMPTY))))) (i (i IN z) (i conv (i (i INSERT x) (i (i INSERT y) EMPTY)))))) (i collinear (i (i INSERT x) (i (i INSERT y) (i (i INSERT z) EMPTY)))))
(rule (i transp (i mat n)) (i mat n))
(rule (i (i s_b_ (i (i facetu_of c1) P)) (i (i s_b_ (i (i facetu_of c2) P)) (i (i realu_le (i Arg (i (i complexu_div (i (i facetu_repu_a P) c1)) u))) (i Arg (i (i complexu_div (i (i facetu_repu_a P) c2)) u))))) (i (i (i (i polyu_sortu_fn P) u) c1) c2))
(rule (i drop (i vec n)) (i realu_ofu_num n))
(rule (i (i realu_add (i realu_ofu_num (i numberu_ofu_edges H))) (i (i realu_add (i realu_ofu_num (i numberu_ofu_nodes H))) (i (i realu_sub (i (i realu_sub (i realu_ofu_num (i numberu_ofu_faces H))) (i realu_ofu_num (i CARD (i dart H))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i realu_ofu_num (i numberu_ofu_components H)))))) (i planaru_ind H))
(rule (i MAP I) I)
(rule (i (i hull convex) (i (i UNION A0) (i (i hull convex) B0))) (i (i hull convex) (i (i UNION A0) B0)))
(rule (i (i a_ (i Im z)) (i realu_ofu_num (i NUMERAL u_0))) (i real0 z))
(rule (i (i a_ (i cos (i angle (i (i c_ a) (i (i c_ b) c))))) (i cos (i angle (i (i c_ ai_) (i (i c_ bi_) ci_))))) (i (i a_ (i angle (i (i c_ a) (i (i c_ b) c)))) (i angle (i (i c_ ai_) (i (i c_ bi_) ci_)))))
(rule (i (i add6 rhazimu_xu_divu_sqrtdeltau_posbranch) (i (i add6 rhazim2u_xu_divu_sqrtdeltau_posbranch) rhazim3u_xu_divu_sqrtdeltau_posbranch)) tauu_residualu_x)
(rule (i (i intu_le (i (i intu_pow x) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i intu_pow y) (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i intu_le (i intu_abs x)) (i intu_abs y)))
(rule (i (i complexu_mul (i (i complexu_pow x) n)) (i (i complexu_pow y) n)) (i (i complexu_pow (i (i complexu_mul x) y)) n))
(rule (i (i realu_mul (i lfun (i (i realu_div (i sqrt x3)) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i dih3u_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i ldih3u_x x1) x2) x3) x4) x5) x6))
(rule (i yu_ofu_x x1u_deltau_x) x1u_deltau_y)
(rule (i (i realu_mul x1) (i (i (i (i (i (i deltau_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i x1u_deltau_x x1) x2) x3) x4) x5) x6))
(rule (i (i realu_mul (i gchi (i sqrt x5))) (i (i (i (i (i (i dih5u_x x1) x2) x3) x4) x5) x6)) (i (i (i (i (i (i gchi5u_x x1) x2) x3) x4) x5) x6))
(rule (i (i DISJOINT (i (i pathu_component s0) a)) (i (i pathu_component s0) b)) (i w_ (i (i IN a) (i (i pathu_component s0) b))))
(rule (i (i DIFF (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))) (i openu_interval (i (i c_ a) b))) (i frontier (i closedu_interval (i (i CONS (i (i c_ a) b)) NIL))))
(rule (i (i isu_inju_list (i (i poweru_list p) x)) n) (i (i (i inju_orbit p) x) n))
(rule (i (i (i COND (i (i realu_le m) n)) m) n) (i (i realu_min m) n))
(rule (i (i (i COND (i (i a_ x) (i vec (i NUMERAL u_0)))) (i NUMERAL u_0)) (i NUMERAL (i BIT1 u_0))) (i dim (i (i INSERT x) EMPTY)))
(rule (i intu_ofu_real (i realu_sgn (i realu_ofu_int x))) (i intu_sgn x))
(rule (i w_ (i EVEN n)) (i ODD n))
(rule (i (i vectoru_add (i (i complexu_mul (i csin w)) (i ccos z))) (i (i complexu_mul (i ccos w)) (i csin z))) (i csin (i (i vectoru_add w) z)))
(rule (i (i DIFF (i cball (i (i c_ (i vec (i NUMERAL u_0))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) h0)))) (i ball (i (i c_ (i vec (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))))) ballu_annulus)
(rule (i (i UNION (i closure s0)) (i closure t)) (i closure (i (i UNION s0) t)))
(rule (i (i realu_gt (i realu_ofu_int x)) (i realu_ofu_int y)) (i (i intu_gt x) y))
(rule (i (i realu_div (i realu_abs x)) (i realu_abs y)) (i realu_abs (i (i realu_div x) y)))
(rule (i (i realu_ge (i realu_ofu_int x)) (i realu_ofu_int y)) (i (i intu_ge x) y))
(rule (i UNIONS (i setu_ofu_components H)) (i dart H))
(rule (i (i a_ (i distance (i (i c_ x) y))) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ x) y))
(rule (i (i vectoru_sub (i (i r_ (i det (i vector (i (i CONS w) (i (i CONS x) (i (i CONS z) NIL)))))) y)) (i (i r_ (i det (i vector (i (i CONS w) (i (i CONS x) (i (i CONS y) NIL)))))) z)) (i (i cross (i (i cross w) x)) (i (i cross y) z)))
(rule (i (i realu_sub (i realu_neg x)) (i realu_neg y)) (i (i realu_sub y) x))
(rule (i (i complexu_mul (i Cx x)) (i Cx y)) (i Cx (i (i realu_mul x) y)))
(rule (i (i a_ (i realu_ofu_int x)) (i realu_ofu_int y)) (i (i a_ x) y))
(rule (i (i intu_sub x) (i (i intu_add x) y)) (i intu_neg y))
(rule (i (i realu_sub x) (i (i realu_sub x) y)) y)
(rule (i (i setu_ofu_exceptionalu_meetingu_node (i oppositeu_hypermap H)) x) (i (i setu_ofu_exceptionalu_meetingu_node H) x))
(rule (i (i t_ m) (i NUMERAL u_0)) (i NUMERAL u_0))
(rule (i w_ (i dependent s0)) (i independent s0))
(rule (i (i realu_mul (i (i realu_sub (i (i realu_sub (i (i (i (i (i (i dihu_y y1) y2) y3) y4) y5) y6)) (i (i (i (i (i (i dihu_y y1) y2) sqrt2) sqrt2) sqrt2) y6))) (i (i (i (i (i (i dihu_y y1) y3) sqrt2) sqrt2) sqrt2) y5))) (i (i realu_div (i (i realu_sub (i (i vol2r y1) sqrt2)) (i (i realu_mul (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_div mm1) pi))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i realu_mul pi) (i (i realu_sub (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i (i realu_div y1) (i (i realu_mul sqrt2) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))))))))) (i (i realu_mul (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) pi))) (i (i (i (i (i (i gamma3fu_vLR0 y1) y2) y3) y4) y5) y6))
(rule (i (i realu_add (i realu_ofu_num n)) (i realu_ofu_num (i NUMERAL (i BIT1 u_0)))) (i realu_ofu_num (i SUC n)))
(rule (i intu_abs (i intu_abs x)) (i intu_abs x))
(rule (i (i realu_mul (i (i realu_sub h0) y)) rh0) (i lfun y))
(rule (i loop0 (i (i c_ (i (i supportu_list (i (i (i (i geney H) NF) L) x)) (i (i (i (i tpy H) NF) L) x))) (i (i samsara (i (i (i (i geney H) NF) L) x)) (i (i (i (i tpy H) NF) L) x)))) (i (i (i (i dnay H) NF) L) x))
(rule (i (i complexu_div (i (i vectoru_sub (i ccos (i (i vectoru_sub w) z))) (i ccos (i (i vectoru_add w) z)))) (i Cx (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0)))))) (i (i complexu_mul (i csin w)) (i csin z)))
(rule (i (i realu_mul (i realu_neg x)) (i realu_neg y)) (i (i realu_mul x) y))
(rule (i loop0 (i (i c_ (i (i supportu_list (i (i (i (i genex H) NF) L) x)) (i (i (i (i tpx H) NF) L) x))) (i (i samsara (i (i (i (i genex H) NF) L) x)) (i (i (i (i tpx H) NF) L) x)))) (i (i (i (i dnax H) NF) L) x))
(rule (i rotate126 arclengthu_xu_123) arclengthu_xu_126)
(rule (i (i IN (i (i combu_component H) x)) (i setu_ofu_components H)) (i (i IN x) (i dart H)))
(rule (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y1) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT1 (i BIT0 (i BIT1 (i BIT1 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y2) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y3) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i (i DECIMAL (i NUMERAL (i BIT1 (i BIT0 (i BIT0 (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))) (i (i c_ y4) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y5) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) (i (i CONS (i (i c_ (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT1 u_0))))) (i (i c_ y6) (i (i DECIMAL (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 (i BIT1 u_0)))))))))) (i NUMERAL (i BIT0 (i BIT0 (i BIT1 (i BIT0 (i BIT0 (i BIT1 (i BIT1 u_0)))))))))))) NIL)))))) (i (i (i (i (i (i dartu_std3u_lw y1) y2) y3) y4) y5) y6))
(rule (i mku_126 (i rotate2 ldihu_xu_n)) ldih2u_xu_126u_n)
(rule (i (i realu_add (i (i (i (i (i (i taumu_x x1) x2) x3) (i (i (i (i (i (i edgeu_flat2u_x x23) x2) x3) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i edgeu_flat2u_x x13) x1) x3) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0))))))) (i (i (i (i (i (i edgeu_flat2u_x x12) x1) x2) (i realu_ofu_num (i NUMERAL u_0))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))) (i realu_ofu_num (i NUMERAL (i BIT0 (i BIT0 (i BIT1 u_0)))))))) (i (i realu_add (i flatu_termu_x x12)) (i (i realu_add (i flatu_termu_x x23)) (i flatu_termu_x x13)))) (i (i (i (i (i (i taumu_3flatu_x x1) x2) x3) x23) x13) x12))
(rule (i mku_nadd (i destu_nadd a)) a)
(rule (i (i (i COND (i (i realu_le m) n)) n) m) (i (i realu_max m) n))
(rule (i yu_ofu_x deltau_x4) delta4u_y)
(rule (i (i mul6 (i uni (i (i c_ gchi) proju_y4))) dih4u_x) gchi4u_x)
(rule (i (i a_ (i realu_neg x)) (i realu_neg y)) (i (i a_ x) y))
(rule (i (i realu_mul (i exp (i (i realu_add x) y))) (i exp (i realu_neg x))) (i exp y))
(rule (i (i mul6 (i uni (i (i c_ sqn) deltau_x))) ldihu_xu_divu_sqrtdeltau_posbranch) ldihu_xu_n)
(rule (i (i intu_add y) (i (i intu_sub x) y)) x)
(rule (i CARD (i (i (i (i (i setu_ofu_orbitsu_pointsu_fan x) V) E) v) u)) (i (i (i (i (i numberu_ofu_orbitsu_pointsu_fan x) V) E) v) u))
(rule (i (i a_ (i (i realu_add x) y)) (i realu_ofu_num (i NUMERAL u_0))) (i (i a_ y) (i realu_neg x)))
(rule (i (i a_ (i (i hull affine) s0)) s0) (i affine s0))
(rule (i (i b_s_ (i (i a_ x) y)) (i (i b_s_ (i (i R x) y)) (i (i R y) x))) (i (i (i RSC R) x) y))
(rule (i (i float (i (i intu_pow a) m)) (i (i intu_mul n) (i intu_ofu_num m))) (i (i realu_pow (i (i float a) n)) m))
(rule (i (i (i (i (i (i norm2hh (i sqrt x1)) (i sqrt x2)) (i sqrt x3)) (i sqrt x4)) (i sqrt x5)) (i sqrt x6)) (i (i (i (i (i (i norm2hhu_x x1) x2) x3) x4) x5) x6))
(rule (i (i realu_lt (i realu_ofu_num (i NUMERAL u_0))) (i (i float a) b)) (i (i intu_lt (i intu_ofu_num (i NUMERAL u_0))) a))
