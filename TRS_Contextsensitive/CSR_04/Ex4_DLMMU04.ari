; @origtpdbfilename ./TRS/CSR/Ex4_DLMMU04.trs
; @xtcfilename "./TRS_Contextsensitive/CSR_04/Ex4_DLMMU04.xml"
(format CSTRS)
(fun and 2 :replacement-map (1 2))
(fun tt 0 :replacement-map ())
(fun isNatIList 1 :replacement-map ())
(fun isNatList 1 :replacement-map ())
(fun isNat 1 :replacement-map ())
(fun |0| 0 :replacement-map ())
(fun s 1 :replacement-map (1))
(fun length 1 :replacement-map (1))
(fun zeros 0 :replacement-map ())
(fun cons 2 :replacement-map (1))
(fun nil 0 :replacement-map ())
(fun take 2 :replacement-map (1 2))
(fun uTake1 1 :replacement-map (1))
(fun uTake2 4 :replacement-map (1))
(fun uLength 2 :replacement-map (1))
(rule (and tt T) T)
(rule (isNatIList IL) (isNatList IL))
(rule (isNat |0|) tt)
(rule (isNat (s N)) (isNat N))
(rule (isNat (length L)) (isNatList L))
(rule (isNatIList zeros) tt)
(rule (isNatIList (cons N IL)) (and (isNat N) (isNatIList IL)))
(rule (isNatList nil) tt)
(rule (isNatList (cons N L)) (and (isNat N) (isNatList L)))
(rule (isNatList (take N IL)) (and (isNat N) (isNatIList IL)))
(rule zeros (cons |0| zeros))
(rule (take |0| IL) (uTake1 (isNatIList IL)))
(rule (uTake1 tt) nil)
(rule (take (s M) (cons N IL)) (uTake2 (and (isNat M) (and (isNat N) (isNatIList IL))) M N IL))
(rule (uTake2 tt M N IL) (cons N (take M IL)))
(rule (length (cons N L)) (uLength (and (isNat N) (isNatList L)) L))
(rule (uLength tt L) (s (length L)))
