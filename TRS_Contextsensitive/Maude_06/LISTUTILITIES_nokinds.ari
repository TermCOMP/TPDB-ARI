; @origtpdbfilename ./TRS/CSR_Maude/PEPM04/LISTUTILITIES_nokinds.trs
; @xtcfilename "./TRS_Contextsensitive/Maude_06/LISTUTILITIES_nokinds.xml"
(format CSTRS)
(fun U101 3 :replacement-map (1))
(fun tt 0 :replacement-map ())
(fun fst 1 :replacement-map (1))
(fun splitAt 2 :replacement-map (1 2))
(fun U11 3 :replacement-map (1))
(fun snd 1 :replacement-map (1))
(fun U21 2 :replacement-map (1))
(fun U31 2 :replacement-map (1))
(fun U41 2 :replacement-map (1))
(fun cons 2 :replacement-map (1))
(fun natsFrom 1 :replacement-map (1))
(fun s 1 :replacement-map (1))
(fun U51 3 :replacement-map (1))
(fun head 1 :replacement-map (1))
(fun afterNth 2 :replacement-map (1 2))
(fun U61 2 :replacement-map (1))
(fun U71 2 :replacement-map (1))
(fun pair 2 :replacement-map (1 2))
(fun nil 0 :replacement-map ())
(fun U81 4 :replacement-map (1))
(fun U82 2 :replacement-map (1))
(fun U91 2 :replacement-map (1))
(fun and 2 :replacement-map (1))
(fun isNatural 1 :replacement-map ())
(fun isLNat 1 :replacement-map ())
(fun isPLNat 1 :replacement-map ())
(fun tail 1 :replacement-map (1))
(fun take 2 :replacement-map (1 2))
(fun 0 0 :replacement-map ())
(fun sel 2 :replacement-map (1 2))
(rule (U101 tt N XS) (fst (splitAt N XS)))
(rule (U11 tt N XS) (snd (splitAt N XS)))
(rule (U21 tt X) X)
(rule (U31 tt N) N)
(rule (U41 tt N) (cons N (natsFrom (s N))))
(rule (U51 tt N XS) (head (afterNth N XS)))
(rule (U61 tt Y) Y)
(rule (U71 tt XS) (pair nil XS))
(rule (U81 tt N X XS) (U82 (splitAt N XS) X))
(rule (U82 (pair YS ZS) X) (pair (cons X YS) ZS))
(rule (U91 tt XS) XS)
(rule (afterNth N XS) (U11 (and (isNatural N) (isLNat XS)) N XS))
(rule (and tt X) X)
(rule (fst (pair X Y)) (U21 (and (isLNat X) (isLNat Y)) X))
(rule (head (cons N XS)) (U31 (and (isNatural N) (isLNat XS)) N))
(rule (isLNat nil) tt)
(rule (isLNat (afterNth V1 V2)) (and (isNatural V1) (isLNat V2)))
(rule (isLNat (cons V1 V2)) (and (isNatural V1) (isLNat V2)))
(rule (isLNat (fst V1)) (isPLNat V1))
(rule (isLNat (natsFrom V1)) (isNatural V1))
(rule (isLNat (snd V1)) (isPLNat V1))
(rule (isLNat (tail V1)) (isLNat V1))
(rule (isLNat (take V1 V2)) (and (isNatural V1) (isLNat V2)))
(rule (isNatural 0) tt)
(rule (isNatural (head V1)) (isLNat V1))
(rule (isNatural (s V1)) (isNatural V1))
(rule (isNatural (sel V1 V2)) (and (isNatural V1) (isLNat V2)))
(rule (isPLNat (pair V1 V2)) (and (isLNat V1) (isLNat V2)))
(rule (isPLNat (splitAt V1 V2)) (and (isNatural V1) (isLNat V2)))
(rule (natsFrom N) (U41 (isNatural N) N))
(rule (sel N XS) (U51 (and (isNatural N) (isLNat XS)) N XS))
(rule (snd (pair X Y)) (U61 (and (isLNat X) (isLNat Y)) Y))
(rule (splitAt 0 XS) (U71 (isLNat XS) XS))
(rule (splitAt (s N) (cons X XS)) (U81 (and (isNatural N) (and (isNatural X) (isLNat XS))) N X XS))
(rule (tail (cons N XS)) (U91 (and (isNatural N) (isLNat XS)) XS))
(rule (take N XS) (U101 (and (isNatural N) (isLNat XS)) N XS))
