(format LCTRS)
(theory Ints)
(fun evalfbb1in (-> Int Int Int Int Int))
(fun evalfbb2in (-> Int Int Int Int Int))
(fun evalfbb3in (-> Int Int Int Int Int))
(fun evalfbb4in (-> Int Int Int Int Int))
(fun evalfbb5in (-> Int Int Int Int Int))
(fun evalfbbin (-> Int Int Int Int Int))
(fun evalfentryin (-> Int Int Int Int Int))
(fun evalfreturnin (-> Int Int Int Int Int))
(fun evalfstart (-> Int Int Int Int Int))
(fun evalfstop (-> Int Int Int Int Int))
(entrypoint evalfstart)
(rule (evalfstart A B C D) (evalfentryin A B C D))
(rule (evalfentryin A B C D) (evalfbb5in B B C D))
(rule (evalfbb5in A B C D) (evalfbbin A B C D) :guard (>= B 2))
(rule (evalfbb5in A B C D) (evalfreturnin A B C D) :guard (>= 1 B))
(rule (evalfbbin A B C D) (evalfbb2in A B (- B 1) (- (+ A B) 1)))
(rule (evalfbb2in A B C D) (evalfbb4in A B C D) :guard (>= C (+ D 1)))
(rule (evalfbb2in A B C D) (evalfbb3in A B C D) :guard (>= D C))
(rule (evalfbb3in A B C D) (evalfbb1in A B C D) :guard (>= 0 (+ E 1)))
(rule (evalfbb3in A B C D) (evalfbb1in A B C D) :guard (>= E 1))
(rule (evalfbb3in A B C D) (evalfbb4in A B C D))
(rule (evalfbb1in A B C D) (evalfbb2in A B C (- D 1)))
(rule (evalfbb4in A B C D) (evalfbb5in (- D (+ C 1)) (- C 1) C D))
(rule (evalfreturnin A B C D) (evalfstop A B C D))
