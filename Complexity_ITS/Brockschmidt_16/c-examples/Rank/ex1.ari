(format LCTRS)
(theory Ints)
(fun evalfbb2in (-> Int Int Int Int Int Int))
(fun evalfbb3in (-> Int Int Int Int Int Int))
(fun evalfbb4in (-> Int Int Int Int Int Int))
(fun evalfbb5in (-> Int Int Int Int Int Int))
(fun evalfbb6in (-> Int Int Int Int Int Int))
(fun evalfbb7in (-> Int Int Int Int Int Int))
(fun evalfbbin (-> Int Int Int Int Int Int))
(fun evalfentryin (-> Int Int Int Int Int Int))
(fun evalfreturnin (-> Int Int Int Int Int Int))
(fun evalfstart (-> Int Int Int Int Int Int))
(fun evalfstop (-> Int Int Int Int Int Int))
(entrypoint evalfstart)
(rule (evalfstart A B C D E) (evalfentryin A B C D E))
(rule (evalfentryin A B C D E) (evalfbb7in B B 0 D E))
(rule
  (evalfbb7in A B C D E)
  (evalfbbin A B C D E)
  :guard
  (and (>= A 0) (>= C 0)))

(rule
  (evalfbb7in A B C D E)
  (evalfreturnin A B C D E)
  :guard
  (>= 0 (+ A 1)))

(rule
  (evalfbb7in A B C D E)
  (evalfreturnin A B C D E)
  :guard
  (>= 0 (+ C 1)))

(rule
  (evalfbbin A B C D E)
  (evalfbb3in A B C C E)
  :guard
  (exists ((F Int)) (>= 0 (+ F 1))))

(rule
  (evalfbbin A B C D E)
  (evalfbb3in A B C C E)
  :guard
  (exists ((F Int)) (>= F 1)))

(rule (evalfbbin A B C D E) (evalfbb6in A B C A C))
(rule (evalfbb3in A B C D E) (evalfbb5in A B C D E) :guard (>= D (+ B 1)))
(rule (evalfbb3in A B C D E) (evalfbb4in A B C D E) :guard (>= B D))
(rule
  (evalfbb4in A B C D E)
  (evalfbb2in A B C D E)
  :guard
  (exists ((F Int)) (>= 0 (+ F 1))))

(rule
  (evalfbb4in A B C D E)
  (evalfbb2in A B C D E)
  :guard
  (exists ((F Int)) (>= F 1)))

(rule (evalfbb4in A B C D E) (evalfbb5in A B C D E))
(rule (evalfbb2in A B C D E) (evalfbb3in A B C (+ D 1) E))
(rule (evalfbb5in A B C D E) (evalfbb6in A B C (- A 1) D))
(rule (evalfbb6in A B C D E) (evalfbb7in D B (- E 1) D E))
(rule (evalfreturnin A B C D E) (evalfstop A B C D E))
