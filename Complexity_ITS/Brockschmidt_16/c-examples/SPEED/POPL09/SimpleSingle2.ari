(format LCTRS)
(theory Ints)
(fun evalSimpleSingle2bb1in (-> Int Int Int Int Int))
(fun evalSimpleSingle2bb2in (-> Int Int Int Int Int))
(fun evalSimpleSingle2bb3in (-> Int Int Int Int Int))
(fun evalSimpleSingle2bb4in (-> Int Int Int Int Int))
(fun evalSimpleSingle2bbin (-> Int Int Int Int Int))
(fun evalSimpleSingle2entryin (-> Int Int Int Int Int))
(fun evalSimpleSingle2returnin (-> Int Int Int Int Int))
(fun evalSimpleSingle2start (-> Int Int Int Int Int))
(fun evalSimpleSingle2stop (-> Int Int Int Int Int))
(entrypoint evalSimpleSingle2start)
(rule (evalSimpleSingle2start A B C D) (evalSimpleSingle2entryin A B C D))
(rule (evalSimpleSingle2entryin A B C D) (evalSimpleSingle2bb4in 0 0 C D))
(rule
  (evalSimpleSingle2bb4in A B C D)
  (evalSimpleSingle2bbin A B C D)
  :guard
  (exists ((E Int)) (>= 0 (+ E 1))))

(rule
  (evalSimpleSingle2bb4in A B C D)
  (evalSimpleSingle2bbin A B C D)
  :guard
  (exists ((E Int)) (>= E 1)))

(rule (evalSimpleSingle2bb4in A B C D) (evalSimpleSingle2returnin A B C D))
(rule
  (evalSimpleSingle2bbin A B C D)
  (evalSimpleSingle2bb1in A B C D)
  :guard
  (>= C (+ B 1)))

(rule
  (evalSimpleSingle2bbin A B C D)
  (evalSimpleSingle2bb2in A B C D)
  :guard
  (>= B C))

(rule
  (evalSimpleSingle2bb1in A B C D)
  (evalSimpleSingle2bb4in (+ A 1) (+ B 1) C D))

(rule
  (evalSimpleSingle2bb2in A B C D)
  (evalSimpleSingle2bb3in A B C D)
  :guard
  (>= D (+ A 1)))

(rule
  (evalSimpleSingle2bb2in A B C D)
  (evalSimpleSingle2returnin A B C D)
  :guard
  (>= A D))

(rule
  (evalSimpleSingle2bb3in A B C D)
  (evalSimpleSingle2bb4in (+ A 1) (+ B 1) C D))

(rule (evalSimpleSingle2returnin A B C D) (evalSimpleSingle2stop A B C D))
