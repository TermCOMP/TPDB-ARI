(format LCTRS)
(theory Ints)
(fun evalSimpleMultiplebb1in (-> Int Int Int Int Int))
(fun evalSimpleMultiplebb2in (-> Int Int Int Int Int))
(fun evalSimpleMultiplebb3in (-> Int Int Int Int Int))
(fun evalSimpleMultiplebbin (-> Int Int Int Int Int))
(fun evalSimpleMultipleentryin (-> Int Int Int Int Int))
(fun evalSimpleMultiplereturnin (-> Int Int Int Int Int))
(fun evalSimpleMultiplestart (-> Int Int Int Int Int))
(fun evalSimpleMultiplestop (-> Int Int Int Int Int))
(entrypoint evalSimpleMultiplestart)
(rule (evalSimpleMultiplestart A B C D) (evalSimpleMultipleentryin A B C D))
(rule (evalSimpleMultipleentryin A B C D) (evalSimpleMultiplebb3in 0 0 C D))
(rule
  (evalSimpleMultiplebb3in A B C D)
  (evalSimpleMultiplebbin A B C D)
  :guard
  (>= C (+ B 1)))
(rule
  (evalSimpleMultiplebb3in A B C D)
  (evalSimpleMultiplereturnin A B C D)
  :guard
  (>= B C))
(rule
  (evalSimpleMultiplebbin A B C D)
  (evalSimpleMultiplebb1in A B C D)
  :guard
  (>= D (+ A 1)))
(rule
  (evalSimpleMultiplebbin A B C D)
  (evalSimpleMultiplebb2in A B C D)
  :guard
  (>= A D))
(rule
  (evalSimpleMultiplebb1in A B C D)
  (evalSimpleMultiplebb3in (+ A 1) B C D))
(rule
  (evalSimpleMultiplebb2in A B C D)
  (evalSimpleMultiplebb3in A (+ B 1) C D))
(rule (evalSimpleMultiplereturnin A B C D) (evalSimpleMultiplestop A B C D))
