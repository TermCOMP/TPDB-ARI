(format LCTRS)
(theory Ints)
(fun evalDis2bb1in (-> Int Int Int Int))
(fun evalDis2bb2in (-> Int Int Int Int))
(fun evalDis2bb3in (-> Int Int Int Int))
(fun evalDis2bbin (-> Int Int Int Int))
(fun evalDis2entryin (-> Int Int Int Int))
(fun evalDis2returnin (-> Int Int Int Int))
(fun evalDis2start (-> Int Int Int Int))
(fun evalDis2stop (-> Int Int Int Int))
(entrypoint evalDis2start)
(rule (evalDis2start A B C) (evalDis2entryin A B C))
(rule (evalDis2entryin A B C) (evalDis2bb3in B C A))
(rule (evalDis2bb3in A B C) (evalDis2bbin A B C) :guard (>= A (+ C 1)))
(rule (evalDis2bb3in A B C) (evalDis2returnin A B C) :guard (>= C A))
(rule (evalDis2bbin A B C) (evalDis2bb1in A B C) :guard (>= B (+ C 1)))
(rule (evalDis2bbin A B C) (evalDis2bb2in A B C) :guard (>= C B))
(rule (evalDis2bb1in A B C) (evalDis2bb3in A B (+ C 1)))
(rule (evalDis2bb2in A B C) (evalDis2bb3in A (+ B 1) C))
(rule (evalDis2returnin A B C) (evalDis2stop A B C))
