(format LCTRS)
(theory Ints)
(fun evalSimpleMultipleDepbb1in (-> Int Int Int Int Int))
(fun evalSimpleMultipleDepbb2in (-> Int Int Int Int Int))
(fun evalSimpleMultipleDepbb3in (-> Int Int Int Int Int))
(fun evalSimpleMultipleDepbbin (-> Int Int Int Int Int))
(fun evalSimpleMultipleDepentryin (-> Int Int Int Int Int))
(fun evalSimpleMultipleDepreturnin (-> Int Int Int Int Int))
(fun evalSimpleMultipleDepstart (-> Int Int Int Int Int))
(fun evalSimpleMultipleDepstop (-> Int Int Int Int Int))
(entrypoint evalSimpleMultipleDepstart)
(rule
  (evalSimpleMultipleDepstart A B C D)
  (evalSimpleMultipleDepentryin A B C D))

(rule
  (evalSimpleMultipleDepentryin A B C D)
  (evalSimpleMultipleDepbb3in 0 0 C D))

(rule
  (evalSimpleMultipleDepbb3in A B C D)
  (evalSimpleMultipleDepbbin A B C D)
  :guard
  (>= C (+ B 1)))

(rule
  (evalSimpleMultipleDepbb3in A B C D)
  (evalSimpleMultipleDepreturnin A B C D)
  :guard
  (>= B C))

(rule
  (evalSimpleMultipleDepbbin A B C D)
  (evalSimpleMultipleDepbb1in A B C D)
  :guard
  (>= D (+ A 1)))

(rule
  (evalSimpleMultipleDepbbin A B C D)
  (evalSimpleMultipleDepbb2in A B C D)
  :guard
  (>= A D))

(rule
  (evalSimpleMultipleDepbb1in A B C D)
  (evalSimpleMultipleDepbb3in (+ A 1) B C D))

(rule
  (evalSimpleMultipleDepbb2in A B C D)
  (evalSimpleMultipleDepbb3in 0 (+ B 1) C D))

(rule
  (evalSimpleMultipleDepreturnin A B C D)
  (evalSimpleMultipleDepstop A B C D))

