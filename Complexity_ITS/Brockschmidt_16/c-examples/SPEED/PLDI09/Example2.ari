(format LCTRS)
(theory Ints)
(fun evalfbb1in (-> Int Int Int Int))
(fun evalfbb3in (-> Int Int Int Int))
(fun evalfbb4in (-> Int Int Int Int))
(fun evalfbbin (-> Int Int Int Int))
(fun evalfentryin (-> Int Int Int Int))
(fun evalfreturnin (-> Int Int Int Int))
(fun evalfstart (-> Int Int Int Int))
(fun evalfstop (-> Int Int Int Int))
(entrypoint evalfstart)
(rule (evalfstart A B C) (evalfentryin A B C))
(rule
  (evalfentryin A B C)
  (evalfbb3in B A 0)
  :guard
  (and (>= A 1) (>= B 1)))

(rule (evalfbb3in A B C) (evalfreturnin A B C) :guard (>= 0 B))
(rule (evalfbb3in A B C) (evalfbb4in A B C) :guard (>= B 1))
(rule
  (evalfbb4in A B C)
  (evalfbbin A B C)
  :guard
  (exists ((D Int)) (>= 0 (+ D 1))))

(rule
  (evalfbb4in A B C)
  (evalfbbin A B C)
  :guard
  (exists ((D Int)) (>= D 1)))

(rule (evalfbb4in A B C) (evalfreturnin A B C))
(rule (evalfbbin A B C) (evalfbb1in A B C) :guard (>= A (+ C 1)))
(rule (evalfbbin A B C) (evalfbb3in A B 0) :guard (>= C A))
(rule (evalfbb1in A B C) (evalfbb3in A (- B 1) (+ C 1)))
(rule (evalfreturnin A B C) (evalfstop A B C))
