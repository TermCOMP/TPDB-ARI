(format LCTRS)
(theory Ints)
(fun evalfbb1in (-> Int Int Int))
(fun evalfbb2in (-> Int Int Int))
(fun evalfbb3in (-> Int Int Int))
(fun evalfbb4in (-> Int Int Int))
(fun evalfbbin (-> Int Int Int))
(fun evalfentryin (-> Int Int Int))
(fun evalfreturnin (-> Int Int Int))
(fun evalfstart (-> Int Int Int))
(fun evalfstop (-> Int Int Int))
(entrypoint evalfstart)
(rule (evalfstart A B) (evalfentryin A B))
(rule
  (evalfentryin A B)
  (evalfbb3in B A)
  :guard
  (and (>= A 1) (>= B (+ A 1))))
(rule (evalfbb3in A B) (evalfreturnin A B) :guard (>= 0 A))
(rule (evalfbb3in A B) (evalfbb4in A B) :guard (>= A 1))
(rule
  (evalfbb4in A B)
  (evalfbbin A B)
  :guard
  (exists ((C Int)) (>= 0 (+ C 1))))
(rule
  (evalfbb4in A B)
  (evalfbbin A B)
  :guard
  (exists ((C Int)) (>= C 1)))
(rule (evalfbb4in A B) (evalfreturnin A B))
(rule (evalfbbin A B) (evalfbb1in A B) :guard (>= B (+ A 1)))
(rule (evalfbbin A B) (evalfbb2in A B) :guard (>= A B))
(rule (evalfbb1in A B) (evalfbb3in (+ A 1) B))
(rule (evalfbb2in A B) (evalfbb3in (- A B) B))
(rule (evalfreturnin A B) (evalfstop A B))
