(format LCTRS)
(theory Ints)
(fun evalEx3bb1in (-> Int Int Int Int))
(fun evalEx3bb2in (-> Int Int Int Int))
(fun evalEx3bb3in (-> Int Int Int Int))
(fun evalEx3bb4in (-> Int Int Int Int))
(fun evalEx3bbin (-> Int Int Int Int))
(fun evalEx3entryin (-> Int Int Int Int))
(fun evalEx3returnin (-> Int Int Int Int))
(fun evalEx3start (-> Int Int Int Int))
(fun evalEx3stop (-> Int Int Int Int))
(entrypoint evalEx3start)
(rule (evalEx3start A B C) (evalEx3entryin A B C))
(rule (evalEx3entryin A B C) (evalEx3bb4in A B C))
(rule (evalEx3bb4in A B C) (evalEx3bbin A B C) :guard (>= A 1))
(rule (evalEx3bb4in A B C) (evalEx3returnin A B C) :guard (>= 0 A))
(rule (evalEx3bbin A B C) (evalEx3bb2in A D A))
(rule (evalEx3bb2in A B C) (evalEx3bb4in C B C) :guard (>= 0 C))
(rule (evalEx3bb2in A B C) (evalEx3bb3in A B C) :guard (>= C 1))
(rule (evalEx3bb3in A B C) (evalEx3bb1in A B C))
(rule
  (evalEx3bb3in A B C)
  (evalEx3bb4in C B C)
  :guard
  (exists ((D Int)) (>= B (+ D 1))))

(rule
  (evalEx3bb3in A B C)
  (evalEx3bb4in C B C)
  :guard
  (exists ((D Int)) (>= D (+ B 1))))

(rule (evalEx3bb1in A B C) (evalEx3bb2in A B (- C 1)))
(rule (evalEx3returnin A B C) (evalEx3stop A B C))
