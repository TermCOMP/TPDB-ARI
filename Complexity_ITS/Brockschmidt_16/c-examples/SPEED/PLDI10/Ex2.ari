(format LCTRS)
(theory Ints)
(fun evalEx2bb1in (-> Int Int Int Int Int))
(fun evalEx2bb2in (-> Int Int Int Int Int))
(fun evalEx2bb3in (-> Int Int Int Int Int))
(fun evalEx2bbin (-> Int Int Int Int Int))
(fun evalEx2entryin (-> Int Int Int Int Int))
(fun evalEx2returnin (-> Int Int Int Int Int))
(fun evalEx2start (-> Int Int Int Int Int))
(fun evalEx2stop (-> Int Int Int Int Int))
(entrypoint evalEx2start)
(rule (evalEx2start A B C D) (evalEx2entryin A B C D))
(rule (evalEx2entryin A B C D) (evalEx2bb3in B A C D))
(rule
  (evalEx2bb3in A B C D)
  (evalEx2bbin A B C D)
  :guard
  (and (>= B 1) (>= A 1)))

(rule (evalEx2bb3in A B C D) (evalEx2returnin A B C D) :guard (>= 0 B))
(rule (evalEx2bb3in A B C D) (evalEx2returnin A B C D) :guard (>= 0 A))
(rule (evalEx2bbin A B C D) (evalEx2bb2in A B (- A 1) (- B 1)))
(rule
  (evalEx2bb2in A B C D)
  (evalEx2bb1in A B C D)
  :guard
  (exists ((E Int)) (>= 0 (+ E 1))))

(rule
  (evalEx2bb2in A B C D)
  (evalEx2bb1in A B C D)
  :guard
  (exists ((E Int)) (>= E 1)))

(rule (evalEx2bb2in A B C D) (evalEx2bb3in C D C D))
(rule (evalEx2bb1in A B C D) (evalEx2bb2in A B (+ C 1) (- D 1)))
(rule (evalEx2returnin A B C D) (evalEx2stop A B C D))
