(format LCTRS)
(theory Ints)
(fun evalEx6bb1in (-> Int Int Int Int))
(fun evalEx6bb2in (-> Int Int Int Int))
(fun evalEx6bb3in (-> Int Int Int Int))
(fun evalEx6bbin (-> Int Int Int Int))
(fun evalEx6entryin (-> Int Int Int Int))
(fun evalEx6returnin (-> Int Int Int Int))
(fun evalEx6start (-> Int Int Int Int))
(fun evalEx6stop (-> Int Int Int Int))
(entrypoint evalEx6start)
(rule (evalEx6start A B C) (evalEx6entryin A B C))
(rule (evalEx6entryin A B C) (evalEx6bb3in B A C))
(rule (evalEx6bb3in A B C) (evalEx6bbin A B C) :guard (>= C (+ B 1)))
(rule (evalEx6bb3in A B C) (evalEx6returnin A B C) :guard (>= B C))
(rule (evalEx6bbin A B C) (evalEx6bb1in A B C) :guard (>= A (+ B 1)))
(rule (evalEx6bbin A B C) (evalEx6bb2in A B C) :guard (>= B A))
(rule (evalEx6bb1in A B C) (evalEx6bb3in A (+ B 1) C))
(rule (evalEx6bb2in A B C) (evalEx6bb3in (+ A 1) B C))
(rule (evalEx6returnin A B C) (evalEx6stop A B C))
