(format LCTRS)
(theory Ints)
(fun evalwhile2bb1in (-> Int Int Int Int))
(fun evalwhile2bb2in (-> Int Int Int Int))
(fun evalwhile2bb3in (-> Int Int Int Int))
(fun evalwhile2bb4in (-> Int Int Int Int))
(fun evalwhile2entryin (-> Int Int Int Int))
(fun evalwhile2returnin (-> Int Int Int Int))
(fun evalwhile2start (-> Int Int Int Int))
(fun evalwhile2stop (-> Int Int Int Int))
(entrypoint evalwhile2start)
(rule (evalwhile2start A B C) (evalwhile2entryin A B C))
(rule (evalwhile2entryin A B C) (evalwhile2bb4in B B C))
(rule (evalwhile2bb4in A B C) (evalwhile2bb2in A B B) :guard (>= A 1))
(rule (evalwhile2bb4in A B C) (evalwhile2returnin A B C) :guard (>= 0 A))
(rule (evalwhile2bb2in A B C) (evalwhile2bb1in A B C) :guard (>= C 1))
(rule (evalwhile2bb2in A B C) (evalwhile2bb3in A B C) :guard (>= 0 C))
(rule (evalwhile2bb1in A B C) (evalwhile2bb2in A B (- C 1)))
(rule (evalwhile2bb3in A B C) (evalwhile2bb4in (- A 1) B C))
(rule (evalwhile2returnin A B C) (evalwhile2stop A B C))
