(format LCTRS)
(theory Ints)
(fun evalspeedpldi2bb2in (-> Int Int Int Int))
(fun evalspeedpldi2bb3in (-> Int Int Int Int))
(fun evalspeedpldi2bb5in (-> Int Int Int Int))
(fun evalspeedpldi2entryin (-> Int Int Int Int))
(fun evalspeedpldi2returnin (-> Int Int Int Int))
(fun evalspeedpldi2start (-> Int Int Int Int))
(fun evalspeedpldi2stop (-> Int Int Int Int))
(entrypoint evalspeedpldi2start)
(rule (evalspeedpldi2start A B C) (evalspeedpldi2entryin A B C))
(rule
  (evalspeedpldi2entryin A B C)
  (evalspeedpldi2bb5in B 0 A)
  :guard
  (and (>= A 0) (>= B 1)))

(rule
  (evalspeedpldi2entryin A B C)
  (evalspeedpldi2returnin A B C)
  :guard
  (>= 0 (+ A 1)))

(rule
  (evalspeedpldi2entryin A B C)
  (evalspeedpldi2returnin A B C)
  :guard
  (>= 0 B))

(rule
  (evalspeedpldi2bb5in A B C)
  (evalspeedpldi2bb2in A B C)
  :guard
  (>= C 1))

(rule
  (evalspeedpldi2bb5in A B C)
  (evalspeedpldi2returnin A B C)
  :guard
  (>= 0 C))

(rule
  (evalspeedpldi2bb2in A B C)
  (evalspeedpldi2bb3in A B C)
  :guard
  (>= A (+ B 1)))

(rule
  (evalspeedpldi2bb2in A B C)
  (evalspeedpldi2bb5in A 0 C)
  :guard
  (>= B A))

(rule (evalspeedpldi2bb3in A B C) (evalspeedpldi2bb5in A (+ B 1) (- C 1)))
(rule (evalspeedpldi2returnin A B C) (evalspeedpldi2stop A B C))
