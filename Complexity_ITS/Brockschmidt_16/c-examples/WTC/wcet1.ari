(format LCTRS)
(theory Ints)
(fun evalwcet1bb1in (-> Int Int Int Int Int))
(fun evalwcet1bb4in (-> Int Int Int Int Int))
(fun evalwcet1bb5in (-> Int Int Int Int Int))
(fun evalwcet1bb6in (-> Int Int Int Int Int))
(fun evalwcet1bbin (-> Int Int Int Int Int))
(fun evalwcet1entryin (-> Int Int Int Int Int))
(fun evalwcet1returnin (-> Int Int Int Int Int))
(fun evalwcet1start (-> Int Int Int Int Int))
(fun evalwcet1stop (-> Int Int Int Int Int))
(entrypoint evalwcet1start)
(rule (evalwcet1start A B C D) (evalwcet1entryin A B C D))
(rule (evalwcet1entryin A B C D) (evalwcet1bbin A 0 A D) :guard (>= A 1))
(rule
  (evalwcet1entryin A B C D)
  (evalwcet1returnin A B C D)
  :guard
  (>= 0 A))

(rule
  (evalwcet1bbin A B C D)
  (evalwcet1bb1in A B C D)
  :guard
  (exists ((E Int)) (>= 0 (+ E 1))))

(rule
  (evalwcet1bbin A B C D)
  (evalwcet1bb1in A B C D)
  :guard
  (exists ((E Int)) (>= E 1)))

(rule (evalwcet1bbin A B C D) (evalwcet1bb4in A B C D))
(rule
  (evalwcet1bb1in A B C D)
  (evalwcet1bb6in A B C 0)
  :guard
  (>= (+ B 1) A))

(rule
  (evalwcet1bb1in A B C D)
  (evalwcet1bb6in A B C (+ B 1))
  :guard
  (>= A (+ B 2)))

(rule (evalwcet1bb4in A B C D) (evalwcet1bb5in A B C D) :guard (>= 1 B))
(rule
  (evalwcet1bb4in A B C D)
  (evalwcet1bb6in A B C (- B 1))
  :guard
  (>= B 2))

(rule (evalwcet1bb5in A B C D) (evalwcet1bb6in A B C 0))
(rule
  (evalwcet1bb6in A B C D)
  (evalwcet1bbin A D (- C 1) D)
  :guard
  (>= C 2))

(rule (evalwcet1bb6in A B C D) (evalwcet1returnin A B C D) :guard (>= 1 C))
(rule (evalwcet1returnin A B C D) (evalwcet1stop A B C D))
