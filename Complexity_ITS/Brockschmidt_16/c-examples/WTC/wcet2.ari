(format LCTRS)
(theory Ints)
(fun evalwcet2bb1in (-> Int Int Int))
(fun evalwcet2bb2in (-> Int Int Int))
(fun evalwcet2bb4in (-> Int Int Int))
(fun evalwcet2bb5in (-> Int Int Int))
(fun evalwcet2entryin (-> Int Int Int))
(fun evalwcet2returnin (-> Int Int Int))
(fun evalwcet2start (-> Int Int Int))
(fun evalwcet2stop (-> Int Int Int))
(entrypoint evalwcet2start)
(rule (evalwcet2start A B) (evalwcet2entryin A B))
(rule (evalwcet2entryin A B) (evalwcet2bb5in A B))
(rule (evalwcet2bb5in A B) (evalwcet2bb2in A 0) :guard (>= 4 A))
(rule (evalwcet2bb5in A B) (evalwcet2returnin A B) :guard (>= A 5))
(rule
  (evalwcet2bb2in A B)
  (evalwcet2bb1in A B)
  :guard
  (and (>= A 3) (>= 9 B)))
(rule (evalwcet2bb2in A B) (evalwcet2bb4in A B) :guard (>= 2 A))
(rule (evalwcet2bb2in A B) (evalwcet2bb4in A B) :guard (>= B 10))
(rule (evalwcet2bb1in A B) (evalwcet2bb2in A (+ B 1)))
(rule (evalwcet2bb4in A B) (evalwcet2bb5in (+ A 1) B))
(rule (evalwcet2returnin A B) (evalwcet2stop A B))
