(format LCTRS)
(theory Ints)
(fun evalaxbb1in (-> Int Int Int Int))
(fun evalaxbb2in (-> Int Int Int Int))
(fun evalaxbb3in (-> Int Int Int Int))
(fun evalaxbbin (-> Int Int Int Int))
(fun evalaxentryin (-> Int Int Int Int))
(fun evalaxreturnin (-> Int Int Int Int))
(fun evalaxstart (-> Int Int Int Int))
(fun evalaxstop (-> Int Int Int Int))
(entrypoint evalaxstart)
(rule (evalaxstart A B C) (evalaxentryin A B C))
(rule (evalaxentryin A B C) (evalaxbbin 0 B C))
(rule (evalaxbbin A B C) (evalaxbb2in A 0 C))
(rule (evalaxbb2in A B C) (evalaxbb1in A B C) :guard (>= C (+ 2 B)))
(rule (evalaxbb2in A B C) (evalaxbb3in A B C) :guard (>= (+ B 1) C))
(rule (evalaxbb1in A B C) (evalaxbb2in A (+ B 1) C))
(rule
  (evalaxbb3in A B C)
  (evalaxbbin (+ A 1) B C)
  :guard
  (and (>= (+ B 1) C) (>= C (+ 3 A))))
(rule (evalaxbb3in A B C) (evalaxreturnin A B C) :guard (>= C (+ 2 B)))
(rule (evalaxbb3in A B C) (evalaxreturnin A B C) :guard (>= (+ A 2) C))
(rule (evalaxreturnin A B C) (evalaxstop A B C))
