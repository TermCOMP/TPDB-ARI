(format LCTRS)
(theory Ints)
(fun evalfbb1in (-> Int Int Int Int Int Int Int))
(fun evalfbb2in (-> Int Int Int Int Int Int Int))
(fun evalfbb3in (-> Int Int Int Int Int Int Int))
(fun evalfbb4in (-> Int Int Int Int Int Int Int))
(fun evalfbb5in (-> Int Int Int Int Int Int Int))
(fun evalfbb6in (-> Int Int Int Int Int Int Int))
(fun evalfbb7in (-> Int Int Int Int Int Int Int))
(fun evalfbb8in (-> Int Int Int Int Int Int Int))
(fun evalfentryin (-> Int Int Int Int Int Int Int))
(fun evalfreturnin (-> Int Int Int Int Int Int Int))
(fun evalfstart (-> Int Int Int Int Int Int Int))
(fun evalfstop (-> Int Int Int Int Int Int Int))
(entrypoint evalfstart)
(rule (evalfstart A B C D E F) (evalfentryin A B C D E F))
(rule (evalfentryin A B C D E F) (evalfbb8in B A C D E F))
(rule (evalfbb8in A B C D E F) (evalfbb2in A B A D E F) :guard (>= B 0))
(rule
  (evalfbb8in A B C D E F)
  (evalfreturnin A B C D E F)
  :guard
  (>= 0 (+ B 1)))

(rule
  (evalfbb2in A B C D E F)
  (evalfbb4in A B C D E F)
  :guard
  (>= 0 (+ C 1)))

(rule (evalfbb2in A B C D E F) (evalfbb3in A B C D E F) :guard (>= C 0))
(rule
  (evalfbb3in A B C D E F)
  (evalfbb1in A B C D E F)
  :guard
  (>= 0 (+ G 1)))

(rule (evalfbb3in A B C D E F) (evalfbb1in A B C D E F) :guard (>= G 1))
(rule (evalfbb3in A B C D E F) (evalfbb4in A B C D E F))
(rule (evalfbb1in A B C D E F) (evalfbb2in A B (- C 1) D E F))
(rule (evalfbb4in A B C D E F) (evalfbb6in A B C (- B 1) C F))
(rule
  (evalfbb6in A B C D E F)
  (evalfbb8in E D C D E F)
  :guard
  (>= E (+ F 1)))

(rule (evalfbb6in A B C D E F) (evalfbb7in A B C D E F) :guard (>= F E))
(rule
  (evalfbb7in A B C D E F)
  (evalfbb5in A B C D E F)
  :guard
  (>= 0 (+ G 1)))

(rule (evalfbb7in A B C D E F) (evalfbb5in A B C D E F) :guard (>= G 1))
(rule (evalfbb7in A B C D E F) (evalfbb8in E D C D E F))
(rule (evalfbb5in A B C D E F) (evalfbb6in A B C D (+ E 1) F))
(rule (evalfreturnin A B C D E F) (evalfstop A B C D E F))
