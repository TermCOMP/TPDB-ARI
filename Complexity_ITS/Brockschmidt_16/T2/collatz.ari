(format LCTRS)
(theory Ints)
(fun f0 (-> Int Int Int))
(fun f2 (-> Int Int Int))
(entrypoint f0)
(rule
  (f0 A B)
  (f2 C D)
  :guard
  (and (and (and (>= C 1) (>= C 5)) (>= C 2)) (>= C 3)))

(rule (f0 A B) (f2 1 C) :guard (and (>= 0 4) (>= 0 1)))
(rule
  (f0 A B)
  (f2 C D)
  :guard
  (and (and (and (>= C 1) (>= C 5)) (>= 0 C)) (>= C 3)))

(rule (f0 A B) (f2 1 C) :guard (and (>= 0 4) (>= 0 1)))
(rule (f0 A B) (f2 3 C))
(rule (f0 A B) (f2 1 C) :guard (>= 0 1))
(rule (f0 A B) (f2 3 C) :guard (>= 0 3))
(rule (f0 A B) (f2 1 C) :guard (>= 0 1))
(rule
  (f2 A B)
  (f2 B C)
  :guard
  (and (and (and (>= B 5) (>= B 2)) (>= B 3)) (= A (* 2 B))))

(rule
  (f2 A B)
  (f2 B C)
  :guard
  (and (and (and (>= B 5) (>= B 2)) (>= 1 B)) (= A (* 2 B))))

(rule
  (f2 A B)
  (f2 B C)
  :guard
  (and (and (and (>= B 5) (>= 0 B)) (>= B 3)) (= A (* 2 B))))

(rule
  (f2 A B)
  (f2 B C)
  :guard
  (and (and (and (>= B 5) (>= 0 B)) (>= 1 B)) (= A (* 2 B))))

(rule (f2 A B) (f2 B C) :guard (and (= B 3) (= A 6)))
(rule
  (f2 A B)
  (f2 B C)
  :guard
  (and (and (and (>= 3 B) (>= B 2)) (>= 1 B)) (= A (* 2 B))))

(rule (f2 A B) (f2 B C) :guard (and (and (>= 0 3) (= B 3)) (= A 6)))
(rule
  (f2 A B)
  (f2 B C)
  :guard
  (and (and (and (>= 3 B) (>= 0 B)) (>= 1 B)) (= A (* 2 B))))

(rule
  (f2 A B)
  (f2 (+ (* 6 B) 4) C)
  :guard
  (and
    (and (and (>= (* 6 B) 1) (>= (+ (* 6 B) 2) 0)) (>= (+ (* 6 B) 1) 0))
    (= A (+ (* 2 B) 1)))
  )

(rule
  (f2 A B)
  (f2 (+ (* 6 B) 4) C)
  :guard
  (and
    (and (and (>= (* 6 B) 1) (>= (+ (* 6 B) 2) 0)) (>= 0 (+ 3 (* 6 B))))
    (= A (+ (* 2 B) 1)))
  )

(rule
  (f2 A B)
  (f2 (+ (* 6 B) 4) C)
  :guard
  (and
    (and (and (>= (* 6 B) 1) (>= 0 (+ 4 (* 6 B)))) (>= (+ (* 6 B) 1) 0))
    (= A (+ (* 2 B) 1)))
  )

(rule
  (f2 A B)
  (f2 (+ (* 6 B) 4) C)
  :guard
  (and
    (and (and (>= (* 6 B) 1) (>= 0 (+ 4 (* 6 B)))) (>= 0 (+ 3 (* 6 B))))
    (= A (+ (* 2 B) 1)))
  )

(rule
  (f2 A B)
  (f2 (+ (* 6 B) 4) C)
  :guard
  (and
    (and
      (and (>= 0 (+ (* 6 B) 1)) (>= (+ (* 6 B) 2) 0))
      (>= (+ (* 6 B) 1) 0))
    (= A (+ (* 2 B) 1)))
  )

(rule
  (f2 A B)
  (f2 (+ (* 6 B) 4) C)
  :guard
  (and
    (and
      (and (>= 0 (+ (* 6 B) 1)) (>= (+ (* 6 B) 2) 0))
      (>= 0 (+ 3 (* 6 B))))
    (= A (+ (* 2 B) 1)))
  )

(rule
  (f2 A B)
  (f2 (+ (* 6 B) 4) C)
  :guard
  (and
    (and
      (and (>= 0 (+ (* 6 B) 1)) (>= 0 (+ 4 (* 6 B))))
      (>= (+ (* 6 B) 1) 0))
    (= A (+ (* 2 B) 1)))
  )

(rule
  (f2 A B)
  (f2 (+ (* 6 B) 4) C)
  :guard
  (and
    (and
      (and (>= 0 (+ (* 6 B) 1)) (>= 0 (+ 4 (* 6 B))))
      (>= 0 (+ 3 (* 6 B))))
    (= A (+ (* 2 B) 1)))
  )

