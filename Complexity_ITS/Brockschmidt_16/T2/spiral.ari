(format LCTRS)
(theory Ints)
(fun f0 (-> Int Int Int))
(fun f2 (-> Int Int Int))
(entrypoint f0)
(rule (f0 A B) (f2 A B) :guard (and (>= A 1) (>= B 1)))
(rule (f0 A B) (f2 A B) :guard (and (>= A 1) (>= 0 (+ B 1))))
(rule (f0 A B) (f2 A B) :guard (and (>= 0 (+ A 1)) (>= B 1)))
(rule (f0 A B) (f2 A B) :guard (and (>= 0 (+ A 1)) (>= 0 (+ B 1))))
(rule
  (f2 A B)
  (f2 A (- B 1))
  :guard
  (and (and (and (>= A B) (>= B 2)) (>= A 1)) (>= (+ A B) 2)))
(rule
  (f2 A B)
  (f2 A (- B 1))
  :guard
  (and (and (and (>= A B) (>= B 2)) (>= 0 (+ A 1))) (>= (+ A B) 2)))
(rule
  (f2 A B)
  (f2 A (- B 1))
  :guard
  (and (and (and (>= A B) (>= 0 B)) (>= A 1)) (>= (+ A B) 2)))
(rule
  (f2 A B)
  (f2 A (- B 1))
  :guard
  (and (and (and (>= A B) (>= 0 B)) (>= 0 (+ A 1))) (>= (+ A B) 2)))
(rule
  (f2 A B)
  (f2 (- A 1) B)
  :guard
  (and (and (and (>= 1 (+ A B)) (>= A (+ B 1))) (>= A 2)) (>= B 1)))
(rule
  (f2 A B)
  (f2 (- A 1) B)
  :guard
  (and
    (and (and (>= 1 (+ A B)) (>= A (+ B 1))) (>= A 2))
    (>= 0 (+ B 1)))
  )
(rule
  (f2 A B)
  (f2 (- A 1) B)
  :guard
  (and (and (and (>= 1 (+ A B)) (>= A (+ B 1))) (>= 0 A)) (>= B 1)))
(rule
  (f2 A B)
  (f2 (- A 1) B)
  :guard
  (and
    (and (and (>= 1 (+ A B)) (>= A (+ B 1))) (>= 0 A))
    (>= 0 (+ B 1)))
  )
(rule
  (f2 A B)
  (f2 A (+ B 1))
  :guard
  (and (and (and (>= B A) (>= B 0)) (>= A 1)) (>= 0 (+ (+ B A) 1))))
(rule
  (f2 A B)
  (f2 A (+ B 1))
  :guard
  (and
    (and (and (>= B A) (>= B 0)) (>= 0 (+ A 1)))
    (>= 0 (+ (+ B A) 1)))
  )
(rule
  (f2 A B)
  (f2 A (+ B 1))
  :guard
  (and
    (and (and (>= B A) (>= 0 (+ B 2))) (>= A 1))
    (>= 0 (+ (+ B A) 1)))
  )
(rule
  (f2 A B)
  (f2 A (+ B 1))
  :guard
  (and
    (and (and (>= B A) (>= 0 (+ B 2))) (>= 0 (+ A 1)))
    (>= 0 (+ (+ B A) 1)))
  )
(rule
  (f2 A B)
  (f2 (+ A 1) B)
  :guard
  (and (and (and (>= (+ B A) 0) (>= B (+ A 1))) (>= A 0)) (>= B 1)))
(rule
  (f2 A B)
  (f2 (+ A 1) B)
  :guard
  (and
    (and (and (>= (+ B A) 0) (>= B (+ A 1))) (>= A 0))
    (>= 0 (+ B 1)))
  )
(rule
  (f2 A B)
  (f2 (+ A 1) B)
  :guard
  (and
    (and (and (>= (+ B A) 0) (>= B (+ A 1))) (>= 0 (+ A 2)))
    (>= B 1))
  )
(rule
  (f2 A B)
  (f2 (+ A 1) B)
  :guard
  (and
    (and (and (>= (+ B A) 0) (>= B (+ A 1))) (>= 0 (+ A 2)))
    (>= 0 (+ B 1)))
  )
