(format LCTRS)
(theory Ints)
(fun f0 (-> Int Int Int Int Int Int Int Int))
(fun f102 (-> Int Int Int Int Int Int Int Int))
(fun f70 (-> Int Int Int Int Int Int Int Int))
(fun f78 (-> Int Int Int Int Int Int Int Int))
(fun f81 (-> Int Int Int Int Int Int Int Int))
(fun f92 (-> Int Int Int Int Int Int Int Int))
(fun f98 (-> Int Int Int Int Int Int Int Int))
(entrypoint f0)
(rule (f0 A B C D E F G) (f70 5 20 0 0 E F G))
(rule
  (f70 A B C D E F G)
  (f70 A B C (+ C 1) E F G)
  :guard
  (and (>= A (+ D 1)) (= C D)))
(rule
  (f70 A B C D E F G)
  (f70 A B C (+ D 1) E F G)
  :guard
  (and (>= A (+ D 1)) (>= C (+ D 1))))
(rule
  (f70 A B C D E F G)
  (f70 A B C (+ D 1) E F G)
  :guard
  (and (>= A (+ D 1)) (>= D (+ 1 C))))
(rule (f78 A B C D E F G) (f81 A B C D 0 F G) :guard (>= A (+ D 1)))
(rule (f81 A B C D E F G) (f81 A B C D (+ E 1) H I) :guard (>= B (+ E 1)))
(rule (f92 A B C D E F G) (f98 A B C D E H I) :guard (>= B (+ D 1)))
(rule (f92 A B C D E F G) (f92 A B C (+ D 1) E H I) :guard (>= B (+ D 1)))
(rule
  (f102 A B C D E F G)
  (f102 A B C (+ D 1) E F G)
  :guard
  (>= A (+ D 1)))
(rule (f102 A B C D E F G) (f98 A B C D E F G) :guard (>= D A))
(rule (f92 A B C D E F G) (f102 A B C 0 E F G) :guard (>= D B))
(rule (f81 A B C D E F G) (f78 A B C (+ D 1) E F G) :guard (>= E B))
(rule (f78 A B C D E F G) (f92 A B C 0 E F G) :guard (>= D A))
(rule (f70 A B C D E F G) (f78 A B C 0 E F G) :guard (>= D A))
