(format LCTRS)
(theory Ints)
(fun f0 (-> Int Int Int Int Int Int Int Int))
(fun f25 (-> Int Int Int Int Int Int Int Int))
(fun f33 (-> Int Int Int Int Int Int Int Int))
(fun f36 (-> Int Int Int Int Int Int Int Int))
(fun f47 (-> Int Int Int Int Int Int Int Int))
(fun f53 (-> Int Int Int Int Int Int Int Int))
(fun f57 (-> Int Int Int Int Int Int Int Int))
(entrypoint f0)
(rule (f0 A B C D E F G) (f25 5 5 0 0 E F G))
(rule
  (f25 A B C D E F G)
  (f25 A B C (+ C 1) E F G)
  :guard
  (and (>= A (+ D 1)) (= C D)))
(rule
  (f25 A B C D E F G)
  (f25 A B C (+ D 1) E F G)
  :guard
  (and (>= A (+ D 1)) (>= C (+ D 1))))
(rule
  (f25 A B C D E F G)
  (f25 A B C (+ D 1) E F G)
  :guard
  (and (>= A (+ D 1)) (>= D (+ 1 C))))
(rule (f33 A B C D E F G) (f36 A B C D 0 F G) :guard (>= A (+ D 1)))
(rule (f36 A B C D E F G) (f36 A B C D (+ E 1) H I) :guard (>= B (+ E 1)))
(rule (f47 A B C D E F G) (f53 A B C D E H I) :guard (>= B (+ D 1)))
(rule (f47 A B C D E F G) (f47 A B C (+ D 1) E H I) :guard (>= B (+ D 1)))
(rule (f57 A B C D E F G) (f57 A B C (+ D 1) E F G) :guard (>= A (+ D 1)))
(rule (f57 A B C D E F G) (f53 A B C D E F G) :guard (>= D A))
(rule (f47 A B C D E F G) (f57 A B C 0 E F G) :guard (>= D B))
(rule (f36 A B C D E F G) (f33 A B C (+ D 1) E F G) :guard (>= E B))
(rule (f33 A B C D E F G) (f47 A B C 0 E F G) :guard (>= D A))
(rule (f25 A B C D E F G) (f33 A B C 0 E F G) :guard (>= D A))
