(format LCTRS)
(theory Ints)
(fun f0 (-> Int Int Int Int Int Int Int Int))
(fun f1 (-> Int Int Int Int Int Int Int Int))
(fun f2 (-> Int Int Int Int Int Int Int Int))
(fun f3 (-> Int Int Int Int Int Int Int Int))
(entrypoint f0)
(rule
  (f0 A B C D E F G)
  (f1 A B C D E F G)
  :guard
  (and
    (and
      (and
        (and (and (and (and (>= A 0) (>= 3 A)) (>= B 0)) (>= 3 B)) (>= 3 C))
        (>= D 0))
      (>= 3 E))
    (>= E 0))
  )

(rule
  (f1 A B C D E F G)
  (f2 A B C D E (+ D 1) G)
  :guard
  (>= (+ 1 B) (* 2 D)))

(rule
  (f1 A B C D E F G)
  (f2 A B C D E (- D 1) G)
  :guard
  (>= (* 2 D) (+ 4 B)))

(rule (f1 A B C D E F G) (f2 A B C D E D G) :guard (= (+ B 2) (* 2 D)))
(rule (f1 A B C D E F G) (f2 A B C D E D G) :guard (= (+ B 3) (* 2 D)))
(rule
  (f2 A B C D E F G)
  (f3 A B C D E F (+ E 1))
  :guard
  (>= (+ D A) (+ (* 2 E) 1)))

(rule
  (f2 A B C D E F G)
  (f3 A B C D E F (- E 1))
  :guard
  (>= (* 2 E) (+ (+ 2 D) A)))

(rule (f2 A B C D E F G) (f3 A B C D E F E) :guard (= (+ D A) (* 2 E)))
(rule
  (f2 A B C D E F G)
  (f3 A B C D E F E)
  :guard
  (= (+ (+ D A) 1) (* 2 E)))

(rule (f3 A B C D E F G) (f1 A B C F G F G) :guard (>= D (+ F 1)))
(rule (f3 A B C D E F G) (f1 A B C F G F G) :guard (>= F (+ D 1)))
(rule (f3 A B C D E F G) (f1 A B C F G F G) :guard (>= E (+ G 1)))
(rule (f3 A B C D E F G) (f1 A B C F G F G) :guard (>= G (+ E 1)))
