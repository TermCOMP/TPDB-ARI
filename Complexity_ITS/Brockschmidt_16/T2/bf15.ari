(format LCTRS)
(theory Ints)
(fun f0 (-> Int Int Int Int Int Int Int Int))
(fun f55 (-> Int Int Int Int Int Int Int Int))
(fun f63 (-> Int Int Int Int Int Int Int Int))
(fun f66 (-> Int Int Int Int Int Int Int Int))
(fun f77 (-> Int Int Int Int Int Int Int Int))
(fun f83 (-> Int Int Int Int Int Int Int Int))
(fun f87 (-> Int Int Int Int Int Int Int Int))
(entrypoint f0)
(rule (f0 A B C D E F G) (f55 5 15 0 0 E F G))
(rule
  (f55 A B C D E F G)
  (f55 A B C (+ C 1) E F G)
  :guard
  (and (>= A (+ D 1)) (= C D)))

(rule
  (f55 A B C D E F G)
  (f55 A B C (+ D 1) E F G)
  :guard
  (and (>= A (+ D 1)) (>= C (+ D 1))))

(rule
  (f55 A B C D E F G)
  (f55 A B C (+ D 1) E F G)
  :guard
  (and (>= A (+ D 1)) (>= D (+ 1 C))))

(rule (f63 A B C D E F G) (f66 A B C D 0 F G) :guard (>= A (+ D 1)))
(rule (f66 A B C D E F G) (f66 A B C D (+ E 1) H I) :guard (>= B (+ E 1)))
(rule (f77 A B C D E F G) (f83 A B C D E H I) :guard (>= B (+ D 1)))
(rule (f77 A B C D E F G) (f77 A B C (+ D 1) E H I) :guard (>= B (+ D 1)))
(rule (f87 A B C D E F G) (f87 A B C (+ D 1) E F G) :guard (>= A (+ D 1)))
(rule (f87 A B C D E F G) (f83 A B C D E F G) :guard (>= D A))
(rule (f77 A B C D E F G) (f87 A B C 0 E F G) :guard (>= D B))
(rule (f66 A B C D E F G) (f63 A B C (+ D 1) E F G) :guard (>= E B))
(rule (f63 A B C D E F G) (f77 A B C 0 E F G) :guard (>= D A))
(rule (f55 A B C D E F G) (f63 A B C 0 E F G) :guard (>= D A))
