(format LCTRS)
(theory Ints)
(fun f0 (-> Int Int Int Int Int Int))
(fun f1 (-> Int Int Int Int Int Int))
(fun f2 (-> Int Int Int Int Int Int))
(entrypoint f1)
(rule (f0 A B C D E) (f2 A F C D E) :guard (>= 0 A))
(rule
  (f0 A B C D E)
  (f0 (+ 1 (* 3 A)) B F H G)
  :guard
  (and
    (and
      (and
        (and (and (>= A 1) (>= A (+ (* 2 G) 1))) (>= (* 3 A) (* 3 F)))
        (>= (* 3 F) (* 3 A)))
      (>= F (+ (* 2 G) 1)))
    (>= F 1))
  )

(rule
  (f0 A B C D E)
  (f0 (+ 1 (* 3 A)) B F H G)
  :guard
  (and
    (and
      (and
        (and (and (>= A 1) (>= A (+ (* 2 G) 1))) (>= (* 3 A) (* 3 F)))
        (>= (* 3 F) (* 3 A)))
      (>= (* 2 G) (+ F 1)))
    (>= F 1))
  )

(rule
  (f0 A B C D E)
  (f0 (+ 1 (* 3 A)) B F H G)
  :guard
  (and
    (and
      (and
        (and (and (>= A 1) (>= (* 2 G) (+ A 1))) (>= (* 3 A) (* 3 F)))
        (>= (* 3 F) (* 3 A)))
      (>= F (+ (* 2 G) 1)))
    (>= F 1))
  )

(rule
  (f0 A B C D E)
  (f0 (+ 1 (* 3 A)) B F H G)
  :guard
  (and
    (and
      (and
        (and (and (>= A 1) (>= (* 2 G) (+ A 1))) (>= (* 3 A) (* 3 F)))
        (>= (* 3 F) (* 3 A)))
      (>= (* 2 G) (+ F 1)))
    (>= F 1))
  )

(rule
  (f0 A B C D E)
  (f0 F B C H F)
  :guard
  (exists ((G Int)) (and (and (>= (* 2 F) 1) (>= G 1)) (= A (* 2 F)))))

(rule (f1 A B C D E) (f0 A B C D E))
