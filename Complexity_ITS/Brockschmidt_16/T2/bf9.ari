(format LCTRS)
(theory Ints)
(fun f0 (-> Int Int Int Int Int Int Int Int))
(fun f37 (-> Int Int Int Int Int Int Int Int))
(fun f45 (-> Int Int Int Int Int Int Int Int))
(fun f48 (-> Int Int Int Int Int Int Int Int))
(fun f59 (-> Int Int Int Int Int Int Int Int))
(fun f65 (-> Int Int Int Int Int Int Int Int))
(fun f69 (-> Int Int Int Int Int Int Int Int))
(entrypoint f0)
(rule (f0 A B C D E F G) (f37 5 9 0 0 E F G))
(rule
  (f37 A B C D E F G)
  (f37 A B C (+ C 1) E F G)
  :guard
  (and (>= A (+ D 1)) (= C D)))

(rule
  (f37 A B C D E F G)
  (f37 A B C (+ D 1) E F G)
  :guard
  (and (>= A (+ D 1)) (>= C (+ D 1))))

(rule
  (f37 A B C D E F G)
  (f37 A B C (+ D 1) E F G)
  :guard
  (and (>= A (+ D 1)) (>= D (+ 1 C))))

(rule (f45 A B C D E F G) (f48 A B C D 0 F G) :guard (>= A (+ D 1)))
(rule (f48 A B C D E F G) (f48 A B C D (+ E 1) H I) :guard (>= B (+ E 1)))
(rule (f59 A B C D E F G) (f65 A B C D E H I) :guard (>= B (+ D 1)))
(rule (f59 A B C D E F G) (f59 A B C (+ D 1) E H I) :guard (>= B (+ D 1)))
(rule (f69 A B C D E F G) (f69 A B C (+ D 1) E F G) :guard (>= A (+ D 1)))
(rule (f69 A B C D E F G) (f65 A B C D E F G) :guard (>= D A))
(rule (f59 A B C D E F G) (f69 A B C 0 E F G) :guard (>= D B))
(rule (f48 A B C D E F G) (f45 A B C (+ D 1) E F G) :guard (>= E B))
(rule (f45 A B C D E F G) (f59 A B C 0 E F G) :guard (>= D A))
(rule (f37 A B C D E F G) (f45 A B C 0 E F G) :guard (>= D A))
