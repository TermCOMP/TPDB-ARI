(format LCTRS)
(theory Ints)
(fun f0 (-> Int Int Int Int Int Int Int Int))
(fun f67 (-> Int Int Int Int Int Int Int Int))
(fun f75 (-> Int Int Int Int Int Int Int Int))
(fun f78 (-> Int Int Int Int Int Int Int Int))
(fun f89 (-> Int Int Int Int Int Int Int Int))
(fun f95 (-> Int Int Int Int Int Int Int Int))
(fun f99 (-> Int Int Int Int Int Int Int Int))
(entrypoint f0)
(rule (f0 A B C D E F G) (f67 5 19 0 0 E F G))
(rule
  (f67 A B C D E F G)
  (f67 A B C (+ C 1) E F G)
  :guard
  (and (>= A (+ D 1)) (= C D)))

(rule
  (f67 A B C D E F G)
  (f67 A B C (+ D 1) E F G)
  :guard
  (and (>= A (+ D 1)) (>= C (+ D 1))))

(rule
  (f67 A B C D E F G)
  (f67 A B C (+ D 1) E F G)
  :guard
  (and (>= A (+ D 1)) (>= D (+ 1 C))))

(rule (f75 A B C D E F G) (f78 A B C D 0 F G) :guard (>= A (+ D 1)))
(rule (f78 A B C D E F G) (f78 A B C D (+ E 1) H I) :guard (>= B (+ E 1)))
(rule (f89 A B C D E F G) (f95 A B C D E H I) :guard (>= B (+ D 1)))
(rule (f89 A B C D E F G) (f89 A B C (+ D 1) E H I) :guard (>= B (+ D 1)))
(rule (f99 A B C D E F G) (f99 A B C (+ D 1) E F G) :guard (>= A (+ D 1)))
(rule (f99 A B C D E F G) (f95 A B C D E F G) :guard (>= D A))
(rule (f89 A B C D E F G) (f99 A B C 0 E F G) :guard (>= D B))
(rule (f78 A B C D E F G) (f75 A B C (+ D 1) E F G) :guard (>= E B))
(rule (f75 A B C D E F G) (f89 A B C 0 E F G) :guard (>= D A))
(rule (f67 A B C D E F G) (f75 A B C 0 E F G) :guard (>= D A))
