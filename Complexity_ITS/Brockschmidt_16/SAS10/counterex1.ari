(format LCTRS)
(theory Ints)
(fun cut (-> Int Int Int Int Int Int Int Int Int))
(fun lbl42 (-> Int Int Int Int Int Int Int Int Int))
(fun lbl72 (-> Int Int Int Int Int Int Int Int Int))
(fun start (-> Int Int Int Int Int Int Int Int Int))
(fun start0 (-> Int Int Int Int Int Int Int Int Int))
(fun stop (-> Int Int Int Int Int Int Int Int Int))
(entrypoint start0)
(rule
  (start A B C D E F G H)
  (stop A B C D E F G H)
  :guard
  (and (and (and (and (>= 0 (+ A 1)) (= B C)) (= D A)) (= E F)) (= G H)))

(rule
  (start A B C D E F G H)
  (lbl42 A (- B 1) C D E F G H)
  :guard
  (and
    (and (and (and (and (>= A 0) (>= C 0)) (= B C)) (= D A)) (= E F))
    (= G H))
  )

(rule
  (start A B C D E F G H)
  (cut A B C (- D 1) E F G H)
  :guard
  (and (and (and (and (>= A 0) (= B C)) (= D A)) (= E F)) (= G H)))

(rule
  (start A B C D E F G H)
  (lbl72 A (+ 1 B) C (- D 1) B F G H)
  :guard
  (and
    (and (and (and (and (>= H C) (>= A 0)) (= B C)) (= D A)) (= E F))
    (= G H))
  )

(rule
  (lbl72 A B C D E F G H)
  (cut A B C D E F G H)
  :guard
  (and
    (and
      (and (and (>= A (+ D 1)) (>= (+ D 1) 0)) (>= (+ H 1) B))
      (= (+ E 1) B))
    (= G H))
  )

(rule
  (lbl72 A B C D E F G H)
  (lbl72 A (+ 1 B) C D B F G H)
  :guard
  (and
    (and
      (and
        (and (and (>= H B) (>= A (+ D 1))) (>= (+ D 1) 0))
        (>= (+ H 1) B))
      (= (+ E 1) B))
    (= G H))
  )

(rule
  (lbl42 A B C D E F G H)
  (lbl42 A (- B 1) C D E F G H)
  :guard
  (and
    (and (and (and (>= B 0) (>= (+ B 1) 0)) (>= D 0)) (>= A D))
    (= G H))
  )

(rule
  (lbl42 A B C D E F G H)
  (cut A B C (- D 1) E F G H)
  :guard
  (and (and (and (>= (+ B 1) 0) (>= D 0)) (>= A D)) (= G H)))

(rule
  (lbl42 A B C D E F G H)
  (lbl72 A (+ 1 B) C (- D 1) B F G H)
  :guard
  (and
    (and (and (and (>= H B) (>= (+ B 1) 0)) (>= D 0)) (>= A D))
    (= G H))
  )

(rule
  (cut A B C D E F G H)
  (stop A B C D E F G H)
  :guard
  (and (and (>= A 0) (= (+ D 1) 0)) (= G H)))

(rule
  (cut A B C D E F G H)
  (lbl42 A (- B 1) C D E F G H)
  :guard
  (and
    (and (and (and (>= D 0) (>= B 0)) (>= (+ D 1) 0)) (>= A (+ D 1)))
    (= G H))
  )

(rule
  (cut A B C D E F G H)
  (cut A B C (- D 1) E F G H)
  :guard
  (and (and (and (>= D 0) (>= (+ D 1) 0)) (>= A (+ D 1))) (= G H)))

(rule
  (cut A B C D E F G H)
  (lbl72 A (+ 1 B) C (- D 1) B F G H)
  :guard
  (and
    (and (and (and (>= H B) (>= D 0)) (>= (+ D 1) 0)) (>= A (+ D 1)))
    (= G H))
  )

(rule (start0 A B C D E F G H) (start A C C A F F H H))
