(format LCTRS)
(theory Ints)
(fun lbl111 (-> Int Int Int Int Int Int Int Int Int))
(fun lbl16 (-> Int Int Int Int Int Int Int Int Int))
(fun lbl82 (-> Int Int Int Int Int Int Int Int Int))
(fun start (-> Int Int Int Int Int Int Int Int Int))
(fun start0 (-> Int Int Int Int Int Int Int Int Int))
(fun stop (-> Int Int Int Int Int Int Int Int Int))
(entrypoint start0)
(rule
  (start A B C D E F G H)
  (stop A B C D E F G H)
  :guard
  (and (and (and (and (>= 1 A) (= B C)) (= D E)) (= F G)) (= H A)))
(rule
  (start A B C D E F G H)
  (lbl111 A H C 1 E (- H 1) G H)
  :guard
  (and (and (and (and (>= A 2) (= B C)) (= D E)) (= F G)) (= H A)))
(rule
  (lbl16 A B C D E F G H)
  (stop A B C D E F G H)
  :guard
  (and
    (and (and (and (>= A 2) (>= A (+ B 1))) (= F 0)) (= H A))
    (= D A))
  )
(rule
  (lbl111 A B C D E F G H)
  (lbl111 A B C (- D F) E F G H)
  :guard
  (and
    (and
      (and
        (and (and (and (>= D F) (>= A (+ F 1))) (>= A (+ F D))) (>= A B))
        (>= F 1))
      (>= D 0))
    (= H A))
  )
(rule
  (lbl111 A B C D E F G H)
  (lbl82 A B C H E (- F 1) G H)
  :guard
  (and
    (and
      (and
        (and
          (and
            (and (and (>= F (+ D 1)) (>= 0 (+ D 1))) (>= A (+ F 1)))
            (>= A (+ F D)))
          (>= A B))
        (>= F 1))
      (>= D 0))
    (= H A))
  )
(rule
  (lbl111 A B C D E F G H)
  (lbl82 A B C H E (- F 1) G H)
  :guard
  (and
    (and
      (and
        (and
          (and
            (and (and (>= F (+ D 1)) (>= D 1)) (>= A (+ F 1)))
            (>= A (+ F D)))
          (>= A B))
        (>= F 1))
      (>= D 0))
    (= H A))
  )
(rule
  (lbl111 A B C D E F G H)
  (lbl82 A (- B F) C H E (- F 1) G H)
  :guard
  (and
    (and
      (and (and (and (>= F 1) (>= A (+ F 1))) (>= A F)) (>= A B))
      (= D 0))
    (= H A))
  )
(rule
  (lbl82 A B C D E F G H)
  (lbl16 A B C D E F G H)
  :guard
  (and
    (and
      (and (and (and (>= A 2) (>= A B)) (>= A (+ B 1))) (= F 0))
      (= H A))
    (= D A))
  )
(rule
  (lbl82 A B C D E F G H)
  (lbl111 A B C (- D F) E F G H)
  :guard
  (and
    (and
      (and
        (and
          (and (and (and (>= F 1) (>= A F)) (>= F 0)) (>= A (+ F 2)))
          (>= A B))
        (>= (+ A F) (+ B 1)))
      (= H A))
    (= D A))
  )
(rule
  (lbl82 A B C D E F G H)
  (lbl82 A B C H E (- F 1) G H)
  :guard
  (and
    (and
      (and
        (and
          (and (and (and (>= F (+ A 1)) (>= A 1)) (>= F 0)) (>= A (+ F 2)))
          (>= A B))
        (>= (+ A F) (+ B 1)))
      (= H A))
    (= D A))
  )
(rule
  (lbl82 A B C D E F G H)
  (lbl82 A B C H E (- F 1) G H)
  :guard
  (and
    (and
      (and
        (and
          (and (and (and (>= F 1) (>= 0 (+ A 1))) (>= F 0)) (>= A (+ F 2)))
          (>= A B))
        (>= (+ A F) (+ B 1)))
      (= H A))
    (= D A))
  )
(rule
  (lbl82 A B C D E F G H)
  (lbl82 A (- B F) C H E (- F 1) G H)
  :guard
  (and
    (and
      (and
        (and
          (and (and (and (>= F 1) (>= F 0)) (>= 0 (+ F 2))) (>= 0 B))
          (>= F (+ B 1)))
        (= D 0))
      (= H 0))
    (= A 0))
  )
(rule (start0 A B C D E F G H) (start A C C E E G G A))
