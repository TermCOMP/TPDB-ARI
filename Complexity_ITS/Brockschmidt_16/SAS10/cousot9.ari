(format LCTRS)
(theory Ints)
(fun lbl52 (-> Int Int Int Int Int Int Int))
(fun lbl72 (-> Int Int Int Int Int Int Int))
(fun start (-> Int Int Int Int Int Int Int))
(fun start0 (-> Int Int Int Int Int Int Int))
(fun stop (-> Int Int Int Int Int Int Int))
(entrypoint start0)
(rule
  (start A B C D E F)
  (stop A B C F E F)
  :guard
  (and (and (and (>= 0 A) (= B C)) (= D E)) (= F A)))
(rule
  (start A B C D E F)
  (lbl52 A (- B 1) C F E F)
  :guard
  (and (and (and (and (>= A 1) (>= C 1)) (= B C)) (= D E)) (= F A)))
(rule
  (start A B C D E F)
  (lbl72 A F C (- F 1) E F)
  :guard
  (and (and (and (and (>= A 1) (>= 0 C)) (= B C)) (= D E)) (= F A)))
(rule
  (lbl52 A B C D E F)
  (stop A B C D E F)
  :guard
  (and (and (and (and (>= 0 D) (>= B 0)) (>= D 1)) (>= A D)) (= F A)))
(rule
  (lbl52 A B C D E F)
  (lbl52 A (- B 1) C D E F)
  :guard
  (and (and (and (and (>= D 1) (>= B 1)) (>= B 0)) (>= A D)) (= F A)))
(rule
  (lbl52 A B C D E F)
  (lbl72 A F C (- D 1) E F)
  :guard
  (and (and (and (>= D 1) (>= A D)) (= B 0)) (= F A)))
(rule
  (lbl72 A B C D E F)
  (stop A B C D E F)
  :guard
  (and (and (and (>= A 1) (= D 0)) (= F A)) (= B A)))
(rule
  (lbl72 A B C D E F)
  (lbl52 A (- B 1) C D E F)
  :guard
  (and
    (and
      (and (and (and (>= D 1) (>= A 1)) (>= D 0)) (>= A (+ D 1)))
      (= F A))
    (= B A))
  )
(rule
  (lbl72 A B C D E F)
  (lbl72 A F C (- D 1) E F)
  :guard
  (and
    (and
      (and (and (and (>= D 1) (>= 0 A)) (>= D 0)) (>= A (+ D 1)))
      (= F A))
    (= B A))
  )
(rule (start0 A B C D E F) (start A C C E E A))
