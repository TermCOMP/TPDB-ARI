(format LCTRS)
(theory Ints)
(fun lbl13 (-> Int Int Int Int Int Int Int Int Int Int Int Int Int))
(fun lbl53 (-> Int Int Int Int Int Int Int Int Int Int Int Int Int))
(fun lbl71 (-> Int Int Int Int Int Int Int Int Int Int Int Int Int))
(fun start (-> Int Int Int Int Int Int Int Int Int Int Int Int Int))
(fun start0 (-> Int Int Int Int Int Int Int Int Int Int Int Int Int))
(fun stop (-> Int Int Int Int Int Int Int Int Int Int Int Int Int))
(entrypoint start0)
(rule
  (start A B C D E F G H I J K L)
  (stop A B C D E F G H I J (- H 1) L)
  :guard
  (and
    (and
      (and (and (and (and (>= 1 A) (= B C)) (= D E)) (= F G)) (= H A))
      (= I J))
    (= K L))
  )

(rule
  (start A B C D E F G H I J K L)
  (lbl71 A B C 0 E M G H 0 J (- H 1) L)
  :guard
  (and
    (and
      (and (and (and (and (>= A 2) (= B C)) (= D E)) (= F G)) (= H A))
      (= I J))
    (= K L))
  )

(rule
  (start A B C D E F G H I J K L)
  (lbl53 A 0 C 0 E F G H 1 J (- H 1) L)
  :guard
  (and
    (and
      (and (and (and (and (>= A 2) (= B C)) (= D E)) (= F G)) (= H A))
      (= I J))
    (= K L))
  )

(rule
  (lbl71 A B C D E F G H I J K L)
  (lbl53 A I C 1 E F G H (+ 1 I) J K L)
  :guard
  (and
    (and (and (and (>= D 0) (>= I D)) (>= K (+ I 1))) (>= A (+ K 1)))
    (= H A))
  )

(rule
  (lbl53 A B C D E F G H I J K L)
  (stop A B C D E F G H I J K L)
  :guard
  (and
    (and
      (and (and (and (>= B 0) (>= A (+ B 2))) (= I (+ B 1))) (= D 0))
      (= K (+ B 1)))
    (= H A))
  )

(rule
  (lbl53 A B C D E F G H I J K L)
  (lbl13 A B C D E F G H I J (- K 1) L)
  :guard
  (and
    (and
      (and
        (and
          (and (and (and (>= 0 (+ D 1)) (>= B 0)) (>= D 0)) (>= 1 D))
          (>= A (+ B 2)))
        (= I (+ B 1)))
      (= K (+ B 1)))
    (= H A))
  )

(rule
  (lbl53 A B C D E F G H I J K L)
  (lbl13 A B C D E F G H I J (- K 1) L)
  :guard
  (and
    (and
      (and (and (and (>= B 0) (>= A (+ B 2))) (= D 1)) (= I (+ B 1)))
      (= K (+ B 1)))
    (= H A))
  )

(rule
  (lbl53 A B C D E F G H I J K L)
  (lbl71 A B C D E M G H I J K L)
  :guard
  (and
    (and
      (and
        (and
          (and (and (and (>= K (+ B 2)) (>= B 0)) (>= D 0)) (>= K (+ B 1)))
          (>= 1 D))
        (>= A (+ K 1)))
      (= I (+ B 1)))
    (= H A))
  )

(rule
  (lbl53 A B C D E F G H I J K L)
  (lbl53 A I C D E F G H (+ 1 I) J K L)
  :guard
  (and
    (and
      (and
        (and
          (and (and (and (>= K (+ B 2)) (>= B 0)) (>= D 0)) (>= K (+ B 1)))
          (>= 1 D))
        (>= A (+ K 1)))
      (= I (+ B 1)))
    (= H A))
  )

(rule
  (lbl13 A B C D E F G H I J K L)
  (stop A B C D E F G H I J K L)
  :guard
  (and
    (and (and (and (and (>= A 2) (= K 0)) (= D 1)) (= H A)) (= I 1))
    (= B 0))
  )

(rule
  (lbl13 A B C D E F G H I J K L)
  (lbl71 A B C 0 E M G H 0 J K L)
  :guard
  (and
    (and
      (and
        (and (and (and (>= B 1) (>= B 0)) (>= A (+ 2 B))) (= D 1))
        (= H A))
      (= K B))
    (= I (+ 1 B)))
  )

(rule
  (lbl13 A B C D E F G H I J K L)
  (lbl53 A 0 C 0 E F G H 1 J K L)
  :guard
  (and
    (and
      (and
        (and (and (and (>= B 1) (>= B 0)) (>= A (+ 2 B))) (= D 1))
        (= H A))
      (= K B))
    (= I (+ 1 B)))
  )

(rule (start0 A B C D E F G H I J K L) (start A C C E E G G A J J L L))
