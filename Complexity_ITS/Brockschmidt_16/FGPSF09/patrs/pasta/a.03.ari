(format LCTRS)
(theory Ints)
(fun eval1 (-> Int Int Int Int Int))
(fun eval2 (-> Int Int Int Int Int))
(fun eval3 (-> Int Int Int Int Int))
(fun eval4 (-> Int Int Int Int Int))
(entrypoint eval1)
(rule (eval1 A B C D) (eval2 (- A 1) B C D) :guard (>= A 2))
(rule (eval1 A B C D) (eval2 A (- B 1) C D) :guard (>= 1 A))
(rule (eval2 A B C D) (eval3 A B A (* 2 A)) :guard (>= B 2))
(rule
  (eval3 A B C D)
  (eval4 A B C D)
  :guard
  (and (>= B D) (>= B (+ 1 D))))
(rule
  (eval3 A B C D)
  (eval4 A B C (+ D 1))
  :guard
  (and (>= B D) (>= B (+ 1 D))))
(rule
  (eval3 A B C D)
  (eval3 A B D (* 2 D))
  :guard
  (and (and (>= B D) (>= B (+ 1 D))) (>= D 1)))
(rule
  (eval3 A B C D)
  (eval3 A B (+ D 1) (+ (* 2 D) 2))
  :guard
  (and (and (>= B D) (>= B (+ 1 D))) (>= D 1)))
(rule (eval3 A B C D) (eval4 A B C D) :guard (= B D))
(rule
  (eval3 A B C D)
  (eval3 A B D (* 2 D))
  :guard
  (and (>= D 1) (= B D)))
(rule
  (eval4 A B C D)
  (eval2 (- A 1) B C D)
  :guard
  (and (and (>= A 2) (>= A 1)) (>= B 2)))
(rule
  (eval4 A B C D)
  (eval2 A (- B 1) C D)
  :guard
  (and (>= B 2) (= A 1)))
