(format LCTRS)
(theory Ints)
(fun end (-> Int Int Int Int Int))
(fun eval0 (-> Int Int Int Int Int))
(fun eval1 (-> Int Int Int Int Int))
(fun eval11 (-> Int Int Int Int Int))
(fun eval3 (-> Int Int Int Int Int))
(fun eval5 (-> Int Int Int Int Int))
(fun eval7 (-> Int Int Int Int Int))
(fun eval9 (-> Int Int Int Int Int))
(entrypoint eval0)
(rule (eval0 A B C D) (eval1 B B 1 D))
(rule (eval1 A B C D) (end A B C D) :guard (>= A 101))
(rule (eval1 A B C D) (eval3 A B C D) :guard (>= 100 A))
(rule (eval3 A B C D) (eval3 (+ A 11) B (+ C 1) D) :guard (>= 100 A))
(rule (eval3 A B C D) (eval5 A B C D) :guard (>= A 101))
(rule (eval5 A B C D) (eval7 (- A 10) B (- C 1) D) :guard (>= C 2))
(rule
  (eval7 A B C D)
  (eval5 A B C (- A 10))
  :guard
  (and (>= A 101) (= C 1)))

(rule (eval7 A B C D) (eval9 A B C D) :guard (>= 100 A))
(rule (eval7 A B C D) (eval9 A B C D) :guard (>= 2 C))
(rule (eval7 A B C D) (eval9 A B C D) :guard (>= C 0))
(rule (eval9 A B C D) (eval11 (- A 10) B (- C 1) D) :guard (>= A 101))
(rule (eval9 A B C D) (eval11 A B C D) :guard (>= 100 A))
(rule (eval11 A B C D) (eval5 (+ A 11) B (+ C 1) D))
