(format LCTRS)
(theory Ints)
(fun eval_start_0 (-> Int Int Int Int Int))
(fun eval_start_1 (-> Int Int Int Int Int))
(fun eval_start_2 (-> Int Int Int Int Int))
(fun eval_start_3 (-> Int Int Int Int Int))
(fun eval_start_4 (-> Int Int Int Int Int))
(fun eval_start_5 (-> Int Int Int Int Int))
(fun eval_start_6 (-> Int Int Int Int Int))
(fun eval_start_bb0_in (-> Int Int Int Int Int))
(fun eval_start_bb1_in (-> Int Int Int Int Int))
(fun eval_start_bb2_in (-> Int Int Int Int Int))
(fun eval_start_bb3_in (-> Int Int Int Int Int))
(fun eval_start_start (-> Int Int Int Int Int))
(fun eval_start_stop (-> Int Int Int Int Int))
(entrypoint eval_start_start)
(rule
  (eval_start_start v_m v_n v_x_0 v_y_0)
  (eval_start_bb0_in v_m v_n v_x_0 v_y_0))
(rule
  (eval_start_bb0_in v_m v_n v_x_0 v_y_0)
  (eval_start_0 v_m v_n v_x_0 v_y_0))
(rule (eval_start_0 v_m v_n v_x_0 v_y_0) (eval_start_1 v_m v_n v_x_0 v_y_0))
(rule (eval_start_1 v_m v_n v_x_0 v_y_0) (eval_start_2 v_m v_n v_x_0 v_y_0))
(rule (eval_start_2 v_m v_n v_x_0 v_y_0) (eval_start_3 v_m v_n v_x_0 v_y_0))
(rule (eval_start_3 v_m v_n v_x_0 v_y_0) (eval_start_4 v_m v_n v_x_0 v_y_0))
(rule (eval_start_4 v_m v_n v_x_0 v_y_0) (eval_start_5 v_m v_n v_x_0 v_y_0))
(rule (eval_start_5 v_m v_n v_x_0 v_y_0) (eval_start_6 v_m v_n v_x_0 v_y_0))
(rule (eval_start_6 v_m v_n v_x_0 v_y_0) (eval_start_bb1_in v_m v_n 0 0))
(rule
  (eval_start_bb1_in v_m v_n v_x_0 v_y_0)
  (eval_start_bb2_in v_m v_n v_x_0 v_y_0)
  :guard
  (< v_x_0 v_n))
(rule
  (eval_start_bb1_in v_m v_n v_x_0 v_y_0)
  (eval_start_bb3_in v_m v_n v_x_0 v_y_0)
  :guard
  (>= v_x_0 v_n))
(rule
  (eval_start_bb2_in v_m v_n v_x_0 v_y_0)
  (eval_start_bb1_in v_m v_n v_x_0 (+ v_y_0 1))
  :guard
  (and (< v_y_0 v_m) (< v_y_0 v_m)))
(rule
  (eval_start_bb2_in v_m v_n v_x_0 v_y_0)
  (eval_start_bb1_in v_m v_n (+ v_x_0 1) (+ v_y_0 1))
  :guard
  (and (< v_y_0 v_m) (>= v_y_0 v_m)))
(rule
  (eval_start_bb2_in v_m v_n v_x_0 v_y_0)
  (eval_start_bb1_in v_m v_n v_x_0 v_y_0)
  :guard
  (and (>= v_y_0 v_m) (< v_y_0 v_m)))
(rule
  (eval_start_bb2_in v_m v_n v_x_0 v_y_0)
  (eval_start_bb1_in v_m v_n (+ v_x_0 1) v_y_0)
  :guard
  (and (>= v_y_0 v_m) (>= v_y_0 v_m)))
(rule
  (eval_start_bb3_in v_m v_n v_x_0 v_y_0)
  (eval_start_stop v_m v_n v_x_0 v_y_0))
