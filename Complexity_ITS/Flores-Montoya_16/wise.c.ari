(format LCTRS)
(theory Ints)
(fun eval_wise_0 (-> Int Int Int Int Int))
(fun eval_wise_1 (-> Int Int Int Int Int))
(fun eval_wise_2 (-> Int Int Int Int Int))
(fun eval_wise__critedge_in (-> Int Int Int Int Int))
(fun eval_wise_bb0_in (-> Int Int Int Int Int))
(fun eval_wise_bb1_in (-> Int Int Int Int Int))
(fun eval_wise_bb2_in (-> Int Int Int Int Int))
(fun eval_wise_start (-> Int Int Int Int Int))
(fun eval_wise_stop (-> Int Int Int Int Int))
(entrypoint eval_wise_start)
(rule
  (eval_wise_start v__0 v__01 v_x v_y)
  (eval_wise_bb0_in v__0 v__01 v_x v_y))

(rule (eval_wise_bb0_in v__0 v__01 v_x v_y) (eval_wise_0 v__0 v__01 v_x v_y))
(rule (eval_wise_0 v__0 v__01 v_x v_y) (eval_wise_1 v__0 v__01 v_x v_y))
(rule (eval_wise_1 v__0 v__01 v_x v_y) (eval_wise_2 v__0 v__01 v_x v_y))
(rule
  (eval_wise_2 v__0 v__01 v_x v_y)
  (eval_wise_bb2_in v__0 v__01 v_x v_y)
  :guard
  (< v_x 0))

(rule
  (eval_wise_2 v__0 v__01 v_x v_y)
  (eval_wise_bb2_in v__0 v__01 v_x v_y)
  :guard
  (< v_y 0))

(rule
  (eval_wise_2 v__0 v__01 v_x v_y)
  (eval_wise_bb1_in v_x v_y v_x v_y)
  :guard
  (and (>= v_x 0) (>= v_y 0)))

(rule
  (eval_wise_bb1_in v__0 v__01 v_x v_y)
  (eval_wise__critedge_in v__0 v__01 v_x v_y)
  :guard
  (> (- v__0 v__01) 2))

(rule
  (eval_wise_bb1_in v__0 v__01 v_x v_y)
  (eval_wise__critedge_in v__0 v__01 v_x v_y)
  :guard
  (> (- v__01 v__0) 2))

(rule
  (eval_wise_bb1_in v__0 v__01 v_x v_y)
  (eval_wise_bb2_in v__0 v__01 v_x v_y)
  :guard
  (and (<= (- v__0 v__01) 2) (<= (- v__01 v__0) 2)))

(rule
  (eval_wise__critedge_in v__0 v__01 v_x v_y)
  (eval_wise_bb1_in (+ v__0 1) v__01 v_x v_y)
  :guard
  (and (< v__0 v__01) (< v__0 v__01)))

(rule
  (eval_wise__critedge_in v__0 v__01 v_x v_y)
  (eval_wise_bb1_in v__0 v__01 v_x v_y)
  :guard
  (and (< v__0 v__01) (>= v__0 v__01)))

(rule
  (eval_wise__critedge_in v__0 v__01 v_x v_y)
  (eval_wise_bb1_in (+ v__0 1) (+ v__01 1) v_x v_y)
  :guard
  (and (>= v__0 v__01) (< v__0 v__01)))

(rule
  (eval_wise__critedge_in v__0 v__01 v_x v_y)
  (eval_wise_bb1_in v__0 (+ v__01 1) v_x v_y)
  :guard
  (and (>= v__0 v__01) (>= v__0 v__01)))

(rule
  (eval_wise_bb2_in v__0 v__01 v_x v_y)
  (eval_wise_stop v__0 v__01 v_x v_y))

