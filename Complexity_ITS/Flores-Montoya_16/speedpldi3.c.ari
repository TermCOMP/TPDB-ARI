(format LCTRS)
(theory Ints)
(fun eval_speedpldi3_0 (-> Int Int Int Int Int))
(fun eval_speedpldi3_1 (-> Int Int Int Int Int))
(fun eval_speedpldi3_2 (-> Int Int Int Int Int))
(fun eval_speedpldi3_bb0_in (-> Int Int Int Int Int))
(fun eval_speedpldi3_bb1_in (-> Int Int Int Int Int))
(fun eval_speedpldi3_bb2_in (-> Int Int Int Int Int))
(fun eval_speedpldi3_bb3_in (-> Int Int Int Int Int))
(fun eval_speedpldi3_start (-> Int Int Int Int Int))
(fun eval_speedpldi3_stop (-> Int Int Int Int Int))
(entrypoint eval_speedpldi3_start)
(rule
  (eval_speedpldi3_start v_i_0 v_j_0 v_m v_n)
  (eval_speedpldi3_bb0_in v_i_0 v_j_0 v_m v_n))
(rule
  (eval_speedpldi3_bb0_in v_i_0 v_j_0 v_m v_n)
  (eval_speedpldi3_0 v_i_0 v_j_0 v_m v_n))
(rule
  (eval_speedpldi3_0 v_i_0 v_j_0 v_m v_n)
  (eval_speedpldi3_1 v_i_0 v_j_0 v_m v_n))
(rule
  (eval_speedpldi3_1 v_i_0 v_j_0 v_m v_n)
  (eval_speedpldi3_2 v_i_0 v_j_0 v_m v_n))
(rule
  (eval_speedpldi3_2 v_i_0 v_j_0 v_m v_n)
  (eval_speedpldi3_bb3_in v_i_0 v_j_0 v_m v_n)
  :guard
  (<= v_m 0))
(rule
  (eval_speedpldi3_2 v_i_0 v_j_0 v_m v_n)
  (eval_speedpldi3_bb3_in v_i_0 v_j_0 v_m v_n)
  :guard
  (<= v_n v_m))
(rule
  (eval_speedpldi3_2 v_i_0 v_j_0 v_m v_n)
  (eval_speedpldi3_bb1_in 0 0 v_m v_n)
  :guard
  (and (> v_m 0) (> v_n v_m)))
(rule
  (eval_speedpldi3_bb1_in v_i_0 v_j_0 v_m v_n)
  (eval_speedpldi3_bb2_in v_i_0 v_j_0 v_m v_n)
  :guard
  (< v_i_0 v_n))
(rule
  (eval_speedpldi3_bb1_in v_i_0 v_j_0 v_m v_n)
  (eval_speedpldi3_bb3_in v_i_0 v_j_0 v_m v_n)
  :guard
  (>= v_i_0 v_n))
(rule
  (eval_speedpldi3_bb2_in v_i_0 v_j_0 v_m v_n)
  (eval_speedpldi3_bb1_in v_i_0 (+ v_j_0 1) v_m v_n)
  :guard
  (and (< v_j_0 v_m) (< v_j_0 v_m)))
(rule
  (eval_speedpldi3_bb2_in v_i_0 v_j_0 v_m v_n)
  (eval_speedpldi3_bb1_in (+ v_i_0 1) (+ v_j_0 1) v_m v_n)
  :guard
  (and (< v_j_0 v_m) (>= v_j_0 v_m)))
(rule
  (eval_speedpldi3_bb2_in v_i_0 v_j_0 v_m v_n)
  (eval_speedpldi3_bb1_in v_i_0 0 v_m v_n)
  :guard
  (and (>= v_j_0 v_m) (< v_j_0 v_m)))
(rule
  (eval_speedpldi3_bb2_in v_i_0 v_j_0 v_m v_n)
  (eval_speedpldi3_bb1_in (+ v_i_0 1) 0 v_m v_n)
  :guard
  (and (>= v_j_0 v_m) (>= v_j_0 v_m)))
(rule
  (eval_speedpldi3_bb3_in v_i_0 v_j_0 v_m v_n)
  (eval_speedpldi3_stop v_i_0 v_j_0 v_m v_n))
