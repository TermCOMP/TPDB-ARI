(format higher-order)
(sort a)
(sort b)
(sort c)
(sort d)
(fun O d)
(fun cons (-> d c c))
(fun false a)
(fun height (-> d d))
(fun if (-> a d d))
(fun le (-> d d a))
(fun map (-> (-> d d) c c))
(fun maxlist (-> d c d))
(fun nil c)
(fun node (-> b c d))
(fun s (-> d d))
(fun true a)
(rule (map F nil) nil)
(rule (map Z (cons U V)) (cons (Z U) (map Z V)))
(rule (le O W) true)
(rule (le (s P) O) false)
(rule (le (s X1) (s Y1)) (le X1 Y1))
(rule (maxlist U1 (cons V1 W1)) (if (le U1 V1) (maxlist V1 W1)))
(rule (maxlist P1 nil) P1)
(rule (height (node X2 Y2)) (s (maxlist O (map height Y2))))
(format higher-order)
(sort a)
(sort b)
(sort c)
(sort d)
(fun O d)
(fun cons (-> d c c))
(fun false a)
(fun height (-> d d))
(fun if (-> a d d))
(fun le (-> d d a))
(fun map (-> (-> d d) c c))
(fun maxlist (-> d c d))
(fun nil c)
(fun node (-> b c d))
(fun s (-> d d))
(fun true a)
(rule (map F nil) nil)
(rule (map Z (cons U V)) (cons (Z U) (map Z V)))
(rule (le O W) true)
(rule (le (s P) O) false)
(rule (le (s X1) (s Y1)) (le X1 Y1))
(rule (maxlist U1 (cons V1 W1)) (if (le U1 V1) (maxlist V1 W1)))
(rule (maxlist P1 nil) P1)
(rule (height (node X2 Y2)) (s (maxlist O (map height Y2))))
(format higher-order)
(sort a)
(sort b)
(sort c)
(sort d)
(fun O d)
(fun cons (-> d c c))
(fun false a)
(fun height (-> d d))
(fun if (-> a d d))
(fun le (-> d d a))
(fun map (-> (-> d d) c c))
(fun maxlist (-> d c d))
(fun nil c)
(fun node (-> b c d))
(fun s (-> d d))
(fun true a)
(rule (map F nil) nil)
(rule (map Z (cons U V)) (cons (Z U) (map Z V)))
(rule (le O W) true)
(rule (le (s P) O) false)
(rule (le (s X1) (s Y1)) (le X1 Y1))
(rule (maxlist U1 (cons V1 W1)) (if (le U1 V1) (maxlist V1 W1)))
(rule (maxlist P1 nil) P1)
(rule (height (node X2 Y2)) (s (maxlist O (map height Y2))))
