(format higher-order)
(sort a)
(sort b)
(sort c)
(sort d)
(sort e)
(fun O a)
(fun cons (-> d e e))
(fun edge (-> a a b b))
(fun empty b)
(fun eq (-> a a c))
(fun false c)
(fun filter (-> (-> d c) e e))
(fun filter2 (-> c (-> d c) d e e))
(fun if_reach_1 (-> c a a b b c))
(fun if_reach_2 (-> c a a b b c))
(fun map (-> (-> d d) e e))
(fun nil e)
(fun or (-> c c c))
(fun reach (-> a a b b c))
(fun s (-> a a))
(fun true c)
(fun union (-> b b b))
(rule (eq O O) true)
(rule (eq O (s X)) false)
(rule (eq (s Y) O) false)
(rule (eq (s U) (s V)) (eq U V))
(rule (or true W) true)
(rule (or false P) P)
(rule (union empty X1) X1)
(rule (union (edge V1 W1 U1) Y1) (edge V1 W1 (union U1 Y1)))
(rule (reach X2 Y2 empty P1) false)
(rule (reach X3 Y3 (edge W2 P2 V2) U2) (if_reach_1 (eq X3 W2) X3 Y3 (edge W2 P2 V2) U2))
(rule (if_reach_1 true X4 Y4 (edge W3 P3 V3) U3) (if_reach_2 (eq Y4 P3) X4 Y4 (edge W3 P3 V3) U3))
(rule (if_reach_1 false X5 Y5 (edge W4 P4 V4) U4) (reach X5 Y5 V4 (edge W4 P4 U4)))
(rule (if_reach_2 true X6 Y6 (edge W5 P5 V5) U5) true)
(rule (if_reach_2 false X7 Y7 (edge W6 P6 V6) U6) (or (reach X7 Y7 V6 U6) (reach P6 Y7 (union V6 U6) empty)))
(rule (map G7 nil) nil)
(rule (map H7 (cons W7 P7)) (cons (H7 W7) (map H7 P7)))
(rule (filter F8 nil) nil)
(rule (filter Z8 (cons U8 V8)) (filter2 (Z8 U8) Z8 U8 V8))
(rule (filter2 true I8 P8 X9) (cons P8 (filter I8 X9)))
(rule (filter2 false Z9 U9 V9) (filter Z9 V9))
(format higher-order)
(sort a)
(sort b)
(sort c)
(sort d)
(sort e)
(fun O a)
(fun cons (-> d e e))
(fun edge (-> a a b b))
(fun empty b)
(fun eq (-> a a c))
(fun false c)
(fun filter (-> (-> d c) e e))
(fun filter2 (-> c (-> d c) d e e))
(fun if_reach_1 (-> c a a b b c))
(fun if_reach_2 (-> c a a b b c))
(fun map (-> (-> d d) e e))
(fun nil e)
(fun or (-> c c c))
(fun reach (-> a a b b c))
(fun s (-> a a))
(fun true c)
(fun union (-> b b b))
(rule (eq O O) true)
(rule (eq O (s X)) false)
(rule (eq (s Y) O) false)
(rule (eq (s U) (s V)) (eq U V))
(rule (or true W) true)
(rule (or false P) P)
(rule (union empty X1) X1)
(rule (union (edge V1 W1 U1) Y1) (edge V1 W1 (union U1 Y1)))
(rule (reach X2 Y2 empty P1) false)
(rule (reach X3 Y3 (edge W2 P2 V2) U2) (if_reach_1 (eq X3 W2) X3 Y3 (edge W2 P2 V2) U2))
(rule (if_reach_1 true X4 Y4 (edge W3 P3 V3) U3) (if_reach_2 (eq Y4 P3) X4 Y4 (edge W3 P3 V3) U3))
(rule (if_reach_1 false X5 Y5 (edge W4 P4 V4) U4) (reach X5 Y5 V4 (edge W4 P4 U4)))
(rule (if_reach_2 true X6 Y6 (edge W5 P5 V5) U5) true)
(rule (if_reach_2 false X7 Y7 (edge W6 P6 V6) U6) (or (reach X7 Y7 V6 U6) (reach P6 Y7 (union V6 U6) empty)))
(rule (map G7 nil) nil)
(rule (map H7 (cons W7 P7)) (cons (H7 W7) (map H7 P7)))
(rule (filter F8 nil) nil)
(rule (filter Z8 (cons U8 V8)) (filter2 (Z8 U8) Z8 U8 V8))
(rule (filter2 true I8 P8 X9) (cons P8 (filter I8 X9)))
(rule (filter2 false Z9 U9 V9) (filter Z9 V9))
(format higher-order)
(sort a)
(sort b)
(sort c)
(sort d)
(sort e)
(fun O a)
(fun cons (-> d e e))
(fun edge (-> a a b b))
(fun empty b)
(fun eq (-> a a c))
(fun false c)
(fun filter (-> (-> d c) e e))
(fun filter2 (-> c (-> d c) d e e))
(fun if_reach_1 (-> c a a b b c))
(fun if_reach_2 (-> c a a b b c))
(fun map (-> (-> d d) e e))
(fun nil e)
(fun or (-> c c c))
(fun reach (-> a a b b c))
(fun s (-> a a))
(fun true c)
(fun union (-> b b b))
(rule (eq O O) true)
(rule (eq O (s X)) false)
(rule (eq (s Y) O) false)
(rule (eq (s U) (s V)) (eq U V))
(rule (or true W) true)
(rule (or false P) P)
(rule (union empty X1) X1)
(rule (union (edge V1 W1 U1) Y1) (edge V1 W1 (union U1 Y1)))
(rule (reach X2 Y2 empty P1) false)
(rule (reach X3 Y3 (edge W2 P2 V2) U2) (if_reach_1 (eq X3 W2) X3 Y3 (edge W2 P2 V2) U2))
(rule (if_reach_1 true X4 Y4 (edge W3 P3 V3) U3) (if_reach_2 (eq Y4 P3) X4 Y4 (edge W3 P3 V3) U3))
(rule (if_reach_1 false X5 Y5 (edge W4 P4 V4) U4) (reach X5 Y5 V4 (edge W4 P4 U4)))
(rule (if_reach_2 true X6 Y6 (edge W5 P5 V5) U5) true)
(rule (if_reach_2 false X7 Y7 (edge W6 P6 V6) U6) (or (reach X7 Y7 V6 U6) (reach P6 Y7 (union V6 U6) empty)))
(rule (map G7 nil) nil)
(rule (map H7 (cons W7 P7)) (cons (H7 W7) (map H7 P7)))
(rule (filter F8 nil) nil)
(rule (filter Z8 (cons U8 V8)) (filter2 (Z8 U8) Z8 U8 V8))
(rule (filter2 true I8 P8 X9) (cons P8 (filter I8 X9)))
(rule (filter2 false Z9 U9 V9) (filter Z9 V9))
