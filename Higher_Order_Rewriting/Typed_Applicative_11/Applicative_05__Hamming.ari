(format higher-order)
(sort a)
(sort b)
(sort c)
(fun O b)
(fun cons (-> b c c))
(fun eq (-> b b a))
(fun false a)
(fun hamming c)
(fun if (-> a c c c))
(fun list1 c)
(fun list2 c)
(fun list3 c)
(fun lt (-> b b a))
(fun map (-> (-> b b) c c))
(fun merge (-> c c c))
(fun mult (-> b b b))
(fun nil c)
(fun plus (-> b b b))
(fun s (-> b b))
(fun true a)
(rule (if true X Y) X)
(rule (if false U V) V)
(rule (lt (s W) (s P)) (lt W P))
(rule (lt O (s X1)) true)
(rule (lt Y1 O) false)
(rule (eq U1 U1) true)
(rule (eq (s V1) O) false)
(rule (eq O (s W1)) false)
(rule (merge P1 nil) P1)
(rule (merge nil X2) X2)
(rule (merge (cons Y2 U2) (cons V2 W2)) (if (lt Y2 V2) (cons Y2 (merge U2 (cons V2 W2))) (if (eq Y2 V2) (cons Y2 (merge U2 W2)) (cons V2 (merge (cons Y2 U2) W2)))))
(rule (map J2 nil) nil)
(rule (map F3 (cons Y3 U3)) (cons (F3 Y3) (map F3 U3)))
(rule (mult O V3) O)
(rule (mult (s W3) P3) (plus P3 (mult W3 P3)))
(rule (plus O X4) O)
(rule (plus (s Y4) U4) (s (plus Y4 U4)))
(rule list1 (map (mult (s (s O))) hamming))
(rule list2 (map (mult (s (s (s O)))) hamming))
(rule list3 (map (mult (s (s (s (s (s O)))))) hamming))
(rule hamming (cons (s O) (merge list1 (merge list2 list3))))
