(format higher-order)
(sort a)
(sort b)
(sort c)
(fun O b)
(fun cons (-> b c c))
(fun dosort (-> c c))
(fun eq (-> b b a))
(fun false a)
(fun filter (-> (-> b a) c c))
(fun filter2 (-> a (-> b a) b c c))
(fun if_min (-> a c b))
(fun if_replace (-> a b b c c))
(fun le (-> b b a))
(fun map (-> (-> b b) c c))
(fun min (-> c b))
(fun nil c)
(fun replace (-> b b c c))
(fun s (-> b b))
(fun true a)
(rule (eq O O) true)
(rule (eq O (s X)) false)
(rule (eq (s Y) O) false)
(rule (eq (s V) (s U)) (eq V U))
(rule (le O W) true)
(rule (le (s P) O) false)
(rule (le (s Y1) (s X1)) (le Y1 X1))
(rule (min (cons O nil)) O)
(rule (min (cons (s U1) nil)) (s U1))
(rule (min (cons W1 (cons V1 P1))) (if_min (le W1 V1) (cons W1 (cons V1 P1))))
(rule (if_min true (cons Y2 (cons X2 U2))) (min (cons Y2 U2)))
(rule (if_min false (cons W2 (cons V2 P2))) (min (cons V2 P2)))
(rule (replace Y3 X3 nil) nil)
(rule (replace W3 V3 (cons U3 P3)) (if_replace (eq W3 U3) W3 V3 (cons U3 P3)))
(rule (if_replace true U4 Y4 (cons X4 V4)) (cons Y4 V4))
(rule (if_replace false X5 P4 (cons W4 Y5)) (cons W4 (replace X5 P4 Y5)))
(rule (dosort nil) nil)
(rule (dosort (cons U5 V5)) (cons (min (cons U5 V5)) (dosort (replace (min (cons U5 V5)) U5 V5))))
(rule (map I5 nil) nil)
(rule (map J5 (cons X6 Y6)) (cons (J5 X6) (map J5 Y6)))
(rule (filter G6 nil) nil)
(rule (filter H6 (cons W6 P6)) (filter2 (H6 W6) H6 W6 P6))
(rule (filter2 true F7 Y7 U7) (cons Y7 (filter F7 U7)))
(rule (filter2 false H7 W7 P7) (filter H7 P7))
(format higher-order)
(sort a)
(sort b)
(sort c)
(fun O b)
(fun cons (-> b c c))
(fun dosort (-> c c))
(fun eq (-> b b a))
(fun false a)
(fun filter (-> (-> b a) c c))
(fun filter2 (-> a (-> b a) b c c))
(fun if_min (-> a c b))
(fun if_replace (-> a b b c c))
(fun le (-> b b a))
(fun map (-> (-> b b) c c))
(fun min (-> c b))
(fun nil c)
(fun replace (-> b b c c))
(fun s (-> b b))
(fun true a)
(rule (eq O O) true)
(rule (eq O (s X)) false)
(rule (eq (s Y) O) false)
(rule (eq (s V) (s U)) (eq V U))
(rule (le O W) true)
(rule (le (s P) O) false)
(rule (le (s Y1) (s X1)) (le Y1 X1))
(rule (min (cons O nil)) O)
(rule (min (cons (s U1) nil)) (s U1))
(rule (min (cons W1 (cons V1 P1))) (if_min (le W1 V1) (cons W1 (cons V1 P1))))
(rule (if_min true (cons Y2 (cons X2 U2))) (min (cons Y2 U2)))
(rule (if_min false (cons W2 (cons V2 P2))) (min (cons V2 P2)))
(rule (replace Y3 X3 nil) nil)
(rule (replace W3 V3 (cons U3 P3)) (if_replace (eq W3 U3) W3 V3 (cons U3 P3)))
(rule (if_replace true U4 Y4 (cons X4 V4)) (cons Y4 V4))
(rule (if_replace false X5 P4 (cons W4 Y5)) (cons W4 (replace X5 P4 Y5)))
(rule (dosort nil) nil)
(rule (dosort (cons U5 V5)) (cons (min (cons U5 V5)) (dosort (replace (min (cons U5 V5)) U5 V5))))
(rule (map I5 nil) nil)
(rule (map J5 (cons X6 Y6)) (cons (J5 X6) (map J5 Y6)))
(rule (filter G6 nil) nil)
(rule (filter H6 (cons W6 P6)) (filter2 (H6 W6) H6 W6 P6))
(rule (filter2 true F7 Y7 U7) (cons Y7 (filter F7 U7)))
(rule (filter2 false H7 W7 P7) (filter H7 P7))
(format higher-order)
(sort a)
(sort b)
(sort c)
(fun O b)
(fun cons (-> b c c))
(fun dosort (-> c c))
(fun eq (-> b b a))
(fun false a)
(fun filter (-> (-> b a) c c))
(fun filter2 (-> a (-> b a) b c c))
(fun if_min (-> a c b))
(fun if_replace (-> a b b c c))
(fun le (-> b b a))
(fun map (-> (-> b b) c c))
(fun min (-> c b))
(fun nil c)
(fun replace (-> b b c c))
(fun s (-> b b))
(fun true a)
(rule (eq O O) true)
(rule (eq O (s X)) false)
(rule (eq (s Y) O) false)
(rule (eq (s V) (s U)) (eq V U))
(rule (le O W) true)
(rule (le (s P) O) false)
(rule (le (s Y1) (s X1)) (le Y1 X1))
(rule (min (cons O nil)) O)
(rule (min (cons (s U1) nil)) (s U1))
(rule (min (cons W1 (cons V1 P1))) (if_min (le W1 V1) (cons W1 (cons V1 P1))))
(rule (if_min true (cons Y2 (cons X2 U2))) (min (cons Y2 U2)))
(rule (if_min false (cons W2 (cons V2 P2))) (min (cons V2 P2)))
(rule (replace Y3 X3 nil) nil)
(rule (replace W3 V3 (cons U3 P3)) (if_replace (eq W3 U3) W3 V3 (cons U3 P3)))
(rule (if_replace true U4 Y4 (cons X4 V4)) (cons Y4 V4))
(rule (if_replace false X5 P4 (cons W4 Y5)) (cons W4 (replace X5 P4 Y5)))
(rule (dosort nil) nil)
(rule (dosort (cons U5 V5)) (cons (min (cons U5 V5)) (dosort (replace (min (cons U5 V5)) U5 V5))))
(rule (map I5 nil) nil)
(rule (map J5 (cons X6 Y6)) (cons (J5 X6) (map J5 Y6)))
(rule (filter G6 nil) nil)
(rule (filter H6 (cons W6 P6)) (filter2 (H6 W6) H6 W6 P6))
(rule (filter2 true F7 Y7 U7) (cons Y7 (filter F7 U7)))
(rule (filter2 false H7 W7 P7) (filter H7 P7))
