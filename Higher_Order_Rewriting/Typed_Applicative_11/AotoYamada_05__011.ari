(format higher-order)
(sort a)
(sort b)
(fun O b)
(fun cons (-> b a a))
(fun curry (-> (-> b b b) b b b))
(fun inc (-> a a))
(fun map (-> (-> b b) a a))
(fun nil a)
(fun plus (-> b b b))
(fun s (-> b b))
(rule (plus O X) X)
(rule (plus (s Y) U) (s (plus Y U)))
(rule (map H nil) nil)
(rule (map I (cons P X1)) (cons (I P) (map I X1)))
(rule (curry Z1 U1 V1) (Z1 U1 V1))
(rule inc (map (curry plus (s O))))
(format higher-order)
(sort a)
(sort b)
(fun O b)
(fun cons (-> b a a))
(fun curry (-> (-> b b b) b b b))
(fun inc (-> a a))
(fun map (-> (-> b b) a a))
(fun nil a)
(fun plus (-> b b b))
(fun s (-> b b))
(rule (plus O X) X)
(rule (plus (s Y) U) (s (plus Y U)))
(rule (map H nil) nil)
(rule (map I (cons P X1)) (cons (I P) (map I X1)))
(rule (curry Z1 U1 V1) (Z1 U1 V1))
(rule inc (map (curry plus (s O))))
(format higher-order)
(sort a)
(sort b)
(fun O b)
(fun cons (-> b a a))
(fun curry (-> (-> b b b) b b b))
(fun inc (-> a a))
(fun map (-> (-> b b) a a))
(fun nil a)
(fun plus (-> b b b))
(fun s (-> b b))
(rule (plus O X) X)
(rule (plus (s Y) U) (s (plus Y U)))
(rule (map H nil) nil)
(rule (map I (cons P X1)) (cons (I P) (map I X1)))
(rule (curry Z1 U1 V1) (Z1 U1 V1))
(rule inc (map (curry plus (s O))))
