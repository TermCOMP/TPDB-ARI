(format higher-order)
(sort a)
(sort b)
(sort c)
(sort d)
(fun c (-> b b))
(fun cons (-> c d d))
(fun f (-> b a))
(fun false a)
(fun filter (-> (-> c a) d d))
(fun filter2 (-> a (-> c a) c d d))
(fun g (-> b b b))
(fun if (-> a b b b))
(fun map (-> (-> c c) d d))
(fun nil d)
(fun one b)
(fun s (-> b b))
(fun true a)
(fun zero b)
(rule (f zero) true)
(rule (f one) false)
(rule (f (s X)) (f X))
(rule (if true (s Y) (s U)) (s Y))
(rule (if false (s V) (s W)) (s W))
(rule (g P (c X)) (c (g P X)))
(rule (g Y (c U)) (g Y (if (f Y) (c (g (s Y) U)) (c U))))
(rule (map H nil) nil)
(rule (map I (cons P X2)) (cons (I P) (map I X2)))
(rule (filter Z2 nil) nil)
(rule (filter G2 (cons V2 W2)) (filter2 (G2 V2) G2 V2 W2))
(rule (filter2 true J2 X3 Y3) (cons X3 (filter J2 Y3)))
(rule (filter2 false G3 V3 W3) (filter G3 W3))
(format higher-order)
(sort a)
(sort b)
(sort c)
(sort d)
(fun c (-> b b))
(fun cons (-> c d d))
(fun f (-> b a))
(fun false a)
(fun filter (-> (-> c a) d d))
(fun filter2 (-> a (-> c a) c d d))
(fun g (-> b b b))
(fun if (-> a b b b))
(fun map (-> (-> c c) d d))
(fun nil d)
(fun one b)
(fun s (-> b b))
(fun true a)
(fun zero b)
(rule (f zero) true)
(rule (f one) false)
(rule (f (s X)) (f X))
(rule (if true (s Y) (s U)) (s Y))
(rule (if false (s V) (s W)) (s W))
(rule (g P (c X)) (c (g P X)))
(rule (g Y (c U)) (g Y (if (f Y) (c (g (s Y) U)) (c U))))
(rule (map H nil) nil)
(rule (map I (cons P X2)) (cons (I P) (map I X2)))
(rule (filter Z2 nil) nil)
(rule (filter G2 (cons V2 W2)) (filter2 (G2 V2) G2 V2 W2))
(rule (filter2 true J2 X3 Y3) (cons X3 (filter J2 Y3)))
(rule (filter2 false G3 V3 W3) (filter G3 W3))
(format higher-order)
(sort a)
(sort b)
(sort c)
(sort d)
(fun c (-> b b))
(fun cons (-> c d d))
(fun f (-> b a))
(fun false a)
(fun filter (-> (-> c a) d d))
(fun filter2 (-> a (-> c a) c d d))
(fun g (-> b b b))
(fun if (-> a b b b))
(fun map (-> (-> c c) d d))
(fun nil d)
(fun one b)
(fun s (-> b b))
(fun true a)
(fun zero b)
(rule (f zero) true)
(rule (f one) false)
(rule (f (s X)) (f X))
(rule (if true (s Y) (s U)) (s Y))
(rule (if false (s V) (s W)) (s W))
(rule (g P (c X)) (c (g P X)))
(rule (g Y (c U)) (g Y (if (f Y) (c (g (s Y) U)) (c U))))
(rule (map H nil) nil)
(rule (map I (cons P X2)) (cons (I P) (map I X2)))
(rule (filter Z2 nil) nil)
(rule (filter G2 (cons V2 W2)) (filter2 (G2 V2) G2 V2 W2))
(rule (filter2 true J2 X3 Y3) (cons X3 (filter J2 Y3)))
(rule (filter2 false G3 V3 W3) (filter G3 W3))
