(format higher-order)
(sort a)
(sort b)
(sort c)
(fun O b)
(fun add (-> b c c))
(fun app (-> c c c))
(fun eq (-> b b a))
(fun false a)
(fun filter (-> (-> b a) c c))
(fun filter2 (-> a (-> b a) b c c))
(fun if_min (-> a c b))
(fun if_minsort (-> a c c c))
(fun if_rm (-> a b c c))
(fun le (-> b b a))
(fun map (-> (-> b b) c c))
(fun min (-> c b))
(fun minsort (-> c c c))
(fun nil c)
(fun rm (-> b c c))
(fun s (-> b b))
(fun true a)
(rule (eq O O) true)
(rule (eq O (s X)) false)
(rule (eq (s Y) O) false)
(rule (eq (s U) (s V)) (eq U V))
(rule (le O W) true)
(rule (le (s P) O) false)
(rule (le (s X1) (s Y1)) (le X1 Y1))
(rule (app nil U1) U1)
(rule (app (add V1 W1) P1) (add V1 (app W1 P1)))
(rule (min (add X2 nil)) X2)
(rule (min (add U2 (add Y2 V2))) (if_min (le U2 Y2) (add U2 (add Y2 V2))))
(rule (if_min true (add P2 (add W2 X3))) (min (add P2 X3)))
(rule (if_min false (add U3 (add Y3 V3))) (min (add Y3 V3)))
(rule (rm W3 nil) nil)
(rule (rm X4 (add P3 Y4)) (if_rm (eq X4 P3) X4 (add P3 Y4)))
(rule (if_rm true V4 (add U4 W4)) (rm V4 W4))
(rule (if_rm false X5 (add P4 Y5)) (add P4 (rm X5 Y5)))
(rule (minsort nil nil) nil)
(rule (minsort (add U5 V5) W5) (if_minsort (eq U5 (min (add U5 V5))) (add U5 V5) W5))
(rule (if_minsort true (add P5 X6) Y6) (add P5 (minsort (app (rm P5 X6) Y6) nil)))
(rule (if_minsort false (add U6 V6) W6) (minsort V6 (add U6 W6)))
(rule (map J6 nil) nil)
(rule (map F7 (add Y7 U7)) (add (F7 Y7) (map F7 U7)))
(rule (filter H7 nil) nil)
(rule (filter I7 (add P7 X8)) (filter2 (I7 P7) I7 P7 X8))
(rule (filter2 true Z8 U8 V8) (add U8 (filter Z8 V8)))
(rule (filter2 false I8 P8 X9) (filter I8 X9))
(format higher-order)
(sort a)
(sort b)
(sort c)
(fun O b)
(fun add (-> b c c))
(fun app (-> c c c))
(fun eq (-> b b a))
(fun false a)
(fun filter (-> (-> b a) c c))
(fun filter2 (-> a (-> b a) b c c))
(fun if_min (-> a c b))
(fun if_minsort (-> a c c c))
(fun if_rm (-> a b c c))
(fun le (-> b b a))
(fun map (-> (-> b b) c c))
(fun min (-> c b))
(fun minsort (-> c c c))
(fun nil c)
(fun rm (-> b c c))
(fun s (-> b b))
(fun true a)
(rule (eq O O) true)
(rule (eq O (s X)) false)
(rule (eq (s Y) O) false)
(rule (eq (s U) (s V)) (eq U V))
(rule (le O W) true)
(rule (le (s P) O) false)
(rule (le (s X1) (s Y1)) (le X1 Y1))
(rule (app nil U1) U1)
(rule (app (add V1 W1) P1) (add V1 (app W1 P1)))
(rule (min (add X2 nil)) X2)
(rule (min (add U2 (add Y2 V2))) (if_min (le U2 Y2) (add U2 (add Y2 V2))))
(rule (if_min true (add P2 (add W2 X3))) (min (add P2 X3)))
(rule (if_min false (add U3 (add Y3 V3))) (min (add Y3 V3)))
(rule (rm W3 nil) nil)
(rule (rm X4 (add P3 Y4)) (if_rm (eq X4 P3) X4 (add P3 Y4)))
(rule (if_rm true V4 (add U4 W4)) (rm V4 W4))
(rule (if_rm false X5 (add P4 Y5)) (add P4 (rm X5 Y5)))
(rule (minsort nil nil) nil)
(rule (minsort (add U5 V5) W5) (if_minsort (eq U5 (min (add U5 V5))) (add U5 V5) W5))
(rule (if_minsort true (add P5 X6) Y6) (add P5 (minsort (app (rm P5 X6) Y6) nil)))
(rule (if_minsort false (add U6 V6) W6) (minsort V6 (add U6 W6)))
(rule (map J6 nil) nil)
(rule (map F7 (add Y7 U7)) (add (F7 Y7) (map F7 U7)))
(rule (filter H7 nil) nil)
(rule (filter I7 (add P7 X8)) (filter2 (I7 P7) I7 P7 X8))
(rule (filter2 true Z8 U8 V8) (add U8 (filter Z8 V8)))
(rule (filter2 false I8 P8 X9) (filter I8 X9))
(format higher-order)
(sort a)
(sort b)
(sort c)
(fun O b)
(fun add (-> b c c))
(fun app (-> c c c))
(fun eq (-> b b a))
(fun false a)
(fun filter (-> (-> b a) c c))
(fun filter2 (-> a (-> b a) b c c))
(fun if_min (-> a c b))
(fun if_minsort (-> a c c c))
(fun if_rm (-> a b c c))
(fun le (-> b b a))
(fun map (-> (-> b b) c c))
(fun min (-> c b))
(fun minsort (-> c c c))
(fun nil c)
(fun rm (-> b c c))
(fun s (-> b b))
(fun true a)
(rule (eq O O) true)
(rule (eq O (s X)) false)
(rule (eq (s Y) O) false)
(rule (eq (s U) (s V)) (eq U V))
(rule (le O W) true)
(rule (le (s P) O) false)
(rule (le (s X1) (s Y1)) (le X1 Y1))
(rule (app nil U1) U1)
(rule (app (add V1 W1) P1) (add V1 (app W1 P1)))
(rule (min (add X2 nil)) X2)
(rule (min (add U2 (add Y2 V2))) (if_min (le U2 Y2) (add U2 (add Y2 V2))))
(rule (if_min true (add P2 (add W2 X3))) (min (add P2 X3)))
(rule (if_min false (add U3 (add Y3 V3))) (min (add Y3 V3)))
(rule (rm W3 nil) nil)
(rule (rm X4 (add P3 Y4)) (if_rm (eq X4 P3) X4 (add P3 Y4)))
(rule (if_rm true V4 (add U4 W4)) (rm V4 W4))
(rule (if_rm false X5 (add P4 Y5)) (add P4 (rm X5 Y5)))
(rule (minsort nil nil) nil)
(rule (minsort (add U5 V5) W5) (if_minsort (eq U5 (min (add U5 V5))) (add U5 V5) W5))
(rule (if_minsort true (add P5 X6) Y6) (add P5 (minsort (app (rm P5 X6) Y6) nil)))
(rule (if_minsort false (add U6 V6) W6) (minsort V6 (add U6 W6)))
(rule (map J6 nil) nil)
(rule (map F7 (add Y7 U7)) (add (F7 Y7) (map F7 U7)))
(rule (filter H7 nil) nil)
(rule (filter I7 (add P7 X8)) (filter2 (I7 P7) I7 P7 X8))
(rule (filter2 true Z8 U8 V8) (add U8 (filter Z8 V8)))
(rule (filter2 false I8 P8 X9) (filter I8 X9))
