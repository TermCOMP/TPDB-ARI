(format higher-order)
(sort a)
(sort b)
(fun O b)
(fun cons (-> b a a))
(fun curry (-> (-> b b b) b b b))
(fun double (-> a a))
(fun inc (-> a a))
(fun map (-> (-> b b) a a))
(fun nil a)
(fun plus (-> b b b))
(fun s (-> b b))
(fun times (-> b b b))
(rule (plus O X) X)
(rule (plus (s Y) U) (s (plus Y U)))
(rule (times O V) O)
(rule (times (s W) P) (plus (times W P) P))
(rule (curry F1 Y1 U1) (F1 Y1 U1))
(rule (map H1 nil) nil)
(rule (map I1 (cons P1 X2)) (cons (I1 P1) (map I1 X2)))
(rule inc (map (curry plus (s O))))
(rule double (map (curry times (s (s O)))))
(format higher-order)
(sort a)
(sort b)
(fun O b)
(fun cons (-> b a a))
(fun curry (-> (-> b b b) b b b))
(fun double (-> a a))
(fun inc (-> a a))
(fun map (-> (-> b b) a a))
(fun nil a)
(fun plus (-> b b b))
(fun s (-> b b))
(fun times (-> b b b))
(rule (plus O X) X)
(rule (plus (s Y) U) (s (plus Y U)))
(rule (times O V) O)
(rule (times (s W) P) (plus (times W P) P))
(rule (curry F1 Y1 U1) (F1 Y1 U1))
(rule (map H1 nil) nil)
(rule (map I1 (cons P1 X2)) (cons (I1 P1) (map I1 X2)))
(rule inc (map (curry plus (s O))))
(rule double (map (curry times (s (s O)))))
(format higher-order)
(sort a)
(sort b)
(fun O b)
(fun cons (-> b a a))
(fun curry (-> (-> b b b) b b b))
(fun double (-> a a))
(fun inc (-> a a))
(fun map (-> (-> b b) a a))
(fun nil a)
(fun plus (-> b b b))
(fun s (-> b b))
(fun times (-> b b b))
(rule (plus O X) X)
(rule (plus (s Y) U) (s (plus Y U)))
(rule (times O V) O)
(rule (times (s W) P) (plus (times W P) P))
(rule (curry F1 Y1 U1) (F1 Y1 U1))
(rule (map H1 nil) nil)
(rule (map I1 (cons P1 X2)) (cons (I1 P1) (map I1 X2)))
(rule inc (map (curry plus (s O))))
(rule double (map (curry times (s (s O)))))
