(format higher-order)
(sort a)
(sort b)
(sort c)
(fun append (-> c c c))
(fun cons (-> b c c))
(fun flatwith (-> (-> a b) b c))
(fun flatwithsub (-> (-> a b) c c))
(fun leaf (-> a b))
(fun nil c)
(fun node (-> c b))
(rule (append nil X) X)
(rule (append (cons Y U) V) (cons Y (append U V)))
(rule (flatwith I (leaf P)) (cons (I P) nil))
(rule (flatwith F1 (node Y1)) (flatwithsub F1 Y1))
(rule (flatwithsub G1 nil) nil)
(rule (flatwithsub H1 (cons W1 P1)) (append (flatwith H1 W1) (flatwithsub H1 P1)))
(format higher-order)
(sort a)
(sort b)
(sort c)
(fun append (-> c c c))
(fun cons (-> b c c))
(fun flatwith (-> (-> a b) b c))
(fun flatwithsub (-> (-> a b) c c))
(fun leaf (-> a b))
(fun nil c)
(fun node (-> c b))
(rule (append nil X) X)
(rule (append (cons Y U) V) (cons Y (append U V)))
(rule (flatwith I (leaf P)) (cons (I P) nil))
(rule (flatwith F1 (node Y1)) (flatwithsub F1 Y1))
(rule (flatwithsub G1 nil) nil)
(rule (flatwithsub H1 (cons W1 P1)) (append (flatwith H1 W1) (flatwithsub H1 P1)))
(format higher-order)
(sort a)
(sort b)
(sort c)
(fun append (-> c c c))
(fun cons (-> b c c))
(fun flatwith (-> (-> a b) b c))
(fun flatwithsub (-> (-> a b) c c))
(fun leaf (-> a b))
(fun nil c)
(fun node (-> c b))
(rule (append nil X) X)
(rule (append (cons Y U) V) (cons Y (append U V)))
(rule (flatwith I (leaf P)) (cons (I P) nil))
(rule (flatwith F1 (node Y1)) (flatwithsub F1 Y1))
(rule (flatwithsub G1 nil) nil)
(rule (flatwithsub H1 (cons W1 P1)) (append (flatwith H1 W1) (flatwithsub H1 P1)))
