(format higher-order)
(sort a)
(sort b)
(sort c)
(sort d)
(sort e)
(fun cons (-> d e e))
(fun f (-> b a))
(fun false c)
(fun filter (-> (-> d c) e e))
(fun filter2 (-> c (-> d c) d e e))
(fun map (-> (-> d d) e e))
(fun nil e)
(fun one b)
(fun true c)
(fun zero b)
(rule (f zero) (f zero))
(rule zero one)
(rule (map F nil) nil)
(rule (map Z (cons U V)) (cons (Z U) (map Z V)))
(rule (filter I nil) nil)
(rule (filter J (cons X Y)) (filter2 (J X) J X Y))
(rule (filter2 true G V W) (cons V (filter G W)))
(rule (filter2 false J X Y) (filter J Y))
(format higher-order)
(sort a)
(sort b)
(sort c)
(sort d)
(sort e)
(fun cons (-> d e e))
(fun f (-> b a))
(fun false c)
(fun filter (-> (-> d c) e e))
(fun filter2 (-> c (-> d c) d e e))
(fun map (-> (-> d d) e e))
(fun nil e)
(fun one b)
(fun true c)
(fun zero b)
(rule (f zero) (f zero))
(rule zero one)
(rule (map F nil) nil)
(rule (map Z (cons U V)) (cons (Z U) (map Z V)))
(rule (filter I nil) nil)
(rule (filter J (cons X Y)) (filter2 (J X) J X Y))
(rule (filter2 true G V W) (cons V (filter G W)))
(rule (filter2 false J X Y) (filter J Y))
(format higher-order)
(sort a)
(sort b)
(sort c)
(sort d)
(sort e)
(fun cons (-> d e e))
(fun f (-> b a))
(fun false c)
(fun filter (-> (-> d c) e e))
(fun filter2 (-> c (-> d c) d e e))
(fun map (-> (-> d d) e e))
(fun nil e)
(fun one b)
(fun true c)
(fun zero b)
(rule (f zero) (f zero))
(rule zero one)
(rule (map F nil) nil)
(rule (map Z (cons U V)) (cons (Z U) (map Z V)))
(rule (filter I nil) nil)
(rule (filter J (cons X Y)) (filter2 (J X) J X Y))
(rule (filter2 true G V W) (cons V (filter G W)))
(rule (filter2 false J X Y) (filter J Y))
