; @origtpdbfilename ./TRS/AProVE/AAECC.trs
; @xtcfilename "./Derivational_Complexity_Innermost_Rewriting/AProVE_04/AAECC.xml"
(format TRS)
(fun fstsplit 2)
(fun |0| 0)
(fun nil 0)
(fun s 1)
(fun cons 2)
(fun sndsplit 2)
(fun empty 1)
(fun true 0)
(fun false 0)
(fun leq 2)
(fun length 1)
(fun app 2)
(fun map_f 2)
(fun f 2)
(fun process 2)
(fun if1 3)
(fun if2 3)
(fun if3 3)
(fun self 0)
(rule (fstsplit |0| x) nil)
(rule (fstsplit (s n) nil) nil)
(rule (fstsplit (s n) (cons h t)) (cons h (fstsplit n t)))
(rule (sndsplit |0| x) x)
(rule (sndsplit (s n) nil) nil)
(rule (sndsplit (s n) (cons h t)) (sndsplit n t))
(rule (empty nil) true)
(rule (empty (cons h t)) false)
(rule (leq |0| m) true)
(rule (leq (s n) |0|) false)
(rule (leq (s n) (s m)) (leq n m))
(rule (length nil) |0|)
(rule (length (cons h t)) (s (length t)))
(rule (app nil x) x)
(rule (app (cons h t) x) (cons h (app t x)))
(rule (map_f pid nil) nil)
(rule (map_f pid (cons h t)) (app (f pid h) (map_f pid t)))
(rule (process store m) (if1 store m (leq m (length store))))
(rule (if1 store m true) (if2 store m (empty (fstsplit m store))))
(rule (if1 store m false) (if3 store m (empty (fstsplit m (app (map_f self nil) store)))))
(rule (if2 store m false) (process (app (map_f self nil) (sndsplit m store)) m))
(rule (if3 store m false) (process (sndsplit m (app (map_f self nil) store)) m))
